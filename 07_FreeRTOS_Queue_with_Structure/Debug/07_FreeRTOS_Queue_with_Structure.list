
07_FreeRTOS_Queue_with_Structure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007854  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08007a04  08007a04  00008a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bcc  08007bcc  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bcc  08007bcc  00008bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd4  08007bd4  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd4  08007bd4  00008bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bd8  08007bd8  00008bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007bdc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  2000007c  08007c58  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c70  08007c58  00009c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bee6  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e2  00000000  00000000  00024f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00028878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001225  00000000  00000000  00029fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049a8  00000000  00000000  0002b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001937f  00000000  00000000  0002fba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f398  00000000  00000000  00048f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001582bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a48  00000000  00000000  00158300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080079ec 	.word	0x080079ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080079ec 	.word	0x080079ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000584:	f000 fb7b 	bl	8000c7e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000588:	f000 f840 	bl	800060c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800058c:	f000 f8bc 	bl	8000708 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000590:	f000 f88e 	bl	80006b0 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000594:	f003 fa9c 	bl	8003ad0 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of Queue_1 */
	Queue_1Handle = osMessageQueueNew(8, sizeof(Data_t), &Queue_1_attributes);
 8000598:	4a11      	ldr	r2, [pc, #68]	@ (80005e0 <main+0x60>)
 800059a:	2108      	movs	r1, #8
 800059c:	2008      	movs	r0, #8
 800059e:	f003 fb8e 	bl	8003cbe <osMessageQueueNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a0f      	ldr	r2, [pc, #60]	@ (80005e4 <main+0x64>)
 80005a6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Sender_Task_1 */
	Sender_Task_1Handle = osThreadNew(Start_Sender_Task_1, NULL,
 80005a8:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <main+0x68>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	480f      	ldr	r0, [pc, #60]	@ (80005ec <main+0x6c>)
 80005ae:	f003 fad9 	bl	8003b64 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <main+0x70>)
 80005b6:	6013      	str	r3, [r2, #0]
			&Sender_Task_1_attributes);

	/* creation of Sender_Task_2 */
	Sender_Task_2Handle = osThreadNew(Start_Sender_Task_2, NULL,
 80005b8:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <main+0x74>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <main+0x78>)
 80005be:	f003 fad1 	bl	8003b64 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0d      	ldr	r2, [pc, #52]	@ (80005fc <main+0x7c>)
 80005c6:	6013      	str	r3, [r2, #0]
			&Sender_Task_2_attributes);

	/* creation of Receiver_Task */
	Receiver_TaskHandle = osThreadNew(Start_Receiver_Task, NULL,
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <main+0x80>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	480d      	ldr	r0, [pc, #52]	@ (8000604 <main+0x84>)
 80005ce:	f003 fac9 	bl	8003b64 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <main+0x88>)
 80005d6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005d8:	f003 fa9e 	bl	8003b18 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <main+0x5c>
 80005e0:	08007b38 	.word	0x08007b38
 80005e4:	2000012c 	.word	0x2000012c
 80005e8:	08007acc 	.word	0x08007acc
 80005ec:	080007a1 	.word	0x080007a1
 80005f0:	20000120 	.word	0x20000120
 80005f4:	08007af0 	.word	0x08007af0
 80005f8:	080007d5 	.word	0x080007d5
 80005fc:	20000124 	.word	0x20000124
 8000600:	08007b14 	.word	0x08007b14
 8000604:	08000809 	.word	0x08000809
 8000608:	20000128 	.word	0x20000128

0800060c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	@ 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f006 fbfe 	bl	8006e1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800062e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000632:	f000 fdf7 	bl	8001224 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800063c:	f000 f918 	bl	8000870 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	@ 0x40
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe3e 	bl	80012f0 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
		Error_Handler();
 800067a:	f000 f8f9 	bl	8000870 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800068e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000694:	463b      	mov	r3, r7
 8000696:	2104      	movs	r1, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fa43 	bl	8001b24 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x9c>
		Error_Handler();
 80006a4:	f000 f8e4 	bl	8000870 <Error_Handler>
	}
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	@ 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <MX_LPUART1_UART_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006ee:	f002 fbff 	bl	8002ef0 <HAL_UART_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 80006f8:	f000 f8ba 	bl	8000870 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000098 	.word	0x20000098
 8000704:	40008000 	.word	0x40008000

08000708 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a1d      	ldr	r2, [pc, #116]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_GPIO_Init+0x90>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
	HAL_PWREx_EnableVddIO2();
 8000736:	f000 fdcb 	bl	80012d0 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_GPIO_Init+0x90>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a10      	ldr	r2, [pc, #64]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2180      	movs	r1, #128	@ 0x80
 800076e:	480b      	ldr	r0, [pc, #44]	@ (800079c <MX_GPIO_Init+0x94>)
 8000770:	f000 fd32 	bl	80011d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BSP_LED_Pin */
	GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0x94>)
 800078c:	f000 fb92 	bl	8000eb4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400

080007a0 <Start_Sender_Task_1>:
 * @brief  Function implementing the Sender_Task_1 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Sender_Task_1 */
void Start_Sender_Task_1(void *argument) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		printf("Sender Task-1\r\n");
 80007a8:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <Start_Sender_Task_1+0x28>)
 80007aa:	f006 fa57 	bl	8006c5c <puts>
		osMessageQueuePut(Queue_1Handle, &DataToSend1, 0, 200);
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <Start_Sender_Task_1+0x2c>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	23c8      	movs	r3, #200	@ 0xc8
 80007b4:	2200      	movs	r2, #0
 80007b6:	4906      	ldr	r1, [pc, #24]	@ (80007d0 <Start_Sender_Task_1+0x30>)
 80007b8:	f003 faf4 	bl	8003da4 <osMessageQueuePut>
		osDelay(2000);
 80007bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007c0:	f003 fa62 	bl	8003c88 <osDelay>
		printf("Sender Task-1\r\n");
 80007c4:	bf00      	nop
 80007c6:	e7ef      	b.n	80007a8 <Start_Sender_Task_1+0x8>
 80007c8:	08007a54 	.word	0x08007a54
 80007cc:	2000012c 	.word	0x2000012c
 80007d0:	20000000 	.word	0x20000000

080007d4 <Start_Sender_Task_2>:
 * @brief Function implementing the Sender_Task_2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Sender_Task_2 */
void Start_Sender_Task_2(void *argument) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Sender_Task_2 */
	/* Infinite loop */
	for (;;) {
		printf("Sender Task-2\r\n");
 80007dc:	4807      	ldr	r0, [pc, #28]	@ (80007fc <Start_Sender_Task_2+0x28>)
 80007de:	f006 fa3d 	bl	8006c5c <puts>
		osMessageQueuePut(Queue_1Handle, &DataToSend2, 0, 200);
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <Start_Sender_Task_2+0x2c>)
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	23c8      	movs	r3, #200	@ 0xc8
 80007e8:	2200      	movs	r2, #0
 80007ea:	4906      	ldr	r1, [pc, #24]	@ (8000804 <Start_Sender_Task_2+0x30>)
 80007ec:	f003 fada 	bl	8003da4 <osMessageQueuePut>
		osDelay(2000);
 80007f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f4:	f003 fa48 	bl	8003c88 <osDelay>
		printf("Sender Task-2\r\n");
 80007f8:	bf00      	nop
 80007fa:	e7ef      	b.n	80007dc <Start_Sender_Task_2+0x8>
 80007fc:	08007a64 	.word	0x08007a64
 8000800:	2000012c 	.word	0x2000012c
 8000804:	20000008 	.word	0x20000008

08000808 <Start_Receiver_Task>:
 * @brief Function implementing the Receiver_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Receiver_Task */
void Start_Receiver_Task(void *argument) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Receiver_Task */
	Data_t retvalue;
	/* Infinite loop */
	for (;;) {
		printf("Receiver Task ----->");
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <Start_Receiver_Task+0x38>)
 8000812:	f006 f9bb 	bl	8006b8c <iprintf>
		osMessageQueueGet(Queue_1Handle, &retvalue, NULL, osWaitForever);
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <Start_Receiver_Task+0x3c>)
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	f107 0108 	add.w	r1, r7, #8
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000822:	2200      	movs	r2, #0
 8000824:	f003 fb1e 	bl	8003e64 <osMessageQueueGet>
		printf("source value : %s, return value : %c\r\n", retvalue.source, retvalue.value);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	7a3a      	ldrb	r2, [r7, #8]
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	@ (8000848 <Start_Receiver_Task+0x40>)
 8000830:	f006 f9ac 	bl	8006b8c <iprintf>
		osDelay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000838:	f003 fa26 	bl	8003c88 <osDelay>
		printf("Receiver Task ----->");
 800083c:	bf00      	nop
 800083e:	e7e7      	b.n	8000810 <Start_Receiver_Task+0x8>
 8000840:	08007a74 	.word	0x08007a74
 8000844:	2000012c 	.word	0x2000012c
 8000848:	08007a8c 	.word	0x08007a8c

0800084c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800085e:	f000 fa27 	bl	8000cb0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40001000 	.word	0x40001000

08000870 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	@ 0x60
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <HAL_MspInit+0x4c>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f000 fad1 	bl	8000e60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0ac      	sub	sp, #176	@ 0xb0
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	228c      	movs	r2, #140	@ 0x8c
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 fa95 	bl	8006e1c <memset>
  if(huart->Instance==LPUART1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_UART_MspInit+0xb4>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d13d      	bne.n	8000978 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008fc:	2320      	movs	r3, #32
 80008fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000900:	2300      	movs	r3, #0
 8000902:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fb61 	bl	8001fd0 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000914:	f7ff ffac 	bl	8000870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000918:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <HAL_UART_MspInit+0xb8>)
 800091a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800091c:	4a19      	ldr	r2, [pc, #100]	@ (8000984 <HAL_UART_MspInit+0xb8>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_UART_MspInit+0xb8>)
 8000926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_UART_MspInit+0xb8>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000934:	4a13      	ldr	r2, [pc, #76]	@ (8000984 <HAL_UART_MspInit+0xb8>)
 8000936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800093a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <HAL_UART_MspInit+0xb8>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000948:	f000 fcc2 	bl	80012d0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800094c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000966:	2308      	movs	r3, #8
 8000968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800096c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <HAL_UART_MspInit+0xbc>)
 8000974:	f000 fa9e 	bl	8000eb4 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000978:	bf00      	nop
 800097a:	37b0      	adds	r7, #176	@ 0xb0
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40008000 	.word	0x40008000
 8000984:	40021000 	.word	0x40021000
 8000988:	48001800 	.word	0x48001800

0800098c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	@ 0x38
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800099a:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <HAL_InitTick+0xe0>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	4a33      	ldr	r2, [pc, #204]	@ (8000a6c <HAL_InitTick+0xe0>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a6:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <HAL_InitTick+0xe0>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b2:	f107 0210 	add.w	r2, r7, #16
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fa75 	bl	8001eac <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d103      	bne.n	80009d4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009cc:	f001 fa42 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80009d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80009d2:	e004      	b.n	80009de <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d4:	f001 fa3e 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80009d8:	4603      	mov	r3, r0
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009e0:	4a23      	ldr	r2, [pc, #140]	@ (8000a70 <HAL_InitTick+0xe4>)
 80009e2:	fba2 2303 	umull	r2, r3, r2, r3
 80009e6:	0c9b      	lsrs	r3, r3, #18
 80009e8:	3b01      	subs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <HAL_InitTick+0xe8>)
 80009ee:	4a22      	ldr	r2, [pc, #136]	@ (8000a78 <HAL_InitTick+0xec>)
 80009f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <HAL_InitTick+0xe8>)
 80009f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <HAL_InitTick+0xe8>)
 80009fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <HAL_InitTick+0xe8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <HAL_InitTick+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <HAL_InitTick+0xe8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a12:	4818      	ldr	r0, [pc, #96]	@ (8000a74 <HAL_InitTick+0xe8>)
 8000a14:	f001 ffa6 	bl	8002964 <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11b      	bne.n	8000a5e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a26:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <HAL_InitTick+0xe8>)
 8000a28:	f001 fffe 	bl	8002a28 <HAL_TIM_Base_Start_IT>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a32:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d111      	bne.n	8000a5e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a3a:	2036      	movs	r0, #54	@ 0x36
 8000a3c:	f000 fa2c 	bl	8000e98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d808      	bhi.n	8000a58 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	2036      	movs	r0, #54	@ 0x36
 8000a4c:	f000 fa08 	bl	8000e60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <HAL_InitTick+0xf0>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e002      	b.n	8000a5e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3738      	adds	r7, #56	@ 0x38
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	20000130 	.word	0x20000130
 8000a78:	40001000 	.word	0x40001000
 8000a7c:	20000014 	.word	0x20000014

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <NMI_Handler+0x4>

08000a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <MemManage_Handler+0x4>

08000a98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <TIM6_DAC_IRQHandler+0x10>)
 8000abe:	f002 f823 	bl	8002b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000130 	.word	0x20000130

08000acc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00a      	b.n	8000af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ade:	f3af 8000 	nop.w
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf0      	blt.n	8000ade <_read+0x12>
  }

  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *)ptr, len, HAL_MAX_DELAY);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <_write+0x28>)
 8000b20:	f002 fa34 	bl	8002f8c <HAL_UART_Transmit>
  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000098 	.word	0x20000098

08000b34 <_close>:

int _close(int file)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_isatty>:

int _isatty(int file)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f006 f9ca 	bl	8006f64 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20050000 	.word	0x20050000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	2000017c 	.word	0x2000017c
 8000c04:	20001c70 	.word	0x20001c70

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c30:	f7ff ffea 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	@ (8000c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <LoopForever+0xe>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c78 <LoopForever+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f006 f989 	bl	8006f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5e:	f7ff fc8f 	bl	8000580 <main>

08000c62 <LoopForever>:

LoopForever:
    b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c70:	08007bdc 	.word	0x08007bdc
  ldr r2, =_sbss
 8000c74:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c78:	20001c70 	.word	0x20001c70

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>

08000c7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f8de 	bl	8000e4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f7ff fe7c 	bl	800098c <HAL_InitTick>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	e001      	b.n	8000ca4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca0:	f7ff fdec 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000018 	.word	0x20000018
 8000cd4:	20000180 	.word	0x20000180

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000180 	.word	0x20000180

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	@ (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff4c 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e72:	f7ff ff61 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000e76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	68b9      	ldr	r1, [r7, #8]
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f7ff ffb1 	bl	8000de4 <NVIC_EncodePriority>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff80 	bl	8000d90 <__NVIC_SetPriority>
}
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff54 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	e166      	b.n	8001192 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 8158 	beq.w	800118c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d005      	beq.n	8000ef4 <HAL_GPIO_Init+0x40>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d130      	bne.n	8000f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	f003 0201 	and.w	r2, r3, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d017      	beq.n	8000f92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d123      	bne.n	8000fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	6939      	ldr	r1, [r7, #16]
 8000fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0203 	and.w	r2, r3, #3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 80b2 	beq.w	800118c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001028:	4b61      	ldr	r3, [pc, #388]	@ (80011b0 <HAL_GPIO_Init+0x2fc>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102c:	4a60      	ldr	r2, [pc, #384]	@ (80011b0 <HAL_GPIO_Init+0x2fc>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6613      	str	r3, [r2, #96]	@ 0x60
 8001034:	4b5e      	ldr	r3, [pc, #376]	@ (80011b0 <HAL_GPIO_Init+0x2fc>)
 8001036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001040:	4a5c      	ldr	r2, [pc, #368]	@ (80011b4 <HAL_GPIO_Init+0x300>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800106a:	d02b      	beq.n	80010c4 <HAL_GPIO_Init+0x210>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a52      	ldr	r2, [pc, #328]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d025      	beq.n	80010c0 <HAL_GPIO_Init+0x20c>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a51      	ldr	r2, [pc, #324]	@ (80011bc <HAL_GPIO_Init+0x308>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d01f      	beq.n	80010bc <HAL_GPIO_Init+0x208>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a50      	ldr	r2, [pc, #320]	@ (80011c0 <HAL_GPIO_Init+0x30c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d019      	beq.n	80010b8 <HAL_GPIO_Init+0x204>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4f      	ldr	r2, [pc, #316]	@ (80011c4 <HAL_GPIO_Init+0x310>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d013      	beq.n	80010b4 <HAL_GPIO_Init+0x200>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4e      	ldr	r2, [pc, #312]	@ (80011c8 <HAL_GPIO_Init+0x314>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d00d      	beq.n	80010b0 <HAL_GPIO_Init+0x1fc>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4d      	ldr	r2, [pc, #308]	@ (80011cc <HAL_GPIO_Init+0x318>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x1f8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <HAL_GPIO_Init+0x31c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d101      	bne.n	80010a8 <HAL_GPIO_Init+0x1f4>
 80010a4:	2307      	movs	r3, #7
 80010a6:	e00e      	b.n	80010c6 <HAL_GPIO_Init+0x212>
 80010a8:	2308      	movs	r3, #8
 80010aa:	e00c      	b.n	80010c6 <HAL_GPIO_Init+0x212>
 80010ac:	2306      	movs	r3, #6
 80010ae:	e00a      	b.n	80010c6 <HAL_GPIO_Init+0x212>
 80010b0:	2305      	movs	r3, #5
 80010b2:	e008      	b.n	80010c6 <HAL_GPIO_Init+0x212>
 80010b4:	2304      	movs	r3, #4
 80010b6:	e006      	b.n	80010c6 <HAL_GPIO_Init+0x212>
 80010b8:	2303      	movs	r3, #3
 80010ba:	e004      	b.n	80010c6 <HAL_GPIO_Init+0x212>
 80010bc:	2302      	movs	r3, #2
 80010be:	e002      	b.n	80010c6 <HAL_GPIO_Init+0x212>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <HAL_GPIO_Init+0x212>
 80010c4:	2300      	movs	r3, #0
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	f002 0203 	and.w	r2, r2, #3
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d6:	4937      	ldr	r1, [pc, #220]	@ (80011b4 <HAL_GPIO_Init+0x300>)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e4:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <HAL_GPIO_Init+0x320>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001108:	4a32      	ldr	r2, [pc, #200]	@ (80011d4 <HAL_GPIO_Init+0x320>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800110e:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <HAL_GPIO_Init+0x320>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001132:	4a28      	ldr	r2, [pc, #160]	@ (80011d4 <HAL_GPIO_Init+0x320>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001138:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <HAL_GPIO_Init+0x320>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800115c:	4a1d      	ldr	r2, [pc, #116]	@ (80011d4 <HAL_GPIO_Init+0x320>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <HAL_GPIO_Init+0x320>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001186:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <HAL_GPIO_Init+0x320>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3301      	adds	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	f47f ae91 	bne.w	8000ec4 <HAL_GPIO_Init+0x10>
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	48000800 	.word	0x48000800
 80011c0:	48000c00 	.word	0x48000c00
 80011c4:	48001000 	.word	0x48001000
 80011c8:	48001400 	.word	0x48001400
 80011cc:	48001800 	.word	0x48001800
 80011d0:	48001c00 	.word	0x48001c00
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <HAL_PWREx_GetVoltageRange+0x18>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40007000 	.word	0x40007000

08001224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001232:	d130      	bne.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001234:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800123c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001240:	d038      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800124a:	4a1e      	ldr	r2, [pc, #120]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2232      	movs	r2, #50	@ 0x32
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9b      	lsrs	r3, r3, #18
 8001264:	3301      	adds	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001268:	e002      	b.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3b01      	subs	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800127c:	d102      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f2      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001290:	d110      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e00f      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a2:	d007      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ac:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000
 80012c8:	20000010 	.word	0x20000010
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012de:	6053      	str	r3, [r2, #4]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40007000 	.word	0x40007000

080012f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f000 bc08 	b.w	8001b14 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001304:	4b96      	ldr	r3, [pc, #600]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800130e:	4b94      	ldr	r3, [pc, #592]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80e4 	beq.w	80014ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_RCC_OscConfig+0x4c>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	f040 808b 	bne.w	800144a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b01      	cmp	r3, #1
 8001338:	f040 8087 	bne.w	800144a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133c:	4b88      	ldr	r3, [pc, #544]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_OscConfig+0x64>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e3df      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1a      	ldr	r2, [r3, #32]
 8001358:	4b81      	ldr	r3, [pc, #516]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <HAL_RCC_OscConfig+0x7e>
 8001364:	4b7e      	ldr	r3, [pc, #504]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800136c:	e005      	b.n	800137a <HAL_RCC_OscConfig+0x8a>
 800136e:	4b7c      	ldr	r3, [pc, #496]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800137a:	4293      	cmp	r3, r2
 800137c:	d223      	bcs.n	80013c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fdc4 	bl	8001f10 <RCC_SetFlashLatencyFromMSIRange>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e3c0      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001392:	4b73      	ldr	r3, [pc, #460]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a72      	ldr	r2, [pc, #456]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b70      	ldr	r3, [pc, #448]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	496d      	ldr	r1, [pc, #436]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	4968      	ldr	r1, [pc, #416]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	e025      	b.n	8001412 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c6:	4b66      	ldr	r3, [pc, #408]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a65      	ldr	r2, [pc, #404]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b63      	ldr	r3, [pc, #396]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4960      	ldr	r1, [pc, #384]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	495b      	ldr	r1, [pc, #364]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fd84 	bl	8001f10 <RCC_SetFlashLatencyFromMSIRange>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e380      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001412:	f000 fc87 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001416:	4602      	mov	r2, r0
 8001418:	4b51      	ldr	r3, [pc, #324]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	4950      	ldr	r1, [pc, #320]	@ (8001564 <HAL_RCC_OscConfig+0x274>)
 8001424:	5ccb      	ldrb	r3, [r1, r3]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	fa22 f303 	lsr.w	r3, r2, r3
 800142e:	4a4e      	ldr	r2, [pc, #312]	@ (8001568 <HAL_RCC_OscConfig+0x278>)
 8001430:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001432:	4b4e      	ldr	r3, [pc, #312]	@ (800156c <HAL_RCC_OscConfig+0x27c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff faa8 	bl	800098c <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d052      	beq.n	80014ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	e364      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d032      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001452:	4b43      	ldr	r3, [pc, #268]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a42      	ldr	r2, [pc, #264]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800145e:	f7ff fc3b 	bl	8000cd8 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001466:	f7ff fc37 	bl	8000cd8 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e34d      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001478:	4b39      	ldr	r3, [pc, #228]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001484:	4b36      	ldr	r3, [pc, #216]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a35      	ldr	r2, [pc, #212]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b33      	ldr	r3, [pc, #204]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4930      	ldr	r1, [pc, #192]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	492b      	ldr	r1, [pc, #172]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
 80014b6:	e01a      	b.n	80014ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b8:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a28      	ldr	r2, [pc, #160]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc08 	bl	8000cd8 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc04 	bl	8000cd8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e31a      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x1dc>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d073      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x21c>
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d10e      	bne.n	8001524 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d063      	beq.n	80015e0 <HAL_RCC_OscConfig+0x2f0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d15f      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2f7      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x24c>
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e025      	b.n	8001588 <HAL_RCC_OscConfig+0x298>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001544:	d114      	bne.n	8001570 <HAL_RCC_OscConfig+0x280>
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a05      	ldr	r2, [pc, #20]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a02      	ldr	r2, [pc, #8]	@ (8001560 <HAL_RCC_OscConfig+0x270>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e013      	b.n	8001588 <HAL_RCC_OscConfig+0x298>
 8001560:	40021000 	.word	0x40021000
 8001564:	08007b50 	.word	0x08007b50
 8001568:	20000010 	.word	0x20000010
 800156c:	20000014 	.word	0x20000014
 8001570:	4ba0      	ldr	r3, [pc, #640]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a9f      	ldr	r2, [pc, #636]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b9d      	ldr	r3, [pc, #628]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a9c      	ldr	r2, [pc, #624]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fba2 	bl	8000cd8 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fb9e 	bl	8000cd8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e2b4      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015aa:	4b92      	ldr	r3, [pc, #584]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x2a8>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb8e 	bl	8000cd8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fb8a 	bl	8000cd8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e2a0      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d2:	4b88      	ldr	r3, [pc, #544]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2d0>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d060      	beq.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x310>
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d119      	bne.n	800162e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d116      	bne.n	800162e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001600:	4b7c      	ldr	r3, [pc, #496]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_OscConfig+0x328>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e27d      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b76      	ldr	r3, [pc, #472]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	4973      	ldr	r1, [pc, #460]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162c:	e040      	b.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d023      	beq.n	800167e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001636:	4b6f      	ldr	r3, [pc, #444]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6e      	ldr	r2, [pc, #440]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fb49 	bl	8000cd8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fb45 	bl	8000cd8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e25b      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165c:	4b65      	ldr	r3, [pc, #404]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b62      	ldr	r3, [pc, #392]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	495f      	ldr	r1, [pc, #380]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b5d      	ldr	r3, [pc, #372]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a5c      	ldr	r2, [pc, #368]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fb25 	bl	8000cd8 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fb21 	bl	8000cd8 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e237      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03c      	beq.n	8001736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01c      	beq.n	80016fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c4:	4b4b      	ldr	r3, [pc, #300]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ca:	4a4a      	ldr	r2, [pc, #296]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fb00 	bl	8000cd8 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fafc 	bl	8000cd8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e212      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ee:	4b41      	ldr	r3, [pc, #260]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ef      	beq.n	80016dc <HAL_RCC_OscConfig+0x3ec>
 80016fc:	e01b      	b.n	8001736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fe:	4b3d      	ldr	r3, [pc, #244]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001704:	4a3b      	ldr	r2, [pc, #236]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7ff fae3 	bl	8000cd8 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff fadf 	bl	8000cd8 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1f5      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001728:	4b32      	ldr	r3, [pc, #200]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ef      	bne.n	8001716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a6 	beq.w	8001890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001748:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10d      	bne.n	8001770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001758:	4a26      	ldr	r2, [pc, #152]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001760:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176c:	2301      	movs	r3, #1
 800176e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001770:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_RCC_OscConfig+0x508>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d118      	bne.n	80017ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_RCC_OscConfig+0x508>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <HAL_RCC_OscConfig+0x508>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001788:	f7ff faa6 	bl	8000cd8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001790:	f7ff faa2 	bl	8000cd8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1b8      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_RCC_OscConfig+0x508>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4d8>
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017c6:	e029      	b.n	800181c <HAL_RCC_OscConfig+0x52c>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d115      	bne.n	80017fc <HAL_RCC_OscConfig+0x50c>
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d6:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e6:	4a03      	ldr	r2, [pc, #12]	@ (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x52c>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40007000 	.word	0x40007000
 80017fc:	4b9d      	ldr	r3, [pc, #628]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001802:	4a9c      	ldr	r2, [pc, #624]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800180c:	4b99      	ldr	r3, [pc, #612]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	4a98      	ldr	r2, [pc, #608]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d016      	beq.n	8001852 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fa58 	bl	8000cd8 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fa54 	bl	8000cd8 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e168      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001842:	4b8c      	ldr	r3, [pc, #560]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ed      	beq.n	800182c <HAL_RCC_OscConfig+0x53c>
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa41 	bl	8000cd8 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa3d 	bl	8000cd8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e151      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	4b80      	ldr	r3, [pc, #512]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ed      	bne.n	800185a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b7b      	ldr	r3, [pc, #492]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	4a7a      	ldr	r2, [pc, #488]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d03c      	beq.n	8001916 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a4:	4b73      	ldr	r3, [pc, #460]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80018a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018aa:	4a72      	ldr	r2, [pc, #456]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fa10 	bl	8000cd8 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff fa0c 	bl	8000cd8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e122      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ce:	4b69      	ldr	r3, [pc, #420]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80018d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ef      	beq.n	80018bc <HAL_RCC_OscConfig+0x5cc>
 80018dc:	e01b      	b.n	8001916 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018de:	4b65      	ldr	r3, [pc, #404]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80018e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018e4:	4a63      	ldr	r2, [pc, #396]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff f9f3 	bl	8000cd8 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f6:	f7ff f9ef 	bl	8000cd8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e105      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001908:	4b5a      	ldr	r3, [pc, #360]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ef      	bne.n	80018f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80f9 	beq.w	8001b12 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001924:	2b02      	cmp	r3, #2
 8001926:	f040 80cf 	bne.w	8001ac8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800192a:	4b52      	ldr	r3, [pc, #328]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	429a      	cmp	r2, r3
 800193c:	d12c      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	3b01      	subs	r3, #1
 800194a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d123      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d11b      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800196a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d113      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	3b01      	subs	r3, #1
 800197e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d109      	bne.n	8001998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	3b01      	subs	r3, #1
 8001992:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d071      	beq.n	8001a7c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d068      	beq.n	8001a70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800199e:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019aa:	4b32      	ldr	r3, [pc, #200]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0ac      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2d      	ldr	r2, [pc, #180]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80019c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c6:	f7ff f987 	bl	8000cd8 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff f983 	bl	8000cd8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e099      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	4b24      	ldr	r3, [pc, #144]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ec:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <HAL_RCC_OscConfig+0x788>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019fc:	3a01      	subs	r2, #1
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	4311      	orrs	r1, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a06:	0212      	lsls	r2, r2, #8
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a0e:	0852      	lsrs	r2, r2, #1
 8001a10:	3a01      	subs	r2, #1
 8001a12:	0552      	lsls	r2, r2, #21
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a1a:	0852      	lsrs	r2, r2, #1
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	0652      	lsls	r2, r2, #25
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a26:	06d2      	lsls	r2, r2, #27
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	4912      	ldr	r1, [pc, #72]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a30:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0f      	ldr	r2, [pc, #60]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4a0c      	ldr	r2, [pc, #48]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a48:	f7ff f946 	bl	8000cd8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff f942 	bl	8000cd8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e058      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <HAL_RCC_OscConfig+0x784>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a6e:	e050      	b.n	8001b12 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e04f      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
 8001a74:	40021000 	.word	0x40021000
 8001a78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7c:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d144      	bne.n	8001b12 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a88:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a23      	ldr	r2, [pc, #140]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a94:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a20      	ldr	r2, [pc, #128]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa0:	f7ff f91a 	bl	8000cd8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f916 	bl	8000cd8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e02c      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x7b8>
 8001ac6:	e024      	b.n	8001b12 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d01f      	beq.n	8001b0e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f8fd 	bl	8000cd8 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f8f9 	bl	8000cd8 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e00f      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4905      	ldr	r1, [pc, #20]	@ (8001b1c <HAL_RCC_OscConfig+0x82c>)
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_RCC_OscConfig+0x830>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	e001      	b.n	8001b12 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	feeefffc 	.word	0xfeeefffc

08001b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0e7      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b75      	ldr	r3, [pc, #468]	@ (8001d10 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d910      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b72      	ldr	r3, [pc, #456]	@ (8001d10 <HAL_RCC_ClockConfig+0x1ec>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0207 	bic.w	r2, r3, #7
 8001b4e:	4970      	ldr	r1, [pc, #448]	@ (8001d10 <HAL_RCC_ClockConfig+0x1ec>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b6e      	ldr	r3, [pc, #440]	@ (8001d10 <HAL_RCC_ClockConfig+0x1ec>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0cf      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4b66      	ldr	r3, [pc, #408]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d908      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b63      	ldr	r3, [pc, #396]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4960      	ldr	r1, [pc, #384]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d04c      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	4b5a      	ldr	r3, [pc, #360]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d121      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0a6      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	4b54      	ldr	r3, [pc, #336]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d115      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e09a      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bda:	4b4e      	ldr	r3, [pc, #312]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e08e      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bea:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e086      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	4b46      	ldr	r3, [pc, #280]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 0203 	bic.w	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4943      	ldr	r1, [pc, #268]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c0c:	f7ff f864 	bl	8000cd8 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f7ff f860 	bl	8000cd8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e06e      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 020c 	and.w	r2, r3, #12
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1eb      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d010      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d208      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b2e      	ldr	r3, [pc, #184]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	492b      	ldr	r1, [pc, #172]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d210      	bcs.n	8001c9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 0207 	bic.w	r2, r3, #7
 8001c80:	4923      	ldr	r1, [pc, #140]	@ (8001d10 <HAL_RCC_ClockConfig+0x1ec>)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c88:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e036      	b.n	8001d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	4918      	ldr	r1, [pc, #96]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4910      	ldr	r1, [pc, #64]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cd8:	f000 f824 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	490b      	ldr	r1, [pc, #44]	@ (8001d18 <HAL_RCC_ClockConfig+0x1f4>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f8>)
 8001cf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_RCC_ClockConfig+0x1fc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fe45 	bl	800098c <HAL_InitTick>
 8001d02:	4603      	mov	r3, r0
 8001d04:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d06:	7afb      	ldrb	r3, [r7, #11]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40022000 	.word	0x40022000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08007b50 	.word	0x08007b50
 8001d1c:	20000010 	.word	0x20000010
 8001d20:	20000014 	.word	0x20000014

08001d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	@ 0x24
 8001d28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d32:	4b3e      	ldr	r3, [pc, #248]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x34>
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d121      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d11e      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d58:	4b34      	ldr	r3, [pc, #208]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d64:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	e005      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d74:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d80:	4a2b      	ldr	r2, [pc, #172]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d9c:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	e004      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001da8:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8001daa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d134      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d003      	beq.n	8001dca <HAL_RCC_GetSysClockFreq+0xa6>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d003      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xac>
 8001dc8:	e005      	b.n	8001dd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dcc:	617b      	str	r3, [r7, #20]
      break;
 8001dce:	e005      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dd2:	617b      	str	r3, [r7, #20]
      break;
 8001dd4:	e002      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	617b      	str	r3, [r7, #20]
      break;
 8001dda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ddc:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	3301      	adds	r3, #1
 8001de8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	fb03 f202 	mul.w	r2, r3, r2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	0e5b      	lsrs	r3, r3, #25
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	08007b68 	.word	0x08007b68
 8001e34:	00f42400 	.word	0x00f42400
 8001e38:	007a1200 	.word	0x007a1200

08001e3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000010 	.word	0x20000010

08001e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e58:	f7ff fff0 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4904      	ldr	r1, [pc, #16]	@ (8001e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08007b60 	.word	0x08007b60

08001e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e84:	f7ff ffda 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0adb      	lsrs	r3, r3, #11
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4904      	ldr	r1, [pc, #16]	@ (8001ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08007b60 	.word	0x08007b60

08001eac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	220f      	movs	r2, #15
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_RCC_GetClockConfig+0x5c>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <HAL_RCC_GetClockConfig+0x60>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0207 	and.w	r2, r3, #7
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	601a      	str	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40022000 	.word	0x40022000

08001f10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f28:	f7ff f96e 	bl	8001208 <HAL_PWREx_GetVoltageRange>
 8001f2c:	6178      	str	r0, [r7, #20]
 8001f2e:	e014      	b.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f34:	4a24      	ldr	r2, [pc, #144]	@ (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3c:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f48:	f7ff f95e 	bl	8001208 <HAL_PWREx_GetVoltageRange>
 8001f4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f60:	d10b      	bne.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b80      	cmp	r3, #128	@ 0x80
 8001f66:	d919      	bls.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f6c:	d902      	bls.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f6e:	2302      	movs	r3, #2
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e013      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e010      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b80      	cmp	r3, #128	@ 0x80
 8001f7e:	d902      	bls.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f80:	2303      	movs	r3, #3
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e00a      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b80      	cmp	r3, #128	@ 0x80
 8001f8a:	d102      	bne.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e004      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b70      	cmp	r3, #112	@ 0x70
 8001f96:	d101      	bne.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f98:	2301      	movs	r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 0207 	bic.w	r2, r3, #7
 8001fa4:	4909      	ldr	r1, [pc, #36]	@ (8001fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fac:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fdc:	2300      	movs	r3, #0
 8001fde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d041      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ff0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ff4:	d02a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ff6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ffa:	d824      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ffc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002000:	d008      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002002:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002006:	d81e      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800200c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002010:	d010      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002012:	e018      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002014:	4b86      	ldr	r3, [pc, #536]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a85      	ldr	r2, [pc, #532]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002020:	e015      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f000 facd 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002032:	e00c      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3320      	adds	r3, #32
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fbb6 	bl	80027ac <RCCEx_PLLSAI2_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002044:	e003      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	74fb      	strb	r3, [r7, #19]
      break;
 800204a:	e000      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800204c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002054:	4b76      	ldr	r3, [pc, #472]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002062:	4973      	ldr	r1, [pc, #460]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800206a:	e001      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d041      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002080:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002084:	d02a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002086:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800208a:	d824      	bhi.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800208c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002090:	d008      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002096:	d81e      	bhi.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a0:	d010      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020a2:	e018      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020a4:	4b62      	ldr	r3, [pc, #392]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a61      	ldr	r2, [pc, #388]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b0:	e015      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fa85 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c2:	e00c      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3320      	adds	r3, #32
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fb6e 	bl	80027ac <RCCEx_PLLSAI2_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020d4:	e003      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	74fb      	strb	r3, [r7, #19]
      break;
 80020da:	e000      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020e4:	4b52      	ldr	r3, [pc, #328]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020f2:	494f      	ldr	r1, [pc, #316]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020fa:	e001      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a0 	beq.w	800224e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002122:	2300      	movs	r3, #0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	4a40      	ldr	r2, [pc, #256]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002132:	6593      	str	r3, [r2, #88]	@ 0x58
 8002134:	4b3e      	ldr	r3, [pc, #248]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002140:	2301      	movs	r3, #1
 8002142:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002144:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3a      	ldr	r2, [pc, #232]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002150:	f7fe fdc2 	bl	8000cd8 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002156:	e009      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002158:	f7fe fdbe 	bl	8000cd8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d902      	bls.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	74fb      	strb	r3, [r7, #19]
        break;
 800216a:	e005      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800216c:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ef      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d15c      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800217e:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002184:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002188:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01f      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	d019      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a8:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ae:	4a20      	ldr	r2, [pc, #128]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	4a1c      	ldr	r2, [pc, #112]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021c8:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7fe fd7d 	bl	8000cd8 <HAL_GetTick>
 80021de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e0:	e00b      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fd79 	bl	8000cd8 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d902      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	74fb      	strb	r3, [r7, #19]
            break;
 80021f8:	e006      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ec      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221e:	4904      	ldr	r1, [pc, #16]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002226:	e009      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	74bb      	strb	r3, [r7, #18]
 800222c:	e006      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223c:	7c7b      	ldrb	r3, [r7, #17]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4ba6      	ldr	r3, [pc, #664]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	4aa5      	ldr	r2, [pc, #660]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800224c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225a:	4ba0      	ldr	r3, [pc, #640]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002260:	f023 0203 	bic.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002268:	499c      	ldr	r1, [pc, #624]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800227c:	4b97      	ldr	r3, [pc, #604]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f023 020c 	bic.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228a:	4994      	ldr	r1, [pc, #592]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229e:	4b8f      	ldr	r3, [pc, #572]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	498b      	ldr	r1, [pc, #556]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022c0:	4b86      	ldr	r3, [pc, #536]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	4983      	ldr	r1, [pc, #524]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022e2:	4b7e      	ldr	r3, [pc, #504]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f0:	497a      	ldr	r1, [pc, #488]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002304:	4b75      	ldr	r3, [pc, #468]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	4972      	ldr	r1, [pc, #456]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002326:	4b6d      	ldr	r3, [pc, #436]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002334:	4969      	ldr	r1, [pc, #420]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002348:	4b64      	ldr	r3, [pc, #400]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002356:	4961      	ldr	r1, [pc, #388]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236a:	4b5c      	ldr	r3, [pc, #368]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002370:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002378:	4958      	ldr	r1, [pc, #352]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238c:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	4950      	ldr	r1, [pc, #320]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ae:	4b4b      	ldr	r3, [pc, #300]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	4947      	ldr	r1, [pc, #284]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023d0:	4b42      	ldr	r3, [pc, #264]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	493f      	ldr	r1, [pc, #252]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d028      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023f2:	4b3a      	ldr	r3, [pc, #232]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002400:	4936      	ldr	r1, [pc, #216]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002410:	d106      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002412:	4b32      	ldr	r3, [pc, #200]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4a31      	ldr	r2, [pc, #196]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002418:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800241c:	60d3      	str	r3, [r2, #12]
 800241e:	e011      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002428:	d10c      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f8c9 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d028      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002450:	4b22      	ldr	r3, [pc, #136]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245e:	491f      	ldr	r1, [pc, #124]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800246e:	d106      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002470:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a19      	ldr	r2, [pc, #100]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800247a:	60d3      	str	r3, [r2, #12]
 800247c:	e011      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002482:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002486:	d10c      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	2101      	movs	r1, #1
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f89a 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d02a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024bc:	4907      	ldr	r1, [pc, #28]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024cc:	d108      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ce:	4b03      	ldr	r3, [pc, #12]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a02      	ldr	r2, [pc, #8]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d8:	60d3      	str	r3, [r2, #12]
 80024da:	e013      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80024dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2101      	movs	r1, #1
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f869 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 80024f6:	4603      	mov	r3, r0
 80024f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d02f      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002510:	4b2c      	ldr	r3, [pc, #176]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002516:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800251e:	4929      	ldr	r1, [pc, #164]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800252a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800252e:	d10d      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	2102      	movs	r1, #2
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f846 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d014      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	74bb      	strb	r3, [r7, #18]
 800254a:	e011      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002554:	d10c      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3320      	adds	r3, #32
 800255a:	2102      	movs	r1, #2
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f925 	bl	80027ac <RCCEx_PLLSAI2_Config>
 8002562:	4603      	mov	r3, r0
 8002564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800258c:	490d      	ldr	r1, [pc, #52]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b0:	4904      	ldr	r1, [pc, #16]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025d6:	4b74      	ldr	r3, [pc, #464]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025e2:	4b71      	ldr	r3, [pc, #452]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10d      	bne.n	800260e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
       ||
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025fa:	4b6b      	ldr	r3, [pc, #428]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
       ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d047      	beq.n	800269e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e044      	b.n	800269e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d018      	beq.n	800264e <RCCEx_PLLSAI1_Config+0x86>
 800261c:	2b03      	cmp	r3, #3
 800261e:	d825      	bhi.n	800266c <RCCEx_PLLSAI1_Config+0xa4>
 8002620:	2b01      	cmp	r3, #1
 8002622:	d002      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x62>
 8002624:	2b02      	cmp	r3, #2
 8002626:	d009      	beq.n	800263c <RCCEx_PLLSAI1_Config+0x74>
 8002628:	e020      	b.n	800266c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800262a:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11d      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263a:	e01a      	b.n	8002672 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800263c:	4b5a      	ldr	r3, [pc, #360]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d116      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e013      	b.n	8002676 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800264e:	4b56      	ldr	r3, [pc, #344]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800265a:	4b53      	ldr	r3, [pc, #332]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800266a:	e006      	b.n	800267a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e004      	b.n	800267c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002672:	bf00      	nop
 8002674:	e002      	b.n	800267c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800267a:	bf00      	nop
    }

    if(status == HAL_OK)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002682:	4b49      	ldr	r3, [pc, #292]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	430b      	orrs	r3, r1
 8002698:	4943      	ldr	r1, [pc, #268]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d17c      	bne.n	800279e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026a4:	4b40      	ldr	r3, [pc, #256]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3f      	ldr	r2, [pc, #252]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fe fb12 	bl	8000cd8 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026b6:	e009      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b8:	f7fe fb0e 	bl	8000cd8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d902      	bls.n	80026cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	73fb      	strb	r3, [r7, #15]
        break;
 80026ca:	e005      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026cc:	4b36      	ldr	r3, [pc, #216]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ef      	bne.n	80026b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d15f      	bne.n	800279e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d110      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e4:	4b30      	ldr	r3, [pc, #192]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80026ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6892      	ldr	r2, [r2, #8]
 80026f4:	0211      	lsls	r1, r2, #8
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	06d2      	lsls	r2, r2, #27
 80026fc:	430a      	orrs	r2, r1
 80026fe:	492a      	ldr	r1, [pc, #168]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002700:	4313      	orrs	r3, r2
 8002702:	610b      	str	r3, [r1, #16]
 8002704:	e027      	b.n	8002756 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d112      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800270c:	4b26      	ldr	r3, [pc, #152]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002714:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	0211      	lsls	r1, r2, #8
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6912      	ldr	r2, [r2, #16]
 8002722:	0852      	lsrs	r2, r2, #1
 8002724:	3a01      	subs	r2, #1
 8002726:	0552      	lsls	r2, r2, #21
 8002728:	430a      	orrs	r2, r1
 800272a:	491f      	ldr	r1, [pc, #124]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	610b      	str	r3, [r1, #16]
 8002730:	e011      	b.n	8002756 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002732:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800273a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6892      	ldr	r2, [r2, #8]
 8002742:	0211      	lsls	r1, r2, #8
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6952      	ldr	r2, [r2, #20]
 8002748:	0852      	lsrs	r2, r2, #1
 800274a:	3a01      	subs	r2, #1
 800274c:	0652      	lsls	r2, r2, #25
 800274e:	430a      	orrs	r2, r1
 8002750:	4915      	ldr	r1, [pc, #84]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002752:	4313      	orrs	r3, r2
 8002754:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002756:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a13      	ldr	r2, [pc, #76]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002760:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe fab9 	bl	8000cd8 <HAL_GetTick>
 8002766:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002768:	e009      	b.n	800277e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800276a:	f7fe fab5 	bl	8000cd8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d902      	bls.n	800277e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	73fb      	strb	r3, [r7, #15]
          break;
 800277c:	e005      	b.n	800278a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800277e:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ef      	beq.n	800276a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d106      	bne.n	800279e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000

080027ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ba:	4b69      	ldr	r3, [pc, #420]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d018      	beq.n	80027f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027c6:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d10d      	bne.n	80027f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
       ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027de:	4b60      	ldr	r3, [pc, #384]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
       ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d047      	beq.n	8002882 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e044      	b.n	8002882 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d018      	beq.n	8002832 <RCCEx_PLLSAI2_Config+0x86>
 8002800:	2b03      	cmp	r3, #3
 8002802:	d825      	bhi.n	8002850 <RCCEx_PLLSAI2_Config+0xa4>
 8002804:	2b01      	cmp	r3, #1
 8002806:	d002      	beq.n	800280e <RCCEx_PLLSAI2_Config+0x62>
 8002808:	2b02      	cmp	r3, #2
 800280a:	d009      	beq.n	8002820 <RCCEx_PLLSAI2_Config+0x74>
 800280c:	e020      	b.n	8002850 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800280e:	4b54      	ldr	r3, [pc, #336]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11d      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281e:	e01a      	b.n	8002856 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002820:	4b4f      	ldr	r3, [pc, #316]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d116      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e013      	b.n	800285a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002832:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800283e:	4b48      	ldr	r3, [pc, #288]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800284e:	e006      	b.n	800285e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e004      	b.n	8002860 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002856:	bf00      	nop
 8002858:	e002      	b.n	8002860 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800285e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002866:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	430b      	orrs	r3, r1
 800287c:	4938      	ldr	r1, [pc, #224]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d166      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002888:	4b35      	ldr	r3, [pc, #212]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a34      	ldr	r2, [pc, #208]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 800288e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fa20 	bl	8000cd8 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800289a:	e009      	b.n	80028b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800289c:	f7fe fa1c 	bl	8000cd8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d902      	bls.n	80028b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	73fb      	strb	r3, [r7, #15]
        break;
 80028ae:	e005      	b.n	80028bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ef      	bne.n	800289c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d149      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d110      	bne.n	80028ea <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80028d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	0211      	lsls	r1, r2, #8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68d2      	ldr	r2, [r2, #12]
 80028de:	06d2      	lsls	r2, r2, #27
 80028e0:	430a      	orrs	r2, r1
 80028e2:	491f      	ldr	r1, [pc, #124]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	614b      	str	r3, [r1, #20]
 80028e8:	e011      	b.n	800290e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	0211      	lsls	r1, r2, #8
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6912      	ldr	r2, [r2, #16]
 8002900:	0852      	lsrs	r2, r2, #1
 8002902:	3a01      	subs	r2, #1
 8002904:	0652      	lsls	r2, r2, #25
 8002906:	430a      	orrs	r2, r1
 8002908:	4915      	ldr	r1, [pc, #84]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a13      	ldr	r2, [pc, #76]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002918:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe f9dd 	bl	8000cd8 <HAL_GetTick>
 800291e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002920:	e009      	b.n	8002936 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002922:	f7fe f9d9 	bl	8000cd8 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d902      	bls.n	8002936 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	73fb      	strb	r3, [r7, #15]
          break;
 8002934:	e005      	b.n	8002942 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002936:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ef      	beq.n	8002922 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	4903      	ldr	r1, [pc, #12]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e049      	b.n	8002a0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f841 	bl	8002a12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 f9e0 	bl	8002d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e04f      	b.n	8002ae0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <HAL_TIM_Base_Start_IT+0xc4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6a:	d018      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002af4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002afc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d115      	bne.n	8002aca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b06      	cmp	r3, #6
 8002aae:	d015      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab6:	d011      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac8:	e008      	b.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e000      	b.n	8002ade <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40013400 	.word	0x40013400
 8002b00:	40014000 	.word	0x40014000
 8002b04:	00010007 	.word	0x00010007

08002b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0202 	mvn.w	r2, #2
 8002b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8e9 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8db 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f8ec 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0204 	mvn.w	r2, #4
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8c3 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8b5 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8c6 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0208 	mvn.w	r2, #8
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f89d 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f88f 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8a0 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d020      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0210 	mvn.w	r2, #16
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2208      	movs	r2, #8
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f877 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f869 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f87a 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0201 	mvn.w	r2, #1
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fdec 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f913 	bl	8002ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00c      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f90b 	bl	8002edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f834 	bl	8002d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0220 	mvn.w	r2, #32
 8002d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8d3 	bl	8002eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a46      	ldr	r2, [pc, #280]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d86:	d00f      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a43      	ldr	r2, [pc, #268]	@ (8002e98 <TIM_Base_SetConfig+0x130>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a42      	ldr	r2, [pc, #264]	@ (8002e9c <TIM_Base_SetConfig+0x134>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a41      	ldr	r2, [pc, #260]	@ (8002ea0 <TIM_Base_SetConfig+0x138>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a40      	ldr	r2, [pc, #256]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d108      	bne.n	8002dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01f      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc8:	d01b      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a32      	ldr	r2, [pc, #200]	@ (8002e98 <TIM_Base_SetConfig+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d017      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a31      	ldr	r2, [pc, #196]	@ (8002e9c <TIM_Base_SetConfig+0x134>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a30      	ldr	r2, [pc, #192]	@ (8002ea0 <TIM_Base_SetConfig+0x138>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00f      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea8 <TIM_Base_SetConfig+0x140>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	@ (8002eac <TIM_Base_SetConfig+0x144>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb0 <TIM_Base_SetConfig+0x148>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d108      	bne.n	8002e14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a16      	ldr	r2, [pc, #88]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00f      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00b      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <TIM_Base_SetConfig+0x140>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d007      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a16      	ldr	r2, [pc, #88]	@ (8002eac <TIM_Base_SetConfig+0x144>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a15      	ldr	r2, [pc, #84]	@ (8002eb0 <TIM_Base_SetConfig+0x148>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d103      	bne.n	8002e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	611a      	str	r2, [r3, #16]
  }
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	40000c00 	.word	0x40000c00
 8002ea4:	40013400 	.word	0x40013400
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800

08002eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e040      	b.n	8002f84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd fcda 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	@ 0x24
 8002f1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fb6a 	bl	8003610 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f8af 	bl	80030a0 <UART_SetConfig>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e01b      	b.n	8002f84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fbe9 	bl	8003754 <UART_CheckIdleState>
 8002f82:	4603      	mov	r3, r0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	@ 0x28
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d177      	bne.n	8003094 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_UART_Transmit+0x24>
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e070      	b.n	8003096 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2221      	movs	r2, #33	@ 0x21
 8002fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fc2:	f7fd fe89 	bl	8000cd8 <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe0:	d108      	bne.n	8002ff4 <HAL_UART_Transmit+0x68>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e003      	b.n	8002ffc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ffc:	e02f      	b.n	800305e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	2180      	movs	r1, #128	@ 0x80
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fc4b 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e03b      	b.n	8003096 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003030:	b292      	uxth	r2, r2
 8003032:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	3302      	adds	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e007      	b.n	800304c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3301      	adds	r3, #1
 800304a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1c9      	bne.n	8002ffe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	2140      	movs	r1, #64	@ 0x40
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fc15 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e005      	b.n	8003096 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	b08a      	sub	sp, #40	@ 0x28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4ba4      	ldr	r3, [pc, #656]	@ (8003360 <UART_SetConfig+0x2c0>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030d8:	430b      	orrs	r3, r1
 80030da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a99      	ldr	r2, [pc, #612]	@ (8003364 <UART_SetConfig+0x2c4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003108:	4313      	orrs	r3, r2
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a90      	ldr	r2, [pc, #576]	@ (8003368 <UART_SetConfig+0x2c8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d126      	bne.n	8003178 <UART_SetConfig+0xd8>
 800312a:	4b90      	ldr	r3, [pc, #576]	@ (800336c <UART_SetConfig+0x2cc>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b03      	cmp	r3, #3
 8003136:	d81b      	bhi.n	8003170 <UART_SetConfig+0xd0>
 8003138:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <UART_SetConfig+0xa0>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003161 	.word	0x08003161
 8003148:	08003159 	.word	0x08003159
 800314c:	08003169 	.word	0x08003169
 8003150:	2301      	movs	r3, #1
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003156:	e116      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003158:	2302      	movs	r3, #2
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315e:	e112      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003160:	2304      	movs	r3, #4
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003166:	e10e      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003168:	2308      	movs	r3, #8
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316e:	e10a      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003170:	2310      	movs	r3, #16
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003176:	e106      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7c      	ldr	r2, [pc, #496]	@ (8003370 <UART_SetConfig+0x2d0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d138      	bne.n	80031f4 <UART_SetConfig+0x154>
 8003182:	4b7a      	ldr	r3, [pc, #488]	@ (800336c <UART_SetConfig+0x2cc>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b0c      	cmp	r3, #12
 800318e:	d82d      	bhi.n	80031ec <UART_SetConfig+0x14c>
 8003190:	a201      	add	r2, pc, #4	@ (adr r2, 8003198 <UART_SetConfig+0xf8>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031cd 	.word	0x080031cd
 800319c:	080031ed 	.word	0x080031ed
 80031a0:	080031ed 	.word	0x080031ed
 80031a4:	080031ed 	.word	0x080031ed
 80031a8:	080031dd 	.word	0x080031dd
 80031ac:	080031ed 	.word	0x080031ed
 80031b0:	080031ed 	.word	0x080031ed
 80031b4:	080031ed 	.word	0x080031ed
 80031b8:	080031d5 	.word	0x080031d5
 80031bc:	080031ed 	.word	0x080031ed
 80031c0:	080031ed 	.word	0x080031ed
 80031c4:	080031ed 	.word	0x080031ed
 80031c8:	080031e5 	.word	0x080031e5
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d2:	e0d8      	b.n	8003386 <UART_SetConfig+0x2e6>
 80031d4:	2302      	movs	r3, #2
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031da:	e0d4      	b.n	8003386 <UART_SetConfig+0x2e6>
 80031dc:	2304      	movs	r3, #4
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e2:	e0d0      	b.n	8003386 <UART_SetConfig+0x2e6>
 80031e4:	2308      	movs	r3, #8
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ea:	e0cc      	b.n	8003386 <UART_SetConfig+0x2e6>
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f2:	e0c8      	b.n	8003386 <UART_SetConfig+0x2e6>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003374 <UART_SetConfig+0x2d4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d125      	bne.n	800324a <UART_SetConfig+0x1aa>
 80031fe:	4b5b      	ldr	r3, [pc, #364]	@ (800336c <UART_SetConfig+0x2cc>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003208:	2b30      	cmp	r3, #48	@ 0x30
 800320a:	d016      	beq.n	800323a <UART_SetConfig+0x19a>
 800320c:	2b30      	cmp	r3, #48	@ 0x30
 800320e:	d818      	bhi.n	8003242 <UART_SetConfig+0x1a2>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d00a      	beq.n	800322a <UART_SetConfig+0x18a>
 8003214:	2b20      	cmp	r3, #32
 8003216:	d814      	bhi.n	8003242 <UART_SetConfig+0x1a2>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <UART_SetConfig+0x182>
 800321c:	2b10      	cmp	r3, #16
 800321e:	d008      	beq.n	8003232 <UART_SetConfig+0x192>
 8003220:	e00f      	b.n	8003242 <UART_SetConfig+0x1a2>
 8003222:	2300      	movs	r3, #0
 8003224:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003228:	e0ad      	b.n	8003386 <UART_SetConfig+0x2e6>
 800322a:	2302      	movs	r3, #2
 800322c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003230:	e0a9      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003232:	2304      	movs	r3, #4
 8003234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003238:	e0a5      	b.n	8003386 <UART_SetConfig+0x2e6>
 800323a:	2308      	movs	r3, #8
 800323c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003240:	e0a1      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003242:	2310      	movs	r3, #16
 8003244:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003248:	e09d      	b.n	8003386 <UART_SetConfig+0x2e6>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a4a      	ldr	r2, [pc, #296]	@ (8003378 <UART_SetConfig+0x2d8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d125      	bne.n	80032a0 <UART_SetConfig+0x200>
 8003254:	4b45      	ldr	r3, [pc, #276]	@ (800336c <UART_SetConfig+0x2cc>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800325e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003260:	d016      	beq.n	8003290 <UART_SetConfig+0x1f0>
 8003262:	2bc0      	cmp	r3, #192	@ 0xc0
 8003264:	d818      	bhi.n	8003298 <UART_SetConfig+0x1f8>
 8003266:	2b80      	cmp	r3, #128	@ 0x80
 8003268:	d00a      	beq.n	8003280 <UART_SetConfig+0x1e0>
 800326a:	2b80      	cmp	r3, #128	@ 0x80
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x1f8>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <UART_SetConfig+0x1d8>
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d008      	beq.n	8003288 <UART_SetConfig+0x1e8>
 8003276:	e00f      	b.n	8003298 <UART_SetConfig+0x1f8>
 8003278:	2300      	movs	r3, #0
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327e:	e082      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003280:	2302      	movs	r3, #2
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003286:	e07e      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003288:	2304      	movs	r3, #4
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328e:	e07a      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003290:	2308      	movs	r3, #8
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003296:	e076      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003298:	2310      	movs	r3, #16
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329e:	e072      	b.n	8003386 <UART_SetConfig+0x2e6>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a35      	ldr	r2, [pc, #212]	@ (800337c <UART_SetConfig+0x2dc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d12a      	bne.n	8003300 <UART_SetConfig+0x260>
 80032aa:	4b30      	ldr	r3, [pc, #192]	@ (800336c <UART_SetConfig+0x2cc>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032b8:	d01a      	beq.n	80032f0 <UART_SetConfig+0x250>
 80032ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032be:	d81b      	bhi.n	80032f8 <UART_SetConfig+0x258>
 80032c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032c4:	d00c      	beq.n	80032e0 <UART_SetConfig+0x240>
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ca:	d815      	bhi.n	80032f8 <UART_SetConfig+0x258>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <UART_SetConfig+0x238>
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d4:	d008      	beq.n	80032e8 <UART_SetConfig+0x248>
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x258>
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032de:	e052      	b.n	8003386 <UART_SetConfig+0x2e6>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e6:	e04e      	b.n	8003386 <UART_SetConfig+0x2e6>
 80032e8:	2304      	movs	r3, #4
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ee:	e04a      	b.n	8003386 <UART_SetConfig+0x2e6>
 80032f0:	2308      	movs	r3, #8
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032f6:	e046      	b.n	8003386 <UART_SetConfig+0x2e6>
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032fe:	e042      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <UART_SetConfig+0x2c4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d13a      	bne.n	8003380 <UART_SetConfig+0x2e0>
 800330a:	4b18      	ldr	r3, [pc, #96]	@ (800336c <UART_SetConfig+0x2cc>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003314:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003318:	d01a      	beq.n	8003350 <UART_SetConfig+0x2b0>
 800331a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800331e:	d81b      	bhi.n	8003358 <UART_SetConfig+0x2b8>
 8003320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003324:	d00c      	beq.n	8003340 <UART_SetConfig+0x2a0>
 8003326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800332a:	d815      	bhi.n	8003358 <UART_SetConfig+0x2b8>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <UART_SetConfig+0x298>
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003334:	d008      	beq.n	8003348 <UART_SetConfig+0x2a8>
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x2b8>
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333e:	e022      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003340:	2302      	movs	r3, #2
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003346:	e01e      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334e:	e01a      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003356:	e016      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800335e:	e012      	b.n	8003386 <UART_SetConfig+0x2e6>
 8003360:	efff69f3 	.word	0xefff69f3
 8003364:	40008000 	.word	0x40008000
 8003368:	40013800 	.word	0x40013800
 800336c:	40021000 	.word	0x40021000
 8003370:	40004400 	.word	0x40004400
 8003374:	40004800 	.word	0x40004800
 8003378:	40004c00 	.word	0x40004c00
 800337c:	40005000 	.word	0x40005000
 8003380:	2310      	movs	r3, #16
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a9f      	ldr	r2, [pc, #636]	@ (8003608 <UART_SetConfig+0x568>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d17a      	bne.n	8003486 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003390:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003394:	2b08      	cmp	r3, #8
 8003396:	d824      	bhi.n	80033e2 <UART_SetConfig+0x342>
 8003398:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <UART_SetConfig+0x300>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033c5 	.word	0x080033c5
 80033a4:	080033e3 	.word	0x080033e3
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	080033e3 	.word	0x080033e3
 80033b0:	080033d3 	.word	0x080033d3
 80033b4:	080033e3 	.word	0x080033e3
 80033b8:	080033e3 	.word	0x080033e3
 80033bc:	080033e3 	.word	0x080033e3
 80033c0:	080033db 	.word	0x080033db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c4:	f7fe fd46 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80033c8:	61f8      	str	r0, [r7, #28]
        break;
 80033ca:	e010      	b.n	80033ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033cc:	4b8f      	ldr	r3, [pc, #572]	@ (800360c <UART_SetConfig+0x56c>)
 80033ce:	61fb      	str	r3, [r7, #28]
        break;
 80033d0:	e00d      	b.n	80033ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d2:	f7fe fca7 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 80033d6:	61f8      	str	r0, [r7, #28]
        break;
 80033d8:	e009      	b.n	80033ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033de:	61fb      	str	r3, [r7, #28]
        break;
 80033e0:	e005      	b.n	80033ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80fb 	beq.w	80035ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	429a      	cmp	r2, r3
 8003404:	d305      	bcc.n	8003412 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	429a      	cmp	r2, r3
 8003410:	d903      	bls.n	800341a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003418:	e0e8      	b.n	80035ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	2200      	movs	r2, #0
 800341e:	461c      	mov	r4, r3
 8003420:	4615      	mov	r5, r2
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	022b      	lsls	r3, r5, #8
 800342c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003430:	0222      	lsls	r2, r4, #8
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	6849      	ldr	r1, [r1, #4]
 8003436:	0849      	lsrs	r1, r1, #1
 8003438:	2000      	movs	r0, #0
 800343a:	4688      	mov	r8, r1
 800343c:	4681      	mov	r9, r0
 800343e:	eb12 0a08 	adds.w	sl, r2, r8
 8003442:	eb43 0b09 	adc.w	fp, r3, r9
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003454:	4650      	mov	r0, sl
 8003456:	4659      	mov	r1, fp
 8003458:	f7fc ff1a 	bl	8000290 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800346a:	d308      	bcc.n	800347e <UART_SetConfig+0x3de>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003472:	d204      	bcs.n	800347e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	e0b6      	b.n	80035ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003484:	e0b2      	b.n	80035ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348e:	d15e      	bne.n	800354e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003490:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003494:	2b08      	cmp	r3, #8
 8003496:	d828      	bhi.n	80034ea <UART_SetConfig+0x44a>
 8003498:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <UART_SetConfig+0x400>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034eb 	.word	0x080034eb
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034eb 	.word	0x080034eb
 80034b8:	080034eb 	.word	0x080034eb
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034e3 	.word	0x080034e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7fe fcc6 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80034c8:	61f8      	str	r0, [r7, #28]
        break;
 80034ca:	e014      	b.n	80034f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7fe fcd8 	bl	8001e80 <HAL_RCC_GetPCLK2Freq>
 80034d0:	61f8      	str	r0, [r7, #28]
        break;
 80034d2:	e010      	b.n	80034f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d4:	4b4d      	ldr	r3, [pc, #308]	@ (800360c <UART_SetConfig+0x56c>)
 80034d6:	61fb      	str	r3, [r7, #28]
        break;
 80034d8:	e00d      	b.n	80034f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034da:	f7fe fc23 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 80034de:	61f8      	str	r0, [r7, #28]
        break;
 80034e0:	e009      	b.n	80034f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e6:	61fb      	str	r3, [r7, #28]
        break;
 80034e8:	e005      	b.n	80034f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d077      	beq.n	80035ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005a      	lsls	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	441a      	add	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b0f      	cmp	r3, #15
 8003516:	d916      	bls.n	8003546 <UART_SetConfig+0x4a6>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800351e:	d212      	bcs.n	8003546 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f023 030f 	bic.w	r3, r3, #15
 8003528:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	b29b      	uxth	r3, r3
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	b29a      	uxth	r2, r3
 8003536:	8afb      	ldrh	r3, [r7, #22]
 8003538:	4313      	orrs	r3, r2
 800353a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	8afa      	ldrh	r2, [r7, #22]
 8003542:	60da      	str	r2, [r3, #12]
 8003544:	e052      	b.n	80035ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800354c:	e04e      	b.n	80035ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800354e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003552:	2b08      	cmp	r3, #8
 8003554:	d827      	bhi.n	80035a6 <UART_SetConfig+0x506>
 8003556:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <UART_SetConfig+0x4bc>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	08003581 	.word	0x08003581
 8003560:	08003589 	.word	0x08003589
 8003564:	08003591 	.word	0x08003591
 8003568:	080035a7 	.word	0x080035a7
 800356c:	08003597 	.word	0x08003597
 8003570:	080035a7 	.word	0x080035a7
 8003574:	080035a7 	.word	0x080035a7
 8003578:	080035a7 	.word	0x080035a7
 800357c:	0800359f 	.word	0x0800359f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003580:	f7fe fc68 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 8003584:	61f8      	str	r0, [r7, #28]
        break;
 8003586:	e014      	b.n	80035b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7fe fc7a 	bl	8001e80 <HAL_RCC_GetPCLK2Freq>
 800358c:	61f8      	str	r0, [r7, #28]
        break;
 800358e:	e010      	b.n	80035b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003590:	4b1e      	ldr	r3, [pc, #120]	@ (800360c <UART_SetConfig+0x56c>)
 8003592:	61fb      	str	r3, [r7, #28]
        break;
 8003594:	e00d      	b.n	80035b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003596:	f7fe fbc5 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 800359a:	61f8      	str	r0, [r7, #28]
        break;
 800359c:	e009      	b.n	80035b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035a2:	61fb      	str	r3, [r7, #28]
        break;
 80035a4:	e005      	b.n	80035b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035b0:	bf00      	nop
    }

    if (pclk != 0U)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d019      	beq.n	80035ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	085a      	lsrs	r2, r3, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	441a      	add	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b0f      	cmp	r3, #15
 80035d0:	d909      	bls.n	80035e6 <UART_SetConfig+0x546>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d8:	d205      	bcs.n	80035e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e002      	b.n	80035ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3728      	adds	r7, #40	@ 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003606:	bf00      	nop
 8003608:	40008000 	.word	0x40008000
 800360c:	00f42400 	.word	0x00f42400

08003610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01a      	beq.n	8003726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370e:	d10a      	bne.n	8003726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b098      	sub	sp, #96	@ 0x60
 8003758:	af02      	add	r7, sp, #8
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003764:	f7fd fab8 	bl	8000cd8 <HAL_GetTick>
 8003768:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b08      	cmp	r3, #8
 8003776:	d12e      	bne.n	80037d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003778:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003780:	2200      	movs	r2, #0
 8003782:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f88c 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d021      	beq.n	80037d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e6      	bne.n	8003792 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e062      	b.n	800389c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d149      	bne.n	8003878 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ec:	2200      	movs	r2, #0
 80037ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f856 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03c      	beq.n	8003878 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	623b      	str	r3, [r7, #32]
   return(result);
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800381c:	633b      	str	r3, [r7, #48]	@ 0x30
 800381e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800382a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e6      	bne.n	80037fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3308      	adds	r3, #8
 8003836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3308      	adds	r3, #8
 800384e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003850:	61fa      	str	r2, [r7, #28]
 8003852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	69b9      	ldr	r1, [r7, #24]
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	617b      	str	r3, [r7, #20]
   return(result);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e5      	bne.n	8003830 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e011      	b.n	800389c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3758      	adds	r7, #88	@ 0x58
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b4:	e04f      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038bc:	d04b      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fd fa0b 	bl	8000cd8 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e04e      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d037      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b80      	cmp	r3, #128	@ 0x80
 80038ea:	d034      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b40      	cmp	r3, #64	@ 0x40
 80038f0:	d031      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d110      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2208      	movs	r2, #8
 8003906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f838 	bl	800397e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2208      	movs	r2, #8
 8003912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e029      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003930:	d111      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800393a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f81e 	bl	800397e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e00f      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	429a      	cmp	r2, r3
 8003972:	d0a0      	beq.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800397e:	b480      	push	{r7}
 8003980:	b095      	sub	sp, #84	@ 0x54
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800399a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e6      	bne.n	8003986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3308      	adds	r3, #8
 80039d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e5      	bne.n	80039b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d118      	bne.n	8003a26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f023 0310 	bic.w	r3, r3, #16
 8003a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6979      	ldr	r1, [r7, #20]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e6      	bne.n	80039f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a3a:	bf00      	nop
 8003a3c:	3754      	adds	r7, #84	@ 0x54
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <__NVIC_SetPriority>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db0a      	blt.n	8003a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	490c      	ldr	r1, [pc, #48]	@ (8003a94 <__NVIC_SetPriority+0x4c>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a70:	e00a      	b.n	8003a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4908      	ldr	r1, [pc, #32]	@ (8003a98 <__NVIC_SetPriority+0x50>)
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	440b      	add	r3, r1
 8003a86:	761a      	strb	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000e100 	.word	0xe000e100
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <SysTick_Handler+0x1c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003aa4:	f001 ff34 	bl	8005910 <xTaskGetSchedulerState>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003aae:	f002 fd2b 	bl	8006508 <xPortSysTickHandler>
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000e010 	.word	0xe000e010

08003abc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	f06f 0004 	mvn.w	r0, #4
 8003ac6:	f7ff ffbf 	bl	8003a48 <__NVIC_SetPriority>
#endif
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad6:	f3ef 8305 	mrs	r3, IPSR
 8003ada:	603b      	str	r3, [r7, #0]
  return(result);
 8003adc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ae2:	f06f 0305 	mvn.w	r3, #5
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	e00c      	b.n	8003b04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003aea:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <osKernelInitialize+0x44>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d105      	bne.n	8003afe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003af2:	4b08      	ldr	r3, [pc, #32]	@ (8003b14 <osKernelInitialize+0x44>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	e002      	b.n	8003b04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b04:	687b      	ldr	r3, [r7, #4]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000184 	.word	0x20000184

08003b18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b1e:	f3ef 8305 	mrs	r3, IPSR
 8003b22:	603b      	str	r3, [r7, #0]
  return(result);
 8003b24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b2a:	f06f 0305 	mvn.w	r3, #5
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	e010      	b.n	8003b54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b32:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <osKernelStart+0x48>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d109      	bne.n	8003b4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b3a:	f7ff ffbf 	bl	8003abc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <osKernelStart+0x48>)
 8003b40:	2202      	movs	r2, #2
 8003b42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b44:	f001 fa80 	bl	8005048 <vTaskStartScheduler>
      stat = osOK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	607b      	str	r3, [r7, #4]
 8003b4c:	e002      	b.n	8003b54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b54:	687b      	ldr	r3, [r7, #4]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000184 	.word	0x20000184

08003b64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	@ 0x38
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b74:	f3ef 8305 	mrs	r3, IPSR
 8003b78:	617b      	str	r3, [r7, #20]
  return(result);
 8003b7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d17e      	bne.n	8003c7e <osThreadNew+0x11a>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d07b      	beq.n	8003c7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b8a:	2318      	movs	r3, #24
 8003b8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d045      	beq.n	8003c2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <osThreadNew+0x48>
        name = attr->name;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <osThreadNew+0x6e>
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b38      	cmp	r3, #56	@ 0x38
 8003bc4:	d805      	bhi.n	8003bd2 <osThreadNew+0x6e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <osThreadNew+0x72>
        return (NULL);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e054      	b.n	8003c80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00e      	beq.n	8003c0c <osThreadNew+0xa8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2ba7      	cmp	r3, #167	@ 0xa7
 8003bf4:	d90a      	bls.n	8003c0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <osThreadNew+0xa8>
        mem = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e010      	b.n	8003c2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10c      	bne.n	8003c2e <osThreadNew+0xca>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d108      	bne.n	8003c2e <osThreadNew+0xca>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <osThreadNew+0xca>
          mem = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	e001      	b.n	8003c2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d110      	bne.n	8003c56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c3c:	9202      	str	r2, [sp, #8]
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6a3a      	ldr	r2, [r7, #32]
 8003c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f001 f808 	bl	8004c60 <xTaskCreateStatic>
 8003c50:	4603      	mov	r3, r0
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e013      	b.n	8003c7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d110      	bne.n	8003c7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	f107 0310 	add.w	r3, r7, #16
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f001 f856 	bl	8004d20 <xTaskCreate>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d001      	beq.n	8003c7e <osThreadNew+0x11a>
            hTask = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c7e:	693b      	ldr	r3, [r7, #16]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	@ 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c90:	f3ef 8305 	mrs	r3, IPSR
 8003c94:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <osDelay+0x1c>
    stat = osErrorISR;
 8003c9c:	f06f 0305 	mvn.w	r3, #5
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e007      	b.n	8003cb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f001 f994 	bl	8004fdc <vTaskDelay>
    }
  }

  return (stat);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b08a      	sub	sp, #40	@ 0x28
 8003cc2:	af02      	add	r7, sp, #8
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cce:	f3ef 8305 	mrs	r3, IPSR
 8003cd2:	613b      	str	r3, [r7, #16]
  return(result);
 8003cd4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d15f      	bne.n	8003d9a <osMessageQueueNew+0xdc>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d05c      	beq.n	8003d9a <osMessageQueueNew+0xdc>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d059      	beq.n	8003d9a <osMessageQueueNew+0xdc>
    mem = -1;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d029      	beq.n	8003d46 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d012      	beq.n	8003d20 <osMessageQueueNew+0x62>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b4f      	cmp	r3, #79	@ 0x4f
 8003d00:	d90e      	bls.n	8003d20 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <osMessageQueueNew+0x62>
        mem = 1;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e014      	b.n	8003d4a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d110      	bne.n	8003d4a <osMessageQueueNew+0x8c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10c      	bne.n	8003d4a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d108      	bne.n	8003d4a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <osMessageQueueNew+0x8c>
          mem = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e001      	b.n	8003d4a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d10b      	bne.n	8003d68 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	9100      	str	r1, [sp, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa30 	bl	80041c4 <xQueueGenericCreateStatic>
 8003d64:	61f8      	str	r0, [r7, #28]
 8003d66:	e008      	b.n	8003d7a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d105      	bne.n	8003d7a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 faa3 	bl	80042be <xQueueGenericCreate>
 8003d78:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00c      	beq.n	8003d9a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <osMessageQueueNew+0xd0>
        name = attr->name;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e001      	b.n	8003d92 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003d92:	6979      	ldr	r1, [r7, #20]
 8003d94:	69f8      	ldr	r0, [r7, #28]
 8003d96:	f000 ff05 	bl	8004ba4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003d9a:	69fb      	ldr	r3, [r7, #28]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dbc:	f3ef 8305 	mrs	r3, IPSR
 8003dc0:	617b      	str	r3, [r7, #20]
  return(result);
 8003dc2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d028      	beq.n	8003e1a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <osMessageQueuePut+0x36>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <osMessageQueuePut+0x36>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003dda:	f06f 0303 	mvn.w	r3, #3
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e038      	b.n	8003e54 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003de6:	f107 0210 	add.w	r2, r7, #16
 8003dea:	2300      	movs	r3, #0
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	69b8      	ldr	r0, [r7, #24]
 8003df0:	f000 fbc6 	bl	8004580 <xQueueGenericSendFromISR>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d003      	beq.n	8003e02 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003dfa:	f06f 0302 	mvn.w	r3, #2
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	e028      	b.n	8003e54 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d025      	beq.n	8003e54 <osMessageQueuePut+0xb0>
 8003e08:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <osMessageQueuePut+0xbc>)
 8003e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	e01c      	b.n	8003e54 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <osMessageQueuePut+0x82>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003e26:	f06f 0303 	mvn.w	r3, #3
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	e012      	b.n	8003e54 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e2e:	2300      	movs	r3, #0
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	69b8      	ldr	r0, [r7, #24]
 8003e36:	f000 faa1 	bl	800437c <xQueueGenericSend>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d009      	beq.n	8003e54 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003e46:	f06f 0301 	mvn.w	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	e002      	b.n	8003e54 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003e4e:	f06f 0302 	mvn.w	r3, #2
 8003e52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003e54:	69fb      	ldr	r3, [r7, #28]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e7a:	f3ef 8305 	mrs	r3, IPSR
 8003e7e:	617b      	str	r3, [r7, #20]
  return(result);
 8003e80:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d028      	beq.n	8003ed8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <osMessageQueueGet+0x34>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <osMessageQueueGet+0x34>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003e98:	f06f 0303 	mvn.w	r3, #3
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e037      	b.n	8003f10 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ea4:	f107 0310 	add.w	r3, r7, #16
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	69b8      	ldr	r0, [r7, #24]
 8003eae:	f000 fce7 	bl	8004880 <xQueueReceiveFromISR>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d003      	beq.n	8003ec0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003eb8:	f06f 0302 	mvn.w	r3, #2
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e027      	b.n	8003f10 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d024      	beq.n	8003f10 <osMessageQueueGet+0xac>
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <osMessageQueueGet+0xb8>)
 8003ec8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	e01b      	b.n	8003f10 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <osMessageQueueGet+0x80>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003ee4:	f06f 0303 	mvn.w	r3, #3
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	e011      	b.n	8003f10 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	69b8      	ldr	r0, [r7, #24]
 8003ef2:	f000 fbe3 	bl	80046bc <xQueueReceive>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d009      	beq.n	8003f10 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003f02:	f06f 0301 	mvn.w	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e002      	b.n	8003f10 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003f0a:	f06f 0302 	mvn.w	r3, #2
 8003f0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003f10:	69fb      	ldr	r3, [r7, #28]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a07      	ldr	r2, [pc, #28]	@ (8003f4c <vApplicationGetIdleTaskMemory+0x2c>)
 8003f30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4a06      	ldr	r2, [pc, #24]	@ (8003f50 <vApplicationGetIdleTaskMemory+0x30>)
 8003f36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2280      	movs	r2, #128	@ 0x80
 8003f3c:	601a      	str	r2, [r3, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000188 	.word	0x20000188
 8003f50:	20000230 	.word	0x20000230

08003f54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a07      	ldr	r2, [pc, #28]	@ (8003f80 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4a06      	ldr	r2, [pc, #24]	@ (8003f84 <vApplicationGetTimerTaskMemory+0x30>)
 8003f6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000430 	.word	0x20000430
 8003f84:	200004d8 	.word	0x200004d8

08003f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f103 0208 	add.w	r2, r3, #8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f103 0208 	add.w	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f103 0208 	add.w	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004040:	d103      	bne.n	800404a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e00c      	b.n	8004064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3308      	adds	r3, #8
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e002      	b.n	8004058 <vListInsert+0x2e>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	d2f6      	bcs.n	8004052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	601a      	str	r2, [r3, #0]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6852      	ldr	r2, [r2, #4]
 80040bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d103      	bne.n	80040d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	1e5a      	subs	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800411c:	f002 f964 	bl	80063e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	68f9      	ldr	r1, [r7, #12]
 800412a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	441a      	add	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414c:	3b01      	subs	r3, #1
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	441a      	add	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	22ff      	movs	r2, #255	@ 0xff
 8004160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	22ff      	movs	r2, #255	@ 0xff
 8004168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d114      	bne.n	800419c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01a      	beq.n	80041b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3310      	adds	r3, #16
 800417e:	4618      	mov	r0, r3
 8004180:	f001 fa00 	bl	8005584 <xTaskRemoveFromEventList>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d012      	beq.n	80041b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <xQueueGenericReset+0xd0>)
 800418c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	e009      	b.n	80041b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3310      	adds	r3, #16
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fef1 	bl	8003f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3324      	adds	r3, #36	@ 0x24
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff feec 	bl	8003f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041b0:	f002 f94c 	bl	800644c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041b4:	2301      	movs	r3, #1
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	@ 0x38
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <xQueueGenericCreateStatic+0x56>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <xQueueGenericCreateStatic+0x5a>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <xQueueGenericCreateStatic+0x5c>
 800421e:	2300      	movs	r3, #0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10b      	bne.n	800423c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	623b      	str	r3, [r7, #32]
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <xQueueGenericCreateStatic+0x84>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <xQueueGenericCreateStatic+0x88>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <xQueueGenericCreateStatic+0x8a>
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	61fb      	str	r3, [r7, #28]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800426a:	2350      	movs	r3, #80	@ 0x50
 800426c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b50      	cmp	r3, #80	@ 0x50
 8004272:	d00b      	beq.n	800428c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	61bb      	str	r3, [r7, #24]
}
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800428c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00d      	beq.n	80042b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	4613      	mov	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f840 	bl	8004334 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3730      	adds	r7, #48	@ 0x30
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b08a      	sub	sp, #40	@ 0x28
 80042c2:	af02      	add	r7, sp, #8
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	613b      	str	r3, [r7, #16]
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	e7fd      	b.n	80042e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3350      	adds	r3, #80	@ 0x50
 80042f8:	4618      	mov	r0, r3
 80042fa:	f002 f997 	bl	800662c <pvPortMalloc>
 80042fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d011      	beq.n	800432a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	3350      	adds	r3, #80	@ 0x50
 800430e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004318:	79fa      	ldrb	r2, [r7, #7]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	4613      	mov	r3, r2
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f805 	bl	8004334 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800432a:	69bb      	ldr	r3, [r7, #24]
	}
 800432c:	4618      	mov	r0, r3
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e002      	b.n	8004356 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004362:	2101      	movs	r1, #1
 8004364:	69b8      	ldr	r0, [r7, #24]
 8004366:	f7ff fec3 	bl	80040f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08e      	sub	sp, #56	@ 0x38
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800438a:	2300      	movs	r3, #0
 800438c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <xQueueGenericSend+0x34>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	e7fd      	b.n	80043ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <xQueueGenericSend+0x42>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <xQueueGenericSend+0x46>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <xQueueGenericSend+0x48>
 80043c2:	2300      	movs	r3, #0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <xQueueGenericSend+0x64>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	e7fd      	b.n	80043dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d103      	bne.n	80043ee <xQueueGenericSend+0x72>
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <xQueueGenericSend+0x76>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <xQueueGenericSend+0x78>
 80043f2:	2300      	movs	r3, #0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <xQueueGenericSend+0x94>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	623b      	str	r3, [r7, #32]
}
 800440a:	bf00      	nop
 800440c:	bf00      	nop
 800440e:	e7fd      	b.n	800440c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004410:	f001 fa7e 	bl	8005910 <xTaskGetSchedulerState>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <xQueueGenericSend+0xa4>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <xQueueGenericSend+0xa8>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <xQueueGenericSend+0xaa>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <xQueueGenericSend+0xc6>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	61fb      	str	r3, [r7, #28]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004442:	f001 ffd1 	bl	80063e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800444a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <xQueueGenericSend+0xdc>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d129      	bne.n	80044ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800445e:	f000 fa91 	bl	8004984 <prvCopyDataToQueue>
 8004462:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	3324      	adds	r3, #36	@ 0x24
 8004470:	4618      	mov	r0, r3
 8004472:	f001 f887 	bl	8005584 <xTaskRemoveFromEventList>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800447c:	4b3f      	ldr	r3, [pc, #252]	@ (800457c <xQueueGenericSend+0x200>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	e00a      	b.n	80044a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800448e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004494:	4b39      	ldr	r3, [pc, #228]	@ (800457c <xQueueGenericSend+0x200>)
 8004496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044a4:	f001 ffd2 	bl	800644c <vPortExitCritical>
				return pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e063      	b.n	8004574 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044b2:	f001 ffcb 	bl	800644c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e05c      	b.n	8004574 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044c0:	f107 0314 	add.w	r3, r7, #20
 80044c4:	4618      	mov	r0, r3
 80044c6:	f001 f8c1 	bl	800564c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ca:	2301      	movs	r3, #1
 80044cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044ce:	f001 ffbd 	bl	800644c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044d2:	f000 fe29 	bl	8005128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044d6:	f001 ff87 	bl	80063e8 <vPortEnterCritical>
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e6:	d103      	bne.n	80044f0 <xQueueGenericSend+0x174>
 80044e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044fc:	d103      	bne.n	8004506 <xQueueGenericSend+0x18a>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004506:	f001 ffa1 	bl	800644c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800450a:	1d3a      	adds	r2, r7, #4
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f001 f8b0 	bl	8005678 <xTaskCheckForTimeOut>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d124      	bne.n	8004568 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800451e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004520:	f000 fb28 	bl	8004b74 <prvIsQueueFull>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d018      	beq.n	800455c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	3310      	adds	r3, #16
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f000 ffd4 	bl	80054e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800453a:	f000 fab3 	bl	8004aa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800453e:	f000 fe01 	bl	8005144 <xTaskResumeAll>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f af7c 	bne.w	8004442 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <xQueueGenericSend+0x200>)
 800454c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	e772      	b.n	8004442 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800455c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800455e:	f000 faa1 	bl	8004aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004562:	f000 fdef 	bl	8005144 <xTaskResumeAll>
 8004566:	e76c      	b.n	8004442 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800456a:	f000 fa9b 	bl	8004aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800456e:	f000 fde9 	bl	8005144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004574:	4618      	mov	r0, r3
 8004576:	3738      	adds	r7, #56	@ 0x38
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b090      	sub	sp, #64	@ 0x40
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <xQueueGenericSendFromISR+0x3e>
 80045b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <xQueueGenericSendFromISR+0x42>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <xQueueGenericSendFromISR+0x44>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d103      	bne.n	80045ee <xQueueGenericSendFromISR+0x6e>
 80045e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <xQueueGenericSendFromISR+0x72>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <xQueueGenericSendFromISR+0x74>
 80045f2:	2300      	movs	r3, #0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	623b      	str	r3, [r7, #32]
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	e7fd      	b.n	800460c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004610:	f001 ffca 	bl	80065a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004614:	f3ef 8211 	mrs	r2, BASEPRI
 8004618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	61fa      	str	r2, [r7, #28]
 800462a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800462c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004638:	429a      	cmp	r2, r3
 800463a:	d302      	bcc.n	8004642 <xQueueGenericSendFromISR+0xc2>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d12f      	bne.n	80046a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004648:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800464c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004658:	f000 f994 	bl	8004984 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800465c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004664:	d112      	bne.n	800468c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004670:	3324      	adds	r3, #36	@ 0x24
 8004672:	4618      	mov	r0, r3
 8004674:	f000 ff86 	bl	8005584 <xTaskRemoveFromEventList>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00e      	beq.n	800469c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e007      	b.n	800469c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800468c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004690:	3301      	adds	r3, #1
 8004692:	b2db      	uxtb	r3, r3
 8004694:	b25a      	sxtb	r2, r3
 8004696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800469c:	2301      	movs	r3, #1
 800469e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80046a0:	e001      	b.n	80046a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3740      	adds	r7, #64	@ 0x40
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08c      	sub	sp, #48	@ 0x30
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <xQueueReceive+0x32>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	623b      	str	r3, [r7, #32]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <xQueueReceive+0x40>
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <xQueueReceive+0x44>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <xQueueReceive+0x46>
 8004700:	2300      	movs	r3, #0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <xQueueReceive+0x62>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61fb      	str	r3, [r7, #28]
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	e7fd      	b.n	800471a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800471e:	f001 f8f7 	bl	8005910 <xTaskGetSchedulerState>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <xQueueReceive+0x72>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <xQueueReceive+0x76>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <xQueueReceive+0x78>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <xQueueReceive+0x94>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	61bb      	str	r3, [r7, #24]
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	e7fd      	b.n	800474c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004750:	f001 fe4a 	bl	80063e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01f      	beq.n	80047a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004764:	f000 f978 	bl	8004a58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477a:	3310      	adds	r3, #16
 800477c:	4618      	mov	r0, r3
 800477e:	f000 ff01 	bl	8005584 <xTaskRemoveFromEventList>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004788:	4b3c      	ldr	r3, [pc, #240]	@ (800487c <xQueueReceive+0x1c0>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004798:	f001 fe58 	bl	800644c <vPortExitCritical>
				return pdPASS;
 800479c:	2301      	movs	r3, #1
 800479e:	e069      	b.n	8004874 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047a6:	f001 fe51 	bl	800644c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e062      	b.n	8004874 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047b4:	f107 0310 	add.w	r3, r7, #16
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 ff47 	bl	800564c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047be:	2301      	movs	r3, #1
 80047c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047c2:	f001 fe43 	bl	800644c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047c6:	f000 fcaf 	bl	8005128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047ca:	f001 fe0d 	bl	80063e8 <vPortEnterCritical>
 80047ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047d4:	b25b      	sxtb	r3, r3
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047da:	d103      	bne.n	80047e4 <xQueueReceive+0x128>
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047ea:	b25b      	sxtb	r3, r3
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047f0:	d103      	bne.n	80047fa <xQueueReceive+0x13e>
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047fa:	f001 fe27 	bl	800644c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047fe:	1d3a      	adds	r2, r7, #4
 8004800:	f107 0310 	add.w	r3, r7, #16
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f000 ff36 	bl	8005678 <xTaskCheckForTimeOut>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d123      	bne.n	800485a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004814:	f000 f998 	bl	8004b48 <prvIsQueueEmpty>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d017      	beq.n	800484e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	3324      	adds	r3, #36	@ 0x24
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4611      	mov	r1, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fe5a 	bl	80054e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800482c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800482e:	f000 f939 	bl	8004aa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004832:	f000 fc87 	bl	8005144 <xTaskResumeAll>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d189      	bne.n	8004750 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800483c:	4b0f      	ldr	r3, [pc, #60]	@ (800487c <xQueueReceive+0x1c0>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	e780      	b.n	8004750 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800484e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004850:	f000 f928 	bl	8004aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004854:	f000 fc76 	bl	8005144 <xTaskResumeAll>
 8004858:	e77a      	b.n	8004750 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800485a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800485c:	f000 f922 	bl	8004aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004860:	f000 fc70 	bl	8005144 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004866:	f000 f96f 	bl	8004b48 <prvIsQueueEmpty>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	f43f af6f 	beq.w	8004750 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004872:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004874:	4618      	mov	r0, r3
 8004876:	3730      	adds	r7, #48	@ 0x30
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	e000ed04 	.word	0xe000ed04

08004880 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08e      	sub	sp, #56	@ 0x38
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	623b      	str	r3, [r7, #32]
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	e7fd      	b.n	80048aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <xQueueReceiveFromISR+0x3c>
 80048b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <xQueueReceiveFromISR+0x40>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <xQueueReceiveFromISR+0x42>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61fb      	str	r3, [r7, #28]
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048de:	f001 fe63 	bl	80065a8 <vPortValidateInterruptPriority>
	__asm volatile
 80048e2:	f3ef 8211 	mrs	r2, BASEPRI
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	61ba      	str	r2, [r7, #24]
 80048f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80048fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004902:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02f      	beq.n	800496a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800490a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004918:	f000 f89e 	bl	8004a58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	1e5a      	subs	r2, r3, #1
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004924:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800492c:	d112      	bne.n	8004954 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d016      	beq.n	8004964 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	3310      	adds	r3, #16
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fe22 	bl	8005584 <xTaskRemoveFromEventList>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00e      	beq.n	8004964 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e007      	b.n	8004964 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004958:	3301      	adds	r3, #1
 800495a:	b2db      	uxtb	r3, r3
 800495c:	b25a      	sxtb	r2, r3
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004964:	2301      	movs	r3, #1
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
 8004968:	e001      	b.n	800496e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800496a:	2300      	movs	r3, #0
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
 800496e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004970:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f383 8811 	msr	BASEPRI, r3
}
 8004978:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800497a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800497c:	4618      	mov	r0, r3
 800497e:	3738      	adds	r7, #56	@ 0x38
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10d      	bne.n	80049be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d14d      	bne.n	8004a46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 ffcc 	bl	800594c <xTaskPriorityDisinherit>
 80049b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	e043      	b.n	8004a46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d119      	bne.n	80049f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6858      	ldr	r0, [r3, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	461a      	mov	r2, r3
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	f002 faf5 	bl	8006fbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	441a      	add	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d32b      	bcc.n	8004a46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	e026      	b.n	8004a46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68d8      	ldr	r0, [r3, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	461a      	mov	r2, r3
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	f002 fadb 	bl	8006fbe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	425b      	negs	r3, r3
 8004a12:	441a      	add	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d207      	bcs.n	8004a34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2c:	425b      	negs	r3, r3
 8004a2e:	441a      	add	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d105      	bne.n	8004a46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a4e:	697b      	ldr	r3, [r7, #20]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d018      	beq.n	8004a9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	441a      	add	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d303      	bcc.n	8004a8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68d9      	ldr	r1, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	461a      	mov	r2, r3
 8004a96:	6838      	ldr	r0, [r7, #0]
 8004a98:	f002 fa91 	bl	8006fbe <memcpy>
	}
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004aac:	f001 fc9c 	bl	80063e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ab8:	e011      	b.n	8004ade <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d012      	beq.n	8004ae8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3324      	adds	r3, #36	@ 0x24
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fd5c 	bl	8005584 <xTaskRemoveFromEventList>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ad2:	f000 fe35 	bl	8005740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	dce9      	bgt.n	8004aba <prvUnlockQueue+0x16>
 8004ae6:	e000      	b.n	8004aea <prvUnlockQueue+0x46>
					break;
 8004ae8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	22ff      	movs	r2, #255	@ 0xff
 8004aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004af2:	f001 fcab 	bl	800644c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004af6:	f001 fc77 	bl	80063e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b02:	e011      	b.n	8004b28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d012      	beq.n	8004b32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3310      	adds	r3, #16
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fd37 	bl	8005584 <xTaskRemoveFromEventList>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b1c:	f000 fe10 	bl	8005740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b20:	7bbb      	ldrb	r3, [r7, #14]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	dce9      	bgt.n	8004b04 <prvUnlockQueue+0x60>
 8004b30:	e000      	b.n	8004b34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	22ff      	movs	r2, #255	@ 0xff
 8004b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b3c:	f001 fc86 	bl	800644c <vPortExitCritical>
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b50:	f001 fc4a 	bl	80063e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e001      	b.n	8004b66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b66:	f001 fc71 	bl	800644c <vPortExitCritical>

	return xReturn;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b7c:	f001 fc34 	bl	80063e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d102      	bne.n	8004b92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e001      	b.n	8004b96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b96:	f001 fc59 	bl	800644c <vPortExitCritical>

	return xReturn;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e014      	b.n	8004bde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004bf4 <vQueueAddToRegistry+0x50>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bc0:	490c      	ldr	r1, [pc, #48]	@ (8004bf4 <vQueueAddToRegistry+0x50>)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bca:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf4 <vQueueAddToRegistry+0x50>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bd6:	e006      	b.n	8004be6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	d9e7      	bls.n	8004bb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	200008d8 	.word	0x200008d8

08004bf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c08:	f001 fbee 	bl	80063e8 <vPortEnterCritical>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c12:	b25b      	sxtb	r3, r3
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c18:	d103      	bne.n	8004c22 <vQueueWaitForMessageRestricted+0x2a>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c28:	b25b      	sxtb	r3, r3
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c2e:	d103      	bne.n	8004c38 <vQueueWaitForMessageRestricted+0x40>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c38:	f001 fc08 	bl	800644c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	3324      	adds	r3, #36	@ 0x24
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fc6d 	bl	800552c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c52:	6978      	ldr	r0, [r7, #20]
 8004c54:	f7ff ff26 	bl	8004aa4 <prvUnlockQueue>
	}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08e      	sub	sp, #56	@ 0x38
 8004c64:	af04      	add	r7, sp, #16
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	623b      	str	r3, [r7, #32]
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	e7fd      	b.n	8004c88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	61fb      	str	r3, [r7, #28]
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	e7fd      	b.n	8004ca6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004caa:	23a8      	movs	r3, #168	@ 0xa8
 8004cac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	2ba8      	cmp	r3, #168	@ 0xa8
 8004cb2:	d00b      	beq.n	8004ccc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	61bb      	str	r3, [r7, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ccc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01e      	beq.n	8004d12 <xTaskCreateStatic+0xb2>
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d01b      	beq.n	8004d12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cec:	2300      	movs	r3, #0
 8004cee:	9303      	str	r3, [sp, #12]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	9302      	str	r3, [sp, #8]
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f851 	bl	8004dac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d0c:	f000 f8f6 	bl	8004efc <prvAddNewTaskToReadyList>
 8004d10:	e001      	b.n	8004d16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d16:	697b      	ldr	r3, [r7, #20]
	}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3728      	adds	r7, #40	@ 0x28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	@ 0x30
 8004d24:	af04      	add	r7, sp, #16
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fc79 	bl	800662c <pvPortMalloc>
 8004d3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00e      	beq.n	8004d60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d42:	20a8      	movs	r0, #168	@ 0xa8
 8004d44:	f001 fc72 	bl	800662c <pvPortMalloc>
 8004d48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d56:	e005      	b.n	8004d64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f001 fd35 	bl	80067c8 <vPortFree>
 8004d5e:	e001      	b.n	8004d64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d017      	beq.n	8004d9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	2300      	movs	r3, #0
 8004d76:	9303      	str	r3, [sp, #12]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	9302      	str	r3, [sp, #8]
 8004d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f80f 	bl	8004dac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d8e:	69f8      	ldr	r0, [r7, #28]
 8004d90:	f000 f8b4 	bl	8004efc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d94:	2301      	movs	r3, #1
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	e002      	b.n	8004da0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004da0:	69bb      	ldr	r3, [r7, #24]
	}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3720      	adds	r7, #32
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	21a5      	movs	r1, #165	@ 0xa5
 8004dc6:	f002 f829 	bl	8006e1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	617b      	str	r3, [r7, #20]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01f      	beq.n	8004e4c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	e012      	b.n	8004e38 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	7819      	ldrb	r1, [r3, #0]
 8004e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	3334      	adds	r3, #52	@ 0x34
 8004e22:	460a      	mov	r2, r1
 8004e24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3301      	adds	r3, #1
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	2b0f      	cmp	r3, #15
 8004e3c:	d9e9      	bls.n	8004e12 <prvInitialiseNewTask+0x66>
 8004e3e:	e000      	b.n	8004e42 <prvInitialiseNewTask+0x96>
			{
				break;
 8004e40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e4a:	e003      	b.n	8004e54 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	2b37      	cmp	r3, #55	@ 0x37
 8004e58:	d901      	bls.n	8004e5e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e5a:	2337      	movs	r3, #55	@ 0x37
 8004e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e68:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e72:	3304      	adds	r3, #4
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff f8a7 	bl	8003fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	3318      	adds	r3, #24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff f8a2 	bl	8003fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	3354      	adds	r3, #84	@ 0x54
 8004eae:	224c      	movs	r2, #76	@ 0x4c
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 ffb2 	bl	8006e1c <memset>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eba:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef0 <prvInitialiseNewTask+0x144>)
 8004ebc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef4 <prvInitialiseNewTask+0x148>)
 8004ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef8 <prvInitialiseNewTask+0x14c>)
 8004ec8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	69b8      	ldr	r0, [r7, #24]
 8004ed0:	f001 f95a 	bl	8006188 <pxPortInitialiseStack>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ee6:	bf00      	nop
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20001b24 	.word	0x20001b24
 8004ef4:	20001b8c 	.word	0x20001b8c
 8004ef8:	20001bf4 	.word	0x20001bf4

08004efc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f04:	f001 fa70 	bl	80063e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f08:	4b2d      	ldr	r3, [pc, #180]	@ (8004fc0 <prvAddNewTaskToReadyList+0xc4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc0 <prvAddNewTaskToReadyList+0xc4>)
 8004f10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f12:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc8>)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f20:	4b27      	ldr	r3, [pc, #156]	@ (8004fc0 <prvAddNewTaskToReadyList+0xc4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d110      	bne.n	8004f4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f28:	f000 fc2e 	bl	8005788 <prvInitialiseTaskLists>
 8004f2c:	e00d      	b.n	8004f4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f2e:	4b26      	ldr	r3, [pc, #152]	@ (8004fc8 <prvAddNewTaskToReadyList+0xcc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f36:	4b23      	ldr	r3, [pc, #140]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d802      	bhi.n	8004f4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f44:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc8>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f4a:	4b20      	ldr	r3, [pc, #128]	@ (8004fcc <prvAddNewTaskToReadyList+0xd0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	4a1e      	ldr	r2, [pc, #120]	@ (8004fcc <prvAddNewTaskToReadyList+0xd0>)
 8004f52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f54:	4b1d      	ldr	r3, [pc, #116]	@ (8004fcc <prvAddNewTaskToReadyList+0xd0>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f60:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd0 <prvAddNewTaskToReadyList+0xd4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d903      	bls.n	8004f70 <prvAddNewTaskToReadyList+0x74>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	4a18      	ldr	r2, [pc, #96]	@ (8004fd0 <prvAddNewTaskToReadyList+0xd4>)
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <prvAddNewTaskToReadyList+0xd8>)
 8004f7e:	441a      	add	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f7ff f82b 	bl	8003fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f8c:	f001 fa5e 	bl	800644c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f90:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <prvAddNewTaskToReadyList+0xcc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f98:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d207      	bcs.n	8004fb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <prvAddNewTaskToReadyList+0xdc>)
 8004fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000dec 	.word	0x20000dec
 8004fc4:	20000918 	.word	0x20000918
 8004fc8:	20000df8 	.word	0x20000df8
 8004fcc:	20000e08 	.word	0x20000e08
 8004fd0:	20000df4 	.word	0x20000df4
 8004fd4:	2000091c 	.word	0x2000091c
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fee:	4b14      	ldr	r3, [pc, #80]	@ (8005040 <vTaskDelay+0x64>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <vTaskDelay+0x32>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60bb      	str	r3, [r7, #8]
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e7fd      	b.n	800500a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800500e:	f000 f88b 	bl	8005128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fd09 	bl	8005a2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800501a:	f000 f893 	bl	8005144 <xTaskResumeAll>
 800501e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005026:	4b07      	ldr	r3, [pc, #28]	@ (8005044 <vTaskDelay+0x68>)
 8005028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000e14 	.word	0x20000e14
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	@ 0x28
 800504c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005056:	463a      	mov	r2, r7
 8005058:	1d39      	adds	r1, r7, #4
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe ff5e 	bl	8003f20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	9202      	str	r2, [sp, #8]
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	2300      	movs	r3, #0
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	460a      	mov	r2, r1
 8005076:	4924      	ldr	r1, [pc, #144]	@ (8005108 <vTaskStartScheduler+0xc0>)
 8005078:	4824      	ldr	r0, [pc, #144]	@ (800510c <vTaskStartScheduler+0xc4>)
 800507a:	f7ff fdf1 	bl	8004c60 <xTaskCreateStatic>
 800507e:	4603      	mov	r3, r0
 8005080:	4a23      	ldr	r2, [pc, #140]	@ (8005110 <vTaskStartScheduler+0xc8>)
 8005082:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005084:	4b22      	ldr	r3, [pc, #136]	@ (8005110 <vTaskStartScheduler+0xc8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800508c:	2301      	movs	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e001      	b.n	8005096 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d102      	bne.n	80050a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800509c:	f000 fd1a 	bl	8005ad4 <xTimerCreateTimerTask>
 80050a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d11b      	bne.n	80050e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	613b      	str	r3, [r7, #16]
}
 80050ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050bc:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <vTaskStartScheduler+0xcc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3354      	adds	r3, #84	@ 0x54
 80050c2:	4a15      	ldr	r2, [pc, #84]	@ (8005118 <vTaskStartScheduler+0xd0>)
 80050c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050c6:	4b15      	ldr	r3, [pc, #84]	@ (800511c <vTaskStartScheduler+0xd4>)
 80050c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050ce:	4b14      	ldr	r3, [pc, #80]	@ (8005120 <vTaskStartScheduler+0xd8>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050d4:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <vTaskStartScheduler+0xdc>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050da:	f001 f8e1 	bl	80062a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050de:	e00f      	b.n	8005100 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050e6:	d10b      	bne.n	8005100 <vTaskStartScheduler+0xb8>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	60fb      	str	r3, [r7, #12]
}
 80050fa:	bf00      	nop
 80050fc:	bf00      	nop
 80050fe:	e7fd      	b.n	80050fc <vTaskStartScheduler+0xb4>
}
 8005100:	bf00      	nop
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	08007ab4 	.word	0x08007ab4
 800510c:	08005759 	.word	0x08005759
 8005110:	20000e10 	.word	0x20000e10
 8005114:	20000918 	.word	0x20000918
 8005118:	2000002c 	.word	0x2000002c
 800511c:	20000e0c 	.word	0x20000e0c
 8005120:	20000df8 	.word	0x20000df8
 8005124:	20000df0 	.word	0x20000df0

08005128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800512c:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <vTaskSuspendAll+0x18>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	4a03      	ldr	r2, [pc, #12]	@ (8005140 <vTaskSuspendAll+0x18>)
 8005134:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005136:	bf00      	nop
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	20000e14 	.word	0x20000e14

08005144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005152:	4b42      	ldr	r3, [pc, #264]	@ (800525c <xTaskResumeAll+0x118>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <xTaskResumeAll+0x2e>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	603b      	str	r3, [r7, #0]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005172:	f001 f939 	bl	80063e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005176:	4b39      	ldr	r3, [pc, #228]	@ (800525c <xTaskResumeAll+0x118>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3b01      	subs	r3, #1
 800517c:	4a37      	ldr	r2, [pc, #220]	@ (800525c <xTaskResumeAll+0x118>)
 800517e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005180:	4b36      	ldr	r3, [pc, #216]	@ (800525c <xTaskResumeAll+0x118>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d162      	bne.n	800524e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005188:	4b35      	ldr	r3, [pc, #212]	@ (8005260 <xTaskResumeAll+0x11c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d05e      	beq.n	800524e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005190:	e02f      	b.n	80051f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005192:	4b34      	ldr	r3, [pc, #208]	@ (8005264 <xTaskResumeAll+0x120>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3318      	adds	r3, #24
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe ff7c 	bl	800409c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fe ff77 	bl	800409c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005268 <xTaskResumeAll+0x124>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d903      	bls.n	80051c2 <xTaskResumeAll+0x7e>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	4a2a      	ldr	r2, [pc, #168]	@ (8005268 <xTaskResumeAll+0x124>)
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4a27      	ldr	r2, [pc, #156]	@ (800526c <xTaskResumeAll+0x128>)
 80051d0:	441a      	add	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3304      	adds	r3, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	4610      	mov	r0, r2
 80051da:	f7fe ff02 	bl	8003fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e2:	4b23      	ldr	r3, [pc, #140]	@ (8005270 <xTaskResumeAll+0x12c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051ec:	4b21      	ldr	r3, [pc, #132]	@ (8005274 <xTaskResumeAll+0x130>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005264 <xTaskResumeAll+0x120>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1cb      	bne.n	8005192 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005200:	f000 fb66 	bl	80058d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005204:	4b1c      	ldr	r3, [pc, #112]	@ (8005278 <xTaskResumeAll+0x134>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d010      	beq.n	8005232 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005210:	f000 f846 	bl	80052a0 <xTaskIncrementTick>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800521a:	4b16      	ldr	r3, [pc, #88]	@ (8005274 <xTaskResumeAll+0x130>)
 800521c:	2201      	movs	r2, #1
 800521e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3b01      	subs	r3, #1
 8005224:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800522c:	4b12      	ldr	r3, [pc, #72]	@ (8005278 <xTaskResumeAll+0x134>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <xTaskResumeAll+0x130>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800523a:	2301      	movs	r3, #1
 800523c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <xTaskResumeAll+0x138>)
 8005240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800524e:	f001 f8fd 	bl	800644c <vPortExitCritical>

	return xAlreadyYielded;
 8005252:	68bb      	ldr	r3, [r7, #8]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000e14 	.word	0x20000e14
 8005260:	20000dec 	.word	0x20000dec
 8005264:	20000dac 	.word	0x20000dac
 8005268:	20000df4 	.word	0x20000df4
 800526c:	2000091c 	.word	0x2000091c
 8005270:	20000918 	.word	0x20000918
 8005274:	20000e00 	.word	0x20000e00
 8005278:	20000dfc 	.word	0x20000dfc
 800527c:	e000ed04 	.word	0xe000ed04

08005280 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005286:	4b05      	ldr	r3, [pc, #20]	@ (800529c <xTaskGetTickCount+0x1c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800528c:	687b      	ldr	r3, [r7, #4]
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000df0 	.word	0x20000df0

080052a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052aa:	4b4f      	ldr	r3, [pc, #316]	@ (80053e8 <xTaskIncrementTick+0x148>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 8090 	bne.w	80053d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052b4:	4b4d      	ldr	r3, [pc, #308]	@ (80053ec <xTaskIncrementTick+0x14c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052bc:	4a4b      	ldr	r2, [pc, #300]	@ (80053ec <xTaskIncrementTick+0x14c>)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d121      	bne.n	800530c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052c8:	4b49      	ldr	r3, [pc, #292]	@ (80053f0 <xTaskIncrementTick+0x150>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	603b      	str	r3, [r7, #0]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <xTaskIncrementTick+0x46>
 80052ea:	4b41      	ldr	r3, [pc, #260]	@ (80053f0 <xTaskIncrementTick+0x150>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	4b40      	ldr	r3, [pc, #256]	@ (80053f4 <xTaskIncrementTick+0x154>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3e      	ldr	r2, [pc, #248]	@ (80053f0 <xTaskIncrementTick+0x150>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4a3e      	ldr	r2, [pc, #248]	@ (80053f4 <xTaskIncrementTick+0x154>)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	4b3e      	ldr	r3, [pc, #248]	@ (80053f8 <xTaskIncrementTick+0x158>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3301      	adds	r3, #1
 8005304:	4a3c      	ldr	r2, [pc, #240]	@ (80053f8 <xTaskIncrementTick+0x158>)
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	f000 fae2 	bl	80058d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800530c:	4b3b      	ldr	r3, [pc, #236]	@ (80053fc <xTaskIncrementTick+0x15c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	d349      	bcc.n	80053aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005316:	4b36      	ldr	r3, [pc, #216]	@ (80053f0 <xTaskIncrementTick+0x150>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005320:	4b36      	ldr	r3, [pc, #216]	@ (80053fc <xTaskIncrementTick+0x15c>)
 8005322:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005326:	601a      	str	r2, [r3, #0]
					break;
 8005328:	e03f      	b.n	80053aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800532a:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <xTaskIncrementTick+0x150>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	429a      	cmp	r2, r3
 8005340:	d203      	bcs.n	800534a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005342:	4a2e      	ldr	r2, [pc, #184]	@ (80053fc <xTaskIncrementTick+0x15c>)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005348:	e02f      	b.n	80053aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	3304      	adds	r3, #4
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe fea4 	bl	800409c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d004      	beq.n	8005366 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	3318      	adds	r3, #24
 8005360:	4618      	mov	r0, r3
 8005362:	f7fe fe9b 	bl	800409c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536a:	4b25      	ldr	r3, [pc, #148]	@ (8005400 <xTaskIncrementTick+0x160>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d903      	bls.n	800537a <xTaskIncrementTick+0xda>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a22      	ldr	r2, [pc, #136]	@ (8005400 <xTaskIncrementTick+0x160>)
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4a1f      	ldr	r2, [pc, #124]	@ (8005404 <xTaskIncrementTick+0x164>)
 8005388:	441a      	add	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	3304      	adds	r3, #4
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f7fe fe26 	bl	8003fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539a:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <xTaskIncrementTick+0x168>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3b8      	bcc.n	8005316 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053a4:	2301      	movs	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053a8:	e7b5      	b.n	8005316 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053aa:	4b17      	ldr	r3, [pc, #92]	@ (8005408 <xTaskIncrementTick+0x168>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b0:	4914      	ldr	r1, [pc, #80]	@ (8005404 <xTaskIncrementTick+0x164>)
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d901      	bls.n	80053c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053c6:	4b11      	ldr	r3, [pc, #68]	@ (800540c <xTaskIncrementTick+0x16c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e004      	b.n	80053de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <xTaskIncrementTick+0x170>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	4a0d      	ldr	r2, [pc, #52]	@ (8005410 <xTaskIncrementTick+0x170>)
 80053dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000e14 	.word	0x20000e14
 80053ec:	20000df0 	.word	0x20000df0
 80053f0:	20000da4 	.word	0x20000da4
 80053f4:	20000da8 	.word	0x20000da8
 80053f8:	20000e04 	.word	0x20000e04
 80053fc:	20000e0c 	.word	0x20000e0c
 8005400:	20000df4 	.word	0x20000df4
 8005404:	2000091c 	.word	0x2000091c
 8005408:	20000918 	.word	0x20000918
 800540c:	20000e00 	.word	0x20000e00
 8005410:	20000dfc 	.word	0x20000dfc

08005414 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800541a:	4b2b      	ldr	r3, [pc, #172]	@ (80054c8 <vTaskSwitchContext+0xb4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005422:	4b2a      	ldr	r3, [pc, #168]	@ (80054cc <vTaskSwitchContext+0xb8>)
 8005424:	2201      	movs	r2, #1
 8005426:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005428:	e047      	b.n	80054ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800542a:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <vTaskSwitchContext+0xb8>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005430:	4b27      	ldr	r3, [pc, #156]	@ (80054d0 <vTaskSwitchContext+0xbc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	e011      	b.n	800545c <vTaskSwitchContext+0x48>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10b      	bne.n	8005456 <vTaskSwitchContext+0x42>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	e7fd      	b.n	8005452 <vTaskSwitchContext+0x3e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3b01      	subs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	491d      	ldr	r1, [pc, #116]	@ (80054d4 <vTaskSwitchContext+0xc0>)
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0e3      	beq.n	8005438 <vTaskSwitchContext+0x24>
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4a16      	ldr	r2, [pc, #88]	@ (80054d4 <vTaskSwitchContext+0xc0>)
 800547c:	4413      	add	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	3308      	adds	r3, #8
 8005492:	429a      	cmp	r2, r3
 8005494:	d104      	bne.n	80054a0 <vTaskSwitchContext+0x8c>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	605a      	str	r2, [r3, #4]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	4a0c      	ldr	r2, [pc, #48]	@ (80054d8 <vTaskSwitchContext+0xc4>)
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	4a09      	ldr	r2, [pc, #36]	@ (80054d0 <vTaskSwitchContext+0xbc>)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054b0:	4b09      	ldr	r3, [pc, #36]	@ (80054d8 <vTaskSwitchContext+0xc4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3354      	adds	r3, #84	@ 0x54
 80054b6:	4a09      	ldr	r2, [pc, #36]	@ (80054dc <vTaskSwitchContext+0xc8>)
 80054b8:	6013      	str	r3, [r2, #0]
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000e14 	.word	0x20000e14
 80054cc:	20000e00 	.word	0x20000e00
 80054d0:	20000df4 	.word	0x20000df4
 80054d4:	2000091c 	.word	0x2000091c
 80054d8:	20000918 	.word	0x20000918
 80054dc:	2000002c 	.word	0x2000002c

080054e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60fb      	str	r3, [r7, #12]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005508:	4b07      	ldr	r3, [pc, #28]	@ (8005528 <vTaskPlaceOnEventList+0x48>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3318      	adds	r3, #24
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fe fd8a 	bl	800402a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005516:	2101      	movs	r1, #1
 8005518:	6838      	ldr	r0, [r7, #0]
 800551a:	f000 fa87 	bl	8005a2c <prvAddCurrentTaskToDelayedList>
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000918 	.word	0x20000918

0800552c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	617b      	str	r3, [r7, #20]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005556:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <vTaskPlaceOnEventListRestricted+0x54>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3318      	adds	r3, #24
 800555c:	4619      	mov	r1, r3
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7fe fd3f 	bl	8003fe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800556e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	68b8      	ldr	r0, [r7, #8]
 8005574:	f000 fa5a 	bl	8005a2c <prvAddCurrentTaskToDelayedList>
	}
 8005578:	bf00      	nop
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000918 	.word	0x20000918

08005584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60fb      	str	r3, [r7, #12]
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3318      	adds	r3, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fd70 	bl	800409c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005634 <xTaskRemoveFromEventList+0xb0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d11d      	bne.n	8005600 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fd67 	bl	800409c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d2:	4b19      	ldr	r3, [pc, #100]	@ (8005638 <xTaskRemoveFromEventList+0xb4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d903      	bls.n	80055e2 <xTaskRemoveFromEventList+0x5e>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	4a16      	ldr	r2, [pc, #88]	@ (8005638 <xTaskRemoveFromEventList+0xb4>)
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4a13      	ldr	r2, [pc, #76]	@ (800563c <xTaskRemoveFromEventList+0xb8>)
 80055f0:	441a      	add	r2, r3
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fe fcf2 	bl	8003fe2 <vListInsertEnd>
 80055fe:	e005      	b.n	800560c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3318      	adds	r3, #24
 8005604:	4619      	mov	r1, r3
 8005606:	480e      	ldr	r0, [pc, #56]	@ (8005640 <xTaskRemoveFromEventList+0xbc>)
 8005608:	f7fe fceb 	bl	8003fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005610:	4b0c      	ldr	r3, [pc, #48]	@ (8005644 <xTaskRemoveFromEventList+0xc0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	429a      	cmp	r2, r3
 8005618:	d905      	bls.n	8005626 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800561e:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <xTaskRemoveFromEventList+0xc4>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e001      	b.n	800562a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800562a:	697b      	ldr	r3, [r7, #20]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000e14 	.word	0x20000e14
 8005638:	20000df4 	.word	0x20000df4
 800563c:	2000091c 	.word	0x2000091c
 8005640:	20000dac 	.word	0x20000dac
 8005644:	20000918 	.word	0x20000918
 8005648:	20000e00 	.word	0x20000e00

0800564c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <vTaskInternalSetTimeOutState+0x24>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <vTaskInternalSetTimeOutState+0x28>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	605a      	str	r2, [r3, #4]
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20000e04 	.word	0x20000e04
 8005674:	20000df0 	.word	0x20000df0

08005678 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	613b      	str	r3, [r7, #16]
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60fb      	str	r3, [r7, #12]
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	e7fd      	b.n	80056ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056be:	f000 fe93 	bl	80063e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005738 <xTaskCheckForTimeOut+0xc0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056da:	d102      	bne.n	80056e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	e023      	b.n	800572a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b15      	ldr	r3, [pc, #84]	@ (800573c <xTaskCheckForTimeOut+0xc4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d007      	beq.n	80056fe <xTaskCheckForTimeOut+0x86>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e015      	b.n	800572a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	429a      	cmp	r2, r3
 8005706:	d20b      	bcs.n	8005720 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff99 	bl	800564c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e004      	b.n	800572a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800572a:	f000 fe8f 	bl	800644c <vPortExitCritical>

	return xReturn;
 800572e:	69fb      	ldr	r3, [r7, #28]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000df0 	.word	0x20000df0
 800573c:	20000e04 	.word	0x20000e04

08005740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005744:	4b03      	ldr	r3, [pc, #12]	@ (8005754 <vTaskMissedYield+0x14>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	20000e00 	.word	0x20000e00

08005758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005760:	f000 f852 	bl	8005808 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005764:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <prvIdleTask+0x28>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d9f9      	bls.n	8005760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <prvIdleTask+0x2c>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800577c:	e7f0      	b.n	8005760 <prvIdleTask+0x8>
 800577e:	bf00      	nop
 8005780:	2000091c 	.word	0x2000091c
 8005784:	e000ed04 	.word	0xe000ed04

08005788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	e00c      	b.n	80057ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4a12      	ldr	r2, [pc, #72]	@ (80057e8 <prvInitialiseTaskLists+0x60>)
 80057a0:	4413      	add	r3, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fbf0 	bl	8003f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3301      	adds	r3, #1
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b37      	cmp	r3, #55	@ 0x37
 80057b2:	d9ef      	bls.n	8005794 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057b4:	480d      	ldr	r0, [pc, #52]	@ (80057ec <prvInitialiseTaskLists+0x64>)
 80057b6:	f7fe fbe7 	bl	8003f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057ba:	480d      	ldr	r0, [pc, #52]	@ (80057f0 <prvInitialiseTaskLists+0x68>)
 80057bc:	f7fe fbe4 	bl	8003f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057c0:	480c      	ldr	r0, [pc, #48]	@ (80057f4 <prvInitialiseTaskLists+0x6c>)
 80057c2:	f7fe fbe1 	bl	8003f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057c6:	480c      	ldr	r0, [pc, #48]	@ (80057f8 <prvInitialiseTaskLists+0x70>)
 80057c8:	f7fe fbde 	bl	8003f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057cc:	480b      	ldr	r0, [pc, #44]	@ (80057fc <prvInitialiseTaskLists+0x74>)
 80057ce:	f7fe fbdb 	bl	8003f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <prvInitialiseTaskLists+0x78>)
 80057d4:	4a05      	ldr	r2, [pc, #20]	@ (80057ec <prvInitialiseTaskLists+0x64>)
 80057d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <prvInitialiseTaskLists+0x7c>)
 80057da:	4a05      	ldr	r2, [pc, #20]	@ (80057f0 <prvInitialiseTaskLists+0x68>)
 80057dc:	601a      	str	r2, [r3, #0]
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	2000091c 	.word	0x2000091c
 80057ec:	20000d7c 	.word	0x20000d7c
 80057f0:	20000d90 	.word	0x20000d90
 80057f4:	20000dac 	.word	0x20000dac
 80057f8:	20000dc0 	.word	0x20000dc0
 80057fc:	20000dd8 	.word	0x20000dd8
 8005800:	20000da4 	.word	0x20000da4
 8005804:	20000da8 	.word	0x20000da8

08005808 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800580e:	e019      	b.n	8005844 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005810:	f000 fdea 	bl	80063e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005814:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <prvCheckTasksWaitingTermination+0x50>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe fc3b 	bl	800409c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <prvCheckTasksWaitingTermination+0x54>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3b01      	subs	r3, #1
 800582c:	4a0b      	ldr	r2, [pc, #44]	@ (800585c <prvCheckTasksWaitingTermination+0x54>)
 800582e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <prvCheckTasksWaitingTermination+0x58>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3b01      	subs	r3, #1
 8005836:	4a0a      	ldr	r2, [pc, #40]	@ (8005860 <prvCheckTasksWaitingTermination+0x58>)
 8005838:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800583a:	f000 fe07 	bl	800644c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f810 	bl	8005864 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005844:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <prvCheckTasksWaitingTermination+0x58>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e1      	bne.n	8005810 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000dc0 	.word	0x20000dc0
 800585c:	20000dec 	.word	0x20000dec
 8005860:	20000dd4 	.word	0x20000dd4

08005864 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3354      	adds	r3, #84	@ 0x54
 8005870:	4618      	mov	r0, r3
 8005872:	f001 faeb 	bl	8006e4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800587c:	2b00      	cmp	r3, #0
 800587e:	d108      	bne.n	8005892 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	4618      	mov	r0, r3
 8005886:	f000 ff9f 	bl	80067c8 <vPortFree>
				vPortFree( pxTCB );
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 ff9c 	bl	80067c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005890:	e019      	b.n	80058c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005898:	2b01      	cmp	r3, #1
 800589a:	d103      	bne.n	80058a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 ff93 	bl	80067c8 <vPortFree>
	}
 80058a2:	e010      	b.n	80058c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d00b      	beq.n	80058c6 <prvDeleteTCB+0x62>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	e7fd      	b.n	80058c2 <prvDeleteTCB+0x5e>
	}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <prvResetNextTaskUnblockTime+0x38>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058e0:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <prvResetNextTaskUnblockTime+0x3c>)
 80058e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058e8:	e008      	b.n	80058fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ea:	4b07      	ldr	r3, [pc, #28]	@ (8005908 <prvResetNextTaskUnblockTime+0x38>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4a04      	ldr	r2, [pc, #16]	@ (800590c <prvResetNextTaskUnblockTime+0x3c>)
 80058fa:	6013      	str	r3, [r2, #0]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20000da4 	.word	0x20000da4
 800590c:	20000e0c 	.word	0x20000e0c

08005910 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005916:	4b0b      	ldr	r3, [pc, #44]	@ (8005944 <xTaskGetSchedulerState+0x34>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800591e:	2301      	movs	r3, #1
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	e008      	b.n	8005936 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005924:	4b08      	ldr	r3, [pc, #32]	@ (8005948 <xTaskGetSchedulerState+0x38>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800592c:	2302      	movs	r3, #2
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	e001      	b.n	8005936 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005936:	687b      	ldr	r3, [r7, #4]
	}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	20000df8 	.word	0x20000df8
 8005948:	20000e14 	.word	0x20000e14

0800594c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d058      	beq.n	8005a14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005962:	4b2f      	ldr	r3, [pc, #188]	@ (8005a20 <xTaskPriorityDisinherit+0xd4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	429a      	cmp	r2, r3
 800596a:	d00b      	beq.n	8005984 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	60fb      	str	r3, [r7, #12]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	60bb      	str	r3, [r7, #8]
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a8:	1e5a      	subs	r2, r3, #1
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d02c      	beq.n	8005a14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d128      	bne.n	8005a14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fb68 	bl	800409c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <xTaskPriorityDisinherit+0xd8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d903      	bls.n	80059f4 <xTaskPriorityDisinherit+0xa8>
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005a24 <xTaskPriorityDisinherit+0xd8>)
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4a09      	ldr	r2, [pc, #36]	@ (8005a28 <xTaskPriorityDisinherit+0xdc>)
 8005a02:	441a      	add	r2, r3
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f7fe fae9 	bl	8003fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a14:	697b      	ldr	r3, [r7, #20]
	}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000918 	.word	0x20000918
 8005a24:	20000df4 	.word	0x20000df4
 8005a28:	2000091c 	.word	0x2000091c

08005a2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a36:	4b21      	ldr	r3, [pc, #132]	@ (8005abc <prvAddCurrentTaskToDelayedList+0x90>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a3c:	4b20      	ldr	r3, [pc, #128]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe fb2a 	bl	800409c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a4e:	d10a      	bne.n	8005a66 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a56:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4819      	ldr	r0, [pc, #100]	@ (8005ac4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a60:	f7fe fabf 	bl	8003fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a64:	e026      	b.n	8005ab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a6e:	4b14      	ldr	r3, [pc, #80]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d209      	bcs.n	8005a92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a7e:	4b12      	ldr	r3, [pc, #72]	@ (8005ac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f7fe facd 	bl	800402a <vListInsert>
}
 8005a90:	e010      	b.n	8005ab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a92:	4b0e      	ldr	r3, [pc, #56]	@ (8005acc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7fe fac3 	bl	800402a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d202      	bcs.n	8005ab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aae:	4a08      	ldr	r2, [pc, #32]	@ (8005ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6013      	str	r3, [r2, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000df0 	.word	0x20000df0
 8005ac0:	20000918 	.word	0x20000918
 8005ac4:	20000dd8 	.word	0x20000dd8
 8005ac8:	20000da8 	.word	0x20000da8
 8005acc:	20000da4 	.word	0x20000da4
 8005ad0:	20000e0c 	.word	0x20000e0c

08005ad4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08a      	sub	sp, #40	@ 0x28
 8005ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ade:	f000 fb13 	bl	8006108 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b58 <xTimerCreateTimerTask+0x84>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d021      	beq.n	8005b2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005af2:	1d3a      	adds	r2, r7, #4
 8005af4:	f107 0108 	add.w	r1, r7, #8
 8005af8:	f107 030c 	add.w	r3, r7, #12
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe fa29 	bl	8003f54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	9202      	str	r2, [sp, #8]
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	2300      	movs	r3, #0
 8005b12:	460a      	mov	r2, r1
 8005b14:	4911      	ldr	r1, [pc, #68]	@ (8005b5c <xTimerCreateTimerTask+0x88>)
 8005b16:	4812      	ldr	r0, [pc, #72]	@ (8005b60 <xTimerCreateTimerTask+0x8c>)
 8005b18:	f7ff f8a2 	bl	8004c60 <xTaskCreateStatic>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4a11      	ldr	r2, [pc, #68]	@ (8005b64 <xTimerCreateTimerTask+0x90>)
 8005b20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b22:	4b10      	ldr	r3, [pc, #64]	@ (8005b64 <xTimerCreateTimerTask+0x90>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	613b      	str	r3, [r7, #16]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b4c:	697b      	ldr	r3, [r7, #20]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000e48 	.word	0x20000e48
 8005b5c:	08007abc 	.word	0x08007abc
 8005b60:	08005ca1 	.word	0x08005ca1
 8005b64:	20000e4c 	.word	0x20000e4c

08005b68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	@ 0x28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	623b      	str	r3, [r7, #32]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b98:	4b19      	ldr	r3, [pc, #100]	@ (8005c00 <xTimerGenericCommand+0x98>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d02a      	beq.n	8005bf6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	dc18      	bgt.n	8005be4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bb2:	f7ff fead 	bl	8005910 <xTaskGetSchedulerState>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d109      	bne.n	8005bd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bbc:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <xTimerGenericCommand+0x98>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	f107 0110 	add.w	r1, r7, #16
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc8:	f7fe fbd8 	bl	800437c <xQueueGenericSend>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bce:	e012      	b.n	8005bf6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <xTimerGenericCommand+0x98>)
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	f107 0110 	add.w	r1, r7, #16
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f7fe fbce 	bl	800437c <xQueueGenericSend>
 8005be0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005be2:	e008      	b.n	8005bf6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <xTimerGenericCommand+0x98>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	f107 0110 	add.w	r1, r7, #16
 8005bec:	2300      	movs	r3, #0
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	f7fe fcc6 	bl	8004580 <xQueueGenericSendFromISR>
 8005bf4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	@ 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000e48 	.word	0x20000e48

08005c04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0e:	4b23      	ldr	r3, [pc, #140]	@ (8005c9c <prvProcessExpiredTimer+0x98>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fa3d 	bl	800409c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d023      	beq.n	8005c78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	18d1      	adds	r1, r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	6978      	ldr	r0, [r7, #20]
 8005c3e:	f000 f8d5 	bl	8005dec <prvInsertTimerInActiveList>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	2100      	movs	r1, #0
 8005c52:	6978      	ldr	r0, [r7, #20]
 8005c54:	f7ff ff88 	bl	8005b68 <xTimerGenericCommand>
 8005c58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d114      	bne.n	8005c8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c7e:	f023 0301 	bic.w	r3, r3, #1
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	6978      	ldr	r0, [r7, #20]
 8005c90:	4798      	blx	r3
}
 8005c92:	bf00      	nop
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000e40 	.word	0x20000e40

08005ca0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f859 	bl	8005d64 <prvGetNextExpireTime>
 8005cb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f805 	bl	8005cc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cbe:	f000 f8d7 	bl	8005e70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cc2:	bf00      	nop
 8005cc4:	e7f0      	b.n	8005ca8 <prvTimerTask+0x8>
	...

08005cc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cd2:	f7ff fa29 	bl	8005128 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cd6:	f107 0308 	add.w	r3, r7, #8
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f866 	bl	8005dac <prvSampleTimeNow>
 8005ce0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d130      	bne.n	8005d4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <prvProcessTimerOrBlockTask+0x3c>
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d806      	bhi.n	8005d04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cf6:	f7ff fa25 	bl	8005144 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff81 	bl	8005c04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d02:	e024      	b.n	8005d4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d0a:	4b13      	ldr	r3, [pc, #76]	@ (8005d58 <prvProcessTimerOrBlockTask+0x90>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <prvProcessTimerOrBlockTask+0x50>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <prvProcessTimerOrBlockTask+0x52>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d5c <prvProcessTimerOrBlockTask+0x94>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f7fe ff65 	bl	8004bf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d2e:	f7ff fa09 	bl	8005144 <xTaskResumeAll>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d38:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <prvProcessTimerOrBlockTask+0x98>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
}
 8005d48:	e001      	b.n	8005d4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d4a:	f7ff f9fb 	bl	8005144 <xTaskResumeAll>
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000e44 	.word	0x20000e44
 8005d5c:	20000e48 	.word	0x20000e48
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005da8 <prvGetNextExpireTime+0x44>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <prvGetNextExpireTime+0x16>
 8005d76:	2201      	movs	r2, #1
 8005d78:	e000      	b.n	8005d7c <prvGetNextExpireTime+0x18>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d88:	4b07      	ldr	r3, [pc, #28]	@ (8005da8 <prvGetNextExpireTime+0x44>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e001      	b.n	8005d98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d98:	68fb      	ldr	r3, [r7, #12]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000e40 	.word	0x20000e40

08005dac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005db4:	f7ff fa64 	bl	8005280 <xTaskGetTickCount>
 8005db8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dba:	4b0b      	ldr	r3, [pc, #44]	@ (8005de8 <prvSampleTimeNow+0x3c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d205      	bcs.n	8005dd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005dc4:	f000 f93a 	bl	800603c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005dd6:	4a04      	ldr	r2, [pc, #16]	@ (8005de8 <prvSampleTimeNow+0x3c>)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000e50 	.word	0x20000e50

08005dec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d812      	bhi.n	8005e38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	1ad2      	subs	r2, r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d302      	bcc.n	8005e26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	e01b      	b.n	8005e5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e26:	4b10      	ldr	r3, [pc, #64]	@ (8005e68 <prvInsertTimerInActiveList+0x7c>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7fe f8fa 	bl	800402a <vListInsert>
 8005e36:	e012      	b.n	8005e5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d206      	bcs.n	8005e4e <prvInsertTimerInActiveList+0x62>
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d302      	bcc.n	8005e4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e007      	b.n	8005e5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e4e:	4b07      	ldr	r3, [pc, #28]	@ (8005e6c <prvInsertTimerInActiveList+0x80>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3304      	adds	r3, #4
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f7fe f8e6 	bl	800402a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e5e:	697b      	ldr	r3, [r7, #20]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20000e44 	.word	0x20000e44
 8005e6c:	20000e40 	.word	0x20000e40

08005e70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	@ 0x38
 8005e74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e76:	e0ce      	b.n	8006016 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da19      	bge.n	8005eb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	3304      	adds	r3, #4
 8005e82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	61fb      	str	r3, [r7, #28]
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ea8:	6850      	ldr	r0, [r2, #4]
 8005eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f2c0 80ae 	blt.w	8006016 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d004      	beq.n	8005ed0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe f8e6 	bl	800409c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff ff6a 	bl	8005dac <prvSampleTimeNow>
 8005ed8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b09      	cmp	r3, #9
 8005ede:	f200 8097 	bhi.w	8006010 <prvProcessReceivedCommands+0x1a0>
 8005ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee8 <prvProcessReceivedCommands+0x78>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f11 	.word	0x08005f11
 8005ef4:	08005f87 	.word	0x08005f87
 8005ef8:	08005f9b 	.word	0x08005f9b
 8005efc:	08005fe7 	.word	0x08005fe7
 8005f00:	08005f11 	.word	0x08005f11
 8005f04:	08005f11 	.word	0x08005f11
 8005f08:	08005f87 	.word	0x08005f87
 8005f0c:	08005f9b 	.word	0x08005f9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	18d1      	adds	r1, r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f30:	f7ff ff5c 	bl	8005dec <prvInsertTimerInActiveList>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d06c      	beq.n	8006014 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d061      	beq.n	8006014 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	441a      	add	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f62:	f7ff fe01 	bl	8005b68 <xTimerGenericCommand>
 8005f66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d152      	bne.n	8006014 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	61bb      	str	r3, [r7, #24]
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	e7fd      	b.n	8005f82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f98:	e03d      	b.n	8006016 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	617b      	str	r3, [r7, #20]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	18d1      	adds	r1, r2, r3
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fe0:	f7ff ff04 	bl	8005dec <prvInsertTimerInActiveList>
					break;
 8005fe4:	e017      	b.n	8006016 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005ff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ff6:	f000 fbe7 	bl	80067c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ffa:	e00c      	b.n	8006016 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	b2da      	uxtb	r2, r3
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800600e:	e002      	b.n	8006016 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <prvProcessReceivedCommands+0x1a6>
					break;
 8006014:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006016:	4b08      	ldr	r3, [pc, #32]	@ (8006038 <prvProcessReceivedCommands+0x1c8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	1d39      	adds	r1, r7, #4
 800601c:	2200      	movs	r2, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fb4c 	bl	80046bc <xQueueReceive>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	f47f af26 	bne.w	8005e78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	3730      	adds	r7, #48	@ 0x30
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000e48 	.word	0x20000e48

0800603c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006042:	e049      	b.n	80060d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006044:	4b2e      	ldr	r3, [pc, #184]	@ (8006100 <prvSwitchTimerLists+0xc4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604e:	4b2c      	ldr	r3, [pc, #176]	@ (8006100 <prvSwitchTimerLists+0xc4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe f81d 	bl	800409c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d02f      	beq.n	80060d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4413      	add	r3, r2
 8006080:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	429a      	cmp	r2, r3
 8006088:	d90e      	bls.n	80060a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006096:	4b1a      	ldr	r3, [pc, #104]	@ (8006100 <prvSwitchTimerLists+0xc4>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3304      	adds	r3, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f7fd ffc2 	bl	800402a <vListInsert>
 80060a6:	e017      	b.n	80060d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060a8:	2300      	movs	r3, #0
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2300      	movs	r3, #0
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	2100      	movs	r1, #0
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff fd58 	bl	8005b68 <xTimerGenericCommand>
 80060b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	603b      	str	r3, [r7, #0]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060d8:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <prvSwitchTimerLists+0xc4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1b0      	bne.n	8006044 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060e2:	4b07      	ldr	r3, [pc, #28]	@ (8006100 <prvSwitchTimerLists+0xc4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060e8:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <prvSwitchTimerLists+0xc8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a04      	ldr	r2, [pc, #16]	@ (8006100 <prvSwitchTimerLists+0xc4>)
 80060ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060f0:	4a04      	ldr	r2, [pc, #16]	@ (8006104 <prvSwitchTimerLists+0xc8>)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	6013      	str	r3, [r2, #0]
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000e40 	.word	0x20000e40
 8006104:	20000e44 	.word	0x20000e44

08006108 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800610e:	f000 f96b 	bl	80063e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006112:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <prvCheckForValidListAndQueue+0x60>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d120      	bne.n	800615c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800611a:	4814      	ldr	r0, [pc, #80]	@ (800616c <prvCheckForValidListAndQueue+0x64>)
 800611c:	f7fd ff34 	bl	8003f88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006120:	4813      	ldr	r0, [pc, #76]	@ (8006170 <prvCheckForValidListAndQueue+0x68>)
 8006122:	f7fd ff31 	bl	8003f88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006126:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <prvCheckForValidListAndQueue+0x6c>)
 8006128:	4a10      	ldr	r2, [pc, #64]	@ (800616c <prvCheckForValidListAndQueue+0x64>)
 800612a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800612c:	4b12      	ldr	r3, [pc, #72]	@ (8006178 <prvCheckForValidListAndQueue+0x70>)
 800612e:	4a10      	ldr	r2, [pc, #64]	@ (8006170 <prvCheckForValidListAndQueue+0x68>)
 8006130:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	4b11      	ldr	r3, [pc, #68]	@ (800617c <prvCheckForValidListAndQueue+0x74>)
 8006138:	4a11      	ldr	r2, [pc, #68]	@ (8006180 <prvCheckForValidListAndQueue+0x78>)
 800613a:	2110      	movs	r1, #16
 800613c:	200a      	movs	r0, #10
 800613e:	f7fe f841 	bl	80041c4 <xQueueGenericCreateStatic>
 8006142:	4603      	mov	r3, r0
 8006144:	4a08      	ldr	r2, [pc, #32]	@ (8006168 <prvCheckForValidListAndQueue+0x60>)
 8006146:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006148:	4b07      	ldr	r3, [pc, #28]	@ (8006168 <prvCheckForValidListAndQueue+0x60>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <prvCheckForValidListAndQueue+0x60>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	490b      	ldr	r1, [pc, #44]	@ (8006184 <prvCheckForValidListAndQueue+0x7c>)
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fd24 	bl	8004ba4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800615c:	f000 f976 	bl	800644c <vPortExitCritical>
}
 8006160:	bf00      	nop
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000e48 	.word	0x20000e48
 800616c:	20000e18 	.word	0x20000e18
 8006170:	20000e2c 	.word	0x20000e2c
 8006174:	20000e40 	.word	0x20000e40
 8006178:	20000e44 	.word	0x20000e44
 800617c:	20000ef4 	.word	0x20000ef4
 8006180:	20000e54 	.word	0x20000e54
 8006184:	08007ac4 	.word	0x08007ac4

08006188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3b04      	subs	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3b04      	subs	r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061b8:	4a0c      	ldr	r2, [pc, #48]	@ (80061ec <pxPortInitialiseStack+0x64>)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3b14      	subs	r3, #20
 80061c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3b04      	subs	r3, #4
 80061ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f06f 0202 	mvn.w	r2, #2
 80061d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b20      	subs	r3, #32
 80061dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061de:	68fb      	ldr	r3, [r7, #12]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	080061f1 	.word	0x080061f1

080061f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061fa:	4b13      	ldr	r3, [pc, #76]	@ (8006248 <prvTaskExitError+0x58>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006202:	d00b      	beq.n	800621c <prvTaskExitError+0x2c>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <prvTaskExitError+0x28>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	60bb      	str	r3, [r7, #8]
}
 800622e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006230:	bf00      	nop
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0fc      	beq.n	8006232 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	2000001c 	.word	0x2000001c
 800624c:	00000000 	.word	0x00000000

08006250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006250:	4b07      	ldr	r3, [pc, #28]	@ (8006270 <pxCurrentTCBConst2>)
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	6808      	ldr	r0, [r1, #0]
 8006256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	f380 8809 	msr	PSP, r0
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f380 8811 	msr	BASEPRI, r0
 800626a:	4770      	bx	lr
 800626c:	f3af 8000 	nop.w

08006270 <pxCurrentTCBConst2>:
 8006270:	20000918 	.word	0x20000918
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop

08006278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006278:	4808      	ldr	r0, [pc, #32]	@ (800629c <prvPortStartFirstTask+0x24>)
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	6800      	ldr	r0, [r0, #0]
 800627e:	f380 8808 	msr	MSP, r0
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8814 	msr	CONTROL, r0
 800628a:	b662      	cpsie	i
 800628c:	b661      	cpsie	f
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	df00      	svc	0
 8006298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800629a:	bf00      	nop
 800629c:	e000ed08 	.word	0xe000ed08

080062a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062a6:	4b47      	ldr	r3, [pc, #284]	@ (80063c4 <xPortStartScheduler+0x124>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a47      	ldr	r2, [pc, #284]	@ (80063c8 <xPortStartScheduler+0x128>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10b      	bne.n	80062c8 <xPortStartScheduler+0x28>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	613b      	str	r3, [r7, #16]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062c8:	4b3e      	ldr	r3, [pc, #248]	@ (80063c4 <xPortStartScheduler+0x124>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3f      	ldr	r2, [pc, #252]	@ (80063cc <xPortStartScheduler+0x12c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10b      	bne.n	80062ea <xPortStartScheduler+0x4a>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	60fb      	str	r3, [r7, #12]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062ea:	4b39      	ldr	r3, [pc, #228]	@ (80063d0 <xPortStartScheduler+0x130>)
 80062ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	22ff      	movs	r2, #255	@ 0xff
 80062fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800630c:	b2da      	uxtb	r2, r3
 800630e:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <xPortStartScheduler+0x134>)
 8006310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006312:	4b31      	ldr	r3, [pc, #196]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006314:	2207      	movs	r2, #7
 8006316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006318:	e009      	b.n	800632e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800631a:	4b2f      	ldr	r3, [pc, #188]	@ (80063d8 <xPortStartScheduler+0x138>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3b01      	subs	r3, #1
 8006320:	4a2d      	ldr	r2, [pc, #180]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b80      	cmp	r3, #128	@ 0x80
 8006338:	d0ef      	beq.n	800631a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800633a:	4b27      	ldr	r3, [pc, #156]	@ (80063d8 <xPortStartScheduler+0x138>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f1c3 0307 	rsb	r3, r3, #7
 8006342:	2b04      	cmp	r3, #4
 8006344:	d00b      	beq.n	800635e <xPortStartScheduler+0xbe>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60bb      	str	r3, [r7, #8]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800635e:	4b1e      	ldr	r3, [pc, #120]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	4a1c      	ldr	r2, [pc, #112]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006368:	4b1b      	ldr	r3, [pc, #108]	@ (80063d8 <xPortStartScheduler+0x138>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006370:	4a19      	ldr	r2, [pc, #100]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800637c:	4b17      	ldr	r3, [pc, #92]	@ (80063dc <xPortStartScheduler+0x13c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a16      	ldr	r2, [pc, #88]	@ (80063dc <xPortStartScheduler+0x13c>)
 8006382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006388:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <xPortStartScheduler+0x13c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a13      	ldr	r2, [pc, #76]	@ (80063dc <xPortStartScheduler+0x13c>)
 800638e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006394:	f000 f8da 	bl	800654c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006398:	4b11      	ldr	r3, [pc, #68]	@ (80063e0 <xPortStartScheduler+0x140>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800639e:	f000 f8f9 	bl	8006594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063a2:	4b10      	ldr	r3, [pc, #64]	@ (80063e4 <xPortStartScheduler+0x144>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a0f      	ldr	r2, [pc, #60]	@ (80063e4 <xPortStartScheduler+0x144>)
 80063a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ae:	f7ff ff63 	bl	8006278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063b2:	f7ff f82f 	bl	8005414 <vTaskSwitchContext>
	prvTaskExitError();
 80063b6:	f7ff ff1b 	bl	80061f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	e000ed00 	.word	0xe000ed00
 80063c8:	410fc271 	.word	0x410fc271
 80063cc:	410fc270 	.word	0x410fc270
 80063d0:	e000e400 	.word	0xe000e400
 80063d4:	20000f44 	.word	0x20000f44
 80063d8:	20000f48 	.word	0x20000f48
 80063dc:	e000ed20 	.word	0xe000ed20
 80063e0:	2000001c 	.word	0x2000001c
 80063e4:	e000ef34 	.word	0xe000ef34

080063e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <vPortEnterCritical+0x5c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	4a0e      	ldr	r2, [pc, #56]	@ (8006444 <vPortEnterCritical+0x5c>)
 800640a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800640c:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <vPortEnterCritical+0x5c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d110      	bne.n	8006436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006414:	4b0c      	ldr	r3, [pc, #48]	@ (8006448 <vPortEnterCritical+0x60>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <vPortEnterCritical+0x4e>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <vPortEnterCritical+0x4a>
	}
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000001c 	.word	0x2000001c
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006452:	4b12      	ldr	r3, [pc, #72]	@ (800649c <vPortExitCritical+0x50>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <vPortExitCritical+0x26>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	607b      	str	r3, [r7, #4]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006472:	4b0a      	ldr	r3, [pc, #40]	@ (800649c <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3b01      	subs	r3, #1
 8006478:	4a08      	ldr	r2, [pc, #32]	@ (800649c <vPortExitCritical+0x50>)
 800647a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800647c:	4b07      	ldr	r3, [pc, #28]	@ (800649c <vPortExitCritical+0x50>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <vPortExitCritical+0x44>
 8006484:	2300      	movs	r3, #0
 8006486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	2000001c 	.word	0x2000001c

080064a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064a0:	f3ef 8009 	mrs	r0, PSP
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <pxCurrentTCBConst>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f01e 0f10 	tst.w	lr, #16
 80064b0:	bf08      	it	eq
 80064b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	6010      	str	r0, [r2, #0]
 80064bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064c4:	f380 8811 	msr	BASEPRI, r0
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f7fe ffa0 	bl	8005414 <vTaskSwitchContext>
 80064d4:	f04f 0000 	mov.w	r0, #0
 80064d8:	f380 8811 	msr	BASEPRI, r0
 80064dc:	bc09      	pop	{r0, r3}
 80064de:	6819      	ldr	r1, [r3, #0]
 80064e0:	6808      	ldr	r0, [r1, #0]
 80064e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e6:	f01e 0f10 	tst.w	lr, #16
 80064ea:	bf08      	it	eq
 80064ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064f0:	f380 8809 	msr	PSP, r0
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst>:
 8006500:	20000918 	.word	0x20000918
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006522:	f7fe febd 	bl	80052a0 <xTaskIncrementTick>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800652c:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <xPortSysTickHandler+0x40>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
}
 800653e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006550:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006556:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <vPortSetupTimerInterrupt+0x38>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800655c:	4b0a      	ldr	r3, [pc, #40]	@ (8006588 <vPortSetupTimerInterrupt+0x3c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0a      	ldr	r2, [pc, #40]	@ (800658c <vPortSetupTimerInterrupt+0x40>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	099b      	lsrs	r3, r3, #6
 8006568:	4a09      	ldr	r2, [pc, #36]	@ (8006590 <vPortSetupTimerInterrupt+0x44>)
 800656a:	3b01      	subs	r3, #1
 800656c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800656e:	4b04      	ldr	r3, [pc, #16]	@ (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006570:	2207      	movs	r2, #7
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	e000e010 	.word	0xe000e010
 8006584:	e000e018 	.word	0xe000e018
 8006588:	20000010 	.word	0x20000010
 800658c:	10624dd3 	.word	0x10624dd3
 8006590:	e000e014 	.word	0xe000e014

08006594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065a4 <vPortEnableVFP+0x10>
 8006598:	6801      	ldr	r1, [r0, #0]
 800659a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800659e:	6001      	str	r1, [r0, #0]
 80065a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065a2:	bf00      	nop
 80065a4:	e000ed88 	.word	0xe000ed88

080065a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ae:	f3ef 8305 	mrs	r3, IPSR
 80065b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d915      	bls.n	80065e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ba:	4a18      	ldr	r2, [pc, #96]	@ (800661c <vPortValidateInterruptPriority+0x74>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065c4:	4b16      	ldr	r3, [pc, #88]	@ (8006620 <vPortValidateInterruptPriority+0x78>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	7afa      	ldrb	r2, [r7, #11]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d20b      	bcs.n	80065e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	e7fd      	b.n	80065e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <vPortValidateInterruptPriority+0x7c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006628 <vPortValidateInterruptPriority+0x80>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d90b      	bls.n	800660e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	603b      	str	r3, [r7, #0]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <vPortValidateInterruptPriority+0x62>
	}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000e3f0 	.word	0xe000e3f0
 8006620:	20000f44 	.word	0x20000f44
 8006624:	e000ed0c 	.word	0xe000ed0c
 8006628:	20000f48 	.word	0x20000f48

0800662c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08a      	sub	sp, #40	@ 0x28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006638:	f7fe fd76 	bl	8005128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800663c:	4b5c      	ldr	r3, [pc, #368]	@ (80067b0 <pvPortMalloc+0x184>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006644:	f000 f924 	bl	8006890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006648:	4b5a      	ldr	r3, [pc, #360]	@ (80067b4 <pvPortMalloc+0x188>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 8095 	bne.w	8006780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01e      	beq.n	800669a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800665c:	2208      	movs	r2, #8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	2b00      	cmp	r3, #0
 800666c:	d015      	beq.n	800669a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f023 0307 	bic.w	r3, r3, #7
 8006674:	3308      	adds	r3, #8
 8006676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <pvPortMalloc+0x6e>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	617b      	str	r3, [r7, #20]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d06f      	beq.n	8006780 <pvPortMalloc+0x154>
 80066a0:	4b45      	ldr	r3, [pc, #276]	@ (80067b8 <pvPortMalloc+0x18c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d86a      	bhi.n	8006780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066aa:	4b44      	ldr	r3, [pc, #272]	@ (80067bc <pvPortMalloc+0x190>)
 80066ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066ae:	4b43      	ldr	r3, [pc, #268]	@ (80067bc <pvPortMalloc+0x190>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b4:	e004      	b.n	80066c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d903      	bls.n	80066d2 <pvPortMalloc+0xa6>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f1      	bne.n	80066b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066d2:	4b37      	ldr	r3, [pc, #220]	@ (80067b0 <pvPortMalloc+0x184>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d8:	429a      	cmp	r2, r3
 80066da:	d051      	beq.n	8006780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2208      	movs	r2, #8
 80066e2:	4413      	add	r3, r2
 80066e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	2308      	movs	r3, #8
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d920      	bls.n	8006740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <pvPortMalloc+0xfc>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800673a:	69b8      	ldr	r0, [r7, #24]
 800673c:	f000 f90a 	bl	8006954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006740:	4b1d      	ldr	r3, [pc, #116]	@ (80067b8 <pvPortMalloc+0x18c>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	4a1b      	ldr	r2, [pc, #108]	@ (80067b8 <pvPortMalloc+0x18c>)
 800674c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800674e:	4b1a      	ldr	r3, [pc, #104]	@ (80067b8 <pvPortMalloc+0x18c>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b1b      	ldr	r3, [pc, #108]	@ (80067c0 <pvPortMalloc+0x194>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d203      	bcs.n	8006762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800675a:	4b17      	ldr	r3, [pc, #92]	@ (80067b8 <pvPortMalloc+0x18c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a18      	ldr	r2, [pc, #96]	@ (80067c0 <pvPortMalloc+0x194>)
 8006760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	4b13      	ldr	r3, [pc, #76]	@ (80067b4 <pvPortMalloc+0x188>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	431a      	orrs	r2, r3
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006776:	4b13      	ldr	r3, [pc, #76]	@ (80067c4 <pvPortMalloc+0x198>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3301      	adds	r3, #1
 800677c:	4a11      	ldr	r2, [pc, #68]	@ (80067c4 <pvPortMalloc+0x198>)
 800677e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006780:	f7fe fce0 	bl	8005144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <pvPortMalloc+0x17a>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60fb      	str	r3, [r7, #12]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <pvPortMalloc+0x176>
	return pvReturn;
 80067a6:	69fb      	ldr	r3, [r7, #28]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3728      	adds	r7, #40	@ 0x28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20001b0c 	.word	0x20001b0c
 80067b4:	20001b20 	.word	0x20001b20
 80067b8:	20001b10 	.word	0x20001b10
 80067bc:	20001b04 	.word	0x20001b04
 80067c0:	20001b14 	.word	0x20001b14
 80067c4:	20001b18 	.word	0x20001b18

080067c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d04f      	beq.n	800687a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067da:	2308      	movs	r3, #8
 80067dc:	425b      	negs	r3, r3
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b25      	ldr	r3, [pc, #148]	@ (8006884 <vPortFree+0xbc>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <vPortFree+0x46>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	60fb      	str	r3, [r7, #12]
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	e7fd      	b.n	800680a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <vPortFree+0x66>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60bb      	str	r3, [r7, #8]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4b14      	ldr	r3, [pc, #80]	@ (8006884 <vPortFree+0xbc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4013      	ands	r3, r2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01e      	beq.n	800687a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11a      	bne.n	800687a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	4b0e      	ldr	r3, [pc, #56]	@ (8006884 <vPortFree+0xbc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	43db      	mvns	r3, r3
 800684e:	401a      	ands	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006854:	f7fe fc68 	bl	8005128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <vPortFree+0xc0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4413      	add	r3, r2
 8006862:	4a09      	ldr	r2, [pc, #36]	@ (8006888 <vPortFree+0xc0>)
 8006864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006866:	6938      	ldr	r0, [r7, #16]
 8006868:	f000 f874 	bl	8006954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800686c:	4b07      	ldr	r3, [pc, #28]	@ (800688c <vPortFree+0xc4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	4a06      	ldr	r2, [pc, #24]	@ (800688c <vPortFree+0xc4>)
 8006874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006876:	f7fe fc65 	bl	8005144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800687a:	bf00      	nop
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20001b20 	.word	0x20001b20
 8006888:	20001b10 	.word	0x20001b10
 800688c:	20001b1c 	.word	0x20001b1c

08006890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006896:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800689a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800689c:	4b27      	ldr	r3, [pc, #156]	@ (800693c <prvHeapInit+0xac>)
 800689e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00c      	beq.n	80068c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3307      	adds	r3, #7
 80068ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0307 	bic.w	r3, r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	4a1f      	ldr	r2, [pc, #124]	@ (800693c <prvHeapInit+0xac>)
 80068c0:	4413      	add	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006940 <prvHeapInit+0xb0>)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006940 <prvHeapInit+0xb0>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068dc:	2208      	movs	r2, #8
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a15      	ldr	r2, [pc, #84]	@ (8006944 <prvHeapInit+0xb4>)
 80068f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068f2:	4b14      	ldr	r3, [pc, #80]	@ (8006944 <prvHeapInit+0xb4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068fa:	4b12      	ldr	r3, [pc, #72]	@ (8006944 <prvHeapInit+0xb4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006910:	4b0c      	ldr	r3, [pc, #48]	@ (8006944 <prvHeapInit+0xb4>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4a0a      	ldr	r2, [pc, #40]	@ (8006948 <prvHeapInit+0xb8>)
 800691e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a09      	ldr	r2, [pc, #36]	@ (800694c <prvHeapInit+0xbc>)
 8006926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006928:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <prvHeapInit+0xc0>)
 800692a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800692e:	601a      	str	r2, [r3, #0]
}
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	20000f4c 	.word	0x20000f4c
 8006940:	20001b04 	.word	0x20001b04
 8006944:	20001b0c 	.word	0x20001b0c
 8006948:	20001b14 	.word	0x20001b14
 800694c:	20001b10 	.word	0x20001b10
 8006950:	20001b20 	.word	0x20001b20

08006954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800695c:	4b28      	ldr	r3, [pc, #160]	@ (8006a00 <prvInsertBlockIntoFreeList+0xac>)
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e002      	b.n	8006968 <prvInsertBlockIntoFreeList+0x14>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	d8f7      	bhi.n	8006962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	429a      	cmp	r2, r3
 8006982:	d108      	bne.n	8006996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	441a      	add	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d118      	bne.n	80069dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4b15      	ldr	r3, [pc, #84]	@ (8006a04 <prvInsertBlockIntoFreeList+0xb0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d00d      	beq.n	80069d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	441a      	add	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e008      	b.n	80069e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <prvInsertBlockIntoFreeList+0xb0>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	e003      	b.n	80069e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d002      	beq.n	80069f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20001b04 	.word	0x20001b04
 8006a04:	20001b0c 	.word	0x20001b0c

08006a08 <std>:
 8006a08:	2300      	movs	r3, #0
 8006a0a:	b510      	push	{r4, lr}
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a16:	6083      	str	r3, [r0, #8]
 8006a18:	8181      	strh	r1, [r0, #12]
 8006a1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a1c:	81c2      	strh	r2, [r0, #14]
 8006a1e:	6183      	str	r3, [r0, #24]
 8006a20:	4619      	mov	r1, r3
 8006a22:	2208      	movs	r2, #8
 8006a24:	305c      	adds	r0, #92	@ 0x5c
 8006a26:	f000 f9f9 	bl	8006e1c <memset>
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a60 <std+0x58>)
 8006a2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <std+0x5c>)
 8006a30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a32:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <std+0x60>)
 8006a34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <std+0x64>)
 8006a38:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a70 <std+0x68>)
 8006a3c:	6224      	str	r4, [r4, #32]
 8006a3e:	429c      	cmp	r4, r3
 8006a40:	d006      	beq.n	8006a50 <std+0x48>
 8006a42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a46:	4294      	cmp	r4, r2
 8006a48:	d002      	beq.n	8006a50 <std+0x48>
 8006a4a:	33d0      	adds	r3, #208	@ 0xd0
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	d105      	bne.n	8006a5c <std+0x54>
 8006a50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a58:	f000 baae 	b.w	8006fb8 <__retarget_lock_init_recursive>
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	bf00      	nop
 8006a60:	08006c6d 	.word	0x08006c6d
 8006a64:	08006c8f 	.word	0x08006c8f
 8006a68:	08006cc7 	.word	0x08006cc7
 8006a6c:	08006ceb 	.word	0x08006ceb
 8006a70:	20001b24 	.word	0x20001b24

08006a74 <stdio_exit_handler>:
 8006a74:	4a02      	ldr	r2, [pc, #8]	@ (8006a80 <stdio_exit_handler+0xc>)
 8006a76:	4903      	ldr	r1, [pc, #12]	@ (8006a84 <stdio_exit_handler+0x10>)
 8006a78:	4803      	ldr	r0, [pc, #12]	@ (8006a88 <stdio_exit_handler+0x14>)
 8006a7a:	f000 b869 	b.w	8006b50 <_fwalk_sglue>
 8006a7e:	bf00      	nop
 8006a80:	20000020 	.word	0x20000020
 8006a84:	08007875 	.word	0x08007875
 8006a88:	20000030 	.word	0x20000030

08006a8c <cleanup_stdio>:
 8006a8c:	6841      	ldr	r1, [r0, #4]
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <cleanup_stdio+0x34>)
 8006a90:	4299      	cmp	r1, r3
 8006a92:	b510      	push	{r4, lr}
 8006a94:	4604      	mov	r4, r0
 8006a96:	d001      	beq.n	8006a9c <cleanup_stdio+0x10>
 8006a98:	f000 feec 	bl	8007874 <_fflush_r>
 8006a9c:	68a1      	ldr	r1, [r4, #8]
 8006a9e:	4b09      	ldr	r3, [pc, #36]	@ (8006ac4 <cleanup_stdio+0x38>)
 8006aa0:	4299      	cmp	r1, r3
 8006aa2:	d002      	beq.n	8006aaa <cleanup_stdio+0x1e>
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fee5 	bl	8007874 <_fflush_r>
 8006aaa:	68e1      	ldr	r1, [r4, #12]
 8006aac:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <cleanup_stdio+0x3c>)
 8006aae:	4299      	cmp	r1, r3
 8006ab0:	d004      	beq.n	8006abc <cleanup_stdio+0x30>
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab8:	f000 bedc 	b.w	8007874 <_fflush_r>
 8006abc:	bd10      	pop	{r4, pc}
 8006abe:	bf00      	nop
 8006ac0:	20001b24 	.word	0x20001b24
 8006ac4:	20001b8c 	.word	0x20001b8c
 8006ac8:	20001bf4 	.word	0x20001bf4

08006acc <global_stdio_init.part.0>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	4b0b      	ldr	r3, [pc, #44]	@ (8006afc <global_stdio_init.part.0+0x30>)
 8006ad0:	4c0b      	ldr	r4, [pc, #44]	@ (8006b00 <global_stdio_init.part.0+0x34>)
 8006ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8006b04 <global_stdio_init.part.0+0x38>)
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2104      	movs	r1, #4
 8006adc:	f7ff ff94 	bl	8006a08 <std>
 8006ae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	2109      	movs	r1, #9
 8006ae8:	f7ff ff8e 	bl	8006a08 <std>
 8006aec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006af0:	2202      	movs	r2, #2
 8006af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af6:	2112      	movs	r1, #18
 8006af8:	f7ff bf86 	b.w	8006a08 <std>
 8006afc:	20001c5c 	.word	0x20001c5c
 8006b00:	20001b24 	.word	0x20001b24
 8006b04:	08006a75 	.word	0x08006a75

08006b08 <__sfp_lock_acquire>:
 8006b08:	4801      	ldr	r0, [pc, #4]	@ (8006b10 <__sfp_lock_acquire+0x8>)
 8006b0a:	f000 ba56 	b.w	8006fba <__retarget_lock_acquire_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20001c65 	.word	0x20001c65

08006b14 <__sfp_lock_release>:
 8006b14:	4801      	ldr	r0, [pc, #4]	@ (8006b1c <__sfp_lock_release+0x8>)
 8006b16:	f000 ba51 	b.w	8006fbc <__retarget_lock_release_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20001c65 	.word	0x20001c65

08006b20 <__sinit>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	4604      	mov	r4, r0
 8006b24:	f7ff fff0 	bl	8006b08 <__sfp_lock_acquire>
 8006b28:	6a23      	ldr	r3, [r4, #32]
 8006b2a:	b11b      	cbz	r3, 8006b34 <__sinit+0x14>
 8006b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b30:	f7ff bff0 	b.w	8006b14 <__sfp_lock_release>
 8006b34:	4b04      	ldr	r3, [pc, #16]	@ (8006b48 <__sinit+0x28>)
 8006b36:	6223      	str	r3, [r4, #32]
 8006b38:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <__sinit+0x2c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1f5      	bne.n	8006b2c <__sinit+0xc>
 8006b40:	f7ff ffc4 	bl	8006acc <global_stdio_init.part.0>
 8006b44:	e7f2      	b.n	8006b2c <__sinit+0xc>
 8006b46:	bf00      	nop
 8006b48:	08006a8d 	.word	0x08006a8d
 8006b4c:	20001c5c 	.word	0x20001c5c

08006b50 <_fwalk_sglue>:
 8006b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b54:	4607      	mov	r7, r0
 8006b56:	4688      	mov	r8, r1
 8006b58:	4614      	mov	r4, r2
 8006b5a:	2600      	movs	r6, #0
 8006b5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b60:	f1b9 0901 	subs.w	r9, r9, #1
 8006b64:	d505      	bpl.n	8006b72 <_fwalk_sglue+0x22>
 8006b66:	6824      	ldr	r4, [r4, #0]
 8006b68:	2c00      	cmp	r4, #0
 8006b6a:	d1f7      	bne.n	8006b5c <_fwalk_sglue+0xc>
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b72:	89ab      	ldrh	r3, [r5, #12]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d907      	bls.n	8006b88 <_fwalk_sglue+0x38>
 8006b78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	d003      	beq.n	8006b88 <_fwalk_sglue+0x38>
 8006b80:	4629      	mov	r1, r5
 8006b82:	4638      	mov	r0, r7
 8006b84:	47c0      	blx	r8
 8006b86:	4306      	orrs	r6, r0
 8006b88:	3568      	adds	r5, #104	@ 0x68
 8006b8a:	e7e9      	b.n	8006b60 <_fwalk_sglue+0x10>

08006b8c <iprintf>:
 8006b8c:	b40f      	push	{r0, r1, r2, r3}
 8006b8e:	b507      	push	{r0, r1, r2, lr}
 8006b90:	4906      	ldr	r1, [pc, #24]	@ (8006bac <iprintf+0x20>)
 8006b92:	ab04      	add	r3, sp, #16
 8006b94:	6808      	ldr	r0, [r1, #0]
 8006b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b9a:	6881      	ldr	r1, [r0, #8]
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	f000 fb3f 	bl	8007220 <_vfiprintf_r>
 8006ba2:	b003      	add	sp, #12
 8006ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ba8:	b004      	add	sp, #16
 8006baa:	4770      	bx	lr
 8006bac:	2000002c 	.word	0x2000002c

08006bb0 <_puts_r>:
 8006bb0:	6a03      	ldr	r3, [r0, #32]
 8006bb2:	b570      	push	{r4, r5, r6, lr}
 8006bb4:	6884      	ldr	r4, [r0, #8]
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	460e      	mov	r6, r1
 8006bba:	b90b      	cbnz	r3, 8006bc0 <_puts_r+0x10>
 8006bbc:	f7ff ffb0 	bl	8006b20 <__sinit>
 8006bc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bc2:	07db      	lsls	r3, r3, #31
 8006bc4:	d405      	bmi.n	8006bd2 <_puts_r+0x22>
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	0598      	lsls	r0, r3, #22
 8006bca:	d402      	bmi.n	8006bd2 <_puts_r+0x22>
 8006bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bce:	f000 f9f4 	bl	8006fba <__retarget_lock_acquire_recursive>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	0719      	lsls	r1, r3, #28
 8006bd6:	d502      	bpl.n	8006bde <_puts_r+0x2e>
 8006bd8:	6923      	ldr	r3, [r4, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d135      	bne.n	8006c4a <_puts_r+0x9a>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 f8c5 	bl	8006d70 <__swsetup_r>
 8006be6:	b380      	cbz	r0, 8006c4a <_puts_r+0x9a>
 8006be8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bee:	07da      	lsls	r2, r3, #31
 8006bf0:	d405      	bmi.n	8006bfe <_puts_r+0x4e>
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	059b      	lsls	r3, r3, #22
 8006bf6:	d402      	bmi.n	8006bfe <_puts_r+0x4e>
 8006bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bfa:	f000 f9df 	bl	8006fbc <__retarget_lock_release_recursive>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da04      	bge.n	8006c10 <_puts_r+0x60>
 8006c06:	69a2      	ldr	r2, [r4, #24]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	dc17      	bgt.n	8006c3c <_puts_r+0x8c>
 8006c0c:	290a      	cmp	r1, #10
 8006c0e:	d015      	beq.n	8006c3c <_puts_r+0x8c>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	6022      	str	r2, [r4, #0]
 8006c16:	7019      	strb	r1, [r3, #0]
 8006c18:	68a3      	ldr	r3, [r4, #8]
 8006c1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	60a3      	str	r3, [r4, #8]
 8006c22:	2900      	cmp	r1, #0
 8006c24:	d1ed      	bne.n	8006c02 <_puts_r+0x52>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	da11      	bge.n	8006c4e <_puts_r+0x9e>
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	210a      	movs	r1, #10
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 f85f 	bl	8006cf2 <__swbuf_r>
 8006c34:	3001      	adds	r0, #1
 8006c36:	d0d7      	beq.n	8006be8 <_puts_r+0x38>
 8006c38:	250a      	movs	r5, #10
 8006c3a:	e7d7      	b.n	8006bec <_puts_r+0x3c>
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f857 	bl	8006cf2 <__swbuf_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d1e7      	bne.n	8006c18 <_puts_r+0x68>
 8006c48:	e7ce      	b.n	8006be8 <_puts_r+0x38>
 8006c4a:	3e01      	subs	r6, #1
 8006c4c:	e7e4      	b.n	8006c18 <_puts_r+0x68>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	6022      	str	r2, [r4, #0]
 8006c54:	220a      	movs	r2, #10
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	e7ee      	b.n	8006c38 <_puts_r+0x88>
	...

08006c5c <puts>:
 8006c5c:	4b02      	ldr	r3, [pc, #8]	@ (8006c68 <puts+0xc>)
 8006c5e:	4601      	mov	r1, r0
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	f7ff bfa5 	b.w	8006bb0 <_puts_r>
 8006c66:	bf00      	nop
 8006c68:	2000002c 	.word	0x2000002c

08006c6c <__sread>:
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	460c      	mov	r4, r1
 8006c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c74:	f000 f952 	bl	8006f1c <_read_r>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	bfab      	itete	ge
 8006c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c80:	181b      	addge	r3, r3, r0
 8006c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c86:	bfac      	ite	ge
 8006c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c8a:	81a3      	strhlt	r3, [r4, #12]
 8006c8c:	bd10      	pop	{r4, pc}

08006c8e <__swrite>:
 8006c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c92:	461f      	mov	r7, r3
 8006c94:	898b      	ldrh	r3, [r1, #12]
 8006c96:	05db      	lsls	r3, r3, #23
 8006c98:	4605      	mov	r5, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	4616      	mov	r6, r2
 8006c9e:	d505      	bpl.n	8006cac <__swrite+0x1e>
 8006ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f000 f926 	bl	8006ef8 <_lseek_r>
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	4632      	mov	r2, r6
 8006cba:	463b      	mov	r3, r7
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc2:	f000 b93d 	b.w	8006f40 <_write_r>

08006cc6 <__sseek>:
 8006cc6:	b510      	push	{r4, lr}
 8006cc8:	460c      	mov	r4, r1
 8006cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cce:	f000 f913 	bl	8006ef8 <_lseek_r>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	bf15      	itete	ne
 8006cd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ce2:	81a3      	strheq	r3, [r4, #12]
 8006ce4:	bf18      	it	ne
 8006ce6:	81a3      	strhne	r3, [r4, #12]
 8006ce8:	bd10      	pop	{r4, pc}

08006cea <__sclose>:
 8006cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cee:	f000 b89d 	b.w	8006e2c <_close_r>

08006cf2 <__swbuf_r>:
 8006cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf4:	460e      	mov	r6, r1
 8006cf6:	4614      	mov	r4, r2
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	b118      	cbz	r0, 8006d04 <__swbuf_r+0x12>
 8006cfc:	6a03      	ldr	r3, [r0, #32]
 8006cfe:	b90b      	cbnz	r3, 8006d04 <__swbuf_r+0x12>
 8006d00:	f7ff ff0e 	bl	8006b20 <__sinit>
 8006d04:	69a3      	ldr	r3, [r4, #24]
 8006d06:	60a3      	str	r3, [r4, #8]
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	071a      	lsls	r2, r3, #28
 8006d0c:	d501      	bpl.n	8006d12 <__swbuf_r+0x20>
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	b943      	cbnz	r3, 8006d24 <__swbuf_r+0x32>
 8006d12:	4621      	mov	r1, r4
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 f82b 	bl	8006d70 <__swsetup_r>
 8006d1a:	b118      	cbz	r0, 8006d24 <__swbuf_r+0x32>
 8006d1c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006d20:	4638      	mov	r0, r7
 8006d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	6922      	ldr	r2, [r4, #16]
 8006d28:	1a98      	subs	r0, r3, r2
 8006d2a:	6963      	ldr	r3, [r4, #20]
 8006d2c:	b2f6      	uxtb	r6, r6
 8006d2e:	4283      	cmp	r3, r0
 8006d30:	4637      	mov	r7, r6
 8006d32:	dc05      	bgt.n	8006d40 <__swbuf_r+0x4e>
 8006d34:	4621      	mov	r1, r4
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 fd9c 	bl	8007874 <_fflush_r>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d1ed      	bne.n	8006d1c <__swbuf_r+0x2a>
 8006d40:	68a3      	ldr	r3, [r4, #8]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	60a3      	str	r3, [r4, #8]
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	6022      	str	r2, [r4, #0]
 8006d4c:	701e      	strb	r6, [r3, #0]
 8006d4e:	6962      	ldr	r2, [r4, #20]
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d004      	beq.n	8006d60 <__swbuf_r+0x6e>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	07db      	lsls	r3, r3, #31
 8006d5a:	d5e1      	bpl.n	8006d20 <__swbuf_r+0x2e>
 8006d5c:	2e0a      	cmp	r6, #10
 8006d5e:	d1df      	bne.n	8006d20 <__swbuf_r+0x2e>
 8006d60:	4621      	mov	r1, r4
 8006d62:	4628      	mov	r0, r5
 8006d64:	f000 fd86 	bl	8007874 <_fflush_r>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d0d9      	beq.n	8006d20 <__swbuf_r+0x2e>
 8006d6c:	e7d6      	b.n	8006d1c <__swbuf_r+0x2a>
	...

08006d70 <__swsetup_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4b29      	ldr	r3, [pc, #164]	@ (8006e18 <__swsetup_r+0xa8>)
 8006d74:	4605      	mov	r5, r0
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	460c      	mov	r4, r1
 8006d7a:	b118      	cbz	r0, 8006d84 <__swsetup_r+0x14>
 8006d7c:	6a03      	ldr	r3, [r0, #32]
 8006d7e:	b90b      	cbnz	r3, 8006d84 <__swsetup_r+0x14>
 8006d80:	f7ff fece 	bl	8006b20 <__sinit>
 8006d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d88:	0719      	lsls	r1, r3, #28
 8006d8a:	d422      	bmi.n	8006dd2 <__swsetup_r+0x62>
 8006d8c:	06da      	lsls	r2, r3, #27
 8006d8e:	d407      	bmi.n	8006da0 <__swsetup_r+0x30>
 8006d90:	2209      	movs	r2, #9
 8006d92:	602a      	str	r2, [r5, #0]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d9e:	e033      	b.n	8006e08 <__swsetup_r+0x98>
 8006da0:	0758      	lsls	r0, r3, #29
 8006da2:	d512      	bpl.n	8006dca <__swsetup_r+0x5a>
 8006da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006da6:	b141      	cbz	r1, 8006dba <__swsetup_r+0x4a>
 8006da8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dac:	4299      	cmp	r1, r3
 8006dae:	d002      	beq.n	8006db6 <__swsetup_r+0x46>
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 f913 	bl	8006fdc <_free_r>
 8006db6:	2300      	movs	r3, #0
 8006db8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	b94b      	cbnz	r3, 8006dea <__swsetup_r+0x7a>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de0:	d003      	beq.n	8006dea <__swsetup_r+0x7a>
 8006de2:	4621      	mov	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 fd93 	bl	8007910 <__smakebuf_r>
 8006dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dee:	f013 0201 	ands.w	r2, r3, #1
 8006df2:	d00a      	beq.n	8006e0a <__swsetup_r+0x9a>
 8006df4:	2200      	movs	r2, #0
 8006df6:	60a2      	str	r2, [r4, #8]
 8006df8:	6962      	ldr	r2, [r4, #20]
 8006dfa:	4252      	negs	r2, r2
 8006dfc:	61a2      	str	r2, [r4, #24]
 8006dfe:	6922      	ldr	r2, [r4, #16]
 8006e00:	b942      	cbnz	r2, 8006e14 <__swsetup_r+0xa4>
 8006e02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e06:	d1c5      	bne.n	8006d94 <__swsetup_r+0x24>
 8006e08:	bd38      	pop	{r3, r4, r5, pc}
 8006e0a:	0799      	lsls	r1, r3, #30
 8006e0c:	bf58      	it	pl
 8006e0e:	6962      	ldrpl	r2, [r4, #20]
 8006e10:	60a2      	str	r2, [r4, #8]
 8006e12:	e7f4      	b.n	8006dfe <__swsetup_r+0x8e>
 8006e14:	2000      	movs	r0, #0
 8006e16:	e7f7      	b.n	8006e08 <__swsetup_r+0x98>
 8006e18:	2000002c 	.word	0x2000002c

08006e1c <memset>:
 8006e1c:	4402      	add	r2, r0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d100      	bne.n	8006e26 <memset+0xa>
 8006e24:	4770      	bx	lr
 8006e26:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2a:	e7f9      	b.n	8006e20 <memset+0x4>

08006e2c <_close_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d06      	ldr	r5, [pc, #24]	@ (8006e48 <_close_r+0x1c>)
 8006e30:	2300      	movs	r3, #0
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7f9 fe7c 	bl	8000b34 <_close>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_close_r+0x1a>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_close_r+0x1a>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20001c60 	.word	0x20001c60

08006e4c <_reclaim_reent>:
 8006e4c:	4b29      	ldr	r3, [pc, #164]	@ (8006ef4 <_reclaim_reent+0xa8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4283      	cmp	r3, r0
 8006e52:	b570      	push	{r4, r5, r6, lr}
 8006e54:	4604      	mov	r4, r0
 8006e56:	d04b      	beq.n	8006ef0 <_reclaim_reent+0xa4>
 8006e58:	69c3      	ldr	r3, [r0, #28]
 8006e5a:	b1ab      	cbz	r3, 8006e88 <_reclaim_reent+0x3c>
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	b16b      	cbz	r3, 8006e7c <_reclaim_reent+0x30>
 8006e60:	2500      	movs	r5, #0
 8006e62:	69e3      	ldr	r3, [r4, #28]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	5959      	ldr	r1, [r3, r5]
 8006e68:	2900      	cmp	r1, #0
 8006e6a:	d13b      	bne.n	8006ee4 <_reclaim_reent+0x98>
 8006e6c:	3504      	adds	r5, #4
 8006e6e:	2d80      	cmp	r5, #128	@ 0x80
 8006e70:	d1f7      	bne.n	8006e62 <_reclaim_reent+0x16>
 8006e72:	69e3      	ldr	r3, [r4, #28]
 8006e74:	4620      	mov	r0, r4
 8006e76:	68d9      	ldr	r1, [r3, #12]
 8006e78:	f000 f8b0 	bl	8006fdc <_free_r>
 8006e7c:	69e3      	ldr	r3, [r4, #28]
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	b111      	cbz	r1, 8006e88 <_reclaim_reent+0x3c>
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 f8aa 	bl	8006fdc <_free_r>
 8006e88:	6961      	ldr	r1, [r4, #20]
 8006e8a:	b111      	cbz	r1, 8006e92 <_reclaim_reent+0x46>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f000 f8a5 	bl	8006fdc <_free_r>
 8006e92:	69e1      	ldr	r1, [r4, #28]
 8006e94:	b111      	cbz	r1, 8006e9c <_reclaim_reent+0x50>
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 f8a0 	bl	8006fdc <_free_r>
 8006e9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e9e:	b111      	cbz	r1, 8006ea6 <_reclaim_reent+0x5a>
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 f89b 	bl	8006fdc <_free_r>
 8006ea6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ea8:	b111      	cbz	r1, 8006eb0 <_reclaim_reent+0x64>
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 f896 	bl	8006fdc <_free_r>
 8006eb0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006eb2:	b111      	cbz	r1, 8006eba <_reclaim_reent+0x6e>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 f891 	bl	8006fdc <_free_r>
 8006eba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ebc:	b111      	cbz	r1, 8006ec4 <_reclaim_reent+0x78>
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 f88c 	bl	8006fdc <_free_r>
 8006ec4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006ec6:	b111      	cbz	r1, 8006ece <_reclaim_reent+0x82>
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 f887 	bl	8006fdc <_free_r>
 8006ece:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006ed0:	b111      	cbz	r1, 8006ed8 <_reclaim_reent+0x8c>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f882 	bl	8006fdc <_free_r>
 8006ed8:	6a23      	ldr	r3, [r4, #32]
 8006eda:	b14b      	cbz	r3, 8006ef0 <_reclaim_reent+0xa4>
 8006edc:	4620      	mov	r0, r4
 8006ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ee2:	4718      	bx	r3
 8006ee4:	680e      	ldr	r6, [r1, #0]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 f878 	bl	8006fdc <_free_r>
 8006eec:	4631      	mov	r1, r6
 8006eee:	e7bb      	b.n	8006e68 <_reclaim_reent+0x1c>
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
 8006ef2:	bf00      	nop
 8006ef4:	2000002c 	.word	0x2000002c

08006ef8 <_lseek_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d07      	ldr	r5, [pc, #28]	@ (8006f18 <_lseek_r+0x20>)
 8006efc:	4604      	mov	r4, r0
 8006efe:	4608      	mov	r0, r1
 8006f00:	4611      	mov	r1, r2
 8006f02:	2200      	movs	r2, #0
 8006f04:	602a      	str	r2, [r5, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f7f9 fe3b 	bl	8000b82 <_lseek>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_lseek_r+0x1e>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_lseek_r+0x1e>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20001c60 	.word	0x20001c60

08006f1c <_read_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	@ (8006f3c <_read_r+0x20>)
 8006f20:	4604      	mov	r4, r0
 8006f22:	4608      	mov	r0, r1
 8006f24:	4611      	mov	r1, r2
 8006f26:	2200      	movs	r2, #0
 8006f28:	602a      	str	r2, [r5, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f7f9 fdce 	bl	8000acc <_read>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_read_r+0x1e>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_read_r+0x1e>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	20001c60 	.word	0x20001c60

08006f40 <_write_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d07      	ldr	r5, [pc, #28]	@ (8006f60 <_write_r+0x20>)
 8006f44:	4604      	mov	r4, r0
 8006f46:	4608      	mov	r0, r1
 8006f48:	4611      	mov	r1, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	602a      	str	r2, [r5, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f7f9 fdda 	bl	8000b08 <_write>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_write_r+0x1e>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_write_r+0x1e>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	20001c60 	.word	0x20001c60

08006f64 <__errno>:
 8006f64:	4b01      	ldr	r3, [pc, #4]	@ (8006f6c <__errno+0x8>)
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	2000002c 	.word	0x2000002c

08006f70 <__libc_init_array>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	4d0d      	ldr	r5, [pc, #52]	@ (8006fa8 <__libc_init_array+0x38>)
 8006f74:	4c0d      	ldr	r4, [pc, #52]	@ (8006fac <__libc_init_array+0x3c>)
 8006f76:	1b64      	subs	r4, r4, r5
 8006f78:	10a4      	asrs	r4, r4, #2
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	42a6      	cmp	r6, r4
 8006f7e:	d109      	bne.n	8006f94 <__libc_init_array+0x24>
 8006f80:	4d0b      	ldr	r5, [pc, #44]	@ (8006fb0 <__libc_init_array+0x40>)
 8006f82:	4c0c      	ldr	r4, [pc, #48]	@ (8006fb4 <__libc_init_array+0x44>)
 8006f84:	f000 fd32 	bl	80079ec <_init>
 8006f88:	1b64      	subs	r4, r4, r5
 8006f8a:	10a4      	asrs	r4, r4, #2
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	42a6      	cmp	r6, r4
 8006f90:	d105      	bne.n	8006f9e <__libc_init_array+0x2e>
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f98:	4798      	blx	r3
 8006f9a:	3601      	adds	r6, #1
 8006f9c:	e7ee      	b.n	8006f7c <__libc_init_array+0xc>
 8006f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa2:	4798      	blx	r3
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	e7f2      	b.n	8006f8e <__libc_init_array+0x1e>
 8006fa8:	08007bd4 	.word	0x08007bd4
 8006fac:	08007bd4 	.word	0x08007bd4
 8006fb0:	08007bd4 	.word	0x08007bd4
 8006fb4:	08007bd8 	.word	0x08007bd8

08006fb8 <__retarget_lock_init_recursive>:
 8006fb8:	4770      	bx	lr

08006fba <__retarget_lock_acquire_recursive>:
 8006fba:	4770      	bx	lr

08006fbc <__retarget_lock_release_recursive>:
 8006fbc:	4770      	bx	lr

08006fbe <memcpy>:
 8006fbe:	440a      	add	r2, r1
 8006fc0:	4291      	cmp	r1, r2
 8006fc2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006fc6:	d100      	bne.n	8006fca <memcpy+0xc>
 8006fc8:	4770      	bx	lr
 8006fca:	b510      	push	{r4, lr}
 8006fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fd4:	4291      	cmp	r1, r2
 8006fd6:	d1f9      	bne.n	8006fcc <memcpy+0xe>
 8006fd8:	bd10      	pop	{r4, pc}
	...

08006fdc <_free_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4605      	mov	r5, r0
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	d041      	beq.n	8007068 <_free_r+0x8c>
 8006fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe8:	1f0c      	subs	r4, r1, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bfb8      	it	lt
 8006fee:	18e4      	addlt	r4, r4, r3
 8006ff0:	f000 f8e0 	bl	80071b4 <__malloc_lock>
 8006ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800706c <_free_r+0x90>)
 8006ff6:	6813      	ldr	r3, [r2, #0]
 8006ff8:	b933      	cbnz	r3, 8007008 <_free_r+0x2c>
 8006ffa:	6063      	str	r3, [r4, #4]
 8006ffc:	6014      	str	r4, [r2, #0]
 8006ffe:	4628      	mov	r0, r5
 8007000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007004:	f000 b8dc 	b.w	80071c0 <__malloc_unlock>
 8007008:	42a3      	cmp	r3, r4
 800700a:	d908      	bls.n	800701e <_free_r+0x42>
 800700c:	6820      	ldr	r0, [r4, #0]
 800700e:	1821      	adds	r1, r4, r0
 8007010:	428b      	cmp	r3, r1
 8007012:	bf01      	itttt	eq
 8007014:	6819      	ldreq	r1, [r3, #0]
 8007016:	685b      	ldreq	r3, [r3, #4]
 8007018:	1809      	addeq	r1, r1, r0
 800701a:	6021      	streq	r1, [r4, #0]
 800701c:	e7ed      	b.n	8006ffa <_free_r+0x1e>
 800701e:	461a      	mov	r2, r3
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	b10b      	cbz	r3, 8007028 <_free_r+0x4c>
 8007024:	42a3      	cmp	r3, r4
 8007026:	d9fa      	bls.n	800701e <_free_r+0x42>
 8007028:	6811      	ldr	r1, [r2, #0]
 800702a:	1850      	adds	r0, r2, r1
 800702c:	42a0      	cmp	r0, r4
 800702e:	d10b      	bne.n	8007048 <_free_r+0x6c>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	4401      	add	r1, r0
 8007034:	1850      	adds	r0, r2, r1
 8007036:	4283      	cmp	r3, r0
 8007038:	6011      	str	r1, [r2, #0]
 800703a:	d1e0      	bne.n	8006ffe <_free_r+0x22>
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	6053      	str	r3, [r2, #4]
 8007042:	4408      	add	r0, r1
 8007044:	6010      	str	r0, [r2, #0]
 8007046:	e7da      	b.n	8006ffe <_free_r+0x22>
 8007048:	d902      	bls.n	8007050 <_free_r+0x74>
 800704a:	230c      	movs	r3, #12
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	e7d6      	b.n	8006ffe <_free_r+0x22>
 8007050:	6820      	ldr	r0, [r4, #0]
 8007052:	1821      	adds	r1, r4, r0
 8007054:	428b      	cmp	r3, r1
 8007056:	bf04      	itt	eq
 8007058:	6819      	ldreq	r1, [r3, #0]
 800705a:	685b      	ldreq	r3, [r3, #4]
 800705c:	6063      	str	r3, [r4, #4]
 800705e:	bf04      	itt	eq
 8007060:	1809      	addeq	r1, r1, r0
 8007062:	6021      	streq	r1, [r4, #0]
 8007064:	6054      	str	r4, [r2, #4]
 8007066:	e7ca      	b.n	8006ffe <_free_r+0x22>
 8007068:	bd38      	pop	{r3, r4, r5, pc}
 800706a:	bf00      	nop
 800706c:	20001c6c 	.word	0x20001c6c

08007070 <sbrk_aligned>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4e0f      	ldr	r6, [pc, #60]	@ (80070b0 <sbrk_aligned+0x40>)
 8007074:	460c      	mov	r4, r1
 8007076:	6831      	ldr	r1, [r6, #0]
 8007078:	4605      	mov	r5, r0
 800707a:	b911      	cbnz	r1, 8007082 <sbrk_aligned+0x12>
 800707c:	f000 fca6 	bl	80079cc <_sbrk_r>
 8007080:	6030      	str	r0, [r6, #0]
 8007082:	4621      	mov	r1, r4
 8007084:	4628      	mov	r0, r5
 8007086:	f000 fca1 	bl	80079cc <_sbrk_r>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	d103      	bne.n	8007096 <sbrk_aligned+0x26>
 800708e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007092:	4620      	mov	r0, r4
 8007094:	bd70      	pop	{r4, r5, r6, pc}
 8007096:	1cc4      	adds	r4, r0, #3
 8007098:	f024 0403 	bic.w	r4, r4, #3
 800709c:	42a0      	cmp	r0, r4
 800709e:	d0f8      	beq.n	8007092 <sbrk_aligned+0x22>
 80070a0:	1a21      	subs	r1, r4, r0
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 fc92 	bl	80079cc <_sbrk_r>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d1f2      	bne.n	8007092 <sbrk_aligned+0x22>
 80070ac:	e7ef      	b.n	800708e <sbrk_aligned+0x1e>
 80070ae:	bf00      	nop
 80070b0:	20001c68 	.word	0x20001c68

080070b4 <_malloc_r>:
 80070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	1ccd      	adds	r5, r1, #3
 80070ba:	f025 0503 	bic.w	r5, r5, #3
 80070be:	3508      	adds	r5, #8
 80070c0:	2d0c      	cmp	r5, #12
 80070c2:	bf38      	it	cc
 80070c4:	250c      	movcc	r5, #12
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	4606      	mov	r6, r0
 80070ca:	db01      	blt.n	80070d0 <_malloc_r+0x1c>
 80070cc:	42a9      	cmp	r1, r5
 80070ce:	d904      	bls.n	80070da <_malloc_r+0x26>
 80070d0:	230c      	movs	r3, #12
 80070d2:	6033      	str	r3, [r6, #0]
 80070d4:	2000      	movs	r0, #0
 80070d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071b0 <_malloc_r+0xfc>
 80070de:	f000 f869 	bl	80071b4 <__malloc_lock>
 80070e2:	f8d8 3000 	ldr.w	r3, [r8]
 80070e6:	461c      	mov	r4, r3
 80070e8:	bb44      	cbnz	r4, 800713c <_malloc_r+0x88>
 80070ea:	4629      	mov	r1, r5
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff ffbf 	bl	8007070 <sbrk_aligned>
 80070f2:	1c43      	adds	r3, r0, #1
 80070f4:	4604      	mov	r4, r0
 80070f6:	d158      	bne.n	80071aa <_malloc_r+0xf6>
 80070f8:	f8d8 4000 	ldr.w	r4, [r8]
 80070fc:	4627      	mov	r7, r4
 80070fe:	2f00      	cmp	r7, #0
 8007100:	d143      	bne.n	800718a <_malloc_r+0xd6>
 8007102:	2c00      	cmp	r4, #0
 8007104:	d04b      	beq.n	800719e <_malloc_r+0xea>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	4639      	mov	r1, r7
 800710a:	4630      	mov	r0, r6
 800710c:	eb04 0903 	add.w	r9, r4, r3
 8007110:	f000 fc5c 	bl	80079cc <_sbrk_r>
 8007114:	4581      	cmp	r9, r0
 8007116:	d142      	bne.n	800719e <_malloc_r+0xea>
 8007118:	6821      	ldr	r1, [r4, #0]
 800711a:	1a6d      	subs	r5, r5, r1
 800711c:	4629      	mov	r1, r5
 800711e:	4630      	mov	r0, r6
 8007120:	f7ff ffa6 	bl	8007070 <sbrk_aligned>
 8007124:	3001      	adds	r0, #1
 8007126:	d03a      	beq.n	800719e <_malloc_r+0xea>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	442b      	add	r3, r5
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	f8d8 3000 	ldr.w	r3, [r8]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	bb62      	cbnz	r2, 8007190 <_malloc_r+0xdc>
 8007136:	f8c8 7000 	str.w	r7, [r8]
 800713a:	e00f      	b.n	800715c <_malloc_r+0xa8>
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	1b52      	subs	r2, r2, r5
 8007140:	d420      	bmi.n	8007184 <_malloc_r+0xd0>
 8007142:	2a0b      	cmp	r2, #11
 8007144:	d917      	bls.n	8007176 <_malloc_r+0xc2>
 8007146:	1961      	adds	r1, r4, r5
 8007148:	42a3      	cmp	r3, r4
 800714a:	6025      	str	r5, [r4, #0]
 800714c:	bf18      	it	ne
 800714e:	6059      	strne	r1, [r3, #4]
 8007150:	6863      	ldr	r3, [r4, #4]
 8007152:	bf08      	it	eq
 8007154:	f8c8 1000 	streq.w	r1, [r8]
 8007158:	5162      	str	r2, [r4, r5]
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	4630      	mov	r0, r6
 800715e:	f000 f82f 	bl	80071c0 <__malloc_unlock>
 8007162:	f104 000b 	add.w	r0, r4, #11
 8007166:	1d23      	adds	r3, r4, #4
 8007168:	f020 0007 	bic.w	r0, r0, #7
 800716c:	1ac2      	subs	r2, r0, r3
 800716e:	bf1c      	itt	ne
 8007170:	1a1b      	subne	r3, r3, r0
 8007172:	50a3      	strne	r3, [r4, r2]
 8007174:	e7af      	b.n	80070d6 <_malloc_r+0x22>
 8007176:	6862      	ldr	r2, [r4, #4]
 8007178:	42a3      	cmp	r3, r4
 800717a:	bf0c      	ite	eq
 800717c:	f8c8 2000 	streq.w	r2, [r8]
 8007180:	605a      	strne	r2, [r3, #4]
 8007182:	e7eb      	b.n	800715c <_malloc_r+0xa8>
 8007184:	4623      	mov	r3, r4
 8007186:	6864      	ldr	r4, [r4, #4]
 8007188:	e7ae      	b.n	80070e8 <_malloc_r+0x34>
 800718a:	463c      	mov	r4, r7
 800718c:	687f      	ldr	r7, [r7, #4]
 800718e:	e7b6      	b.n	80070fe <_malloc_r+0x4a>
 8007190:	461a      	mov	r2, r3
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	42a3      	cmp	r3, r4
 8007196:	d1fb      	bne.n	8007190 <_malloc_r+0xdc>
 8007198:	2300      	movs	r3, #0
 800719a:	6053      	str	r3, [r2, #4]
 800719c:	e7de      	b.n	800715c <_malloc_r+0xa8>
 800719e:	230c      	movs	r3, #12
 80071a0:	6033      	str	r3, [r6, #0]
 80071a2:	4630      	mov	r0, r6
 80071a4:	f000 f80c 	bl	80071c0 <__malloc_unlock>
 80071a8:	e794      	b.n	80070d4 <_malloc_r+0x20>
 80071aa:	6005      	str	r5, [r0, #0]
 80071ac:	e7d6      	b.n	800715c <_malloc_r+0xa8>
 80071ae:	bf00      	nop
 80071b0:	20001c6c 	.word	0x20001c6c

080071b4 <__malloc_lock>:
 80071b4:	4801      	ldr	r0, [pc, #4]	@ (80071bc <__malloc_lock+0x8>)
 80071b6:	f7ff bf00 	b.w	8006fba <__retarget_lock_acquire_recursive>
 80071ba:	bf00      	nop
 80071bc:	20001c64 	.word	0x20001c64

080071c0 <__malloc_unlock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	@ (80071c8 <__malloc_unlock+0x8>)
 80071c2:	f7ff befb 	b.w	8006fbc <__retarget_lock_release_recursive>
 80071c6:	bf00      	nop
 80071c8:	20001c64 	.word	0x20001c64

080071cc <__sfputc_r>:
 80071cc:	6893      	ldr	r3, [r2, #8]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	b410      	push	{r4}
 80071d4:	6093      	str	r3, [r2, #8]
 80071d6:	da08      	bge.n	80071ea <__sfputc_r+0x1e>
 80071d8:	6994      	ldr	r4, [r2, #24]
 80071da:	42a3      	cmp	r3, r4
 80071dc:	db01      	blt.n	80071e2 <__sfputc_r+0x16>
 80071de:	290a      	cmp	r1, #10
 80071e0:	d103      	bne.n	80071ea <__sfputc_r+0x1e>
 80071e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e6:	f7ff bd84 	b.w	8006cf2 <__swbuf_r>
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	1c58      	adds	r0, r3, #1
 80071ee:	6010      	str	r0, [r2, #0]
 80071f0:	7019      	strb	r1, [r3, #0]
 80071f2:	4608      	mov	r0, r1
 80071f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <__sfputs_r>:
 80071fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fc:	4606      	mov	r6, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	4614      	mov	r4, r2
 8007202:	18d5      	adds	r5, r2, r3
 8007204:	42ac      	cmp	r4, r5
 8007206:	d101      	bne.n	800720c <__sfputs_r+0x12>
 8007208:	2000      	movs	r0, #0
 800720a:	e007      	b.n	800721c <__sfputs_r+0x22>
 800720c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007210:	463a      	mov	r2, r7
 8007212:	4630      	mov	r0, r6
 8007214:	f7ff ffda 	bl	80071cc <__sfputc_r>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d1f3      	bne.n	8007204 <__sfputs_r+0xa>
 800721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007220 <_vfiprintf_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	460d      	mov	r5, r1
 8007226:	b09d      	sub	sp, #116	@ 0x74
 8007228:	4614      	mov	r4, r2
 800722a:	4698      	mov	r8, r3
 800722c:	4606      	mov	r6, r0
 800722e:	b118      	cbz	r0, 8007238 <_vfiprintf_r+0x18>
 8007230:	6a03      	ldr	r3, [r0, #32]
 8007232:	b90b      	cbnz	r3, 8007238 <_vfiprintf_r+0x18>
 8007234:	f7ff fc74 	bl	8006b20 <__sinit>
 8007238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800723a:	07d9      	lsls	r1, r3, #31
 800723c:	d405      	bmi.n	800724a <_vfiprintf_r+0x2a>
 800723e:	89ab      	ldrh	r3, [r5, #12]
 8007240:	059a      	lsls	r2, r3, #22
 8007242:	d402      	bmi.n	800724a <_vfiprintf_r+0x2a>
 8007244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007246:	f7ff feb8 	bl	8006fba <__retarget_lock_acquire_recursive>
 800724a:	89ab      	ldrh	r3, [r5, #12]
 800724c:	071b      	lsls	r3, r3, #28
 800724e:	d501      	bpl.n	8007254 <_vfiprintf_r+0x34>
 8007250:	692b      	ldr	r3, [r5, #16]
 8007252:	b99b      	cbnz	r3, 800727c <_vfiprintf_r+0x5c>
 8007254:	4629      	mov	r1, r5
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff fd8a 	bl	8006d70 <__swsetup_r>
 800725c:	b170      	cbz	r0, 800727c <_vfiprintf_r+0x5c>
 800725e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007260:	07dc      	lsls	r4, r3, #31
 8007262:	d504      	bpl.n	800726e <_vfiprintf_r+0x4e>
 8007264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007268:	b01d      	add	sp, #116	@ 0x74
 800726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726e:	89ab      	ldrh	r3, [r5, #12]
 8007270:	0598      	lsls	r0, r3, #22
 8007272:	d4f7      	bmi.n	8007264 <_vfiprintf_r+0x44>
 8007274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007276:	f7ff fea1 	bl	8006fbc <__retarget_lock_release_recursive>
 800727a:	e7f3      	b.n	8007264 <_vfiprintf_r+0x44>
 800727c:	2300      	movs	r3, #0
 800727e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007280:	2320      	movs	r3, #32
 8007282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007286:	f8cd 800c 	str.w	r8, [sp, #12]
 800728a:	2330      	movs	r3, #48	@ 0x30
 800728c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800743c <_vfiprintf_r+0x21c>
 8007290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007294:	f04f 0901 	mov.w	r9, #1
 8007298:	4623      	mov	r3, r4
 800729a:	469a      	mov	sl, r3
 800729c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072a0:	b10a      	cbz	r2, 80072a6 <_vfiprintf_r+0x86>
 80072a2:	2a25      	cmp	r2, #37	@ 0x25
 80072a4:	d1f9      	bne.n	800729a <_vfiprintf_r+0x7a>
 80072a6:	ebba 0b04 	subs.w	fp, sl, r4
 80072aa:	d00b      	beq.n	80072c4 <_vfiprintf_r+0xa4>
 80072ac:	465b      	mov	r3, fp
 80072ae:	4622      	mov	r2, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ffa1 	bl	80071fa <__sfputs_r>
 80072b8:	3001      	adds	r0, #1
 80072ba:	f000 80a7 	beq.w	800740c <_vfiprintf_r+0x1ec>
 80072be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072c0:	445a      	add	r2, fp
 80072c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80072c4:	f89a 3000 	ldrb.w	r3, [sl]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 809f 	beq.w	800740c <_vfiprintf_r+0x1ec>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d8:	f10a 0a01 	add.w	sl, sl, #1
 80072dc:	9304      	str	r3, [sp, #16]
 80072de:	9307      	str	r3, [sp, #28]
 80072e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80072e6:	4654      	mov	r4, sl
 80072e8:	2205      	movs	r2, #5
 80072ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ee:	4853      	ldr	r0, [pc, #332]	@ (800743c <_vfiprintf_r+0x21c>)
 80072f0:	f7f8 ff7e 	bl	80001f0 <memchr>
 80072f4:	9a04      	ldr	r2, [sp, #16]
 80072f6:	b9d8      	cbnz	r0, 8007330 <_vfiprintf_r+0x110>
 80072f8:	06d1      	lsls	r1, r2, #27
 80072fa:	bf44      	itt	mi
 80072fc:	2320      	movmi	r3, #32
 80072fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007302:	0713      	lsls	r3, r2, #28
 8007304:	bf44      	itt	mi
 8007306:	232b      	movmi	r3, #43	@ 0x2b
 8007308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800730c:	f89a 3000 	ldrb.w	r3, [sl]
 8007310:	2b2a      	cmp	r3, #42	@ 0x2a
 8007312:	d015      	beq.n	8007340 <_vfiprintf_r+0x120>
 8007314:	9a07      	ldr	r2, [sp, #28]
 8007316:	4654      	mov	r4, sl
 8007318:	2000      	movs	r0, #0
 800731a:	f04f 0c0a 	mov.w	ip, #10
 800731e:	4621      	mov	r1, r4
 8007320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007324:	3b30      	subs	r3, #48	@ 0x30
 8007326:	2b09      	cmp	r3, #9
 8007328:	d94b      	bls.n	80073c2 <_vfiprintf_r+0x1a2>
 800732a:	b1b0      	cbz	r0, 800735a <_vfiprintf_r+0x13a>
 800732c:	9207      	str	r2, [sp, #28]
 800732e:	e014      	b.n	800735a <_vfiprintf_r+0x13a>
 8007330:	eba0 0308 	sub.w	r3, r0, r8
 8007334:	fa09 f303 	lsl.w	r3, r9, r3
 8007338:	4313      	orrs	r3, r2
 800733a:	9304      	str	r3, [sp, #16]
 800733c:	46a2      	mov	sl, r4
 800733e:	e7d2      	b.n	80072e6 <_vfiprintf_r+0xc6>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	1d19      	adds	r1, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9103      	str	r1, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfbb      	ittet	lt
 800734c:	425b      	neglt	r3, r3
 800734e:	f042 0202 	orrlt.w	r2, r2, #2
 8007352:	9307      	strge	r3, [sp, #28]
 8007354:	9307      	strlt	r3, [sp, #28]
 8007356:	bfb8      	it	lt
 8007358:	9204      	strlt	r2, [sp, #16]
 800735a:	7823      	ldrb	r3, [r4, #0]
 800735c:	2b2e      	cmp	r3, #46	@ 0x2e
 800735e:	d10a      	bne.n	8007376 <_vfiprintf_r+0x156>
 8007360:	7863      	ldrb	r3, [r4, #1]
 8007362:	2b2a      	cmp	r3, #42	@ 0x2a
 8007364:	d132      	bne.n	80073cc <_vfiprintf_r+0x1ac>
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	1d1a      	adds	r2, r3, #4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	9203      	str	r2, [sp, #12]
 800736e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007372:	3402      	adds	r4, #2
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800744c <_vfiprintf_r+0x22c>
 800737a:	7821      	ldrb	r1, [r4, #0]
 800737c:	2203      	movs	r2, #3
 800737e:	4650      	mov	r0, sl
 8007380:	f7f8 ff36 	bl	80001f0 <memchr>
 8007384:	b138      	cbz	r0, 8007396 <_vfiprintf_r+0x176>
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	eba0 000a 	sub.w	r0, r0, sl
 800738c:	2240      	movs	r2, #64	@ 0x40
 800738e:	4082      	lsls	r2, r0
 8007390:	4313      	orrs	r3, r2
 8007392:	3401      	adds	r4, #1
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739a:	4829      	ldr	r0, [pc, #164]	@ (8007440 <_vfiprintf_r+0x220>)
 800739c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073a0:	2206      	movs	r2, #6
 80073a2:	f7f8 ff25 	bl	80001f0 <memchr>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d03f      	beq.n	800742a <_vfiprintf_r+0x20a>
 80073aa:	4b26      	ldr	r3, [pc, #152]	@ (8007444 <_vfiprintf_r+0x224>)
 80073ac:	bb1b      	cbnz	r3, 80073f6 <_vfiprintf_r+0x1d6>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	3307      	adds	r3, #7
 80073b2:	f023 0307 	bic.w	r3, r3, #7
 80073b6:	3308      	adds	r3, #8
 80073b8:	9303      	str	r3, [sp, #12]
 80073ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073bc:	443b      	add	r3, r7
 80073be:	9309      	str	r3, [sp, #36]	@ 0x24
 80073c0:	e76a      	b.n	8007298 <_vfiprintf_r+0x78>
 80073c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c6:	460c      	mov	r4, r1
 80073c8:	2001      	movs	r0, #1
 80073ca:	e7a8      	b.n	800731e <_vfiprintf_r+0xfe>
 80073cc:	2300      	movs	r3, #0
 80073ce:	3401      	adds	r4, #1
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	4619      	mov	r1, r3
 80073d4:	f04f 0c0a 	mov.w	ip, #10
 80073d8:	4620      	mov	r0, r4
 80073da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073de:	3a30      	subs	r2, #48	@ 0x30
 80073e0:	2a09      	cmp	r2, #9
 80073e2:	d903      	bls.n	80073ec <_vfiprintf_r+0x1cc>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0c6      	beq.n	8007376 <_vfiprintf_r+0x156>
 80073e8:	9105      	str	r1, [sp, #20]
 80073ea:	e7c4      	b.n	8007376 <_vfiprintf_r+0x156>
 80073ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80073f0:	4604      	mov	r4, r0
 80073f2:	2301      	movs	r3, #1
 80073f4:	e7f0      	b.n	80073d8 <_vfiprintf_r+0x1b8>
 80073f6:	ab03      	add	r3, sp, #12
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	462a      	mov	r2, r5
 80073fc:	4b12      	ldr	r3, [pc, #72]	@ (8007448 <_vfiprintf_r+0x228>)
 80073fe:	a904      	add	r1, sp, #16
 8007400:	4630      	mov	r0, r6
 8007402:	f3af 8000 	nop.w
 8007406:	4607      	mov	r7, r0
 8007408:	1c78      	adds	r0, r7, #1
 800740a:	d1d6      	bne.n	80073ba <_vfiprintf_r+0x19a>
 800740c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800740e:	07d9      	lsls	r1, r3, #31
 8007410:	d405      	bmi.n	800741e <_vfiprintf_r+0x1fe>
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	059a      	lsls	r2, r3, #22
 8007416:	d402      	bmi.n	800741e <_vfiprintf_r+0x1fe>
 8007418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800741a:	f7ff fdcf 	bl	8006fbc <__retarget_lock_release_recursive>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	065b      	lsls	r3, r3, #25
 8007422:	f53f af1f 	bmi.w	8007264 <_vfiprintf_r+0x44>
 8007426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007428:	e71e      	b.n	8007268 <_vfiprintf_r+0x48>
 800742a:	ab03      	add	r3, sp, #12
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	462a      	mov	r2, r5
 8007430:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <_vfiprintf_r+0x228>)
 8007432:	a904      	add	r1, sp, #16
 8007434:	4630      	mov	r0, r6
 8007436:	f000 f879 	bl	800752c <_printf_i>
 800743a:	e7e4      	b.n	8007406 <_vfiprintf_r+0x1e6>
 800743c:	08007b98 	.word	0x08007b98
 8007440:	08007ba2 	.word	0x08007ba2
 8007444:	00000000 	.word	0x00000000
 8007448:	080071fb 	.word	0x080071fb
 800744c:	08007b9e 	.word	0x08007b9e

08007450 <_printf_common>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	4616      	mov	r6, r2
 8007456:	4698      	mov	r8, r3
 8007458:	688a      	ldr	r2, [r1, #8]
 800745a:	690b      	ldr	r3, [r1, #16]
 800745c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007460:	4293      	cmp	r3, r2
 8007462:	bfb8      	it	lt
 8007464:	4613      	movlt	r3, r2
 8007466:	6033      	str	r3, [r6, #0]
 8007468:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800746c:	4607      	mov	r7, r0
 800746e:	460c      	mov	r4, r1
 8007470:	b10a      	cbz	r2, 8007476 <_printf_common+0x26>
 8007472:	3301      	adds	r3, #1
 8007474:	6033      	str	r3, [r6, #0]
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	0699      	lsls	r1, r3, #26
 800747a:	bf42      	ittt	mi
 800747c:	6833      	ldrmi	r3, [r6, #0]
 800747e:	3302      	addmi	r3, #2
 8007480:	6033      	strmi	r3, [r6, #0]
 8007482:	6825      	ldr	r5, [r4, #0]
 8007484:	f015 0506 	ands.w	r5, r5, #6
 8007488:	d106      	bne.n	8007498 <_printf_common+0x48>
 800748a:	f104 0a19 	add.w	sl, r4, #25
 800748e:	68e3      	ldr	r3, [r4, #12]
 8007490:	6832      	ldr	r2, [r6, #0]
 8007492:	1a9b      	subs	r3, r3, r2
 8007494:	42ab      	cmp	r3, r5
 8007496:	dc26      	bgt.n	80074e6 <_printf_common+0x96>
 8007498:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800749c:	6822      	ldr	r2, [r4, #0]
 800749e:	3b00      	subs	r3, #0
 80074a0:	bf18      	it	ne
 80074a2:	2301      	movne	r3, #1
 80074a4:	0692      	lsls	r2, r2, #26
 80074a6:	d42b      	bmi.n	8007500 <_printf_common+0xb0>
 80074a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074ac:	4641      	mov	r1, r8
 80074ae:	4638      	mov	r0, r7
 80074b0:	47c8      	blx	r9
 80074b2:	3001      	adds	r0, #1
 80074b4:	d01e      	beq.n	80074f4 <_printf_common+0xa4>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	6922      	ldr	r2, [r4, #16]
 80074ba:	f003 0306 	and.w	r3, r3, #6
 80074be:	2b04      	cmp	r3, #4
 80074c0:	bf02      	ittt	eq
 80074c2:	68e5      	ldreq	r5, [r4, #12]
 80074c4:	6833      	ldreq	r3, [r6, #0]
 80074c6:	1aed      	subeq	r5, r5, r3
 80074c8:	68a3      	ldr	r3, [r4, #8]
 80074ca:	bf0c      	ite	eq
 80074cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074d0:	2500      	movne	r5, #0
 80074d2:	4293      	cmp	r3, r2
 80074d4:	bfc4      	itt	gt
 80074d6:	1a9b      	subgt	r3, r3, r2
 80074d8:	18ed      	addgt	r5, r5, r3
 80074da:	2600      	movs	r6, #0
 80074dc:	341a      	adds	r4, #26
 80074de:	42b5      	cmp	r5, r6
 80074e0:	d11a      	bne.n	8007518 <_printf_common+0xc8>
 80074e2:	2000      	movs	r0, #0
 80074e4:	e008      	b.n	80074f8 <_printf_common+0xa8>
 80074e6:	2301      	movs	r3, #1
 80074e8:	4652      	mov	r2, sl
 80074ea:	4641      	mov	r1, r8
 80074ec:	4638      	mov	r0, r7
 80074ee:	47c8      	blx	r9
 80074f0:	3001      	adds	r0, #1
 80074f2:	d103      	bne.n	80074fc <_printf_common+0xac>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fc:	3501      	adds	r5, #1
 80074fe:	e7c6      	b.n	800748e <_printf_common+0x3e>
 8007500:	18e1      	adds	r1, r4, r3
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	2030      	movs	r0, #48	@ 0x30
 8007506:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800750a:	4422      	add	r2, r4
 800750c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007510:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007514:	3302      	adds	r3, #2
 8007516:	e7c7      	b.n	80074a8 <_printf_common+0x58>
 8007518:	2301      	movs	r3, #1
 800751a:	4622      	mov	r2, r4
 800751c:	4641      	mov	r1, r8
 800751e:	4638      	mov	r0, r7
 8007520:	47c8      	blx	r9
 8007522:	3001      	adds	r0, #1
 8007524:	d0e6      	beq.n	80074f4 <_printf_common+0xa4>
 8007526:	3601      	adds	r6, #1
 8007528:	e7d9      	b.n	80074de <_printf_common+0x8e>
	...

0800752c <_printf_i>:
 800752c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	7e0f      	ldrb	r7, [r1, #24]
 8007532:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007534:	2f78      	cmp	r7, #120	@ 0x78
 8007536:	4691      	mov	r9, r2
 8007538:	4680      	mov	r8, r0
 800753a:	460c      	mov	r4, r1
 800753c:	469a      	mov	sl, r3
 800753e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007542:	d807      	bhi.n	8007554 <_printf_i+0x28>
 8007544:	2f62      	cmp	r7, #98	@ 0x62
 8007546:	d80a      	bhi.n	800755e <_printf_i+0x32>
 8007548:	2f00      	cmp	r7, #0
 800754a:	f000 80d2 	beq.w	80076f2 <_printf_i+0x1c6>
 800754e:	2f58      	cmp	r7, #88	@ 0x58
 8007550:	f000 80b9 	beq.w	80076c6 <_printf_i+0x19a>
 8007554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007558:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800755c:	e03a      	b.n	80075d4 <_printf_i+0xa8>
 800755e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007562:	2b15      	cmp	r3, #21
 8007564:	d8f6      	bhi.n	8007554 <_printf_i+0x28>
 8007566:	a101      	add	r1, pc, #4	@ (adr r1, 800756c <_printf_i+0x40>)
 8007568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800756c:	080075c5 	.word	0x080075c5
 8007570:	080075d9 	.word	0x080075d9
 8007574:	08007555 	.word	0x08007555
 8007578:	08007555 	.word	0x08007555
 800757c:	08007555 	.word	0x08007555
 8007580:	08007555 	.word	0x08007555
 8007584:	080075d9 	.word	0x080075d9
 8007588:	08007555 	.word	0x08007555
 800758c:	08007555 	.word	0x08007555
 8007590:	08007555 	.word	0x08007555
 8007594:	08007555 	.word	0x08007555
 8007598:	080076d9 	.word	0x080076d9
 800759c:	08007603 	.word	0x08007603
 80075a0:	08007693 	.word	0x08007693
 80075a4:	08007555 	.word	0x08007555
 80075a8:	08007555 	.word	0x08007555
 80075ac:	080076fb 	.word	0x080076fb
 80075b0:	08007555 	.word	0x08007555
 80075b4:	08007603 	.word	0x08007603
 80075b8:	08007555 	.word	0x08007555
 80075bc:	08007555 	.word	0x08007555
 80075c0:	0800769b 	.word	0x0800769b
 80075c4:	6833      	ldr	r3, [r6, #0]
 80075c6:	1d1a      	adds	r2, r3, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6032      	str	r2, [r6, #0]
 80075cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075d4:	2301      	movs	r3, #1
 80075d6:	e09d      	b.n	8007714 <_printf_i+0x1e8>
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	6820      	ldr	r0, [r4, #0]
 80075dc:	1d19      	adds	r1, r3, #4
 80075de:	6031      	str	r1, [r6, #0]
 80075e0:	0606      	lsls	r6, r0, #24
 80075e2:	d501      	bpl.n	80075e8 <_printf_i+0xbc>
 80075e4:	681d      	ldr	r5, [r3, #0]
 80075e6:	e003      	b.n	80075f0 <_printf_i+0xc4>
 80075e8:	0645      	lsls	r5, r0, #25
 80075ea:	d5fb      	bpl.n	80075e4 <_printf_i+0xb8>
 80075ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	da03      	bge.n	80075fc <_printf_i+0xd0>
 80075f4:	232d      	movs	r3, #45	@ 0x2d
 80075f6:	426d      	negs	r5, r5
 80075f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075fc:	4859      	ldr	r0, [pc, #356]	@ (8007764 <_printf_i+0x238>)
 80075fe:	230a      	movs	r3, #10
 8007600:	e011      	b.n	8007626 <_printf_i+0xfa>
 8007602:	6821      	ldr	r1, [r4, #0]
 8007604:	6833      	ldr	r3, [r6, #0]
 8007606:	0608      	lsls	r0, r1, #24
 8007608:	f853 5b04 	ldr.w	r5, [r3], #4
 800760c:	d402      	bmi.n	8007614 <_printf_i+0xe8>
 800760e:	0649      	lsls	r1, r1, #25
 8007610:	bf48      	it	mi
 8007612:	b2ad      	uxthmi	r5, r5
 8007614:	2f6f      	cmp	r7, #111	@ 0x6f
 8007616:	4853      	ldr	r0, [pc, #332]	@ (8007764 <_printf_i+0x238>)
 8007618:	6033      	str	r3, [r6, #0]
 800761a:	bf14      	ite	ne
 800761c:	230a      	movne	r3, #10
 800761e:	2308      	moveq	r3, #8
 8007620:	2100      	movs	r1, #0
 8007622:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007626:	6866      	ldr	r6, [r4, #4]
 8007628:	60a6      	str	r6, [r4, #8]
 800762a:	2e00      	cmp	r6, #0
 800762c:	bfa2      	ittt	ge
 800762e:	6821      	ldrge	r1, [r4, #0]
 8007630:	f021 0104 	bicge.w	r1, r1, #4
 8007634:	6021      	strge	r1, [r4, #0]
 8007636:	b90d      	cbnz	r5, 800763c <_printf_i+0x110>
 8007638:	2e00      	cmp	r6, #0
 800763a:	d04b      	beq.n	80076d4 <_printf_i+0x1a8>
 800763c:	4616      	mov	r6, r2
 800763e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007642:	fb03 5711 	mls	r7, r3, r1, r5
 8007646:	5dc7      	ldrb	r7, [r0, r7]
 8007648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800764c:	462f      	mov	r7, r5
 800764e:	42bb      	cmp	r3, r7
 8007650:	460d      	mov	r5, r1
 8007652:	d9f4      	bls.n	800763e <_printf_i+0x112>
 8007654:	2b08      	cmp	r3, #8
 8007656:	d10b      	bne.n	8007670 <_printf_i+0x144>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	07df      	lsls	r7, r3, #31
 800765c:	d508      	bpl.n	8007670 <_printf_i+0x144>
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	6861      	ldr	r1, [r4, #4]
 8007662:	4299      	cmp	r1, r3
 8007664:	bfde      	ittt	le
 8007666:	2330      	movle	r3, #48	@ 0x30
 8007668:	f806 3c01 	strble.w	r3, [r6, #-1]
 800766c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007670:	1b92      	subs	r2, r2, r6
 8007672:	6122      	str	r2, [r4, #16]
 8007674:	f8cd a000 	str.w	sl, [sp]
 8007678:	464b      	mov	r3, r9
 800767a:	aa03      	add	r2, sp, #12
 800767c:	4621      	mov	r1, r4
 800767e:	4640      	mov	r0, r8
 8007680:	f7ff fee6 	bl	8007450 <_printf_common>
 8007684:	3001      	adds	r0, #1
 8007686:	d14a      	bne.n	800771e <_printf_i+0x1f2>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800768c:	b004      	add	sp, #16
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	f043 0320 	orr.w	r3, r3, #32
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	4833      	ldr	r0, [pc, #204]	@ (8007768 <_printf_i+0x23c>)
 800769c:	2778      	movs	r7, #120	@ 0x78
 800769e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	6831      	ldr	r1, [r6, #0]
 80076a6:	061f      	lsls	r7, r3, #24
 80076a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80076ac:	d402      	bmi.n	80076b4 <_printf_i+0x188>
 80076ae:	065f      	lsls	r7, r3, #25
 80076b0:	bf48      	it	mi
 80076b2:	b2ad      	uxthmi	r5, r5
 80076b4:	6031      	str	r1, [r6, #0]
 80076b6:	07d9      	lsls	r1, r3, #31
 80076b8:	bf44      	itt	mi
 80076ba:	f043 0320 	orrmi.w	r3, r3, #32
 80076be:	6023      	strmi	r3, [r4, #0]
 80076c0:	b11d      	cbz	r5, 80076ca <_printf_i+0x19e>
 80076c2:	2310      	movs	r3, #16
 80076c4:	e7ac      	b.n	8007620 <_printf_i+0xf4>
 80076c6:	4827      	ldr	r0, [pc, #156]	@ (8007764 <_printf_i+0x238>)
 80076c8:	e7e9      	b.n	800769e <_printf_i+0x172>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	f023 0320 	bic.w	r3, r3, #32
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	e7f6      	b.n	80076c2 <_printf_i+0x196>
 80076d4:	4616      	mov	r6, r2
 80076d6:	e7bd      	b.n	8007654 <_printf_i+0x128>
 80076d8:	6833      	ldr	r3, [r6, #0]
 80076da:	6825      	ldr	r5, [r4, #0]
 80076dc:	6961      	ldr	r1, [r4, #20]
 80076de:	1d18      	adds	r0, r3, #4
 80076e0:	6030      	str	r0, [r6, #0]
 80076e2:	062e      	lsls	r6, r5, #24
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	d501      	bpl.n	80076ec <_printf_i+0x1c0>
 80076e8:	6019      	str	r1, [r3, #0]
 80076ea:	e002      	b.n	80076f2 <_printf_i+0x1c6>
 80076ec:	0668      	lsls	r0, r5, #25
 80076ee:	d5fb      	bpl.n	80076e8 <_printf_i+0x1bc>
 80076f0:	8019      	strh	r1, [r3, #0]
 80076f2:	2300      	movs	r3, #0
 80076f4:	6123      	str	r3, [r4, #16]
 80076f6:	4616      	mov	r6, r2
 80076f8:	e7bc      	b.n	8007674 <_printf_i+0x148>
 80076fa:	6833      	ldr	r3, [r6, #0]
 80076fc:	1d1a      	adds	r2, r3, #4
 80076fe:	6032      	str	r2, [r6, #0]
 8007700:	681e      	ldr	r6, [r3, #0]
 8007702:	6862      	ldr	r2, [r4, #4]
 8007704:	2100      	movs	r1, #0
 8007706:	4630      	mov	r0, r6
 8007708:	f7f8 fd72 	bl	80001f0 <memchr>
 800770c:	b108      	cbz	r0, 8007712 <_printf_i+0x1e6>
 800770e:	1b80      	subs	r0, r0, r6
 8007710:	6060      	str	r0, [r4, #4]
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	6123      	str	r3, [r4, #16]
 8007716:	2300      	movs	r3, #0
 8007718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800771c:	e7aa      	b.n	8007674 <_printf_i+0x148>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	4632      	mov	r2, r6
 8007722:	4649      	mov	r1, r9
 8007724:	4640      	mov	r0, r8
 8007726:	47d0      	blx	sl
 8007728:	3001      	adds	r0, #1
 800772a:	d0ad      	beq.n	8007688 <_printf_i+0x15c>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	079b      	lsls	r3, r3, #30
 8007730:	d413      	bmi.n	800775a <_printf_i+0x22e>
 8007732:	68e0      	ldr	r0, [r4, #12]
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	4298      	cmp	r0, r3
 8007738:	bfb8      	it	lt
 800773a:	4618      	movlt	r0, r3
 800773c:	e7a6      	b.n	800768c <_printf_i+0x160>
 800773e:	2301      	movs	r3, #1
 8007740:	4632      	mov	r2, r6
 8007742:	4649      	mov	r1, r9
 8007744:	4640      	mov	r0, r8
 8007746:	47d0      	blx	sl
 8007748:	3001      	adds	r0, #1
 800774a:	d09d      	beq.n	8007688 <_printf_i+0x15c>
 800774c:	3501      	adds	r5, #1
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	9903      	ldr	r1, [sp, #12]
 8007752:	1a5b      	subs	r3, r3, r1
 8007754:	42ab      	cmp	r3, r5
 8007756:	dcf2      	bgt.n	800773e <_printf_i+0x212>
 8007758:	e7eb      	b.n	8007732 <_printf_i+0x206>
 800775a:	2500      	movs	r5, #0
 800775c:	f104 0619 	add.w	r6, r4, #25
 8007760:	e7f5      	b.n	800774e <_printf_i+0x222>
 8007762:	bf00      	nop
 8007764:	08007ba9 	.word	0x08007ba9
 8007768:	08007bba 	.word	0x08007bba

0800776c <__sflush_r>:
 800776c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	0716      	lsls	r6, r2, #28
 8007776:	4605      	mov	r5, r0
 8007778:	460c      	mov	r4, r1
 800777a:	d454      	bmi.n	8007826 <__sflush_r+0xba>
 800777c:	684b      	ldr	r3, [r1, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dc02      	bgt.n	8007788 <__sflush_r+0x1c>
 8007782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd48      	ble.n	800781a <__sflush_r+0xae>
 8007788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800778a:	2e00      	cmp	r6, #0
 800778c:	d045      	beq.n	800781a <__sflush_r+0xae>
 800778e:	2300      	movs	r3, #0
 8007790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007794:	682f      	ldr	r7, [r5, #0]
 8007796:	6a21      	ldr	r1, [r4, #32]
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	d030      	beq.n	80077fe <__sflush_r+0x92>
 800779c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	0759      	lsls	r1, r3, #29
 80077a2:	d505      	bpl.n	80077b0 <__sflush_r+0x44>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077aa:	b10b      	cbz	r3, 80077b0 <__sflush_r+0x44>
 80077ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	2300      	movs	r3, #0
 80077b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077b4:	6a21      	ldr	r1, [r4, #32]
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b0      	blx	r6
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	d106      	bne.n	80077ce <__sflush_r+0x62>
 80077c0:	6829      	ldr	r1, [r5, #0]
 80077c2:	291d      	cmp	r1, #29
 80077c4:	d82b      	bhi.n	800781e <__sflush_r+0xb2>
 80077c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007870 <__sflush_r+0x104>)
 80077c8:	410a      	asrs	r2, r1
 80077ca:	07d6      	lsls	r6, r2, #31
 80077cc:	d427      	bmi.n	800781e <__sflush_r+0xb2>
 80077ce:	2200      	movs	r2, #0
 80077d0:	6062      	str	r2, [r4, #4]
 80077d2:	04d9      	lsls	r1, r3, #19
 80077d4:	6922      	ldr	r2, [r4, #16]
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	d504      	bpl.n	80077e4 <__sflush_r+0x78>
 80077da:	1c42      	adds	r2, r0, #1
 80077dc:	d101      	bne.n	80077e2 <__sflush_r+0x76>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	b903      	cbnz	r3, 80077e4 <__sflush_r+0x78>
 80077e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80077e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077e6:	602f      	str	r7, [r5, #0]
 80077e8:	b1b9      	cbz	r1, 800781a <__sflush_r+0xae>
 80077ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077ee:	4299      	cmp	r1, r3
 80077f0:	d002      	beq.n	80077f8 <__sflush_r+0x8c>
 80077f2:	4628      	mov	r0, r5
 80077f4:	f7ff fbf2 	bl	8006fdc <_free_r>
 80077f8:	2300      	movs	r3, #0
 80077fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80077fc:	e00d      	b.n	800781a <__sflush_r+0xae>
 80077fe:	2301      	movs	r3, #1
 8007800:	4628      	mov	r0, r5
 8007802:	47b0      	blx	r6
 8007804:	4602      	mov	r2, r0
 8007806:	1c50      	adds	r0, r2, #1
 8007808:	d1c9      	bne.n	800779e <__sflush_r+0x32>
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0c6      	beq.n	800779e <__sflush_r+0x32>
 8007810:	2b1d      	cmp	r3, #29
 8007812:	d001      	beq.n	8007818 <__sflush_r+0xac>
 8007814:	2b16      	cmp	r3, #22
 8007816:	d11e      	bne.n	8007856 <__sflush_r+0xea>
 8007818:	602f      	str	r7, [r5, #0]
 800781a:	2000      	movs	r0, #0
 800781c:	e022      	b.n	8007864 <__sflush_r+0xf8>
 800781e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007822:	b21b      	sxth	r3, r3
 8007824:	e01b      	b.n	800785e <__sflush_r+0xf2>
 8007826:	690f      	ldr	r7, [r1, #16]
 8007828:	2f00      	cmp	r7, #0
 800782a:	d0f6      	beq.n	800781a <__sflush_r+0xae>
 800782c:	0793      	lsls	r3, r2, #30
 800782e:	680e      	ldr	r6, [r1, #0]
 8007830:	bf08      	it	eq
 8007832:	694b      	ldreq	r3, [r1, #20]
 8007834:	600f      	str	r7, [r1, #0]
 8007836:	bf18      	it	ne
 8007838:	2300      	movne	r3, #0
 800783a:	eba6 0807 	sub.w	r8, r6, r7
 800783e:	608b      	str	r3, [r1, #8]
 8007840:	f1b8 0f00 	cmp.w	r8, #0
 8007844:	dde9      	ble.n	800781a <__sflush_r+0xae>
 8007846:	6a21      	ldr	r1, [r4, #32]
 8007848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800784a:	4643      	mov	r3, r8
 800784c:	463a      	mov	r2, r7
 800784e:	4628      	mov	r0, r5
 8007850:	47b0      	blx	r6
 8007852:	2800      	cmp	r0, #0
 8007854:	dc08      	bgt.n	8007868 <__sflush_r+0xfc>
 8007856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800785a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007868:	4407      	add	r7, r0
 800786a:	eba8 0800 	sub.w	r8, r8, r0
 800786e:	e7e7      	b.n	8007840 <__sflush_r+0xd4>
 8007870:	dfbffffe 	.word	0xdfbffffe

08007874 <_fflush_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	b913      	cbnz	r3, 8007884 <_fflush_r+0x10>
 800787e:	2500      	movs	r5, #0
 8007880:	4628      	mov	r0, r5
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	b118      	cbz	r0, 800788e <_fflush_r+0x1a>
 8007886:	6a03      	ldr	r3, [r0, #32]
 8007888:	b90b      	cbnz	r3, 800788e <_fflush_r+0x1a>
 800788a:	f7ff f949 	bl	8006b20 <__sinit>
 800788e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0f3      	beq.n	800787e <_fflush_r+0xa>
 8007896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007898:	07d0      	lsls	r0, r2, #31
 800789a:	d404      	bmi.n	80078a6 <_fflush_r+0x32>
 800789c:	0599      	lsls	r1, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_fflush_r+0x32>
 80078a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078a2:	f7ff fb8a 	bl	8006fba <__retarget_lock_acquire_recursive>
 80078a6:	4628      	mov	r0, r5
 80078a8:	4621      	mov	r1, r4
 80078aa:	f7ff ff5f 	bl	800776c <__sflush_r>
 80078ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078b0:	07da      	lsls	r2, r3, #31
 80078b2:	4605      	mov	r5, r0
 80078b4:	d4e4      	bmi.n	8007880 <_fflush_r+0xc>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	059b      	lsls	r3, r3, #22
 80078ba:	d4e1      	bmi.n	8007880 <_fflush_r+0xc>
 80078bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078be:	f7ff fb7d 	bl	8006fbc <__retarget_lock_release_recursive>
 80078c2:	e7dd      	b.n	8007880 <_fflush_r+0xc>

080078c4 <__swhatbuf_r>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	460c      	mov	r4, r1
 80078c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078cc:	2900      	cmp	r1, #0
 80078ce:	b096      	sub	sp, #88	@ 0x58
 80078d0:	4615      	mov	r5, r2
 80078d2:	461e      	mov	r6, r3
 80078d4:	da0d      	bge.n	80078f2 <__swhatbuf_r+0x2e>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078dc:	f04f 0100 	mov.w	r1, #0
 80078e0:	bf14      	ite	ne
 80078e2:	2340      	movne	r3, #64	@ 0x40
 80078e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078e8:	2000      	movs	r0, #0
 80078ea:	6031      	str	r1, [r6, #0]
 80078ec:	602b      	str	r3, [r5, #0]
 80078ee:	b016      	add	sp, #88	@ 0x58
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	466a      	mov	r2, sp
 80078f4:	f000 f848 	bl	8007988 <_fstat_r>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	dbec      	blt.n	80078d6 <__swhatbuf_r+0x12>
 80078fc:	9901      	ldr	r1, [sp, #4]
 80078fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007902:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007906:	4259      	negs	r1, r3
 8007908:	4159      	adcs	r1, r3
 800790a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800790e:	e7eb      	b.n	80078e8 <__swhatbuf_r+0x24>

08007910 <__smakebuf_r>:
 8007910:	898b      	ldrh	r3, [r1, #12]
 8007912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007914:	079d      	lsls	r5, r3, #30
 8007916:	4606      	mov	r6, r0
 8007918:	460c      	mov	r4, r1
 800791a:	d507      	bpl.n	800792c <__smakebuf_r+0x1c>
 800791c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	6123      	str	r3, [r4, #16]
 8007924:	2301      	movs	r3, #1
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	b003      	add	sp, #12
 800792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800792c:	ab01      	add	r3, sp, #4
 800792e:	466a      	mov	r2, sp
 8007930:	f7ff ffc8 	bl	80078c4 <__swhatbuf_r>
 8007934:	9f00      	ldr	r7, [sp, #0]
 8007936:	4605      	mov	r5, r0
 8007938:	4639      	mov	r1, r7
 800793a:	4630      	mov	r0, r6
 800793c:	f7ff fbba 	bl	80070b4 <_malloc_r>
 8007940:	b948      	cbnz	r0, 8007956 <__smakebuf_r+0x46>
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	059a      	lsls	r2, r3, #22
 8007948:	d4ee      	bmi.n	8007928 <__smakebuf_r+0x18>
 800794a:	f023 0303 	bic.w	r3, r3, #3
 800794e:	f043 0302 	orr.w	r3, r3, #2
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	e7e2      	b.n	800791c <__smakebuf_r+0xc>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	6020      	str	r0, [r4, #0]
 800795a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800795e:	81a3      	strh	r3, [r4, #12]
 8007960:	9b01      	ldr	r3, [sp, #4]
 8007962:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007966:	b15b      	cbz	r3, 8007980 <__smakebuf_r+0x70>
 8007968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800796c:	4630      	mov	r0, r6
 800796e:	f000 f81d 	bl	80079ac <_isatty_r>
 8007972:	b128      	cbz	r0, 8007980 <__smakebuf_r+0x70>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	f023 0303 	bic.w	r3, r3, #3
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	431d      	orrs	r5, r3
 8007984:	81a5      	strh	r5, [r4, #12]
 8007986:	e7cf      	b.n	8007928 <__smakebuf_r+0x18>

08007988 <_fstat_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d07      	ldr	r5, [pc, #28]	@ (80079a8 <_fstat_r+0x20>)
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	4611      	mov	r1, r2
 8007994:	602b      	str	r3, [r5, #0]
 8007996:	f7f9 f8d9 	bl	8000b4c <_fstat>
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	d102      	bne.n	80079a4 <_fstat_r+0x1c>
 800799e:	682b      	ldr	r3, [r5, #0]
 80079a0:	b103      	cbz	r3, 80079a4 <_fstat_r+0x1c>
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	bd38      	pop	{r3, r4, r5, pc}
 80079a6:	bf00      	nop
 80079a8:	20001c60 	.word	0x20001c60

080079ac <_isatty_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d06      	ldr	r5, [pc, #24]	@ (80079c8 <_isatty_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7f9 f8d8 	bl	8000b6c <_isatty>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_isatty_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_isatty_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	20001c60 	.word	0x20001c60

080079cc <_sbrk_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d06      	ldr	r5, [pc, #24]	@ (80079e8 <_sbrk_r+0x1c>)
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	602b      	str	r3, [r5, #0]
 80079d8:	f7f9 f8e0 	bl	8000b9c <_sbrk>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_sbrk_r+0x1a>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_sbrk_r+0x1a>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	20001c60 	.word	0x20001c60

080079ec <_init>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr

080079f8 <_fini>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr
