
07_FreeRTOS_Queue_with_Structure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007884  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007a34  08007a34  00008a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007bb8  08007bb8  00008bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc0  08007bc0  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc0  08007bc0  00008bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bc4  08007bc4  00008bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007bc8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  20000074  08007c3c  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c68  08007c3c  00009c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bee1  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e2  00000000  00000000  00024f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00028868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001225  00000000  00000000  00029fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004978  00000000  00000000  0002b1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001934e  00000000  00000000  0002fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f398  00000000  00000000  00048eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015824b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a48  00000000  00000000  00158290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007a1c 	.word	0x08007a1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007a1c 	.word	0x08007a1c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fb91 	bl	8000caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f840 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8bc 	bl	8000708 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000590:	f000 f88e 	bl	80006b0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000594:	f003 fab2 	bl	8003afc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue_1 */
  Queue_1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue_1_attributes);
 8000598:	4a11      	ldr	r2, [pc, #68]	@ (80005e0 <main+0x60>)
 800059a:	2101      	movs	r1, #1
 800059c:	2008      	movs	r0, #8
 800059e:	f003 fba4 	bl	8003cea <osMessageQueueNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a0f      	ldr	r2, [pc, #60]	@ (80005e4 <main+0x64>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender_Task_1 */
  Sender_Task_1Handle = osThreadNew(Start_Sender_Task_1, NULL, &Sender_Task_1_attributes);
 80005a8:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <main+0x68>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	480f      	ldr	r0, [pc, #60]	@ (80005ec <main+0x6c>)
 80005ae:	f003 faef 	bl	8003b90 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <main+0x70>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of Sender_Task_2 */
  Sender_Task_2Handle = osThreadNew(Start_Sender_Task_2, NULL, &Sender_Task_2_attributes);
 80005b8:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <main+0x74>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <main+0x78>)
 80005be:	f003 fae7 	bl	8003b90 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0d      	ldr	r2, [pc, #52]	@ (80005fc <main+0x7c>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of Receiver_Task */
  Receiver_TaskHandle = osThreadNew(Start_Receiver_Task, NULL, &Receiver_Task_attributes);
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <main+0x80>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	480d      	ldr	r0, [pc, #52]	@ (8000604 <main+0x84>)
 80005ce:	f003 fadf 	bl	8003b90 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <main+0x88>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d8:	f003 fab4 	bl	8003b44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <main+0x5c>
 80005e0:	08007b24 	.word	0x08007b24
 80005e4:	20000124 	.word	0x20000124
 80005e8:	08007ab8 	.word	0x08007ab8
 80005ec:	080007a1 	.word	0x080007a1
 80005f0:	20000118 	.word	0x20000118
 80005f4:	08007adc 	.word	0x08007adc
 80005f8:	080007d5 	.word	0x080007d5
 80005fc:	2000011c 	.word	0x2000011c
 8000600:	08007b00 	.word	0x08007b00
 8000604:	08000809 	.word	0x08000809
 8000608:	20000120 	.word	0x20000120

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	@ 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f006 fc16 	bl	8006e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000632:	f000 fe0d 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f92e 	bl	800089c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	@ 0x40
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe54 	bl	800131c <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f90f 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2104      	movs	r1, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fa59 	bl	8001b50 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a4:	f000 f8fa 	bl	800089c <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	@ 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <MX_LPUART1_UART_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_LPUART1_UART_Init+0x50>)
 80006ee:	f002 fc15 	bl	8002f1c <HAL_UART_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f8d0 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000090 	.word	0x20000090
 8000704:	40008000 	.word	0x40008000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a1d      	ldr	r2, [pc, #116]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_GPIO_Init+0x90>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000736:	f000 fde1 	bl	80012fc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_GPIO_Init+0x90>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a10      	ldr	r2, [pc, #64]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_GPIO_Init+0x90>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2180      	movs	r1, #128	@ 0x80
 800076e:	480b      	ldr	r0, [pc, #44]	@ (800079c <MX_GPIO_Init+0x94>)
 8000770:	f000 fd48 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0x94>)
 800078c:	f000 fba8 	bl	8000ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400

080007a0 <Start_Sender_Task_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Sender_Task_1 */
void Start_Sender_Task_1(void *argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN 5 */
	  /* Infinite loop */
	  for(;;)
	  {
		printf("S1\r\n");
 80007a8:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <Start_Sender_Task_1+0x28>)
 80007aa:	f006 fa6f 	bl	8006c8c <puts>
		osMessageQueuePut(Queue_1Handle, &DataToSend1, 0, 200);
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <Start_Sender_Task_1+0x2c>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	23c8      	movs	r3, #200	@ 0xc8
 80007b4:	2200      	movs	r2, #0
 80007b6:	4906      	ldr	r1, [pc, #24]	@ (80007d0 <Start_Sender_Task_1+0x30>)
 80007b8:	f003 fb0a 	bl	8003dd0 <osMessageQueuePut>
	    osDelay(2000);
 80007bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007c0:	f003 fa78 	bl	8003cb4 <osDelay>
		printf("S1\r\n");
 80007c4:	bf00      	nop
 80007c6:	e7ef      	b.n	80007a8 <Start_Sender_Task_1+0x8>
 80007c8:	08007a6c 	.word	0x08007a6c
 80007cc:	20000124 	.word	0x20000124
 80007d0:	20000000 	.word	0x20000000

080007d4 <Start_Sender_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Sender_Task_2 */
void Start_Sender_Task_2(void *argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN Start_Sender_Task_2 */
	  /* Infinite loop */
	  for(;;)
	  {
		printf("S2\r\n");
 80007dc:	4807      	ldr	r0, [pc, #28]	@ (80007fc <Start_Sender_Task_2+0x28>)
 80007de:	f006 fa55 	bl	8006c8c <puts>
		osMessageQueuePut(Queue_1Handle, &DataToSend2, 0, 200);
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <Start_Sender_Task_2+0x2c>)
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	23c8      	movs	r3, #200	@ 0xc8
 80007e8:	2200      	movs	r2, #0
 80007ea:	4906      	ldr	r1, [pc, #24]	@ (8000804 <Start_Sender_Task_2+0x30>)
 80007ec:	f003 faf0 	bl	8003dd0 <osMessageQueuePut>
	    osDelay(2000);
 80007f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f4:	f003 fa5e 	bl	8003cb4 <osDelay>
		printf("S2\r\n");
 80007f8:	bf00      	nop
 80007fa:	e7ef      	b.n	80007dc <Start_Sender_Task_2+0x8>
 80007fc:	08007a70 	.word	0x08007a70
 8000800:	20000124 	.word	0x20000124
 8000804:	20000004 	.word	0x20000004

08000808 <Start_Receiver_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Receiver_Task */
void Start_Receiver_Task(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN Start_Receiver_Task */
		Data retvalue;
	  /* Infinite loop */
	  for(;;)
	  {
		printf("R\r\n");
 8000810:	4814      	ldr	r0, [pc, #80]	@ (8000864 <Start_Receiver_Task+0x5c>)
 8000812:	f006 fa3b 	bl	8006c8c <puts>
		osMessageQueueGet(Queue_1Handle, &retvalue, NULL, osWaitForever);
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <Start_Receiver_Task+0x60>)
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	f107 010c 	add.w	r1, r7, #12
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000822:	2200      	movs	r2, #0
 8000824:	f003 fb34 	bl	8003e90 <osMessageQueueGet>
		if(retvalue.source == 1)
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <Start_Receiver_Task+0x32>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <Start_Receiver_Task+0x64>)
 8000834:	f000 fce6 	bl	8001204 <HAL_GPIO_WritePin>
 8000838:	e004      	b.n	8000844 <Start_Receiver_Task+0x3c>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	480b      	ldr	r0, [pc, #44]	@ (800086c <Start_Receiver_Task+0x64>)
 8000840:	f000 fce0 	bl	8001204 <HAL_GPIO_WritePin>
		}
		printf("return value : %c\r\n",retvalue.value);
 8000844:	7b3b      	ldrb	r3, [r7, #12]
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	@ (8000870 <Start_Receiver_Task+0x68>)
 800084a:	f006 f9b7 	bl	8006bbc <iprintf>
		printf("source value : %d\r\n",retvalue.source);
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	4619      	mov	r1, r3
 8000852:	4808      	ldr	r0, [pc, #32]	@ (8000874 <Start_Receiver_Task+0x6c>)
 8000854:	f006 f9b2 	bl	8006bbc <iprintf>

	    osDelay(1000);
 8000858:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800085c:	f003 fa2a 	bl	8003cb4 <osDelay>
		printf("R\r\n");
 8000860:	e7d6      	b.n	8000810 <Start_Receiver_Task+0x8>
 8000862:	bf00      	nop
 8000864:	08007a74 	.word	0x08007a74
 8000868:	20000124 	.word	0x20000124
 800086c:	48000400 	.word	0x48000400
 8000870:	08007a78 	.word	0x08007a78
 8000874:	08007a8c 	.word	0x08007a8c

08000878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d101      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800088a:	f000 fa27 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40001000 	.word	0x40001000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b2:	4a10      	ldr	r2, [pc, #64]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	210f      	movs	r1, #15
 80008e2:	f06f 0001 	mvn.w	r0, #1
 80008e6:	f000 fad1 	bl	8000e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0ac      	sub	sp, #176	@ 0xb0
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	228c      	movs	r2, #140	@ 0x8c
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f006 fa97 	bl	8006e4c <memset>
  if(huart->Instance==LPUART1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a22      	ldr	r2, [pc, #136]	@ (80009ac <HAL_UART_MspInit+0xb4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d13d      	bne.n	80009a4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000928:	2320      	movs	r3, #32
 800092a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800092c:	2300      	movs	r3, #0
 800092e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fb61 	bl	8001ffc <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000940:	f7ff ffac 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <HAL_UART_MspInit+0xb8>)
 8000946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000948:	4a19      	ldr	r2, [pc, #100]	@ (80009b0 <HAL_UART_MspInit+0xb8>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <HAL_UART_MspInit+0xb8>)
 8000952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_UART_MspInit+0xb8>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000960:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <HAL_UART_MspInit+0xb8>)
 8000962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_UART_MspInit+0xb8>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000974:	f000 fcc2 	bl	80012fc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000978:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800097c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000992:	2308      	movs	r3, #8
 8000994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000998:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <HAL_UART_MspInit+0xbc>)
 80009a0:	f000 fa9e 	bl	8000ee0 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80009a4:	bf00      	nop
 80009a6:	37b0      	adds	r7, #176	@ 0xb0
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40008000 	.word	0x40008000
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48001800 	.word	0x48001800

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	@ 0x38
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009c6:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <HAL_InitTick+0xe0>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	4a33      	ldr	r2, [pc, #204]	@ (8000a98 <HAL_InitTick+0xe0>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d2:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <HAL_InitTick+0xe0>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009de:	f107 0210 	add.w	r2, r7, #16
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fa75 	bl	8001ed8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d103      	bne.n	8000a00 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f8:	f001 fa42 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80009fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80009fe:	e004      	b.n	8000a0a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a00:	f001 fa3e 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8000a04:	4603      	mov	r3, r0
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <HAL_InitTick+0xe4>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9b      	lsrs	r3, r3, #18
 8000a14:	3b01      	subs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a1a:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <HAL_InitTick+0xec>)
 8000a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a26:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a3e:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a40:	f001 ffa6 	bl	8002990 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d11b      	bne.n	8000a8a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a52:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a54:	f001 fffe 	bl	8002a54 <HAL_TIM_Base_Start_IT>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d111      	bne.n	8000a8a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a66:	2036      	movs	r0, #54	@ 0x36
 8000a68:	f000 fa2c 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d808      	bhi.n	8000a84 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a72:	2200      	movs	r2, #0
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	2036      	movs	r0, #54	@ 0x36
 8000a78:	f000 fa08 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_InitTick+0xf0>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e002      	b.n	8000a8a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3738      	adds	r7, #56	@ 0x38
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	20000128 	.word	0x20000128
 8000aa4:	40001000 	.word	0x40001000
 8000aa8:	2000000c 	.word	0x2000000c

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <TIM6_DAC_IRQHandler+0x10>)
 8000aea:	f002 f823 	bl	8002b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000128 	.word	0x20000128

08000af8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
  }

  return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *)ptr, len, HAL_MAX_DELAY);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <_write+0x28>)
 8000b4c:	f002 fa34 	bl	8002fb8 <HAL_UART_Transmit>
  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000090 	.word	0x20000090

08000b60 <_close>:

int _close(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b88:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_isatty>:

int _isatty(int file)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba0:	2301      	movs	r3, #1
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f006 f9cc 	bl	8006f94 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20050000 	.word	0x20050000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000174 	.word	0x20000174
 8000c30:	20001c68 	.word	0x20001c68

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f006 f98b 	bl	8006fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fc79 	bl	8000580 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c9c:	08007bc8 	.word	0x08007bc8
  ldr r2, =_sbss
 8000ca0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ca4:	20001c68 	.word	0x20001c68

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>

08000caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8de 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f7ff fe7c 	bl	80009b8 <HAL_InitTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	e001      	b.n	8000cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ccc:	f7ff fdec 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000010 	.word	0x20000010
 8000d00:	20000178 	.word	0x20000178

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000178 	.word	0x20000178

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	@ (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	@ (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e166      	b.n	80011be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8158 	beq.w	80011b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d005      	beq.n	8000f20 <HAL_GPIO_Init+0x40>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 0201 	and.w	r2, r3, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d017      	beq.n	8000fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d123      	bne.n	8001012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0203 	and.w	r2, r3, #3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80b2 	beq.w	80011b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b61      	ldr	r3, [pc, #388]	@ (80011dc <HAL_GPIO_Init+0x2fc>)
 8001056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001058:	4a60      	ldr	r2, [pc, #384]	@ (80011dc <HAL_GPIO_Init+0x2fc>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001060:	4b5e      	ldr	r3, [pc, #376]	@ (80011dc <HAL_GPIO_Init+0x2fc>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106c:	4a5c      	ldr	r2, [pc, #368]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001096:	d02b      	beq.n	80010f0 <HAL_GPIO_Init+0x210>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a52      	ldr	r2, [pc, #328]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d025      	beq.n	80010ec <HAL_GPIO_Init+0x20c>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a51      	ldr	r2, [pc, #324]	@ (80011e8 <HAL_GPIO_Init+0x308>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d01f      	beq.n	80010e8 <HAL_GPIO_Init+0x208>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a50      	ldr	r2, [pc, #320]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d019      	beq.n	80010e4 <HAL_GPIO_Init+0x204>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a4f      	ldr	r2, [pc, #316]	@ (80011f0 <HAL_GPIO_Init+0x310>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d013      	beq.n	80010e0 <HAL_GPIO_Init+0x200>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a4e      	ldr	r2, [pc, #312]	@ (80011f4 <HAL_GPIO_Init+0x314>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1fc>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a4d      	ldr	r2, [pc, #308]	@ (80011f8 <HAL_GPIO_Init+0x318>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a4c      	ldr	r2, [pc, #304]	@ (80011fc <HAL_GPIO_Init+0x31c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1f4>
 80010d0:	2307      	movs	r3, #7
 80010d2:	e00e      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d4:	2308      	movs	r3, #8
 80010d6:	e00c      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d8:	2306      	movs	r3, #6
 80010da:	e00a      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010dc:	2305      	movs	r3, #5
 80010de:	e008      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010e0:	2304      	movs	r3, #4
 80010e2:	e006      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010e4:	2303      	movs	r3, #3
 80010e6:	e004      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010f0:	2300      	movs	r3, #0
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	f002 0203 	and.w	r2, r2, #3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	4093      	lsls	r3, r2
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001102:	4937      	ldr	r1, [pc, #220]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001110:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <HAL_GPIO_Init+0x320>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001134:	4a32      	ldr	r2, [pc, #200]	@ (8001200 <HAL_GPIO_Init+0x320>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <HAL_GPIO_Init+0x320>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800115e:	4a28      	ldr	r2, [pc, #160]	@ (8001200 <HAL_GPIO_Init+0x320>)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <HAL_GPIO_Init+0x320>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001188:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <HAL_GPIO_Init+0x320>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <HAL_GPIO_Init+0x320>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b2:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <HAL_GPIO_Init+0x320>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f47f ae91 	bne.w	8000ef0 <HAL_GPIO_Init+0x10>
  }
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010000 	.word	0x40010000
 80011e4:	48000400 	.word	0x48000400
 80011e8:	48000800 	.word	0x48000800
 80011ec:	48000c00 	.word	0x48000c00
 80011f0:	48001000 	.word	0x48001000
 80011f4:	48001400 	.word	0x48001400
 80011f8:	48001800 	.word	0x48001800
 80011fc:	48001c00 	.word	0x48001c00
 8001200:	40010400 	.word	0x40010400

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001220:	e002      	b.n	8001228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <HAL_PWREx_GetVoltageRange+0x18>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40007000 	.word	0x40007000

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800125e:	d130      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800126c:	d038      	beq.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001276:	4a1e      	ldr	r2, [pc, #120]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001278:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800127c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2232      	movs	r2, #50	@ 0x32
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9b      	lsrs	r3, r3, #18
 8001290:	3301      	adds	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001294:	e002      	b.n	800129c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3b01      	subs	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a8:	d102      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f2      	bne.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012bc:	d110      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e00f      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ce:	d007      	beq.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012d8:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40007000 	.word	0x40007000
 80012f4:	20000008 	.word	0x20000008
 80012f8:	431bde83 	.word	0x431bde83

080012fc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800130a:	6053      	str	r3, [r2, #4]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000

0800131c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	f000 bc08 	b.w	8001b40 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001330:	4b96      	ldr	r3, [pc, #600]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800133a:	4b94      	ldr	r3, [pc, #592]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80e4 	beq.w	800151a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_RCC_OscConfig+0x4c>
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b0c      	cmp	r3, #12
 800135c:	f040 808b 	bne.w	8001476 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b01      	cmp	r3, #1
 8001364:	f040 8087 	bne.w	8001476 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001368:	4b88      	ldr	r3, [pc, #544]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_OscConfig+0x64>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e3df      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	4b81      	ldr	r3, [pc, #516]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <HAL_RCC_OscConfig+0x7e>
 8001390:	4b7e      	ldr	r3, [pc, #504]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001398:	e005      	b.n	80013a6 <HAL_RCC_OscConfig+0x8a>
 800139a:	4b7c      	ldr	r3, [pc, #496]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 800139c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d223      	bcs.n	80013f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fdc4 	bl	8001f3c <RCC_SetFlashLatencyFromMSIRange>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e3c0      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013be:	4b73      	ldr	r3, [pc, #460]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a72      	ldr	r2, [pc, #456]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b70      	ldr	r3, [pc, #448]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	496d      	ldr	r1, [pc, #436]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013dc:	4b6b      	ldr	r3, [pc, #428]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	4968      	ldr	r1, [pc, #416]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
 80013f0:	e025      	b.n	800143e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f2:	4b66      	ldr	r3, [pc, #408]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a65      	ldr	r2, [pc, #404]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b63      	ldr	r3, [pc, #396]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4960      	ldr	r1, [pc, #384]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001410:	4b5e      	ldr	r3, [pc, #376]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	495b      	ldr	r1, [pc, #364]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fd84 	bl	8001f3c <RCC_SetFlashLatencyFromMSIRange>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e380      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800143e:	f000 fc87 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001442:	4602      	mov	r2, r0
 8001444:	4b51      	ldr	r3, [pc, #324]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	4950      	ldr	r1, [pc, #320]	@ (8001590 <HAL_RCC_OscConfig+0x274>)
 8001450:	5ccb      	ldrb	r3, [r1, r3]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	4a4e      	ldr	r2, [pc, #312]	@ (8001594 <HAL_RCC_OscConfig+0x278>)
 800145c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800145e:	4b4e      	ldr	r3, [pc, #312]	@ (8001598 <HAL_RCC_OscConfig+0x27c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff faa8 	bl	80009b8 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d052      	beq.n	8001518 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	e364      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d032      	beq.n	80014e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800147e:	4b43      	ldr	r3, [pc, #268]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a42      	ldr	r2, [pc, #264]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148a:	f7ff fc3b 	bl	8000d04 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001492:	f7ff fc37 	bl	8000d04 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e34d      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a4:	4b39      	ldr	r3, [pc, #228]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b0:	4b36      	ldr	r3, [pc, #216]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a35      	ldr	r2, [pc, #212]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4930      	ldr	r1, [pc, #192]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ce:	4b2f      	ldr	r3, [pc, #188]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	492b      	ldr	r1, [pc, #172]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
 80014e2:	e01a      	b.n	800151a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014e4:	4b29      	ldr	r3, [pc, #164]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a28      	ldr	r2, [pc, #160]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc08 	bl	8000d04 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc04 	bl	8000d04 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e31a      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1dc>
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d073      	beq.n	800160e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b08      	cmp	r3, #8
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x21c>
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d10e      	bne.n	8001550 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d10b      	bne.n	8001550 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d063      	beq.n	800160c <HAL_RCC_OscConfig+0x2f0>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d15f      	bne.n	800160c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e2f7      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001558:	d106      	bne.n	8001568 <HAL_RCC_OscConfig+0x24c>
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a0b      	ldr	r2, [pc, #44]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e025      	b.n	80015b4 <HAL_RCC_OscConfig+0x298>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001570:	d114      	bne.n	800159c <HAL_RCC_OscConfig+0x280>
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b03      	ldr	r3, [pc, #12]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a02      	ldr	r2, [pc, #8]	@ (800158c <HAL_RCC_OscConfig+0x270>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e013      	b.n	80015b4 <HAL_RCC_OscConfig+0x298>
 800158c:	40021000 	.word	0x40021000
 8001590:	08007b3c 	.word	0x08007b3c
 8001594:	20000008 	.word	0x20000008
 8001598:	2000000c 	.word	0x2000000c
 800159c:	4ba0      	ldr	r3, [pc, #640]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a9f      	ldr	r2, [pc, #636]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b9d      	ldr	r3, [pc, #628]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a9c      	ldr	r2, [pc, #624]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fba2 	bl	8000d04 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb9e 	bl	8000d04 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e2b4      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d6:	4b92      	ldr	r3, [pc, #584]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x2a8>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb8e 	bl	8000d04 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb8a 	bl	8000d04 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e2a0      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fe:	4b88      	ldr	r3, [pc, #544]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d0>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d060      	beq.n	80016dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d005      	beq.n	800162c <HAL_RCC_OscConfig+0x310>
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d119      	bne.n	800165a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d116      	bne.n	800165a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162c:	4b7c      	ldr	r3, [pc, #496]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_OscConfig+0x328>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e27d      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b76      	ldr	r3, [pc, #472]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	4973      	ldr	r1, [pc, #460]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	e040      	b.n	80016dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d023      	beq.n	80016aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b6f      	ldr	r3, [pc, #444]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6e      	ldr	r2, [pc, #440]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fb49 	bl	8000d04 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fb45 	bl	8000d04 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e25b      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001688:	4b65      	ldr	r3, [pc, #404]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b62      	ldr	r3, [pc, #392]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	495f      	ldr	r1, [pc, #380]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80016b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb25 	bl	8000d04 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fb21 	bl	8000d04 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e237      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d0:	4b53      	ldr	r3, [pc, #332]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d03c      	beq.n	8001762 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01c      	beq.n	800172a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fb00 	bl	8000d04 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fafc 	bl	8000d04 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e212      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171a:	4b41      	ldr	r3, [pc, #260]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 800171c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ef      	beq.n	8001708 <HAL_RCC_OscConfig+0x3ec>
 8001728:	e01b      	b.n	8001762 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172a:	4b3d      	ldr	r3, [pc, #244]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 800172c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001730:	4a3b      	ldr	r2, [pc, #236]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173a:	f7ff fae3 	bl	8000d04 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff fadf 	bl	8000d04 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e1f5      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ef      	bne.n	8001742 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80a6 	beq.w	80018bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001774:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	4a26      	ldr	r2, [pc, #152]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	@ 0x58
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001798:	2301      	movs	r3, #1
 800179a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179c:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <HAL_RCC_OscConfig+0x508>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d118      	bne.n	80017da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <HAL_RCC_OscConfig+0x508>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <HAL_RCC_OscConfig+0x508>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b4:	f7ff faa6 	bl	8000d04 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017bc:	f7ff faa2 	bl	8000d04 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1b8      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_RCC_OscConfig+0x508>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4d8>
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f2:	e029      	b.n	8001848 <HAL_RCC_OscConfig+0x52c>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d115      	bne.n	8001828 <HAL_RCC_OscConfig+0x50c>
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001802:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800180c:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	4a03      	ldr	r2, [pc, #12]	@ (8001820 <HAL_RCC_OscConfig+0x504>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800181c:	e014      	b.n	8001848 <HAL_RCC_OscConfig+0x52c>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	40007000 	.word	0x40007000
 8001828:	4b9d      	ldr	r3, [pc, #628]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182e:	4a9c      	ldr	r2, [pc, #624]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001838:	4b99      	ldr	r3, [pc, #612]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	4a98      	ldr	r2, [pc, #608]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fa58 	bl	8000d04 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fa54 	bl	8000d04 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e168      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186e:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ed      	beq.n	8001858 <HAL_RCC_OscConfig+0x53c>
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fa41 	bl	8000d04 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fa3d 	bl	8000d04 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e151      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800189c:	4b80      	ldr	r3, [pc, #512]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ed      	bne.n	8001886 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b0:	4b7b      	ldr	r3, [pc, #492]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	4a7a      	ldr	r2, [pc, #488]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80018b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d03c      	beq.n	8001942 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d01c      	beq.n	800190a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018d0:	4b73      	ldr	r3, [pc, #460]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80018d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d6:	4a72      	ldr	r2, [pc, #456]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff fa10 	bl	8000d04 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e8:	f7ff fa0c 	bl	8000d04 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e122      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018fa:	4b69      	ldr	r3, [pc, #420]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80018fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ef      	beq.n	80018e8 <HAL_RCC_OscConfig+0x5cc>
 8001908:	e01b      	b.n	8001942 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800190a:	4b65      	ldr	r3, [pc, #404]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 800190c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001910:	4a63      	ldr	r2, [pc, #396]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff f9f3 	bl	8000d04 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001922:	f7ff f9ef 	bl	8000d04 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e105      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001934:	4b5a      	ldr	r3, [pc, #360]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ef      	bne.n	8001922 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80f9 	beq.w	8001b3e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	2b02      	cmp	r3, #2
 8001952:	f040 80cf 	bne.w	8001af4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001956:	4b52      	ldr	r3, [pc, #328]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 0203 	and.w	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001966:	429a      	cmp	r2, r3
 8001968:	d12c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	3b01      	subs	r3, #1
 8001976:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d123      	bne.n	80019c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001986:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d11b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001996:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d113      	bne.n	80019c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a6:	085b      	lsrs	r3, r3, #1
 80019a8:	3b01      	subs	r3, #1
 80019aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d109      	bne.n	80019c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d071      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d068      	beq.n	8001a9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019ca:	4b35      	ldr	r3, [pc, #212]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019d6:	4b32      	ldr	r3, [pc, #200]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0ac      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019e6:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 80019ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f2:	f7ff f987 	bl	8000d04 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f983 	bl	8000d04 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e099      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a18:	4b21      	ldr	r3, [pc, #132]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <HAL_RCC_OscConfig+0x788>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a32:	0212      	lsls	r2, r2, #8
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a3a:	0852      	lsrs	r2, r2, #1
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	0552      	lsls	r2, r2, #21
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a46:	0852      	lsrs	r2, r2, #1
 8001a48:	3a01      	subs	r2, #1
 8001a4a:	0652      	lsls	r2, r2, #25
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a52:	06d2      	lsls	r2, r2, #27
 8001a54:	430a      	orrs	r2, r1
 8001a56:	4912      	ldr	r1, [pc, #72]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a68:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a74:	f7ff f946 	bl	8000d04 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff f942 	bl	8000d04 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e058      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <HAL_RCC_OscConfig+0x784>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a9a:	e050      	b.n	8001b3e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e04f      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa8:	4b27      	ldr	r3, [pc, #156]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d144      	bne.n	8001b3e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a23      	ldr	r2, [pc, #140]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac0:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a20      	ldr	r2, [pc, #128]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001acc:	f7ff f91a 	bl	8000d04 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f916 	bl	8000d04 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e02c      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x7b8>
 8001af2:	e024      	b.n	8001b3e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d01f      	beq.n	8001b3a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f8fd 	bl	8000d04 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff f8f9 	bl	8000d04 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e00f      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4905      	ldr	r1, [pc, #20]	@ (8001b48 <HAL_RCC_OscConfig+0x82c>)
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_RCC_OscConfig+0x830>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
 8001b38:	e001      	b.n	8001b3e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	feeefffc 	.word	0xfeeefffc

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0e7      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b75      	ldr	r3, [pc, #468]	@ (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d910      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b72      	ldr	r3, [pc, #456]	@ (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4970      	ldr	r1, [pc, #448]	@ (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b6e      	ldr	r3, [pc, #440]	@ (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0cf      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d010      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b66      	ldr	r3, [pc, #408]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d908      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb0:	4b63      	ldr	r3, [pc, #396]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4960      	ldr	r1, [pc, #384]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d04c      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d121      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0a6      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bee:	4b54      	ldr	r3, [pc, #336]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e09a      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c06:	4b4e      	ldr	r3, [pc, #312]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e08e      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c16:	4b4a      	ldr	r3, [pc, #296]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e086      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b46      	ldr	r3, [pc, #280]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4943      	ldr	r1, [pc, #268]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c38:	f7ff f864 	bl	8000d04 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff f860 	bl	8000d04 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e06e      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b3a      	ldr	r3, [pc, #232]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d010      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d208      	bcs.n	8001c96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	492b      	ldr	r1, [pc, #172]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c96:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d210      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 0207 	bic.w	r2, r3, #7
 8001cac:	4923      	ldr	r1, [pc, #140]	@ (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb4:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e036      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4918      	ldr	r1, [pc, #96]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4910      	ldr	r1, [pc, #64]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d04:	f000 f824 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	490b      	ldr	r1, [pc, #44]	@ (8001d44 <HAL_RCC_ClockConfig+0x1f4>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f8>)
 8001d22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_RCC_ClockConfig+0x1fc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fe45 	bl	80009b8 <HAL_InitTick>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d32:	7afb      	ldrb	r3, [r7, #11]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08007b3c 	.word	0x08007b3c
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	2000000c 	.word	0x2000000c

08001d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d68:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x34>
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d121      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d11e      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d84:	4b34      	ldr	r3, [pc, #208]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d90:	4b31      	ldr	r3, [pc, #196]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e005      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001da0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dac:	4a2b      	ldr	r2, [pc, #172]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d102      	bne.n	8001dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dc8:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	e004      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d134      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d003      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0xac>
 8001df4:	e005      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001df8:	617b      	str	r3, [r7, #20]
      break;
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dfe:	617b      	str	r3, [r7, #20]
      break;
 8001e00:	e002      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e08:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	3301      	adds	r3, #1
 8001e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e16:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	fb03 f202 	mul.w	r2, r3, r2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	0e5b      	lsrs	r3, r3, #25
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e48:	69bb      	ldr	r3, [r7, #24]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08007b54 	.word	0x08007b54
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4904      	ldr	r1, [pc, #16]	@ (8001ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08007b4c 	.word	0x08007b4c

08001eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eb0:	f7ff ffda 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0adb      	lsrs	r3, r3, #11
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4904      	ldr	r1, [pc, #16]	@ (8001ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08007b4c 	.word	0x08007b4c

08001ed8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f1a:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <HAL_RCC_GetClockConfig+0x60>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0207 	and.w	r2, r3, #7
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40022000 	.word	0x40022000

08001f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f54:	f7ff f96e 	bl	8001234 <HAL_PWREx_GetVoltageRange>
 8001f58:	6178      	str	r0, [r7, #20]
 8001f5a:	e014      	b.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	4a24      	ldr	r2, [pc, #144]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f68:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f74:	f7ff f95e 	bl	8001234 <HAL_PWREx_GetVoltageRange>
 8001f78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f8c:	d10b      	bne.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b80      	cmp	r3, #128	@ 0x80
 8001f92:	d919      	bls.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f98:	d902      	bls.n	8001fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	e013      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e010      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	@ 0x80
 8001faa:	d902      	bls.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fac:	2303      	movs	r3, #3
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e00a      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b80      	cmp	r3, #128	@ 0x80
 8001fb6:	d102      	bne.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb8:	2302      	movs	r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e004      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b70      	cmp	r3, #112	@ 0x70
 8001fc2:	d101      	bne.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 0207 	bic.w	r2, r3, #7
 8001fd0:	4909      	ldr	r1, [pc, #36]	@ (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd8:	4b07      	ldr	r3, [pc, #28]	@ (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40022000 	.word	0x40022000

08001ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002004:	2300      	movs	r3, #0
 8002006:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002008:	2300      	movs	r3, #0
 800200a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002014:	2b00      	cmp	r3, #0
 8002016:	d041      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800201c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002020:	d02a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002022:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002026:	d824      	bhi.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002028:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800202c:	d008      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800202e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002032:	d81e      	bhi.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203c:	d010      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800203e:	e018      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002040:	4b86      	ldr	r3, [pc, #536]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a85      	ldr	r2, [pc, #532]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800204c:	e015      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f000 facd 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 800205a:	4603      	mov	r3, r0
 800205c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800205e:	e00c      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3320      	adds	r3, #32
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fbb6 	bl	80027d8 <RCCEx_PLLSAI2_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002070:	e003      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	74fb      	strb	r3, [r7, #19]
      break;
 8002076:	e000      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002080:	4b76      	ldr	r3, [pc, #472]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800208e:	4973      	ldr	r1, [pc, #460]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002096:	e001      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d041      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020b0:	d02a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020b6:	d824      	bhi.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020bc:	d008      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020c2:	d81e      	bhi.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020cc:	d010      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ce:	e018      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020d0:	4b62      	ldr	r3, [pc, #392]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a61      	ldr	r2, [pc, #388]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020dc:	e015      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fa85 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 80020ea:	4603      	mov	r3, r0
 80020ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ee:	e00c      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3320      	adds	r3, #32
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fb6e 	bl	80027d8 <RCCEx_PLLSAI2_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002100:	e003      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	74fb      	strb	r3, [r7, #19]
      break;
 8002106:	e000      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002110:	4b52      	ldr	r3, [pc, #328]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002116:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800211e:	494f      	ldr	r1, [pc, #316]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002126:	e001      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a0 	beq.w	800227a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800213e:	4b47      	ldr	r3, [pc, #284]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00d      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b41      	ldr	r3, [pc, #260]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	4a40      	ldr	r2, [pc, #256]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002160:	4b3e      	ldr	r3, [pc, #248]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216c:	2301      	movs	r3, #1
 800216e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002170:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a3a      	ldr	r2, [pc, #232]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800217c:	f7fe fdc2 	bl	8000d04 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002182:	e009      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe fdbe 	bl	8000d04 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d902      	bls.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	74fb      	strb	r3, [r7, #19]
        break;
 8002196:	e005      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002198:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ef      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d15c      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021aa:	4b2c      	ldr	r3, [pc, #176]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01f      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d019      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021c8:	4b24      	ldr	r3, [pc, #144]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021d4:	4b21      	ldr	r3, [pc, #132]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	4a20      	ldr	r2, [pc, #128]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ea:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021f4:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7fe fd7d 	bl	8000d04 <HAL_GetTick>
 800220a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220c:	e00b      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7fe fd79 	bl	8000d04 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d902      	bls.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	74fb      	strb	r3, [r7, #19]
            break;
 8002224:	e006      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ec      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002240:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	4904      	ldr	r1, [pc, #16]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002252:	e009      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
 8002258:	e006      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002268:	7c7b      	ldrb	r3, [r7, #17]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4ba6      	ldr	r3, [pc, #664]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	4aa5      	ldr	r2, [pc, #660]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002278:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002286:	4ba0      	ldr	r3, [pc, #640]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f023 0203 	bic.w	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	499c      	ldr	r1, [pc, #624]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a8:	4b97      	ldr	r3, [pc, #604]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f023 020c 	bic.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b6:	4994      	ldr	r1, [pc, #592]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ca:	4b8f      	ldr	r3, [pc, #572]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	498b      	ldr	r1, [pc, #556]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ec:	4b86      	ldr	r3, [pc, #536]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	4983      	ldr	r1, [pc, #524]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800230e:	4b7e      	ldr	r3, [pc, #504]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002314:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231c:	497a      	ldr	r1, [pc, #488]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002330:	4b75      	ldr	r3, [pc, #468]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	4972      	ldr	r1, [pc, #456]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002352:	4b6d      	ldr	r3, [pc, #436]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002358:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002360:	4969      	ldr	r1, [pc, #420]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002374:	4b64      	ldr	r3, [pc, #400]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002382:	4961      	ldr	r1, [pc, #388]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002396:	4b5c      	ldr	r3, [pc, #368]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a4:	4958      	ldr	r1, [pc, #352]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b8:	4b53      	ldr	r3, [pc, #332]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	4950      	ldr	r1, [pc, #320]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023da:	4b4b      	ldr	r3, [pc, #300]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	4947      	ldr	r1, [pc, #284]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023fc:	4b42      	ldr	r3, [pc, #264]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	493f      	ldr	r1, [pc, #252]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d028      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800241e:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002424:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	4936      	ldr	r1, [pc, #216]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002438:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800243c:	d106      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800243e:	4b32      	ldr	r3, [pc, #200]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	4a31      	ldr	r2, [pc, #196]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002448:	60d3      	str	r3, [r2, #12]
 800244a:	e011      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002450:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002454:	d10c      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3304      	adds	r3, #4
 800245a:	2101      	movs	r1, #1
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f8c9 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 8002462:	4603      	mov	r3, r0
 8002464:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d028      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800247c:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800248a:	491f      	ldr	r1, [pc, #124]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800249a:	d106      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a19      	ldr	r2, [pc, #100]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024a6:	60d3      	str	r3, [r2, #12]
 80024a8:	e011      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024b2:	d10c      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	2101      	movs	r1, #1
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f89a 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024e8:	4907      	ldr	r1, [pc, #28]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024f8:	d108      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fa:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4a02      	ldr	r2, [pc, #8]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002504:	60d3      	str	r3, [r2, #12]
 8002506:	e013      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002508:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002514:	d10c      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2101      	movs	r1, #1
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f869 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02f      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800253c:	4b2c      	ldr	r3, [pc, #176]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800254a:	4929      	ldr	r1, [pc, #164]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800255a:	d10d      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3304      	adds	r3, #4
 8002560:	2102      	movs	r1, #2
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f846 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d014      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	74bb      	strb	r3, [r7, #18]
 8002576:	e011      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800257c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002580:	d10c      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3320      	adds	r3, #32
 8002586:	2102      	movs	r1, #2
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f925 	bl	80027d8 <RCCEx_PLLSAI2_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025b8:	490d      	ldr	r1, [pc, #52]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025dc:	4904      	ldr	r1, [pc, #16]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000

080025f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002602:	4b74      	ldr	r3, [pc, #464]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800260e:	4b71      	ldr	r3, [pc, #452]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d10d      	bne.n	800263a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
       ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002626:	4b6b      	ldr	r3, [pc, #428]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
       ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d047      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e044      	b.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d018      	beq.n	800267a <RCCEx_PLLSAI1_Config+0x86>
 8002648:	2b03      	cmp	r3, #3
 800264a:	d825      	bhi.n	8002698 <RCCEx_PLLSAI1_Config+0xa4>
 800264c:	2b01      	cmp	r3, #1
 800264e:	d002      	beq.n	8002656 <RCCEx_PLLSAI1_Config+0x62>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d009      	beq.n	8002668 <RCCEx_PLLSAI1_Config+0x74>
 8002654:	e020      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002656:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11d      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e01a      	b.n	800269e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002668:	4b5a      	ldr	r3, [pc, #360]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e013      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800267a:	4b56      	ldr	r3, [pc, #344]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002686:	4b53      	ldr	r3, [pc, #332]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002696:	e006      	b.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e004      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ae:	4b49      	ldr	r3, [pc, #292]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	430b      	orrs	r3, r1
 80026c4:	4943      	ldr	r1, [pc, #268]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d17c      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d0:	4b40      	ldr	r3, [pc, #256]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3f      	ldr	r2, [pc, #252]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fb12 	bl	8000d04 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e4:	f7fe fb0e 	bl	8000d04 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
        break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f8:	4b36      	ldr	r3, [pc, #216]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ef      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d15f      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d110      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002710:	4b30      	ldr	r3, [pc, #192]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002718:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6892      	ldr	r2, [r2, #8]
 8002720:	0211      	lsls	r1, r2, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	06d2      	lsls	r2, r2, #27
 8002728:	430a      	orrs	r2, r1
 800272a:	492a      	ldr	r1, [pc, #168]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	610b      	str	r3, [r1, #16]
 8002730:	e027      	b.n	8002782 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d112      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002738:	4b26      	ldr	r3, [pc, #152]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002740:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6892      	ldr	r2, [r2, #8]
 8002748:	0211      	lsls	r1, r2, #8
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6912      	ldr	r2, [r2, #16]
 800274e:	0852      	lsrs	r2, r2, #1
 8002750:	3a01      	subs	r2, #1
 8002752:	0552      	lsls	r2, r2, #21
 8002754:	430a      	orrs	r2, r1
 8002756:	491f      	ldr	r1, [pc, #124]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	610b      	str	r3, [r1, #16]
 800275c:	e011      	b.n	8002782 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800275e:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002766:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6892      	ldr	r2, [r2, #8]
 800276e:	0211      	lsls	r1, r2, #8
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6952      	ldr	r2, [r2, #20]
 8002774:	0852      	lsrs	r2, r2, #1
 8002776:	3a01      	subs	r2, #1
 8002778:	0652      	lsls	r2, r2, #25
 800277a:	430a      	orrs	r2, r1
 800277c:	4915      	ldr	r1, [pc, #84]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a13      	ldr	r2, [pc, #76]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002788:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800278c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe fab9 	bl	8000d04 <HAL_GetTick>
 8002792:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002794:	e009      	b.n	80027aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002796:	f7fe fab5 	bl	8000d04 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d902      	bls.n	80027aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	73fb      	strb	r3, [r7, #15]
          break;
 80027a8:	e005      	b.n	80027b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ef      	beq.n	8002796 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d106      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4903      	ldr	r1, [pc, #12]	@ (80027d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000

080027d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027e6:	4b69      	ldr	r3, [pc, #420]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027f2:	4b66      	ldr	r3, [pc, #408]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0203 	and.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d10d      	bne.n	800281e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
       ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800280a:	4b60      	ldr	r3, [pc, #384]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
       ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d047      	beq.n	80028ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e044      	b.n	80028ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d018      	beq.n	800285e <RCCEx_PLLSAI2_Config+0x86>
 800282c:	2b03      	cmp	r3, #3
 800282e:	d825      	bhi.n	800287c <RCCEx_PLLSAI2_Config+0xa4>
 8002830:	2b01      	cmp	r3, #1
 8002832:	d002      	beq.n	800283a <RCCEx_PLLSAI2_Config+0x62>
 8002834:	2b02      	cmp	r3, #2
 8002836:	d009      	beq.n	800284c <RCCEx_PLLSAI2_Config+0x74>
 8002838:	e020      	b.n	800287c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800283a:	4b54      	ldr	r3, [pc, #336]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11d      	bne.n	8002882 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284a:	e01a      	b.n	8002882 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800284c:	4b4f      	ldr	r3, [pc, #316]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d116      	bne.n	8002886 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285c:	e013      	b.n	8002886 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800285e:	4b4b      	ldr	r3, [pc, #300]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800286a:	4b48      	ldr	r3, [pc, #288]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800287a:	e006      	b.n	800288a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	e004      	b.n	800288c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002882:	bf00      	nop
 8002884:	e002      	b.n	800288c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800288a:	bf00      	nop
    }

    if(status == HAL_OK)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002892:	4b3e      	ldr	r3, [pc, #248]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	430b      	orrs	r3, r1
 80028a8:	4938      	ldr	r1, [pc, #224]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d166      	bne.n	8002982 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028b4:	4b35      	ldr	r3, [pc, #212]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a34      	ldr	r2, [pc, #208]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c0:	f7fe fa20 	bl	8000d04 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028c6:	e009      	b.n	80028dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028c8:	f7fe fa1c 	bl	8000d04 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d902      	bls.n	80028dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	73fb      	strb	r3, [r7, #15]
        break;
 80028da:	e005      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028dc:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ef      	bne.n	80028c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d149      	bne.n	8002982 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d110      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f4:	4b25      	ldr	r3, [pc, #148]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80028fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6892      	ldr	r2, [r2, #8]
 8002904:	0211      	lsls	r1, r2, #8
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	06d2      	lsls	r2, r2, #27
 800290c:	430a      	orrs	r2, r1
 800290e:	491f      	ldr	r1, [pc, #124]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	614b      	str	r3, [r1, #20]
 8002914:	e011      	b.n	800293a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002916:	4b1d      	ldr	r3, [pc, #116]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800291e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6892      	ldr	r2, [r2, #8]
 8002926:	0211      	lsls	r1, r2, #8
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6912      	ldr	r2, [r2, #16]
 800292c:	0852      	lsrs	r2, r2, #1
 800292e:	3a01      	subs	r2, #1
 8002930:	0652      	lsls	r2, r2, #25
 8002932:	430a      	orrs	r2, r1
 8002934:	4915      	ldr	r1, [pc, #84]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800293a:	4b14      	ldr	r3, [pc, #80]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a13      	ldr	r2, [pc, #76]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002944:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe f9dd 	bl	8000d04 <HAL_GetTick>
 800294a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800294c:	e009      	b.n	8002962 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800294e:	f7fe f9d9 	bl	8000d04 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d902      	bls.n	8002962 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	73fb      	strb	r3, [r7, #15]
          break;
 8002960:	e005      	b.n	800296e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002962:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ef      	beq.n	800294e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002974:	4b05      	ldr	r3, [pc, #20]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	4903      	ldr	r1, [pc, #12]	@ (800298c <RCCEx_PLLSAI2_Config+0x1b4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e049      	b.n	8002a36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f841 	bl	8002a3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f000 f9e0 	bl	8002d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d001      	beq.n	8002a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e04f      	b.n	8002b0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a23      	ldr	r2, [pc, #140]	@ (8002b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x76>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a96:	d018      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x76>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x76>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x76>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x76>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x76>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	@ (8002b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d115      	bne.n	8002af6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d015      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0xb4>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae2:	d011      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af4:	e008      	b.n	8002b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e000      	b.n	8002b0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800
 8002b24:	40000c00 	.word	0x40000c00
 8002b28:	40013400 	.word	0x40013400
 8002b2c:	40014000 	.word	0x40014000
 8002b30:	00010007 	.word	0x00010007

08002b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d020      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0202 	mvn.w	r2, #2
 8002b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8e9 	bl	8002d56 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8db 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8ec 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d020      	beq.n	8002be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01b      	beq.n	8002be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0204 	mvn.w	r2, #4
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f8c3 	bl	8002d56 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8b5 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f8c6 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d020      	beq.n	8002c30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01b      	beq.n	8002c30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0208 	mvn.w	r2, #8
 8002c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2204      	movs	r2, #4
 8002c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f89d 	bl	8002d56 <HAL_TIM_IC_CaptureCallback>
 8002c1c:	e005      	b.n	8002c2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f88f 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f8a0 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d020      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0210 	mvn.w	r2, #16
 8002c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2208      	movs	r2, #8
 8002c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f877 	bl	8002d56 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f869 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f87a 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0201 	mvn.w	r2, #1
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd fdec 	bl	8000878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00c      	beq.n	8002cce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f913 	bl	8002ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00c      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f90b 	bl	8002f08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00c      	beq.n	8002d16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f834 	bl	8002d7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00c      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0220 	mvn.w	r2, #32
 8002d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f8d3 	bl	8002ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a46      	ldr	r2, [pc, #280]	@ (8002ec0 <TIM_Base_SetConfig+0x12c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db2:	d00f      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a43      	ldr	r2, [pc, #268]	@ (8002ec4 <TIM_Base_SetConfig+0x130>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a42      	ldr	r2, [pc, #264]	@ (8002ec8 <TIM_Base_SetConfig+0x134>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a41      	ldr	r2, [pc, #260]	@ (8002ecc <TIM_Base_SetConfig+0x138>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a40      	ldr	r2, [pc, #256]	@ (8002ed0 <TIM_Base_SetConfig+0x13c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d108      	bne.n	8002de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a35      	ldr	r2, [pc, #212]	@ (8002ec0 <TIM_Base_SetConfig+0x12c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01f      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df4:	d01b      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a32      	ldr	r2, [pc, #200]	@ (8002ec4 <TIM_Base_SetConfig+0x130>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d017      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a31      	ldr	r2, [pc, #196]	@ (8002ec8 <TIM_Base_SetConfig+0x134>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a30      	ldr	r2, [pc, #192]	@ (8002ecc <TIM_Base_SetConfig+0x138>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00f      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a2f      	ldr	r2, [pc, #188]	@ (8002ed0 <TIM_Base_SetConfig+0x13c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed4 <TIM_Base_SetConfig+0x140>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed8 <TIM_Base_SetConfig+0x144>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x9a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2c      	ldr	r2, [pc, #176]	@ (8002edc <TIM_Base_SetConfig+0x148>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a16      	ldr	r2, [pc, #88]	@ (8002ec0 <TIM_Base_SetConfig+0x12c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00f      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a18      	ldr	r2, [pc, #96]	@ (8002ed0 <TIM_Base_SetConfig+0x13c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a17      	ldr	r2, [pc, #92]	@ (8002ed4 <TIM_Base_SetConfig+0x140>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a16      	ldr	r2, [pc, #88]	@ (8002ed8 <TIM_Base_SetConfig+0x144>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a15      	ldr	r2, [pc, #84]	@ (8002edc <TIM_Base_SetConfig+0x148>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d103      	bne.n	8002e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d105      	bne.n	8002eb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f023 0201 	bic.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	611a      	str	r2, [r3, #16]
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800
 8002ecc:	40000c00 	.word	0x40000c00
 8002ed0:	40013400 	.word	0x40013400
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40014400 	.word	0x40014400
 8002edc:	40014800 	.word	0x40014800

08002ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e040      	b.n	8002fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fcda 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	@ 0x24
 8002f48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fb6a 	bl	800363c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f8af 	bl	80030cc <UART_SetConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e01b      	b.n	8002fb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fbe9 	bl	8003780 <UART_CheckIdleState>
 8002fae:	4603      	mov	r3, r0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d177      	bne.n	80030c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_UART_Transmit+0x24>
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e070      	b.n	80030c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2221      	movs	r2, #33	@ 0x21
 8002fec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fee:	f7fd fe89 	bl	8000d04 <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300c:	d108      	bne.n	8003020 <HAL_UART_Transmit+0x68>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d104      	bne.n	8003020 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e003      	b.n	8003028 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003028:	e02f      	b.n	800308a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fc4b 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e03b      	b.n	80030c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	881a      	ldrh	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800305c:	b292      	uxth	r2, r2
 800305e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	3302      	adds	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e007      	b.n	8003078 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1c9      	bne.n	800302a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	2140      	movs	r1, #64	@ 0x40
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fc15 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e005      	b.n	80030c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d0:	b08a      	sub	sp, #40	@ 0x28
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4ba4      	ldr	r3, [pc, #656]	@ (800338c <UART_SetConfig+0x2c0>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003104:	430b      	orrs	r3, r1
 8003106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a99      	ldr	r2, [pc, #612]	@ (8003390 <UART_SetConfig+0x2c4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003134:	4313      	orrs	r3, r2
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a90      	ldr	r2, [pc, #576]	@ (8003394 <UART_SetConfig+0x2c8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d126      	bne.n	80031a4 <UART_SetConfig+0xd8>
 8003156:	4b90      	ldr	r3, [pc, #576]	@ (8003398 <UART_SetConfig+0x2cc>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b03      	cmp	r3, #3
 8003162:	d81b      	bhi.n	800319c <UART_SetConfig+0xd0>
 8003164:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <UART_SetConfig+0xa0>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318d 	.word	0x0800318d
 8003174:	08003185 	.word	0x08003185
 8003178:	08003195 	.word	0x08003195
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003182:	e116      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003184:	2302      	movs	r3, #2
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e112      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800318c:	2304      	movs	r3, #4
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003192:	e10e      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003194:	2308      	movs	r3, #8
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319a:	e10a      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800319c:	2310      	movs	r3, #16
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a2:	e106      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a7c      	ldr	r2, [pc, #496]	@ (800339c <UART_SetConfig+0x2d0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d138      	bne.n	8003220 <UART_SetConfig+0x154>
 80031ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003398 <UART_SetConfig+0x2cc>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d82d      	bhi.n	8003218 <UART_SetConfig+0x14c>
 80031bc:	a201      	add	r2, pc, #4	@ (adr r2, 80031c4 <UART_SetConfig+0xf8>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031f9 	.word	0x080031f9
 80031c8:	08003219 	.word	0x08003219
 80031cc:	08003219 	.word	0x08003219
 80031d0:	08003219 	.word	0x08003219
 80031d4:	08003209 	.word	0x08003209
 80031d8:	08003219 	.word	0x08003219
 80031dc:	08003219 	.word	0x08003219
 80031e0:	08003219 	.word	0x08003219
 80031e4:	08003201 	.word	0x08003201
 80031e8:	08003219 	.word	0x08003219
 80031ec:	08003219 	.word	0x08003219
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003211 	.word	0x08003211
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e0d8      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003200:	2302      	movs	r3, #2
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003206:	e0d4      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003208:	2304      	movs	r3, #4
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e0d0      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003210:	2308      	movs	r3, #8
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e0cc      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003218:	2310      	movs	r3, #16
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e0c8      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5e      	ldr	r2, [pc, #376]	@ (80033a0 <UART_SetConfig+0x2d4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d125      	bne.n	8003276 <UART_SetConfig+0x1aa>
 800322a:	4b5b      	ldr	r3, [pc, #364]	@ (8003398 <UART_SetConfig+0x2cc>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003234:	2b30      	cmp	r3, #48	@ 0x30
 8003236:	d016      	beq.n	8003266 <UART_SetConfig+0x19a>
 8003238:	2b30      	cmp	r3, #48	@ 0x30
 800323a:	d818      	bhi.n	800326e <UART_SetConfig+0x1a2>
 800323c:	2b20      	cmp	r3, #32
 800323e:	d00a      	beq.n	8003256 <UART_SetConfig+0x18a>
 8003240:	2b20      	cmp	r3, #32
 8003242:	d814      	bhi.n	800326e <UART_SetConfig+0x1a2>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <UART_SetConfig+0x182>
 8003248:	2b10      	cmp	r3, #16
 800324a:	d008      	beq.n	800325e <UART_SetConfig+0x192>
 800324c:	e00f      	b.n	800326e <UART_SetConfig+0x1a2>
 800324e:	2300      	movs	r3, #0
 8003250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003254:	e0ad      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003256:	2302      	movs	r3, #2
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325c:	e0a9      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800325e:	2304      	movs	r3, #4
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003264:	e0a5      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003266:	2308      	movs	r3, #8
 8003268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326c:	e0a1      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800326e:	2310      	movs	r3, #16
 8003270:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003274:	e09d      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a4a      	ldr	r2, [pc, #296]	@ (80033a4 <UART_SetConfig+0x2d8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d125      	bne.n	80032cc <UART_SetConfig+0x200>
 8003280:	4b45      	ldr	r3, [pc, #276]	@ (8003398 <UART_SetConfig+0x2cc>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800328a:	2bc0      	cmp	r3, #192	@ 0xc0
 800328c:	d016      	beq.n	80032bc <UART_SetConfig+0x1f0>
 800328e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003290:	d818      	bhi.n	80032c4 <UART_SetConfig+0x1f8>
 8003292:	2b80      	cmp	r3, #128	@ 0x80
 8003294:	d00a      	beq.n	80032ac <UART_SetConfig+0x1e0>
 8003296:	2b80      	cmp	r3, #128	@ 0x80
 8003298:	d814      	bhi.n	80032c4 <UART_SetConfig+0x1f8>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <UART_SetConfig+0x1d8>
 800329e:	2b40      	cmp	r3, #64	@ 0x40
 80032a0:	d008      	beq.n	80032b4 <UART_SetConfig+0x1e8>
 80032a2:	e00f      	b.n	80032c4 <UART_SetConfig+0x1f8>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032aa:	e082      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032ac:	2302      	movs	r3, #2
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b2:	e07e      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032b4:	2304      	movs	r3, #4
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ba:	e07a      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032bc:	2308      	movs	r3, #8
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c2:	e076      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ca:	e072      	b.n	80033b2 <UART_SetConfig+0x2e6>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a35      	ldr	r2, [pc, #212]	@ (80033a8 <UART_SetConfig+0x2dc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d12a      	bne.n	800332c <UART_SetConfig+0x260>
 80032d6:	4b30      	ldr	r3, [pc, #192]	@ (8003398 <UART_SetConfig+0x2cc>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032e4:	d01a      	beq.n	800331c <UART_SetConfig+0x250>
 80032e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ea:	d81b      	bhi.n	8003324 <UART_SetConfig+0x258>
 80032ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f0:	d00c      	beq.n	800330c <UART_SetConfig+0x240>
 80032f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f6:	d815      	bhi.n	8003324 <UART_SetConfig+0x258>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <UART_SetConfig+0x238>
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003300:	d008      	beq.n	8003314 <UART_SetConfig+0x248>
 8003302:	e00f      	b.n	8003324 <UART_SetConfig+0x258>
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800330a:	e052      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800330c:	2302      	movs	r3, #2
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003312:	e04e      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003314:	2304      	movs	r3, #4
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800331a:	e04a      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800331c:	2308      	movs	r3, #8
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003322:	e046      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003324:	2310      	movs	r3, #16
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800332a:	e042      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <UART_SetConfig+0x2c4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d13a      	bne.n	80033ac <UART_SetConfig+0x2e0>
 8003336:	4b18      	ldr	r3, [pc, #96]	@ (8003398 <UART_SetConfig+0x2cc>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003340:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003344:	d01a      	beq.n	800337c <UART_SetConfig+0x2b0>
 8003346:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800334a:	d81b      	bhi.n	8003384 <UART_SetConfig+0x2b8>
 800334c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003350:	d00c      	beq.n	800336c <UART_SetConfig+0x2a0>
 8003352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003356:	d815      	bhi.n	8003384 <UART_SetConfig+0x2b8>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <UART_SetConfig+0x298>
 800335c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003360:	d008      	beq.n	8003374 <UART_SetConfig+0x2a8>
 8003362:	e00f      	b.n	8003384 <UART_SetConfig+0x2b8>
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800336a:	e022      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800336c:	2302      	movs	r3, #2
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003372:	e01e      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003374:	2304      	movs	r3, #4
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337a:	e01a      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800337c:	2308      	movs	r3, #8
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003382:	e016      	b.n	80033b2 <UART_SetConfig+0x2e6>
 8003384:	2310      	movs	r3, #16
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338a:	e012      	b.n	80033b2 <UART_SetConfig+0x2e6>
 800338c:	efff69f3 	.word	0xefff69f3
 8003390:	40008000 	.word	0x40008000
 8003394:	40013800 	.word	0x40013800
 8003398:	40021000 	.word	0x40021000
 800339c:	40004400 	.word	0x40004400
 80033a0:	40004800 	.word	0x40004800
 80033a4:	40004c00 	.word	0x40004c00
 80033a8:	40005000 	.word	0x40005000
 80033ac:	2310      	movs	r3, #16
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a9f      	ldr	r2, [pc, #636]	@ (8003634 <UART_SetConfig+0x568>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d17a      	bne.n	80034b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d824      	bhi.n	800340e <UART_SetConfig+0x342>
 80033c4:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <UART_SetConfig+0x300>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	0800340f 	.word	0x0800340f
 80033d4:	080033f9 	.word	0x080033f9
 80033d8:	0800340f 	.word	0x0800340f
 80033dc:	080033ff 	.word	0x080033ff
 80033e0:	0800340f 	.word	0x0800340f
 80033e4:	0800340f 	.word	0x0800340f
 80033e8:	0800340f 	.word	0x0800340f
 80033ec:	08003407 	.word	0x08003407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f0:	f7fe fd46 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80033f4:	61f8      	str	r0, [r7, #28]
        break;
 80033f6:	e010      	b.n	800341a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003638 <UART_SetConfig+0x56c>)
 80033fa:	61fb      	str	r3, [r7, #28]
        break;
 80033fc:	e00d      	b.n	800341a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fe:	f7fe fca7 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8003402:	61f8      	str	r0, [r7, #28]
        break;
 8003404:	e009      	b.n	800341a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800340a:	61fb      	str	r3, [r7, #28]
        break;
 800340c:	e005      	b.n	800341a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003418:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80fb 	beq.w	8003618 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	429a      	cmp	r2, r3
 8003430:	d305      	bcc.n	800343e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	429a      	cmp	r2, r3
 800343c:	d903      	bls.n	8003446 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003444:	e0e8      	b.n	8003618 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2200      	movs	r2, #0
 800344a:	461c      	mov	r4, r3
 800344c:	4615      	mov	r5, r2
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	022b      	lsls	r3, r5, #8
 8003458:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800345c:	0222      	lsls	r2, r4, #8
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	6849      	ldr	r1, [r1, #4]
 8003462:	0849      	lsrs	r1, r1, #1
 8003464:	2000      	movs	r0, #0
 8003466:	4688      	mov	r8, r1
 8003468:	4681      	mov	r9, r0
 800346a:	eb12 0a08 	adds.w	sl, r2, r8
 800346e:	eb43 0b09 	adc.w	fp, r3, r9
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003480:	4650      	mov	r0, sl
 8003482:	4659      	mov	r1, fp
 8003484:	f7fc ff04 	bl	8000290 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4613      	mov	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003496:	d308      	bcc.n	80034aa <UART_SetConfig+0x3de>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800349e:	d204      	bcs.n	80034aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e0b6      	b.n	8003618 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034b0:	e0b2      	b.n	8003618 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ba:	d15e      	bne.n	800357a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80034bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d828      	bhi.n	8003516 <UART_SetConfig+0x44a>
 80034c4:	a201      	add	r2, pc, #4	@ (adr r2, 80034cc <UART_SetConfig+0x400>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003517 	.word	0x08003517
 80034dc:	08003507 	.word	0x08003507
 80034e0:	08003517 	.word	0x08003517
 80034e4:	08003517 	.word	0x08003517
 80034e8:	08003517 	.word	0x08003517
 80034ec:	0800350f 	.word	0x0800350f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe fcc6 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80034f4:	61f8      	str	r0, [r7, #28]
        break;
 80034f6:	e014      	b.n	8003522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f8:	f7fe fcd8 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 80034fc:	61f8      	str	r0, [r7, #28]
        break;
 80034fe:	e010      	b.n	8003522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b4d      	ldr	r3, [pc, #308]	@ (8003638 <UART_SetConfig+0x56c>)
 8003502:	61fb      	str	r3, [r7, #28]
        break;
 8003504:	e00d      	b.n	8003522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7fe fc23 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 800350a:	61f8      	str	r0, [r7, #28]
        break;
 800350c:	e009      	b.n	8003522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003512:	61fb      	str	r3, [r7, #28]
        break;
 8003514:	e005      	b.n	8003522 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d077      	beq.n	8003618 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005a      	lsls	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	441a      	add	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d916      	bls.n	8003572 <UART_SetConfig+0x4a6>
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354a:	d212      	bcs.n	8003572 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f023 030f 	bic.w	r3, r3, #15
 8003554:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	b29b      	uxth	r3, r3
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	b29a      	uxth	r2, r3
 8003562:	8afb      	ldrh	r3, [r7, #22]
 8003564:	4313      	orrs	r3, r2
 8003566:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	8afa      	ldrh	r2, [r7, #22]
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	e052      	b.n	8003618 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003578:	e04e      	b.n	8003618 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800357a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800357e:	2b08      	cmp	r3, #8
 8003580:	d827      	bhi.n	80035d2 <UART_SetConfig+0x506>
 8003582:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <UART_SetConfig+0x4bc>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035bd 	.word	0x080035bd
 8003594:	080035d3 	.word	0x080035d3
 8003598:	080035c3 	.word	0x080035c3
 800359c:	080035d3 	.word	0x080035d3
 80035a0:	080035d3 	.word	0x080035d3
 80035a4:	080035d3 	.word	0x080035d3
 80035a8:	080035cb 	.word	0x080035cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7fe fc68 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80035b0:	61f8      	str	r0, [r7, #28]
        break;
 80035b2:	e014      	b.n	80035de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b4:	f7fe fc7a 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 80035b8:	61f8      	str	r0, [r7, #28]
        break;
 80035ba:	e010      	b.n	80035de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <UART_SetConfig+0x56c>)
 80035be:	61fb      	str	r3, [r7, #28]
        break;
 80035c0:	e00d      	b.n	80035de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c2:	f7fe fbc5 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 80035c6:	61f8      	str	r0, [r7, #28]
        break;
 80035c8:	e009      	b.n	80035de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ce:	61fb      	str	r3, [r7, #28]
        break;
 80035d0:	e005      	b.n	80035de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035dc:	bf00      	nop
    }

    if (pclk != 0U)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d019      	beq.n	8003618 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	085a      	lsrs	r2, r3, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	441a      	add	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	d909      	bls.n	8003612 <UART_SetConfig+0x546>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d205      	bcs.n	8003612 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	e002      	b.n	8003618 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003624:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003628:	4618      	mov	r0, r3
 800362a:	3728      	adds	r7, #40	@ 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003632:	bf00      	nop
 8003634:	40008000 	.word	0x40008000
 8003638:	00f42400 	.word	0x00f42400

0800363c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01a      	beq.n	8003752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800373a:	d10a      	bne.n	8003752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b098      	sub	sp, #96	@ 0x60
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003790:	f7fd fab8 	bl	8000d04 <HAL_GetTick>
 8003794:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d12e      	bne.n	8003802 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ac:	2200      	movs	r2, #0
 80037ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f88c 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d021      	beq.n	8003802 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e6      	bne.n	80037be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e062      	b.n	80038c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d149      	bne.n	80038a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003810:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003818:	2200      	movs	r2, #0
 800381a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f856 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d03c      	beq.n	80038a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	623b      	str	r3, [r7, #32]
   return(result);
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800383e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003848:	633b      	str	r3, [r7, #48]	@ 0x30
 800384a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800384e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e6      	bne.n	800382a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	60fb      	str	r3, [r7, #12]
   return(result);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800387c:	61fa      	str	r2, [r7, #28]
 800387e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	69b9      	ldr	r1, [r7, #24]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	617b      	str	r3, [r7, #20]
   return(result);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e011      	b.n	80038c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3758      	adds	r7, #88	@ 0x58
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e0:	e04f      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e8:	d04b      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7fd fa0b 	bl	8000d04 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <UART_WaitOnFlagUntilTimeout+0x30>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e04e      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d037      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b80      	cmp	r3, #128	@ 0x80
 8003916:	d034      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d031      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d110      	bne.n	800394e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2208      	movs	r2, #8
 8003932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f838 	bl	80039aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2208      	movs	r2, #8
 800393e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e029      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800395c:	d111      	bne.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f81e 	bl	80039aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e00f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	bf0c      	ite	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	2300      	movne	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	429a      	cmp	r2, r3
 800399e:	d0a0      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b095      	sub	sp, #84	@ 0x54
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e6      	bne.n	80039b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3308      	adds	r3, #8
 80039ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e5      	bne.n	80039e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d118      	bne.n	8003a52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f023 0310 	bic.w	r3, r3, #16
 8003a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6979      	ldr	r1, [r7, #20]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e6      	bne.n	8003a20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a66:	bf00      	nop
 8003a68:	3754      	adds	r7, #84	@ 0x54
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <__NVIC_SetPriority>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	db0a      	blt.n	8003a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	490c      	ldr	r1, [pc, #48]	@ (8003ac0 <__NVIC_SetPriority+0x4c>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a9c:	e00a      	b.n	8003ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4908      	ldr	r1, [pc, #32]	@ (8003ac4 <__NVIC_SetPriority+0x50>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	761a      	strb	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000e100 	.word	0xe000e100
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <SysTick_Handler+0x1c>)
 8003ace:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ad0:	f001 ff34 	bl	800593c <xTaskGetSchedulerState>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ada:	f002 fd2d 	bl	8006538 <xPortSysTickHandler>
  }
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	e000e010 	.word	0xe000e010

08003ae8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003aec:	2100      	movs	r1, #0
 8003aee:	f06f 0004 	mvn.w	r0, #4
 8003af2:	f7ff ffbf 	bl	8003a74 <__NVIC_SetPriority>
#endif
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b02:	f3ef 8305 	mrs	r3, IPSR
 8003b06:	603b      	str	r3, [r7, #0]
  return(result);
 8003b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b0e:	f06f 0305 	mvn.w	r3, #5
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e00c      	b.n	8003b30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b16:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <osKernelInitialize+0x44>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <osKernelInitialize+0x44>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e002      	b.n	8003b30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b30:	687b      	ldr	r3, [r7, #4]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	2000017c 	.word	0x2000017c

08003b44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b4a:	f3ef 8305 	mrs	r3, IPSR
 8003b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b56:	f06f 0305 	mvn.w	r3, #5
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	e010      	b.n	8003b80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <osKernelStart+0x48>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d109      	bne.n	8003b7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b66:	f7ff ffbf 	bl	8003ae8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	@ (8003b8c <osKernelStart+0x48>)
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b70:	f001 fa80 	bl	8005074 <vTaskStartScheduler>
      stat = osOK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	e002      	b.n	8003b80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b80:	687b      	ldr	r3, [r7, #4]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000017c 	.word	0x2000017c

08003b90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08e      	sub	sp, #56	@ 0x38
 8003b94:	af04      	add	r7, sp, #16
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba0:	f3ef 8305 	mrs	r3, IPSR
 8003ba4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ba6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d17e      	bne.n	8003caa <osThreadNew+0x11a>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d07b      	beq.n	8003caa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003bb2:	2380      	movs	r3, #128	@ 0x80
 8003bb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003bb6:	2318      	movs	r3, #24
 8003bb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d045      	beq.n	8003c56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <osThreadNew+0x48>
        name = attr->name;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <osThreadNew+0x6e>
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b38      	cmp	r3, #56	@ 0x38
 8003bf0:	d805      	bhi.n	8003bfe <osThreadNew+0x6e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <osThreadNew+0x72>
        return (NULL);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e054      	b.n	8003cac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00e      	beq.n	8003c38 <osThreadNew+0xa8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003c20:	d90a      	bls.n	8003c38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d006      	beq.n	8003c38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <osThreadNew+0xa8>
        mem = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e010      	b.n	8003c5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10c      	bne.n	8003c5a <osThreadNew+0xca>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d108      	bne.n	8003c5a <osThreadNew+0xca>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <osThreadNew+0xca>
          mem = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e001      	b.n	8003c5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d110      	bne.n	8003c82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c68:	9202      	str	r2, [sp, #8]
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	6a3a      	ldr	r2, [r7, #32]
 8003c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f001 f808 	bl	8004c8c <xTaskCreateStatic>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	e013      	b.n	8003caa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d110      	bne.n	8003caa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	f107 0310 	add.w	r3, r7, #16
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f001 f856 	bl	8004d4c <xTaskCreate>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d001      	beq.n	8003caa <osThreadNew+0x11a>
            hTask = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003caa:	693b      	ldr	r3, [r7, #16]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3728      	adds	r7, #40	@ 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cbc:	f3ef 8305 	mrs	r3, IPSR
 8003cc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <osDelay+0x1c>
    stat = osErrorISR;
 8003cc8:	f06f 0305 	mvn.w	r3, #5
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e007      	b.n	8003ce0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f001 f994 	bl	8005008 <vTaskDelay>
    }
  }

  return (stat);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b08a      	sub	sp, #40	@ 0x28
 8003cee:	af02      	add	r7, sp, #8
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cfa:	f3ef 8305 	mrs	r3, IPSR
 8003cfe:	613b      	str	r3, [r7, #16]
  return(result);
 8003d00:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d15f      	bne.n	8003dc6 <osMessageQueueNew+0xdc>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d05c      	beq.n	8003dc6 <osMessageQueueNew+0xdc>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d059      	beq.n	8003dc6 <osMessageQueueNew+0xdc>
    mem = -1;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d029      	beq.n	8003d72 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d012      	beq.n	8003d4c <osMessageQueueNew+0x62>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003d2c:	d90e      	bls.n	8003d4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <osMessageQueueNew+0x62>
        mem = 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	e014      	b.n	8003d76 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d110      	bne.n	8003d76 <osMessageQueueNew+0x8c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10c      	bne.n	8003d76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d108      	bne.n	8003d76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <osMessageQueueNew+0x8c>
          mem = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e001      	b.n	8003d76 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10b      	bne.n	8003d94 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2100      	movs	r1, #0
 8003d86:	9100      	str	r1, [sp, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fa30 	bl	80041f0 <xQueueGenericCreateStatic>
 8003d90:	61f8      	str	r0, [r7, #28]
 8003d92:	e008      	b.n	8003da6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 faa3 	bl	80042ea <xQueueGenericCreate>
 8003da4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <osMessageQueueNew+0xd0>
        name = attr->name;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e001      	b.n	8003dbe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003dbe:	6979      	ldr	r1, [r7, #20]
 8003dc0:	69f8      	ldr	r0, [r7, #28]
 8003dc2:	f000 ff05 	bl	8004bd0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003dc6:	69fb      	ldr	r3, [r7, #28]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de8:	f3ef 8305 	mrs	r3, IPSR
 8003dec:	617b      	str	r3, [r7, #20]
  return(result);
 8003dee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d028      	beq.n	8003e46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <osMessageQueuePut+0x36>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <osMessageQueuePut+0x36>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003e06:	f06f 0303 	mvn.w	r3, #3
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e038      	b.n	8003e80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003e12:	f107 0210 	add.w	r2, r7, #16
 8003e16:	2300      	movs	r3, #0
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	69b8      	ldr	r0, [r7, #24]
 8003e1c:	f000 fbc6 	bl	80045ac <xQueueGenericSendFromISR>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d003      	beq.n	8003e2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003e26:	f06f 0302 	mvn.w	r3, #2
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	e028      	b.n	8003e80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d025      	beq.n	8003e80 <osMessageQueuePut+0xb0>
 8003e34:	4b15      	ldr	r3, [pc, #84]	@ (8003e8c <osMessageQueuePut+0xbc>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	e01c      	b.n	8003e80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <osMessageQueuePut+0x82>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003e52:	f06f 0303 	mvn.w	r3, #3
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e012      	b.n	8003e80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	69b8      	ldr	r0, [r7, #24]
 8003e62:	f000 faa1 	bl	80043a8 <xQueueGenericSend>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d009      	beq.n	8003e80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003e72:	f06f 0301 	mvn.w	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e002      	b.n	8003e80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003e7a:	f06f 0302 	mvn.w	r3, #2
 8003e7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003e80:	69fb      	ldr	r3, [r7, #28]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea6:	f3ef 8305 	mrs	r3, IPSR
 8003eaa:	617b      	str	r3, [r7, #20]
  return(result);
 8003eac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d028      	beq.n	8003f04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <osMessageQueueGet+0x34>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <osMessageQueueGet+0x34>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003ec4:	f06f 0303 	mvn.w	r3, #3
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	e037      	b.n	8003f3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ed0:	f107 0310 	add.w	r3, r7, #16
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	69b8      	ldr	r0, [r7, #24]
 8003eda:	f000 fce7 	bl	80048ac <xQueueReceiveFromISR>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d003      	beq.n	8003eec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003ee4:	f06f 0302 	mvn.w	r3, #2
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	e027      	b.n	8003f3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d024      	beq.n	8003f3c <osMessageQueueGet+0xac>
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <osMessageQueueGet+0xb8>)
 8003ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	e01b      	b.n	8003f3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <osMessageQueueGet+0x80>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003f10:	f06f 0303 	mvn.w	r3, #3
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e011      	b.n	8003f3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	69b8      	ldr	r0, [r7, #24]
 8003f1e:	f000 fbe3 	bl	80046e8 <xQueueReceive>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d009      	beq.n	8003f3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003f2e:	f06f 0301 	mvn.w	r3, #1
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e002      	b.n	8003f3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003f36:	f06f 0302 	mvn.w	r3, #2
 8003f3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003f3c:	69fb      	ldr	r3, [r7, #28]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a07      	ldr	r2, [pc, #28]	@ (8003f78 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4a06      	ldr	r2, [pc, #24]	@ (8003f7c <vApplicationGetIdleTaskMemory+0x30>)
 8003f62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2280      	movs	r2, #128	@ 0x80
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20000180 	.word	0x20000180
 8003f7c:	20000228 	.word	0x20000228

08003f80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a07      	ldr	r2, [pc, #28]	@ (8003fac <vApplicationGetTimerTaskMemory+0x2c>)
 8003f90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4a06      	ldr	r2, [pc, #24]	@ (8003fb0 <vApplicationGetTimerTaskMemory+0x30>)
 8003f96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f9e:	601a      	str	r2, [r3, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20000428 	.word	0x20000428
 8003fb0:	200004d0 	.word	0x200004d0

08003fb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f103 0208 	add.w	r2, r3, #8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f103 0208 	add.w	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f103 0208 	add.w	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800406c:	d103      	bne.n	8004076 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e00c      	b.n	8004090 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3308      	adds	r3, #8
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e002      	b.n	8004084 <vListInsert+0x2e>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	429a      	cmp	r2, r3
 800408e:	d2f6      	bcs.n	800407e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	601a      	str	r2, [r3, #0]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6892      	ldr	r2, [r2, #8]
 80040de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6852      	ldr	r2, [r2, #4]
 80040e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d103      	bne.n	80040fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	1e5a      	subs	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004148:	f002 f966 	bl	8006418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	68f9      	ldr	r1, [r7, #12]
 8004156:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	441a      	add	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004178:	3b01      	subs	r3, #1
 800417a:	68f9      	ldr	r1, [r7, #12]
 800417c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	441a      	add	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	22ff      	movs	r2, #255	@ 0xff
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	22ff      	movs	r2, #255	@ 0xff
 8004194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d114      	bne.n	80041c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01a      	beq.n	80041dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3310      	adds	r3, #16
 80041aa:	4618      	mov	r0, r3
 80041ac:	f001 fa00 	bl	80055b0 <xTaskRemoveFromEventList>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d012      	beq.n	80041dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <xQueueGenericReset+0xd0>)
 80041b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	e009      	b.n	80041dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3310      	adds	r3, #16
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fef1 	bl	8003fb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3324      	adds	r3, #36	@ 0x24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff feec 	bl	8003fb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041dc:	f002 f94e 	bl	800647c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041e0:	2301      	movs	r3, #1
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	e000ed04 	.word	0xe000ed04

080041f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08e      	sub	sp, #56	@ 0x38
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	e7fd      	b.n	8004236 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <xQueueGenericCreateStatic+0x56>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <xQueueGenericCreateStatic+0x5a>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <xQueueGenericCreateStatic+0x5c>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	623b      	str	r3, [r7, #32]
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <xQueueGenericCreateStatic+0x84>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <xQueueGenericCreateStatic+0x88>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <xQueueGenericCreateStatic+0x8a>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	61fb      	str	r3, [r7, #28]
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004296:	2350      	movs	r3, #80	@ 0x50
 8004298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b50      	cmp	r3, #80	@ 0x50
 800429e:	d00b      	beq.n	80042b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	61bb      	str	r3, [r7, #24]
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00d      	beq.n	80042e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f840 	bl	8004360 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3730      	adds	r7, #48	@ 0x30
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b08a      	sub	sp, #40	@ 0x28
 80042ee:	af02      	add	r7, sp, #8
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <xQueueGenericCreate+0x2c>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	613b      	str	r3, [r7, #16]
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	e7fd      	b.n	8004312 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	3350      	adds	r3, #80	@ 0x50
 8004324:	4618      	mov	r0, r3
 8004326:	f002 f999 	bl	800665c <pvPortMalloc>
 800432a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d011      	beq.n	8004356 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3350      	adds	r3, #80	@ 0x50
 800433a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004344:	79fa      	ldrb	r2, [r7, #7]
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f805 	bl	8004360 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004356:	69bb      	ldr	r3, [r7, #24]
	}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	e002      	b.n	8004382 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800438e:	2101      	movs	r1, #1
 8004390:	69b8      	ldr	r0, [r7, #24]
 8004392:	f7ff fec3 	bl	800411c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08e      	sub	sp, #56	@ 0x38
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043b6:	2300      	movs	r3, #0
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <xQueueGenericSend+0x34>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <xQueueGenericSend+0x42>
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <xQueueGenericSend+0x46>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <xQueueGenericSend+0x48>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <xQueueGenericSend+0x64>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d103      	bne.n	800441a <xQueueGenericSend+0x72>
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <xQueueGenericSend+0x76>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <xQueueGenericSend+0x78>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <xQueueGenericSend+0x94>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	623b      	str	r3, [r7, #32]
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800443c:	f001 fa7e 	bl	800593c <xTaskGetSchedulerState>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <xQueueGenericSend+0xa4>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <xQueueGenericSend+0xa8>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <xQueueGenericSend+0xaa>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <xQueueGenericSend+0xc6>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800446e:	f001 ffd3 	bl	8006418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <xQueueGenericSend+0xdc>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d129      	bne.n	80044d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800448a:	f000 fa91 	bl	80049b0 <prvCopyDataToQueue>
 800448e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d010      	beq.n	80044ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	3324      	adds	r3, #36	@ 0x24
 800449c:	4618      	mov	r0, r3
 800449e:	f001 f887 	bl	80055b0 <xTaskRemoveFromEventList>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044a8:	4b3f      	ldr	r3, [pc, #252]	@ (80045a8 <xQueueGenericSend+0x200>)
 80044aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	e00a      	b.n	80044d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044c0:	4b39      	ldr	r3, [pc, #228]	@ (80045a8 <xQueueGenericSend+0x200>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044d0:	f001 ffd4 	bl	800647c <vPortExitCritical>
				return pdPASS;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e063      	b.n	80045a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044de:	f001 ffcd 	bl	800647c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e05c      	b.n	80045a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 f8c1 	bl	8005678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044fa:	f001 ffbf 	bl	800647c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044fe:	f000 fe29 	bl	8005154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004502:	f001 ff89 	bl	8006418 <vPortEnterCritical>
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800450c:	b25b      	sxtb	r3, r3
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004512:	d103      	bne.n	800451c <xQueueGenericSend+0x174>
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004522:	b25b      	sxtb	r3, r3
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004528:	d103      	bne.n	8004532 <xQueueGenericSend+0x18a>
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004532:	f001 ffa3 	bl	800647c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004536:	1d3a      	adds	r2, r7, #4
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f001 f8b0 	bl	80056a4 <xTaskCheckForTimeOut>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d124      	bne.n	8004594 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800454a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800454c:	f000 fb28 	bl	8004ba0 <prvIsQueueFull>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d018      	beq.n	8004588 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	3310      	adds	r3, #16
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ffd4 	bl	800550c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004566:	f000 fab3 	bl	8004ad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800456a:	f000 fe01 	bl	8005170 <xTaskResumeAll>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	f47f af7c 	bne.w	800446e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004576:	4b0c      	ldr	r3, [pc, #48]	@ (80045a8 <xQueueGenericSend+0x200>)
 8004578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	e772      	b.n	800446e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800458a:	f000 faa1 	bl	8004ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800458e:	f000 fdef 	bl	8005170 <xTaskResumeAll>
 8004592:	e76c      	b.n	800446e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004596:	f000 fa9b 	bl	8004ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800459a:	f000 fde9 	bl	8005170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800459e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3738      	adds	r7, #56	@ 0x38
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b090      	sub	sp, #64	@ 0x40
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <xQueueGenericSendFromISR+0x3e>
 80045e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <xQueueGenericSendFromISR+0x42>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <xQueueGenericSendFromISR+0x44>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d103      	bne.n	800461a <xQueueGenericSendFromISR+0x6e>
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <xQueueGenericSendFromISR+0x72>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueGenericSendFromISR+0x74>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	623b      	str	r3, [r7, #32]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800463c:	f001 ffcc 	bl	80065d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004640:	f3ef 8211 	mrs	r2, BASEPRI
 8004644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	61fa      	str	r2, [r7, #28]
 8004656:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004658:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800465c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004664:	429a      	cmp	r2, r3
 8004666:	d302      	bcc.n	800466e <xQueueGenericSendFromISR+0xc2>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d12f      	bne.n	80046ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004674:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004684:	f000 f994 	bl	80049b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004688:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004690:	d112      	bne.n	80046b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	3324      	adds	r3, #36	@ 0x24
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 ff86 	bl	80055b0 <xTaskRemoveFromEventList>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e007      	b.n	80046c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80046bc:	3301      	adds	r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	b25a      	sxtb	r2, r3
 80046c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80046c8:	2301      	movs	r3, #1
 80046ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80046cc:	e001      	b.n	80046d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3740      	adds	r7, #64	@ 0x40
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	@ 0x30
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <xQueueReceive+0x32>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	623b      	str	r3, [r7, #32]
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	e7fd      	b.n	8004716 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d103      	bne.n	8004728 <xQueueReceive+0x40>
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <xQueueReceive+0x44>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <xQueueReceive+0x46>
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <xQueueReceive+0x62>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	61fb      	str	r3, [r7, #28]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800474a:	f001 f8f7 	bl	800593c <xTaskGetSchedulerState>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <xQueueReceive+0x72>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <xQueueReceive+0x76>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueReceive+0x78>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <xQueueReceive+0x94>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	61bb      	str	r3, [r7, #24]
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800477c:	f001 fe4c 	bl	8006418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01f      	beq.n	80047cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004790:	f000 f978 	bl	8004a84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	1e5a      	subs	r2, r3, #1
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00f      	beq.n	80047c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	3310      	adds	r3, #16
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 ff01 	bl	80055b0 <xTaskRemoveFromEventList>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047b4:	4b3c      	ldr	r3, [pc, #240]	@ (80048a8 <xQueueReceive+0x1c0>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047c4:	f001 fe5a 	bl	800647c <vPortExitCritical>
				return pdPASS;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e069      	b.n	80048a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047d2:	f001 fe53 	bl	800647c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e062      	b.n	80048a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 ff47 	bl	8005678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ee:	f001 fe45 	bl	800647c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047f2:	f000 fcaf 	bl	8005154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047f6:	f001 fe0f 	bl	8006418 <vPortEnterCritical>
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004800:	b25b      	sxtb	r3, r3
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004806:	d103      	bne.n	8004810 <xQueueReceive+0x128>
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004812:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004816:	b25b      	sxtb	r3, r3
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800481c:	d103      	bne.n	8004826 <xQueueReceive+0x13e>
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004826:	f001 fe29 	bl	800647c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800482a:	1d3a      	adds	r2, r7, #4
 800482c:	f107 0310 	add.w	r3, r7, #16
 8004830:	4611      	mov	r1, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f000 ff36 	bl	80056a4 <xTaskCheckForTimeOut>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d123      	bne.n	8004886 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800483e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004840:	f000 f998 	bl	8004b74 <prvIsQueueEmpty>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d017      	beq.n	800487a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	3324      	adds	r3, #36	@ 0x24
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fe5a 	bl	800550c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800485a:	f000 f939 	bl	8004ad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800485e:	f000 fc87 	bl	8005170 <xTaskResumeAll>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d189      	bne.n	800477c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004868:	4b0f      	ldr	r3, [pc, #60]	@ (80048a8 <xQueueReceive+0x1c0>)
 800486a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	e780      	b.n	800477c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800487a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800487c:	f000 f928 	bl	8004ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004880:	f000 fc76 	bl	8005170 <xTaskResumeAll>
 8004884:	e77a      	b.n	800477c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004888:	f000 f922 	bl	8004ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800488c:	f000 fc70 	bl	8005170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004892:	f000 f96f 	bl	8004b74 <prvIsQueueEmpty>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	f43f af6f 	beq.w	800477c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800489e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3730      	adds	r7, #48	@ 0x30
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08e      	sub	sp, #56	@ 0x38
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	623b      	str	r3, [r7, #32]
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	e7fd      	b.n	80048d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <xQueueReceiveFromISR+0x3c>
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <xQueueReceiveFromISR+0x40>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <xQueueReceiveFromISR+0x42>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	61fb      	str	r3, [r7, #28]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800490a:	f001 fe65 	bl	80065d8 <vPortValidateInterruptPriority>
	__asm volatile
 800490e:	f3ef 8211 	mrs	r2, BASEPRI
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	61ba      	str	r2, [r7, #24]
 8004924:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004926:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02f      	beq.n	8004996 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800493c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004944:	f000 f89e 	bl	8004a84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	1e5a      	subs	r2, r3, #1
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004950:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004958:	d112      	bne.n	8004980 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d016      	beq.n	8004990 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	3310      	adds	r3, #16
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fe22 	bl	80055b0 <xTaskRemoveFromEventList>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00e      	beq.n	8004990 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00b      	beq.n	8004990 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e007      	b.n	8004990 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004984:	3301      	adds	r3, #1
 8004986:	b2db      	uxtb	r3, r3
 8004988:	b25a      	sxtb	r2, r3
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004990:	2301      	movs	r3, #1
 8004992:	637b      	str	r3, [r7, #52]	@ 0x34
 8004994:	e001      	b.n	800499a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004996:	2300      	movs	r3, #0
 8004998:	637b      	str	r3, [r7, #52]	@ 0x34
 800499a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f383 8811 	msr	BASEPRI, r3
}
 80049a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3738      	adds	r7, #56	@ 0x38
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d14d      	bne.n	8004a72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 ffcc 	bl	8005978 <xTaskPriorityDisinherit>
 80049e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	e043      	b.n	8004a72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d119      	bne.n	8004a24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6858      	ldr	r0, [r3, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	461a      	mov	r2, r3
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	f002 faf7 	bl	8006fee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	441a      	add	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d32b      	bcc.n	8004a72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	e026      	b.n	8004a72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68d8      	ldr	r0, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	f002 fadd 	bl	8006fee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3c:	425b      	negs	r3, r3
 8004a3e:	441a      	add	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d207      	bcs.n	8004a60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	425b      	negs	r3, r3
 8004a5a:	441a      	add	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d105      	bne.n	8004a72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a7a:	697b      	ldr	r3, [r7, #20]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	441a      	add	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d303      	bcc.n	8004ab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68d9      	ldr	r1, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6838      	ldr	r0, [r7, #0]
 8004ac4:	f002 fa93 	bl	8006fee <memcpy>
	}
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ad8:	f001 fc9e 	bl	8006418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ae4:	e011      	b.n	8004b0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d012      	beq.n	8004b14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3324      	adds	r3, #36	@ 0x24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fd5c 	bl	80055b0 <xTaskRemoveFromEventList>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004afe:	f000 fe35 	bl	800576c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dce9      	bgt.n	8004ae6 <prvUnlockQueue+0x16>
 8004b12:	e000      	b.n	8004b16 <prvUnlockQueue+0x46>
					break;
 8004b14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	22ff      	movs	r2, #255	@ 0xff
 8004b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b1e:	f001 fcad 	bl	800647c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b22:	f001 fc79 	bl	8006418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b2e:	e011      	b.n	8004b54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d012      	beq.n	8004b5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3310      	adds	r3, #16
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fd37 	bl	80055b0 <xTaskRemoveFromEventList>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b48:	f000 fe10 	bl	800576c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b4c:	7bbb      	ldrb	r3, [r7, #14]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	dce9      	bgt.n	8004b30 <prvUnlockQueue+0x60>
 8004b5c:	e000      	b.n	8004b60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	22ff      	movs	r2, #255	@ 0xff
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b68:	f001 fc88 	bl	800647c <vPortExitCritical>
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b7c:	f001 fc4c 	bl	8006418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e001      	b.n	8004b92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b92:	f001 fc73 	bl	800647c <vPortExitCritical>

	return xReturn;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ba8:	f001 fc36 	bl	8006418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d102      	bne.n	8004bbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e001      	b.n	8004bc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bc2:	f001 fc5b 	bl	800647c <vPortExitCritical>

	return xReturn;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e014      	b.n	8004c0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004be0:	4a0f      	ldr	r2, [pc, #60]	@ (8004c20 <vQueueAddToRegistry+0x50>)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10b      	bne.n	8004c04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bec:	490c      	ldr	r1, [pc, #48]	@ (8004c20 <vQueueAddToRegistry+0x50>)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c20 <vQueueAddToRegistry+0x50>)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c02:	e006      	b.n	8004c12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b07      	cmp	r3, #7
 8004c0e:	d9e7      	bls.n	8004be0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	200008d0 	.word	0x200008d0

08004c24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c34:	f001 fbf0 	bl	8006418 <vPortEnterCritical>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c3e:	b25b      	sxtb	r3, r3
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c44:	d103      	bne.n	8004c4e <vQueueWaitForMessageRestricted+0x2a>
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c54:	b25b      	sxtb	r3, r3
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c5a:	d103      	bne.n	8004c64 <vQueueWaitForMessageRestricted+0x40>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c64:	f001 fc0a 	bl	800647c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3324      	adds	r3, #36	@ 0x24
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fc6d 	bl	8005558 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c7e:	6978      	ldr	r0, [r7, #20]
 8004c80:	f7ff ff26 	bl	8004ad0 <prvUnlockQueue>
	}
 8004c84:	bf00      	nop
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08e      	sub	sp, #56	@ 0x38
 8004c90:	af04      	add	r7, sp, #16
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	623b      	str	r3, [r7, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	61fb      	str	r3, [r7, #28]
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	e7fd      	b.n	8004cd2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cd6:	23a8      	movs	r3, #168	@ 0xa8
 8004cd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2ba8      	cmp	r3, #168	@ 0xa8
 8004cde:	d00b      	beq.n	8004cf8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	61bb      	str	r3, [r7, #24]
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01e      	beq.n	8004d3e <xTaskCreateStatic+0xb2>
 8004d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01b      	beq.n	8004d3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9303      	str	r3, [sp, #12]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	f107 0314 	add.w	r3, r7, #20
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f851 	bl	8004dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d38:	f000 f8f6 	bl	8004f28 <prvAddNewTaskToReadyList>
 8004d3c:	e001      	b.n	8004d42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d42:	697b      	ldr	r3, [r7, #20]
	}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3728      	adds	r7, #40	@ 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	@ 0x30
 8004d50:	af04      	add	r7, sp, #16
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fc7b 	bl	800665c <pvPortMalloc>
 8004d66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00e      	beq.n	8004d8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d6e:	20a8      	movs	r0, #168	@ 0xa8
 8004d70:	f001 fc74 	bl	800665c <pvPortMalloc>
 8004d74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d82:	e005      	b.n	8004d90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d84:	6978      	ldr	r0, [r7, #20]
 8004d86:	f001 fd37 	bl	80067f8 <vPortFree>
 8004d8a:	e001      	b.n	8004d90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d017      	beq.n	8004dc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	2300      	movs	r3, #0
 8004da2:	9303      	str	r3, [sp, #12]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	9302      	str	r3, [sp, #8]
 8004da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f80f 	bl	8004dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dba:	69f8      	ldr	r0, [r7, #28]
 8004dbc:	f000 f8b4 	bl	8004f28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	e002      	b.n	8004dcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004dca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
	}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	461a      	mov	r2, r3
 8004df0:	21a5      	movs	r1, #165	@ 0xa5
 8004df2:	f002 f82b 	bl	8006e4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e00:	3b01      	subs	r3, #1
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f023 0307 	bic.w	r3, r3, #7
 8004e0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	617b      	str	r3, [r7, #20]
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	e7fd      	b.n	8004e2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01f      	beq.n	8004e78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	e012      	b.n	8004e64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	7819      	ldrb	r1, [r3, #0]
 8004e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3334      	adds	r3, #52	@ 0x34
 8004e4e:	460a      	mov	r2, r1
 8004e50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d006      	beq.n	8004e6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3301      	adds	r3, #1
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	d9e9      	bls.n	8004e3e <prvInitialiseNewTask+0x66>
 8004e6a:	e000      	b.n	8004e6e <prvInitialiseNewTask+0x96>
			{
				break;
 8004e6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e76:	e003      	b.n	8004e80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	2b37      	cmp	r3, #55	@ 0x37
 8004e84:	d901      	bls.n	8004e8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e86:	2337      	movs	r3, #55	@ 0x37
 8004e88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	2200      	movs	r2, #0
 8004e9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff f8a7 	bl	8003ff4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	3318      	adds	r3, #24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff f8a2 	bl	8003ff4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ec4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	3354      	adds	r3, #84	@ 0x54
 8004eda:	224c      	movs	r2, #76	@ 0x4c
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 ffb4 	bl	8006e4c <memset>
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8004f1c <prvInitialiseNewTask+0x144>)
 8004ee8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	4a0c      	ldr	r2, [pc, #48]	@ (8004f20 <prvInitialiseNewTask+0x148>)
 8004eee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f24 <prvInitialiseNewTask+0x14c>)
 8004ef4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	69b8      	ldr	r0, [r7, #24]
 8004efc:	f001 f95a 	bl	80061b4 <pxPortInitialiseStack>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f12:	bf00      	nop
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20001b1c 	.word	0x20001b1c
 8004f20:	20001b84 	.word	0x20001b84
 8004f24:	20001bec 	.word	0x20001bec

08004f28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f30:	f001 fa72 	bl	8006418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f34:	4b2d      	ldr	r3, [pc, #180]	@ (8004fec <prvAddNewTaskToReadyList+0xc4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004fec <prvAddNewTaskToReadyList+0xc4>)
 8004f3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff0 <prvAddNewTaskToReadyList+0xc8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f46:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff0 <prvAddNewTaskToReadyList+0xc8>)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f4c:	4b27      	ldr	r3, [pc, #156]	@ (8004fec <prvAddNewTaskToReadyList+0xc4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d110      	bne.n	8004f76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f54:	f000 fc2e 	bl	80057b4 <prvInitialiseTaskLists>
 8004f58:	e00d      	b.n	8004f76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f5a:	4b26      	ldr	r3, [pc, #152]	@ (8004ff4 <prvAddNewTaskToReadyList+0xcc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f62:	4b23      	ldr	r3, [pc, #140]	@ (8004ff0 <prvAddNewTaskToReadyList+0xc8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d802      	bhi.n	8004f76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f70:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff0 <prvAddNewTaskToReadyList+0xc8>)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f76:	4b20      	ldr	r3, [pc, #128]	@ (8004ff8 <prvAddNewTaskToReadyList+0xd0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff8 <prvAddNewTaskToReadyList+0xd0>)
 8004f7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f80:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff8 <prvAddNewTaskToReadyList+0xd0>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ffc <prvAddNewTaskToReadyList+0xd4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d903      	bls.n	8004f9c <prvAddNewTaskToReadyList+0x74>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <prvAddNewTaskToReadyList+0xd4>)
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <prvAddNewTaskToReadyList+0xd8>)
 8004faa:	441a      	add	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f7ff f82b 	bl	800400e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fb8:	f001 fa60 	bl	800647c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <prvAddNewTaskToReadyList+0xcc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00e      	beq.n	8004fe2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <prvAddNewTaskToReadyList+0xc8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d207      	bcs.n	8004fe2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <prvAddNewTaskToReadyList+0xdc>)
 8004fd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000de4 	.word	0x20000de4
 8004ff0:	20000910 	.word	0x20000910
 8004ff4:	20000df0 	.word	0x20000df0
 8004ff8:	20000e00 	.word	0x20000e00
 8004ffc:	20000dec 	.word	0x20000dec
 8005000:	20000914 	.word	0x20000914
 8005004:	e000ed04 	.word	0xe000ed04

08005008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d018      	beq.n	800504c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800501a:	4b14      	ldr	r3, [pc, #80]	@ (800506c <vTaskDelay+0x64>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <vTaskDelay+0x32>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	60bb      	str	r3, [r7, #8]
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800503a:	f000 f88b 	bl	8005154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800503e:	2100      	movs	r1, #0
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fd09 	bl	8005a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005046:	f000 f893 	bl	8005170 <xTaskResumeAll>
 800504a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d107      	bne.n	8005062 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <vTaskDelay+0x68>)
 8005054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000e0c 	.word	0x20000e0c
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	@ 0x28
 8005078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005082:	463a      	mov	r2, r7
 8005084:	1d39      	adds	r1, r7, #4
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe ff5e 	bl	8003f4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	9202      	str	r2, [sp, #8]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	460a      	mov	r2, r1
 80050a2:	4924      	ldr	r1, [pc, #144]	@ (8005134 <vTaskStartScheduler+0xc0>)
 80050a4:	4824      	ldr	r0, [pc, #144]	@ (8005138 <vTaskStartScheduler+0xc4>)
 80050a6:	f7ff fdf1 	bl	8004c8c <xTaskCreateStatic>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4a23      	ldr	r2, [pc, #140]	@ (800513c <vTaskStartScheduler+0xc8>)
 80050ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050b0:	4b22      	ldr	r3, [pc, #136]	@ (800513c <vTaskStartScheduler+0xc8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050b8:	2301      	movs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e001      	b.n	80050c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d102      	bne.n	80050ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050c8:	f000 fd1a 	bl	8005b00 <xTimerCreateTimerTask>
 80050cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d11b      	bne.n	800510c <vTaskStartScheduler+0x98>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	613b      	str	r3, [r7, #16]
}
 80050e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050e8:	4b15      	ldr	r3, [pc, #84]	@ (8005140 <vTaskStartScheduler+0xcc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3354      	adds	r3, #84	@ 0x54
 80050ee:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <vTaskStartScheduler+0xd0>)
 80050f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050f2:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <vTaskStartScheduler+0xd4>)
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050fa:	4b14      	ldr	r3, [pc, #80]	@ (800514c <vTaskStartScheduler+0xd8>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005100:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <vTaskStartScheduler+0xdc>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005106:	f001 f8e3 	bl	80062d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800510a:	e00f      	b.n	800512c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005112:	d10b      	bne.n	800512c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	60fb      	str	r3, [r7, #12]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <vTaskStartScheduler+0xb4>
}
 800512c:	bf00      	nop
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	08007aa0 	.word	0x08007aa0
 8005138:	08005785 	.word	0x08005785
 800513c:	20000e08 	.word	0x20000e08
 8005140:	20000910 	.word	0x20000910
 8005144:	20000024 	.word	0x20000024
 8005148:	20000e04 	.word	0x20000e04
 800514c:	20000df0 	.word	0x20000df0
 8005150:	20000de8 	.word	0x20000de8

08005154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005158:	4b04      	ldr	r3, [pc, #16]	@ (800516c <vTaskSuspendAll+0x18>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3301      	adds	r3, #1
 800515e:	4a03      	ldr	r2, [pc, #12]	@ (800516c <vTaskSuspendAll+0x18>)
 8005160:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005162:	bf00      	nop
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20000e0c 	.word	0x20000e0c

08005170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800517e:	4b42      	ldr	r3, [pc, #264]	@ (8005288 <xTaskResumeAll+0x118>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <xTaskResumeAll+0x2e>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	603b      	str	r3, [r7, #0]
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	e7fd      	b.n	800519a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800519e:	f001 f93b 	bl	8006418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051a2:	4b39      	ldr	r3, [pc, #228]	@ (8005288 <xTaskResumeAll+0x118>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	4a37      	ldr	r2, [pc, #220]	@ (8005288 <xTaskResumeAll+0x118>)
 80051aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ac:	4b36      	ldr	r3, [pc, #216]	@ (8005288 <xTaskResumeAll+0x118>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d162      	bne.n	800527a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051b4:	4b35      	ldr	r3, [pc, #212]	@ (800528c <xTaskResumeAll+0x11c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d05e      	beq.n	800527a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051bc:	e02f      	b.n	800521e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051be:	4b34      	ldr	r3, [pc, #208]	@ (8005290 <xTaskResumeAll+0x120>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3318      	adds	r3, #24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe ff7c 	bl	80040c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fe ff77 	bl	80040c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051de:	4b2d      	ldr	r3, [pc, #180]	@ (8005294 <xTaskResumeAll+0x124>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d903      	bls.n	80051ee <xTaskResumeAll+0x7e>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005294 <xTaskResumeAll+0x124>)
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4a27      	ldr	r2, [pc, #156]	@ (8005298 <xTaskResumeAll+0x128>)
 80051fc:	441a      	add	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7fe ff02 	bl	800400e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520e:	4b23      	ldr	r3, [pc, #140]	@ (800529c <xTaskResumeAll+0x12c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005218:	4b21      	ldr	r3, [pc, #132]	@ (80052a0 <xTaskResumeAll+0x130>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800521e:	4b1c      	ldr	r3, [pc, #112]	@ (8005290 <xTaskResumeAll+0x120>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1cb      	bne.n	80051be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800522c:	f000 fb66 	bl	80058fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005230:	4b1c      	ldr	r3, [pc, #112]	@ (80052a4 <xTaskResumeAll+0x134>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d010      	beq.n	800525e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800523c:	f000 f846 	bl	80052cc <xTaskIncrementTick>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005246:	4b16      	ldr	r3, [pc, #88]	@ (80052a0 <xTaskResumeAll+0x130>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f1      	bne.n	800523c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005258:	4b12      	ldr	r3, [pc, #72]	@ (80052a4 <xTaskResumeAll+0x134>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800525e:	4b10      	ldr	r3, [pc, #64]	@ (80052a0 <xTaskResumeAll+0x130>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005266:	2301      	movs	r3, #1
 8005268:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800526a:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <xTaskResumeAll+0x138>)
 800526c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800527a:	f001 f8ff 	bl	800647c <vPortExitCritical>

	return xAlreadyYielded;
 800527e:	68bb      	ldr	r3, [r7, #8]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000e0c 	.word	0x20000e0c
 800528c:	20000de4 	.word	0x20000de4
 8005290:	20000da4 	.word	0x20000da4
 8005294:	20000dec 	.word	0x20000dec
 8005298:	20000914 	.word	0x20000914
 800529c:	20000910 	.word	0x20000910
 80052a0:	20000df8 	.word	0x20000df8
 80052a4:	20000df4 	.word	0x20000df4
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052b2:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <xTaskGetTickCount+0x1c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052b8:	687b      	ldr	r3, [r7, #4]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000de8 	.word	0x20000de8

080052cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005414 <xTaskIncrementTick+0x148>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f040 8090 	bne.w	8005400 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005418 <xTaskIncrementTick+0x14c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005418 <xTaskIncrementTick+0x14c>)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d121      	bne.n	8005338 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052f4:	4b49      	ldr	r3, [pc, #292]	@ (800541c <xTaskIncrementTick+0x150>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <xTaskIncrementTick+0x4a>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	603b      	str	r3, [r7, #0]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <xTaskIncrementTick+0x46>
 8005316:	4b41      	ldr	r3, [pc, #260]	@ (800541c <xTaskIncrementTick+0x150>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	4b40      	ldr	r3, [pc, #256]	@ (8005420 <xTaskIncrementTick+0x154>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a3e      	ldr	r2, [pc, #248]	@ (800541c <xTaskIncrementTick+0x150>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	4a3e      	ldr	r2, [pc, #248]	@ (8005420 <xTaskIncrementTick+0x154>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	4b3e      	ldr	r3, [pc, #248]	@ (8005424 <xTaskIncrementTick+0x158>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	4a3c      	ldr	r2, [pc, #240]	@ (8005424 <xTaskIncrementTick+0x158>)
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	f000 fae2 	bl	80058fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005338:	4b3b      	ldr	r3, [pc, #236]	@ (8005428 <xTaskIncrementTick+0x15c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	429a      	cmp	r2, r3
 8005340:	d349      	bcc.n	80053d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005342:	4b36      	ldr	r3, [pc, #216]	@ (800541c <xTaskIncrementTick+0x150>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534c:	4b36      	ldr	r3, [pc, #216]	@ (8005428 <xTaskIncrementTick+0x15c>)
 800534e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005352:	601a      	str	r2, [r3, #0]
					break;
 8005354:	e03f      	b.n	80053d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005356:	4b31      	ldr	r3, [pc, #196]	@ (800541c <xTaskIncrementTick+0x150>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	429a      	cmp	r2, r3
 800536c:	d203      	bcs.n	8005376 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800536e:	4a2e      	ldr	r2, [pc, #184]	@ (8005428 <xTaskIncrementTick+0x15c>)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005374:	e02f      	b.n	80053d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3304      	adds	r3, #4
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fea4 	bl	80040c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	2b00      	cmp	r3, #0
 8005386:	d004      	beq.n	8005392 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	3318      	adds	r3, #24
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fe9b 	bl	80040c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005396:	4b25      	ldr	r3, [pc, #148]	@ (800542c <xTaskIncrementTick+0x160>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d903      	bls.n	80053a6 <xTaskIncrementTick+0xda>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	4a22      	ldr	r2, [pc, #136]	@ (800542c <xTaskIncrementTick+0x160>)
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005430 <xTaskIncrementTick+0x164>)
 80053b4:	441a      	add	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f7fe fe26 	bl	800400e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <xTaskIncrementTick+0x168>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d3b8      	bcc.n	8005342 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d4:	e7b5      	b.n	8005342 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053d6:	4b17      	ldr	r3, [pc, #92]	@ (8005434 <xTaskIncrementTick+0x168>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053dc:	4914      	ldr	r1, [pc, #80]	@ (8005430 <xTaskIncrementTick+0x164>)
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d901      	bls.n	80053f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80053ee:	2301      	movs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053f2:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <xTaskIncrementTick+0x16c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e004      	b.n	800540a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005400:	4b0e      	ldr	r3, [pc, #56]	@ (800543c <xTaskIncrementTick+0x170>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a0d      	ldr	r2, [pc, #52]	@ (800543c <xTaskIncrementTick+0x170>)
 8005408:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800540a:	697b      	ldr	r3, [r7, #20]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000e0c 	.word	0x20000e0c
 8005418:	20000de8 	.word	0x20000de8
 800541c:	20000d9c 	.word	0x20000d9c
 8005420:	20000da0 	.word	0x20000da0
 8005424:	20000dfc 	.word	0x20000dfc
 8005428:	20000e04 	.word	0x20000e04
 800542c:	20000dec 	.word	0x20000dec
 8005430:	20000914 	.word	0x20000914
 8005434:	20000910 	.word	0x20000910
 8005438:	20000df8 	.word	0x20000df8
 800543c:	20000df4 	.word	0x20000df4

08005440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005446:	4b2b      	ldr	r3, [pc, #172]	@ (80054f4 <vTaskSwitchContext+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800544e:	4b2a      	ldr	r3, [pc, #168]	@ (80054f8 <vTaskSwitchContext+0xb8>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005454:	e047      	b.n	80054e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005456:	4b28      	ldr	r3, [pc, #160]	@ (80054f8 <vTaskSwitchContext+0xb8>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545c:	4b27      	ldr	r3, [pc, #156]	@ (80054fc <vTaskSwitchContext+0xbc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e011      	b.n	8005488 <vTaskSwitchContext+0x48>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <vTaskSwitchContext+0x42>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	607b      	str	r3, [r7, #4]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <vTaskSwitchContext+0x3e>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3b01      	subs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	491d      	ldr	r1, [pc, #116]	@ (8005500 <vTaskSwitchContext+0xc0>)
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0e3      	beq.n	8005464 <vTaskSwitchContext+0x24>
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4a16      	ldr	r2, [pc, #88]	@ (8005500 <vTaskSwitchContext+0xc0>)
 80054a8:	4413      	add	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3308      	adds	r3, #8
 80054be:	429a      	cmp	r2, r3
 80054c0:	d104      	bne.n	80054cc <vTaskSwitchContext+0x8c>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005504 <vTaskSwitchContext+0xc4>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4a09      	ldr	r2, [pc, #36]	@ (80054fc <vTaskSwitchContext+0xbc>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <vTaskSwitchContext+0xc4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3354      	adds	r3, #84	@ 0x54
 80054e2:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <vTaskSwitchContext+0xc8>)
 80054e4:	6013      	str	r3, [r2, #0]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000e0c 	.word	0x20000e0c
 80054f8:	20000df8 	.word	0x20000df8
 80054fc:	20000dec 	.word	0x20000dec
 8005500:	20000914 	.word	0x20000914
 8005504:	20000910 	.word	0x20000910
 8005508:	20000024 	.word	0x20000024

0800550c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10b      	bne.n	8005534 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005534:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <vTaskPlaceOnEventList+0x48>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3318      	adds	r3, #24
 800553a:	4619      	mov	r1, r3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fe fd8a 	bl	8004056 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005542:	2101      	movs	r1, #1
 8005544:	6838      	ldr	r0, [r7, #0]
 8005546:	f000 fa87 	bl	8005a58 <prvAddCurrentTaskToDelayedList>
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000910 	.word	0x20000910

08005558 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	617b      	str	r3, [r7, #20]
}
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	e7fd      	b.n	800557e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005582:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <vTaskPlaceOnEventListRestricted+0x54>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3318      	adds	r3, #24
 8005588:	4619      	mov	r1, r3
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7fe fd3f 	bl	800400e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800559a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	68b8      	ldr	r0, [r7, #8]
 80055a0:	f000 fa5a 	bl	8005a58 <prvAddCurrentTaskToDelayedList>
	}
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000910 	.word	0x20000910

080055b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10b      	bne.n	80055de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60fb      	str	r3, [r7, #12]
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	e7fd      	b.n	80055da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	3318      	adds	r3, #24
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fd70 	bl	80040c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005660 <xTaskRemoveFromEventList+0xb0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d11d      	bne.n	800562c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe fd67 	bl	80040c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fe:	4b19      	ldr	r3, [pc, #100]	@ (8005664 <xTaskRemoveFromEventList+0xb4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d903      	bls.n	800560e <xTaskRemoveFromEventList+0x5e>
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	4a16      	ldr	r2, [pc, #88]	@ (8005664 <xTaskRemoveFromEventList+0xb4>)
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4a13      	ldr	r2, [pc, #76]	@ (8005668 <xTaskRemoveFromEventList+0xb8>)
 800561c:	441a      	add	r2, r3
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3304      	adds	r3, #4
 8005622:	4619      	mov	r1, r3
 8005624:	4610      	mov	r0, r2
 8005626:	f7fe fcf2 	bl	800400e <vListInsertEnd>
 800562a:	e005      	b.n	8005638 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	3318      	adds	r3, #24
 8005630:	4619      	mov	r1, r3
 8005632:	480e      	ldr	r0, [pc, #56]	@ (800566c <xTaskRemoveFromEventList+0xbc>)
 8005634:	f7fe fceb 	bl	800400e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563c:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <xTaskRemoveFromEventList+0xc0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	429a      	cmp	r2, r3
 8005644:	d905      	bls.n	8005652 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005646:	2301      	movs	r3, #1
 8005648:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800564a:	4b0a      	ldr	r3, [pc, #40]	@ (8005674 <xTaskRemoveFromEventList+0xc4>)
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e001      	b.n	8005656 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005656:	697b      	ldr	r3, [r7, #20]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000e0c 	.word	0x20000e0c
 8005664:	20000dec 	.word	0x20000dec
 8005668:	20000914 	.word	0x20000914
 800566c:	20000da4 	.word	0x20000da4
 8005670:	20000910 	.word	0x20000910
 8005674:	20000df8 	.word	0x20000df8

08005678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <vTaskInternalSetTimeOutState+0x24>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <vTaskInternalSetTimeOutState+0x28>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	605a      	str	r2, [r3, #4]
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20000dfc 	.word	0x20000dfc
 80056a0:	20000de8 	.word	0x20000de8

080056a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	613b      	str	r3, [r7, #16]
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60fb      	str	r3, [r7, #12]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056ea:	f000 fe95 	bl	8006418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005764 <xTaskCheckForTimeOut+0xc0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005706:	d102      	bne.n	800570e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e023      	b.n	8005756 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b15      	ldr	r3, [pc, #84]	@ (8005768 <xTaskCheckForTimeOut+0xc4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d007      	beq.n	800572a <xTaskCheckForTimeOut+0x86>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e015      	b.n	8005756 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	429a      	cmp	r2, r3
 8005732:	d20b      	bcs.n	800574c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ff99 	bl	8005678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
 800574a:	e004      	b.n	8005756 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005752:	2301      	movs	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005756:	f000 fe91 	bl	800647c <vPortExitCritical>

	return xReturn;
 800575a:	69fb      	ldr	r3, [r7, #28]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3720      	adds	r7, #32
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000de8 	.word	0x20000de8
 8005768:	20000dfc 	.word	0x20000dfc

0800576c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005770:	4b03      	ldr	r3, [pc, #12]	@ (8005780 <vTaskMissedYield+0x14>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000df8 	.word	0x20000df8

08005784 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800578c:	f000 f852 	bl	8005834 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005790:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <prvIdleTask+0x28>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d9f9      	bls.n	800578c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005798:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <prvIdleTask+0x2c>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057a8:	e7f0      	b.n	800578c <prvIdleTask+0x8>
 80057aa:	bf00      	nop
 80057ac:	20000914 	.word	0x20000914
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	e00c      	b.n	80057da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4a12      	ldr	r2, [pc, #72]	@ (8005814 <prvInitialiseTaskLists+0x60>)
 80057cc:	4413      	add	r3, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fbf0 	bl	8003fb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3301      	adds	r3, #1
 80057d8:	607b      	str	r3, [r7, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b37      	cmp	r3, #55	@ 0x37
 80057de:	d9ef      	bls.n	80057c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057e0:	480d      	ldr	r0, [pc, #52]	@ (8005818 <prvInitialiseTaskLists+0x64>)
 80057e2:	f7fe fbe7 	bl	8003fb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057e6:	480d      	ldr	r0, [pc, #52]	@ (800581c <prvInitialiseTaskLists+0x68>)
 80057e8:	f7fe fbe4 	bl	8003fb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057ec:	480c      	ldr	r0, [pc, #48]	@ (8005820 <prvInitialiseTaskLists+0x6c>)
 80057ee:	f7fe fbe1 	bl	8003fb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057f2:	480c      	ldr	r0, [pc, #48]	@ (8005824 <prvInitialiseTaskLists+0x70>)
 80057f4:	f7fe fbde 	bl	8003fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057f8:	480b      	ldr	r0, [pc, #44]	@ (8005828 <prvInitialiseTaskLists+0x74>)
 80057fa:	f7fe fbdb 	bl	8003fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057fe:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <prvInitialiseTaskLists+0x78>)
 8005800:	4a05      	ldr	r2, [pc, #20]	@ (8005818 <prvInitialiseTaskLists+0x64>)
 8005802:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005804:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <prvInitialiseTaskLists+0x7c>)
 8005806:	4a05      	ldr	r2, [pc, #20]	@ (800581c <prvInitialiseTaskLists+0x68>)
 8005808:	601a      	str	r2, [r3, #0]
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000914 	.word	0x20000914
 8005818:	20000d74 	.word	0x20000d74
 800581c:	20000d88 	.word	0x20000d88
 8005820:	20000da4 	.word	0x20000da4
 8005824:	20000db8 	.word	0x20000db8
 8005828:	20000dd0 	.word	0x20000dd0
 800582c:	20000d9c 	.word	0x20000d9c
 8005830:	20000da0 	.word	0x20000da0

08005834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800583a:	e019      	b.n	8005870 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800583c:	f000 fdec 	bl	8006418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005840:	4b10      	ldr	r3, [pc, #64]	@ (8005884 <prvCheckTasksWaitingTermination+0x50>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe fc3b 	bl	80040c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <prvCheckTasksWaitingTermination+0x54>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3b01      	subs	r3, #1
 8005858:	4a0b      	ldr	r2, [pc, #44]	@ (8005888 <prvCheckTasksWaitingTermination+0x54>)
 800585a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <prvCheckTasksWaitingTermination+0x58>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3b01      	subs	r3, #1
 8005862:	4a0a      	ldr	r2, [pc, #40]	@ (800588c <prvCheckTasksWaitingTermination+0x58>)
 8005864:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005866:	f000 fe09 	bl	800647c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f810 	bl	8005890 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005870:	4b06      	ldr	r3, [pc, #24]	@ (800588c <prvCheckTasksWaitingTermination+0x58>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e1      	bne.n	800583c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000db8 	.word	0x20000db8
 8005888:	20000de4 	.word	0x20000de4
 800588c:	20000dcc 	.word	0x20000dcc

08005890 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3354      	adds	r3, #84	@ 0x54
 800589c:	4618      	mov	r0, r3
 800589e:	f001 faed 	bl	8006e7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d108      	bne.n	80058be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 ffa1 	bl	80067f8 <vPortFree>
				vPortFree( pxTCB );
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 ff9e 	bl	80067f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058bc:	e019      	b.n	80058f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d103      	bne.n	80058d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 ff95 	bl	80067f8 <vPortFree>
	}
 80058ce:	e010      	b.n	80058f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d00b      	beq.n	80058f2 <prvDeleteTCB+0x62>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	60fb      	str	r3, [r7, #12]
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	e7fd      	b.n	80058ee <prvDeleteTCB+0x5e>
	}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005902:	4b0c      	ldr	r3, [pc, #48]	@ (8005934 <prvResetNextTaskUnblockTime+0x38>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800590c:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <prvResetNextTaskUnblockTime+0x3c>)
 800590e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005912:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005914:	e008      	b.n	8005928 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005916:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <prvResetNextTaskUnblockTime+0x38>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <prvResetNextTaskUnblockTime+0x3c>)
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	20000d9c 	.word	0x20000d9c
 8005938:	20000e04 	.word	0x20000e04

0800593c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005942:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <xTaskGetSchedulerState+0x34>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800594a:	2301      	movs	r3, #1
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	e008      	b.n	8005962 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005950:	4b08      	ldr	r3, [pc, #32]	@ (8005974 <xTaskGetSchedulerState+0x38>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005958:	2302      	movs	r3, #2
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	e001      	b.n	8005962 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800595e:	2300      	movs	r3, #0
 8005960:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005962:	687b      	ldr	r3, [r7, #4]
	}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000df0 	.word	0x20000df0
 8005974:	20000e0c 	.word	0x20000e0c

08005978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d058      	beq.n	8005a40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800598e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a4c <xTaskPriorityDisinherit+0xd4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d00b      	beq.n	80059b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	60fb      	str	r3, [r7, #12]
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10b      	bne.n	80059d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	60bb      	str	r3, [r7, #8]
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	e7fd      	b.n	80059cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d4:	1e5a      	subs	r2, r3, #1
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d02c      	beq.n	8005a40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d128      	bne.n	8005a40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3304      	adds	r3, #4
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fb68 	bl	80040c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a10:	4b0f      	ldr	r3, [pc, #60]	@ (8005a50 <xTaskPriorityDisinherit+0xd8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d903      	bls.n	8005a20 <xTaskPriorityDisinherit+0xa8>
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8005a50 <xTaskPriorityDisinherit+0xd8>)
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4a09      	ldr	r2, [pc, #36]	@ (8005a54 <xTaskPriorityDisinherit+0xdc>)
 8005a2e:	441a      	add	r2, r3
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f7fe fae9 	bl	800400e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a40:	697b      	ldr	r3, [r7, #20]
	}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000910 	.word	0x20000910
 8005a50:	20000dec 	.word	0x20000dec
 8005a54:	20000914 	.word	0x20000914

08005a58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a62:	4b21      	ldr	r3, [pc, #132]	@ (8005ae8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a68:	4b20      	ldr	r3, [pc, #128]	@ (8005aec <prvAddCurrentTaskToDelayedList+0x94>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fb2a 	bl	80040c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a7a:	d10a      	bne.n	8005a92 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a82:	4b1a      	ldr	r3, [pc, #104]	@ (8005aec <prvAddCurrentTaskToDelayedList+0x94>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4819      	ldr	r0, [pc, #100]	@ (8005af0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a8c:	f7fe fabf 	bl	800400e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a90:	e026      	b.n	8005ae0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4413      	add	r3, r2
 8005a98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a9a:	4b14      	ldr	r3, [pc, #80]	@ (8005aec <prvAddCurrentTaskToDelayedList+0x94>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d209      	bcs.n	8005abe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aaa:	4b12      	ldr	r3, [pc, #72]	@ (8005af4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b0f      	ldr	r3, [pc, #60]	@ (8005aec <prvAddCurrentTaskToDelayedList+0x94>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f7fe facd 	bl	8004056 <vListInsert>
}
 8005abc:	e010      	b.n	8005ae0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005abe:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f7fe fac3 	bl	8004056 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d202      	bcs.n	8005ae0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ada:	4a08      	ldr	r2, [pc, #32]	@ (8005afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	6013      	str	r3, [r2, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000de8 	.word	0x20000de8
 8005aec:	20000910 	.word	0x20000910
 8005af0:	20000dd0 	.word	0x20000dd0
 8005af4:	20000da0 	.word	0x20000da0
 8005af8:	20000d9c 	.word	0x20000d9c
 8005afc:	20000e04 	.word	0x20000e04

08005b00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	@ 0x28
 8005b04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b0a:	f000 fb13 	bl	8006134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b84 <xTimerCreateTimerTask+0x84>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d021      	beq.n	8005b5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b1e:	1d3a      	adds	r2, r7, #4
 8005b20:	f107 0108 	add.w	r1, r7, #8
 8005b24:	f107 030c 	add.w	r3, r7, #12
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe fa29 	bl	8003f80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	9202      	str	r2, [sp, #8]
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	2302      	movs	r3, #2
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	460a      	mov	r2, r1
 8005b40:	4911      	ldr	r1, [pc, #68]	@ (8005b88 <xTimerCreateTimerTask+0x88>)
 8005b42:	4812      	ldr	r0, [pc, #72]	@ (8005b8c <xTimerCreateTimerTask+0x8c>)
 8005b44:	f7ff f8a2 	bl	8004c8c <xTaskCreateStatic>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4a11      	ldr	r2, [pc, #68]	@ (8005b90 <xTimerCreateTimerTask+0x90>)
 8005b4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b4e:	4b10      	ldr	r3, [pc, #64]	@ (8005b90 <xTimerCreateTimerTask+0x90>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b56:	2301      	movs	r3, #1
 8005b58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10b      	bne.n	8005b78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b78:	697b      	ldr	r3, [r7, #20]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000e40 	.word	0x20000e40
 8005b88:	08007aa8 	.word	0x08007aa8
 8005b8c:	08005ccd 	.word	0x08005ccd
 8005b90:	20000e44 	.word	0x20000e44

08005b94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	@ 0x28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <xTimerGenericCommand+0x30>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	623b      	str	r3, [r7, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	e7fd      	b.n	8005bc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bc4:	4b19      	ldr	r3, [pc, #100]	@ (8005c2c <xTimerGenericCommand+0x98>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d02a      	beq.n	8005c22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	dc18      	bgt.n	8005c10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bde:	f7ff fead 	bl	800593c <xTaskGetSchedulerState>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d109      	bne.n	8005bfc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005be8:	4b10      	ldr	r3, [pc, #64]	@ (8005c2c <xTimerGenericCommand+0x98>)
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	f107 0110 	add.w	r1, r7, #16
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf4:	f7fe fbd8 	bl	80043a8 <xQueueGenericSend>
 8005bf8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bfa:	e012      	b.n	8005c22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <xTimerGenericCommand+0x98>)
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	f107 0110 	add.w	r1, r7, #16
 8005c04:	2300      	movs	r3, #0
 8005c06:	2200      	movs	r2, #0
 8005c08:	f7fe fbce 	bl	80043a8 <xQueueGenericSend>
 8005c0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c0e:	e008      	b.n	8005c22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c10:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <xTimerGenericCommand+0x98>)
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	f107 0110 	add.w	r1, r7, #16
 8005c18:	2300      	movs	r3, #0
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	f7fe fcc6 	bl	80045ac <xQueueGenericSendFromISR>
 8005c20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	@ 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20000e40 	.word	0x20000e40

08005c30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3a:	4b23      	ldr	r3, [pc, #140]	@ (8005cc8 <prvProcessExpiredTimer+0x98>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fa3d 	bl	80040c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d023      	beq.n	8005ca4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	18d1      	adds	r1, r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	6978      	ldr	r0, [r7, #20]
 8005c6a:	f000 f8d5 	bl	8005e18 <prvInsertTimerInActiveList>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d020      	beq.n	8005cb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c74:	2300      	movs	r3, #0
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	6978      	ldr	r0, [r7, #20]
 8005c80:	f7ff ff88 	bl	8005b94 <xTimerGenericCommand>
 8005c84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d114      	bne.n	8005cb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	60fb      	str	r3, [r7, #12]
}
 8005c9e:	bf00      	nop
 8005ca0:	bf00      	nop
 8005ca2:	e7fd      	b.n	8005ca0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	6978      	ldr	r0, [r7, #20]
 8005cbc:	4798      	blx	r3
}
 8005cbe:	bf00      	nop
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000e38 	.word	0x20000e38

08005ccc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f859 	bl	8005d90 <prvGetNextExpireTime>
 8005cde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f805 	bl	8005cf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cea:	f000 f8d7 	bl	8005e9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cee:	bf00      	nop
 8005cf0:	e7f0      	b.n	8005cd4 <prvTimerTask+0x8>
	...

08005cf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cfe:	f7ff fa29 	bl	8005154 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d02:	f107 0308 	add.w	r3, r7, #8
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 f866 	bl	8005dd8 <prvSampleTimeNow>
 8005d0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d130      	bne.n	8005d76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <prvProcessTimerOrBlockTask+0x3c>
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d806      	bhi.n	8005d30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d22:	f7ff fa25 	bl	8005170 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff ff81 	bl	8005c30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d2e:	e024      	b.n	8005d7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d36:	4b13      	ldr	r3, [pc, #76]	@ (8005d84 <prvProcessTimerOrBlockTask+0x90>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <prvProcessTimerOrBlockTask+0x50>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <prvProcessTimerOrBlockTask+0x52>
 8005d44:	2300      	movs	r3, #0
 8005d46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d48:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <prvProcessTimerOrBlockTask+0x94>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4619      	mov	r1, r3
 8005d56:	f7fe ff65 	bl	8004c24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d5a:	f7ff fa09 	bl	8005170 <xTaskResumeAll>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d64:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <prvProcessTimerOrBlockTask+0x98>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
}
 8005d74:	e001      	b.n	8005d7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d76:	f7ff f9fb 	bl	8005170 <xTaskResumeAll>
}
 8005d7a:	bf00      	nop
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000e3c 	.word	0x20000e3c
 8005d88:	20000e40 	.word	0x20000e40
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d98:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd4 <prvGetNextExpireTime+0x44>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <prvGetNextExpireTime+0x16>
 8005da2:	2201      	movs	r2, #1
 8005da4:	e000      	b.n	8005da8 <prvGetNextExpireTime+0x18>
 8005da6:	2200      	movs	r2, #0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005db4:	4b07      	ldr	r3, [pc, #28]	@ (8005dd4 <prvGetNextExpireTime+0x44>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e001      	b.n	8005dc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000e38 	.word	0x20000e38

08005dd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005de0:	f7ff fa64 	bl	80052ac <xTaskGetTickCount>
 8005de4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <prvSampleTimeNow+0x3c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d205      	bcs.n	8005dfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005df0:	f000 f93a 	bl	8006068 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e002      	b.n	8005e02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e02:	4a04      	ldr	r2, [pc, #16]	@ (8005e14 <prvSampleTimeNow+0x3c>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e08:	68fb      	ldr	r3, [r7, #12]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000e48 	.word	0x20000e48

08005e18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d812      	bhi.n	8005e64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d302      	bcc.n	8005e52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e01b      	b.n	8005e8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <prvInsertTimerInActiveList+0x7c>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	f7fe f8fa 	bl	8004056 <vListInsert>
 8005e62:	e012      	b.n	8005e8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d206      	bcs.n	8005e7a <prvInsertTimerInActiveList+0x62>
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d302      	bcc.n	8005e7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e007      	b.n	8005e8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e7a:	4b07      	ldr	r3, [pc, #28]	@ (8005e98 <prvInsertTimerInActiveList+0x80>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f7fe f8e6 	bl	8004056 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e8a:	697b      	ldr	r3, [r7, #20]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000e3c 	.word	0x20000e3c
 8005e98:	20000e38 	.word	0x20000e38

08005e9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	@ 0x38
 8005ea0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ea2:	e0ce      	b.n	8006042 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da19      	bge.n	8005ede <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005eaa:	1d3b      	adds	r3, r7, #4
 8005eac:	3304      	adds	r3, #4
 8005eae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	61fb      	str	r3, [r7, #28]
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ed4:	6850      	ldr	r0, [r2, #4]
 8005ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ed8:	6892      	ldr	r2, [r2, #8]
 8005eda:	4611      	mov	r1, r2
 8005edc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f2c0 80ae 	blt.w	8006042 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe f8e6 	bl	80040c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005efc:	463b      	mov	r3, r7
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff ff6a 	bl	8005dd8 <prvSampleTimeNow>
 8005f04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	f200 8097 	bhi.w	800603c <prvProcessReceivedCommands+0x1a0>
 8005f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <prvProcessReceivedCommands+0x78>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f3d 	.word	0x08005f3d
 8005f20:	08005fb3 	.word	0x08005fb3
 8005f24:	08005fc7 	.word	0x08005fc7
 8005f28:	08006013 	.word	0x08006013
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f3d 	.word	0x08005f3d
 8005f34:	08005fb3 	.word	0x08005fb3
 8005f38:	08005fc7 	.word	0x08005fc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	18d1      	adds	r1, r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f5c:	f7ff ff5c 	bl	8005e18 <prvInsertTimerInActiveList>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d06c      	beq.n	8006040 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d061      	beq.n	8006040 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	441a      	add	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f8e:	f7ff fe01 	bl	8005b94 <xTimerGenericCommand>
 8005f92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d152      	bne.n	8006040 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	61bb      	str	r3, [r7, #24]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005fc4:	e03d      	b.n	8006042 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	617b      	str	r3, [r7, #20]
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	e7fd      	b.n	8005ffa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	18d1      	adds	r1, r2, r3
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800600c:	f7ff ff04 	bl	8005e18 <prvInsertTimerInActiveList>
					break;
 8006010:	e017      	b.n	8006042 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006022:	f000 fbe9 	bl	80067f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006026:	e00c      	b.n	8006042 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	b2da      	uxtb	r2, r3
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800603a:	e002      	b.n	8006042 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800603c:	bf00      	nop
 800603e:	e000      	b.n	8006042 <prvProcessReceivedCommands+0x1a6>
					break;
 8006040:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006042:	4b08      	ldr	r3, [pc, #32]	@ (8006064 <prvProcessReceivedCommands+0x1c8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	1d39      	adds	r1, r7, #4
 8006048:	2200      	movs	r2, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fb4c 	bl	80046e8 <xQueueReceive>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	f47f af26 	bne.w	8005ea4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	3730      	adds	r7, #48	@ 0x30
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000e40 	.word	0x20000e40

08006068 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800606e:	e049      	b.n	8006104 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006070:	4b2e      	ldr	r3, [pc, #184]	@ (800612c <prvSwitchTimerLists+0xc4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607a:	4b2c      	ldr	r3, [pc, #176]	@ (800612c <prvSwitchTimerLists+0xc4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3304      	adds	r3, #4
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe f81d 	bl	80040c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d02f      	beq.n	8006104 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d90e      	bls.n	80060d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060c2:	4b1a      	ldr	r3, [pc, #104]	@ (800612c <prvSwitchTimerLists+0xc4>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f7fd ffc2 	bl	8004056 <vListInsert>
 80060d2:	e017      	b.n	8006104 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060d4:	2300      	movs	r3, #0
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	2100      	movs	r1, #0
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fd58 	bl	8005b94 <xTimerGenericCommand>
 80060e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	603b      	str	r3, [r7, #0]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006104:	4b09      	ldr	r3, [pc, #36]	@ (800612c <prvSwitchTimerLists+0xc4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1b0      	bne.n	8006070 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800610e:	4b07      	ldr	r3, [pc, #28]	@ (800612c <prvSwitchTimerLists+0xc4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006114:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <prvSwitchTimerLists+0xc8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a04      	ldr	r2, [pc, #16]	@ (800612c <prvSwitchTimerLists+0xc4>)
 800611a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800611c:	4a04      	ldr	r2, [pc, #16]	@ (8006130 <prvSwitchTimerLists+0xc8>)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	6013      	str	r3, [r2, #0]
}
 8006122:	bf00      	nop
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000e38 	.word	0x20000e38
 8006130:	20000e3c 	.word	0x20000e3c

08006134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800613a:	f000 f96d 	bl	8006418 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800613e:	4b15      	ldr	r3, [pc, #84]	@ (8006194 <prvCheckForValidListAndQueue+0x60>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d120      	bne.n	8006188 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006146:	4814      	ldr	r0, [pc, #80]	@ (8006198 <prvCheckForValidListAndQueue+0x64>)
 8006148:	f7fd ff34 	bl	8003fb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800614c:	4813      	ldr	r0, [pc, #76]	@ (800619c <prvCheckForValidListAndQueue+0x68>)
 800614e:	f7fd ff31 	bl	8003fb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006152:	4b13      	ldr	r3, [pc, #76]	@ (80061a0 <prvCheckForValidListAndQueue+0x6c>)
 8006154:	4a10      	ldr	r2, [pc, #64]	@ (8006198 <prvCheckForValidListAndQueue+0x64>)
 8006156:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006158:	4b12      	ldr	r3, [pc, #72]	@ (80061a4 <prvCheckForValidListAndQueue+0x70>)
 800615a:	4a10      	ldr	r2, [pc, #64]	@ (800619c <prvCheckForValidListAndQueue+0x68>)
 800615c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800615e:	2300      	movs	r3, #0
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	4b11      	ldr	r3, [pc, #68]	@ (80061a8 <prvCheckForValidListAndQueue+0x74>)
 8006164:	4a11      	ldr	r2, [pc, #68]	@ (80061ac <prvCheckForValidListAndQueue+0x78>)
 8006166:	2110      	movs	r1, #16
 8006168:	200a      	movs	r0, #10
 800616a:	f7fe f841 	bl	80041f0 <xQueueGenericCreateStatic>
 800616e:	4603      	mov	r3, r0
 8006170:	4a08      	ldr	r2, [pc, #32]	@ (8006194 <prvCheckForValidListAndQueue+0x60>)
 8006172:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006174:	4b07      	ldr	r3, [pc, #28]	@ (8006194 <prvCheckForValidListAndQueue+0x60>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800617c:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <prvCheckForValidListAndQueue+0x60>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	490b      	ldr	r1, [pc, #44]	@ (80061b0 <prvCheckForValidListAndQueue+0x7c>)
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fd24 	bl	8004bd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006188:	f000 f978 	bl	800647c <vPortExitCritical>
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000e40 	.word	0x20000e40
 8006198:	20000e10 	.word	0x20000e10
 800619c:	20000e24 	.word	0x20000e24
 80061a0:	20000e38 	.word	0x20000e38
 80061a4:	20000e3c 	.word	0x20000e3c
 80061a8:	20000eec 	.word	0x20000eec
 80061ac:	20000e4c 	.word	0x20000e4c
 80061b0:	08007ab0 	.word	0x08007ab0

080061b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3b04      	subs	r3, #4
 80061c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 0201 	bic.w	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b04      	subs	r3, #4
 80061e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006218 <pxPortInitialiseStack+0x64>)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3b14      	subs	r3, #20
 80061ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3b04      	subs	r3, #4
 80061fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f06f 0202 	mvn.w	r2, #2
 8006202:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3b20      	subs	r3, #32
 8006208:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800620a:	68fb      	ldr	r3, [r7, #12]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	0800621d 	.word	0x0800621d

0800621c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006226:	4b13      	ldr	r3, [pc, #76]	@ (8006274 <prvTaskExitError+0x58>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800622e:	d00b      	beq.n	8006248 <prvTaskExitError+0x2c>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	60fb      	str	r3, [r7, #12]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <prvTaskExitError+0x28>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	60bb      	str	r3, [r7, #8]
}
 800625a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800625c:	bf00      	nop
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0fc      	beq.n	800625e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000014 	.word	0x20000014
	...

08006280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006280:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <pxCurrentTCBConst2>)
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	6808      	ldr	r0, [r1, #0]
 8006286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	f380 8809 	msr	PSP, r0
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f380 8811 	msr	BASEPRI, r0
 800629a:	4770      	bx	lr
 800629c:	f3af 8000 	nop.w

080062a0 <pxCurrentTCBConst2>:
 80062a0:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop

080062a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062a8:	4808      	ldr	r0, [pc, #32]	@ (80062cc <prvPortStartFirstTask+0x24>)
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	6800      	ldr	r0, [r0, #0]
 80062ae:	f380 8808 	msr	MSP, r0
 80062b2:	f04f 0000 	mov.w	r0, #0
 80062b6:	f380 8814 	msr	CONTROL, r0
 80062ba:	b662      	cpsie	i
 80062bc:	b661      	cpsie	f
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	df00      	svc	0
 80062c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ca:	bf00      	nop
 80062cc:	e000ed08 	.word	0xe000ed08

080062d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062d6:	4b47      	ldr	r3, [pc, #284]	@ (80063f4 <xPortStartScheduler+0x124>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a47      	ldr	r2, [pc, #284]	@ (80063f8 <xPortStartScheduler+0x128>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10b      	bne.n	80062f8 <xPortStartScheduler+0x28>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062f8:	4b3e      	ldr	r3, [pc, #248]	@ (80063f4 <xPortStartScheduler+0x124>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a3f      	ldr	r2, [pc, #252]	@ (80063fc <xPortStartScheduler+0x12c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10b      	bne.n	800631a <xPortStartScheduler+0x4a>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	60fb      	str	r3, [r7, #12]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800631a:	4b39      	ldr	r3, [pc, #228]	@ (8006400 <xPortStartScheduler+0x130>)
 800631c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	22ff      	movs	r2, #255	@ 0xff
 800632a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800633c:	b2da      	uxtb	r2, r3
 800633e:	4b31      	ldr	r3, [pc, #196]	@ (8006404 <xPortStartScheduler+0x134>)
 8006340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006342:	4b31      	ldr	r3, [pc, #196]	@ (8006408 <xPortStartScheduler+0x138>)
 8006344:	2207      	movs	r2, #7
 8006346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006348:	e009      	b.n	800635e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800634a:	4b2f      	ldr	r3, [pc, #188]	@ (8006408 <xPortStartScheduler+0x138>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3b01      	subs	r3, #1
 8006350:	4a2d      	ldr	r2, [pc, #180]	@ (8006408 <xPortStartScheduler+0x138>)
 8006352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	b2db      	uxtb	r3, r3
 800635c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006366:	2b80      	cmp	r3, #128	@ 0x80
 8006368:	d0ef      	beq.n	800634a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800636a:	4b27      	ldr	r3, [pc, #156]	@ (8006408 <xPortStartScheduler+0x138>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f1c3 0307 	rsb	r3, r3, #7
 8006372:	2b04      	cmp	r3, #4
 8006374:	d00b      	beq.n	800638e <xPortStartScheduler+0xbe>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	60bb      	str	r3, [r7, #8]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800638e:	4b1e      	ldr	r3, [pc, #120]	@ (8006408 <xPortStartScheduler+0x138>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	4a1c      	ldr	r2, [pc, #112]	@ (8006408 <xPortStartScheduler+0x138>)
 8006396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006398:	4b1b      	ldr	r3, [pc, #108]	@ (8006408 <xPortStartScheduler+0x138>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063a0:	4a19      	ldr	r2, [pc, #100]	@ (8006408 <xPortStartScheduler+0x138>)
 80063a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063ac:	4b17      	ldr	r3, [pc, #92]	@ (800640c <xPortStartScheduler+0x13c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a16      	ldr	r2, [pc, #88]	@ (800640c <xPortStartScheduler+0x13c>)
 80063b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063b8:	4b14      	ldr	r3, [pc, #80]	@ (800640c <xPortStartScheduler+0x13c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a13      	ldr	r2, [pc, #76]	@ (800640c <xPortStartScheduler+0x13c>)
 80063be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063c4:	f000 f8da 	bl	800657c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063c8:	4b11      	ldr	r3, [pc, #68]	@ (8006410 <xPortStartScheduler+0x140>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063ce:	f000 f8f9 	bl	80065c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063d2:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <xPortStartScheduler+0x144>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006414 <xPortStartScheduler+0x144>)
 80063d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063de:	f7ff ff63 	bl	80062a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063e2:	f7ff f82d 	bl	8005440 <vTaskSwitchContext>
	prvTaskExitError();
 80063e6:	f7ff ff19 	bl	800621c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	e000ed00 	.word	0xe000ed00
 80063f8:	410fc271 	.word	0x410fc271
 80063fc:	410fc270 	.word	0x410fc270
 8006400:	e000e400 	.word	0xe000e400
 8006404:	20000f3c 	.word	0x20000f3c
 8006408:	20000f40 	.word	0x20000f40
 800640c:	e000ed20 	.word	0xe000ed20
 8006410:	20000014 	.word	0x20000014
 8006414:	e000ef34 	.word	0xe000ef34

08006418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	607b      	str	r3, [r7, #4]
}
 8006430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006432:	4b10      	ldr	r3, [pc, #64]	@ (8006474 <vPortEnterCritical+0x5c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3301      	adds	r3, #1
 8006438:	4a0e      	ldr	r2, [pc, #56]	@ (8006474 <vPortEnterCritical+0x5c>)
 800643a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800643c:	4b0d      	ldr	r3, [pc, #52]	@ (8006474 <vPortEnterCritical+0x5c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d110      	bne.n	8006466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006444:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <vPortEnterCritical+0x60>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <vPortEnterCritical+0x4e>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	603b      	str	r3, [r7, #0]
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	e7fd      	b.n	8006462 <vPortEnterCritical+0x4a>
	}
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000014 	.word	0x20000014
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006482:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <vPortExitCritical+0x50>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <vPortExitCritical+0x26>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	607b      	str	r3, [r7, #4]
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	e7fd      	b.n	800649e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064a2:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <vPortExitCritical+0x50>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	4a08      	ldr	r2, [pc, #32]	@ (80064cc <vPortExitCritical+0x50>)
 80064aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064ac:	4b07      	ldr	r3, [pc, #28]	@ (80064cc <vPortExitCritical+0x50>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <vPortExitCritical+0x44>
 80064b4:	2300      	movs	r3, #0
 80064b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f383 8811 	msr	BASEPRI, r3
}
 80064be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20000014 	.word	0x20000014

080064d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064d0:	f3ef 8009 	mrs	r0, PSP
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	4b15      	ldr	r3, [pc, #84]	@ (8006530 <pxCurrentTCBConst>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f01e 0f10 	tst.w	lr, #16
 80064e0:	bf08      	it	eq
 80064e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064f4:	f380 8811 	msr	BASEPRI, r0
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f7fe ff9e 	bl	8005440 <vTaskSwitchContext>
 8006504:	f04f 0000 	mov.w	r0, #0
 8006508:	f380 8811 	msr	BASEPRI, r0
 800650c:	bc09      	pop	{r0, r3}
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	6808      	ldr	r0, [r1, #0]
 8006512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006516:	f01e 0f10 	tst.w	lr, #16
 800651a:	bf08      	it	eq
 800651c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006520:	f380 8809 	msr	PSP, r0
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w

08006530 <pxCurrentTCBConst>:
 8006530:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006552:	f7fe febb 	bl	80052cc <xTaskIncrementTick>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800655c:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <xPortSysTickHandler+0x40>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f383 8811 	msr	BASEPRI, r3
}
 800656e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <vPortSetupTimerInterrupt+0x34>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006586:	4b0b      	ldr	r3, [pc, #44]	@ (80065b4 <vPortSetupTimerInterrupt+0x38>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <vPortSetupTimerInterrupt+0x3c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0a      	ldr	r2, [pc, #40]	@ (80065bc <vPortSetupTimerInterrupt+0x40>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	099b      	lsrs	r3, r3, #6
 8006598:	4a09      	ldr	r2, [pc, #36]	@ (80065c0 <vPortSetupTimerInterrupt+0x44>)
 800659a:	3b01      	subs	r3, #1
 800659c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800659e:	4b04      	ldr	r3, [pc, #16]	@ (80065b0 <vPortSetupTimerInterrupt+0x34>)
 80065a0:	2207      	movs	r2, #7
 80065a2:	601a      	str	r2, [r3, #0]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	e000e010 	.word	0xe000e010
 80065b4:	e000e018 	.word	0xe000e018
 80065b8:	20000008 	.word	0x20000008
 80065bc:	10624dd3 	.word	0x10624dd3
 80065c0:	e000e014 	.word	0xe000e014

080065c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065d4 <vPortEnableVFP+0x10>
 80065c8:	6801      	ldr	r1, [r0, #0]
 80065ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065ce:	6001      	str	r1, [r0, #0]
 80065d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065d2:	bf00      	nop
 80065d4:	e000ed88 	.word	0xe000ed88

080065d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065de:	f3ef 8305 	mrs	r3, IPSR
 80065e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d915      	bls.n	8006616 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ea:	4a18      	ldr	r2, [pc, #96]	@ (800664c <vPortValidateInterruptPriority+0x74>)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065f4:	4b16      	ldr	r3, [pc, #88]	@ (8006650 <vPortValidateInterruptPriority+0x78>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	7afa      	ldrb	r2, [r7, #11]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d20b      	bcs.n	8006616 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006616:	4b0f      	ldr	r3, [pc, #60]	@ (8006654 <vPortValidateInterruptPriority+0x7c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800661e:	4b0e      	ldr	r3, [pc, #56]	@ (8006658 <vPortValidateInterruptPriority+0x80>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d90b      	bls.n	800663e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	603b      	str	r3, [r7, #0]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <vPortValidateInterruptPriority+0x62>
	}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	e000e3f0 	.word	0xe000e3f0
 8006650:	20000f3c 	.word	0x20000f3c
 8006654:	e000ed0c 	.word	0xe000ed0c
 8006658:	20000f40 	.word	0x20000f40

0800665c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	@ 0x28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006668:	f7fe fd74 	bl	8005154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800666c:	4b5c      	ldr	r3, [pc, #368]	@ (80067e0 <pvPortMalloc+0x184>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006674:	f000 f924 	bl	80068c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006678:	4b5a      	ldr	r3, [pc, #360]	@ (80067e4 <pvPortMalloc+0x188>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4013      	ands	r3, r2
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 8095 	bne.w	80067b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01e      	beq.n	80066ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800668c:	2208      	movs	r2, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4413      	add	r3, r2
 8006692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b00      	cmp	r3, #0
 800669c:	d015      	beq.n	80066ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	3308      	adds	r3, #8
 80066a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <pvPortMalloc+0x6e>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	617b      	str	r3, [r7, #20]
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	e7fd      	b.n	80066c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d06f      	beq.n	80067b0 <pvPortMalloc+0x154>
 80066d0:	4b45      	ldr	r3, [pc, #276]	@ (80067e8 <pvPortMalloc+0x18c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d86a      	bhi.n	80067b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066da:	4b44      	ldr	r3, [pc, #272]	@ (80067ec <pvPortMalloc+0x190>)
 80066dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066de:	4b43      	ldr	r3, [pc, #268]	@ (80067ec <pvPortMalloc+0x190>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066e4:	e004      	b.n	80066f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d903      	bls.n	8006702 <pvPortMalloc+0xa6>
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f1      	bne.n	80066e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006702:	4b37      	ldr	r3, [pc, #220]	@ (80067e0 <pvPortMalloc+0x184>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006708:	429a      	cmp	r2, r3
 800670a:	d051      	beq.n	80067b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2208      	movs	r2, #8
 8006712:	4413      	add	r3, r2
 8006714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	2308      	movs	r3, #8
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	429a      	cmp	r2, r3
 800672c:	d920      	bls.n	8006770 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800672e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4413      	add	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <pvPortMalloc+0xfc>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	613b      	str	r3, [r7, #16]
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800676a:	69b8      	ldr	r0, [r7, #24]
 800676c:	f000 f90a 	bl	8006984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006770:	4b1d      	ldr	r3, [pc, #116]	@ (80067e8 <pvPortMalloc+0x18c>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	4a1b      	ldr	r2, [pc, #108]	@ (80067e8 <pvPortMalloc+0x18c>)
 800677c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800677e:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <pvPortMalloc+0x18c>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b1b      	ldr	r3, [pc, #108]	@ (80067f0 <pvPortMalloc+0x194>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d203      	bcs.n	8006792 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800678a:	4b17      	ldr	r3, [pc, #92]	@ (80067e8 <pvPortMalloc+0x18c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <pvPortMalloc+0x194>)
 8006790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <pvPortMalloc+0x188>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	431a      	orrs	r2, r3
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067a6:	4b13      	ldr	r3, [pc, #76]	@ (80067f4 <pvPortMalloc+0x198>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3301      	adds	r3, #1
 80067ac:	4a11      	ldr	r2, [pc, #68]	@ (80067f4 <pvPortMalloc+0x198>)
 80067ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067b0:	f7fe fcde 	bl	8005170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00b      	beq.n	80067d6 <pvPortMalloc+0x17a>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	60fb      	str	r3, [r7, #12]
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <pvPortMalloc+0x176>
	return pvReturn;
 80067d6:	69fb      	ldr	r3, [r7, #28]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3728      	adds	r7, #40	@ 0x28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20001b04 	.word	0x20001b04
 80067e4:	20001b18 	.word	0x20001b18
 80067e8:	20001b08 	.word	0x20001b08
 80067ec:	20001afc 	.word	0x20001afc
 80067f0:	20001b0c 	.word	0x20001b0c
 80067f4:	20001b10 	.word	0x20001b10

080067f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d04f      	beq.n	80068aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800680a:	2308      	movs	r3, #8
 800680c:	425b      	negs	r3, r3
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	4b25      	ldr	r3, [pc, #148]	@ (80068b4 <vPortFree+0xbc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <vPortFree+0x46>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	60fb      	str	r3, [r7, #12]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <vPortFree+0x66>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	60bb      	str	r3, [r7, #8]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4b14      	ldr	r3, [pc, #80]	@ (80068b4 <vPortFree+0xbc>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01e      	beq.n	80068aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11a      	bne.n	80068aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	4b0e      	ldr	r3, [pc, #56]	@ (80068b4 <vPortFree+0xbc>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	43db      	mvns	r3, r3
 800687e:	401a      	ands	r2, r3
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006884:	f7fe fc66 	bl	8005154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <vPortFree+0xc0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4413      	add	r3, r2
 8006892:	4a09      	ldr	r2, [pc, #36]	@ (80068b8 <vPortFree+0xc0>)
 8006894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006896:	6938      	ldr	r0, [r7, #16]
 8006898:	f000 f874 	bl	8006984 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800689c:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <vPortFree+0xc4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3301      	adds	r3, #1
 80068a2:	4a06      	ldr	r2, [pc, #24]	@ (80068bc <vPortFree+0xc4>)
 80068a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068a6:	f7fe fc63 	bl	8005170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068aa:	bf00      	nop
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20001b18 	.word	0x20001b18
 80068b8:	20001b08 	.word	0x20001b08
 80068bc:	20001b14 	.word	0x20001b14

080068c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068c6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80068ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068cc:	4b27      	ldr	r3, [pc, #156]	@ (800696c <prvHeapInit+0xac>)
 80068ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00c      	beq.n	80068f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3307      	adds	r3, #7
 80068de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0307 	bic.w	r3, r3, #7
 80068e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	4a1f      	ldr	r2, [pc, #124]	@ (800696c <prvHeapInit+0xac>)
 80068f0:	4413      	add	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006970 <prvHeapInit+0xb0>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006970 <prvHeapInit+0xb0>)
 8006900:	2200      	movs	r2, #0
 8006902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	4413      	add	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800690c:	2208      	movs	r2, #8
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4a15      	ldr	r2, [pc, #84]	@ (8006974 <prvHeapInit+0xb4>)
 8006920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006922:	4b14      	ldr	r3, [pc, #80]	@ (8006974 <prvHeapInit+0xb4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800692a:	4b12      	ldr	r3, [pc, #72]	@ (8006974 <prvHeapInit+0xb4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006940:	4b0c      	ldr	r3, [pc, #48]	@ (8006974 <prvHeapInit+0xb4>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4a0a      	ldr	r2, [pc, #40]	@ (8006978 <prvHeapInit+0xb8>)
 800694e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4a09      	ldr	r2, [pc, #36]	@ (800697c <prvHeapInit+0xbc>)
 8006956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006958:	4b09      	ldr	r3, [pc, #36]	@ (8006980 <prvHeapInit+0xc0>)
 800695a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800695e:	601a      	str	r2, [r3, #0]
}
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	20000f44 	.word	0x20000f44
 8006970:	20001afc 	.word	0x20001afc
 8006974:	20001b04 	.word	0x20001b04
 8006978:	20001b0c 	.word	0x20001b0c
 800697c:	20001b08 	.word	0x20001b08
 8006980:	20001b18 	.word	0x20001b18

08006984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800698c:	4b28      	ldr	r3, [pc, #160]	@ (8006a30 <prvInsertBlockIntoFreeList+0xac>)
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e002      	b.n	8006998 <prvInsertBlockIntoFreeList+0x14>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d8f7      	bhi.n	8006992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4413      	add	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d108      	bne.n	80069c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	441a      	add	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	441a      	add	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d118      	bne.n	8006a0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4b15      	ldr	r3, [pc, #84]	@ (8006a34 <prvInsertBlockIntoFreeList+0xb0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d00d      	beq.n	8006a02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	441a      	add	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e008      	b.n	8006a14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a02:	4b0c      	ldr	r3, [pc, #48]	@ (8006a34 <prvInsertBlockIntoFreeList+0xb0>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e003      	b.n	8006a14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d002      	beq.n	8006a22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a22:	bf00      	nop
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	20001afc 	.word	0x20001afc
 8006a34:	20001b04 	.word	0x20001b04

08006a38 <std>:
 8006a38:	2300      	movs	r3, #0
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a46:	6083      	str	r3, [r0, #8]
 8006a48:	8181      	strh	r1, [r0, #12]
 8006a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a4c:	81c2      	strh	r2, [r0, #14]
 8006a4e:	6183      	str	r3, [r0, #24]
 8006a50:	4619      	mov	r1, r3
 8006a52:	2208      	movs	r2, #8
 8006a54:	305c      	adds	r0, #92	@ 0x5c
 8006a56:	f000 f9f9 	bl	8006e4c <memset>
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x58>)
 8006a5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x5c>)
 8006a60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <std+0x60>)
 8006a64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <std+0x64>)
 8006a68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa0 <std+0x68>)
 8006a6c:	6224      	str	r4, [r4, #32]
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	d006      	beq.n	8006a80 <std+0x48>
 8006a72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a76:	4294      	cmp	r4, r2
 8006a78:	d002      	beq.n	8006a80 <std+0x48>
 8006a7a:	33d0      	adds	r3, #208	@ 0xd0
 8006a7c:	429c      	cmp	r4, r3
 8006a7e:	d105      	bne.n	8006a8c <std+0x54>
 8006a80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a88:	f000 baae 	b.w	8006fe8 <__retarget_lock_init_recursive>
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	bf00      	nop
 8006a90:	08006c9d 	.word	0x08006c9d
 8006a94:	08006cbf 	.word	0x08006cbf
 8006a98:	08006cf7 	.word	0x08006cf7
 8006a9c:	08006d1b 	.word	0x08006d1b
 8006aa0:	20001b1c 	.word	0x20001b1c

08006aa4 <stdio_exit_handler>:
 8006aa4:	4a02      	ldr	r2, [pc, #8]	@ (8006ab0 <stdio_exit_handler+0xc>)
 8006aa6:	4903      	ldr	r1, [pc, #12]	@ (8006ab4 <stdio_exit_handler+0x10>)
 8006aa8:	4803      	ldr	r0, [pc, #12]	@ (8006ab8 <stdio_exit_handler+0x14>)
 8006aaa:	f000 b869 	b.w	8006b80 <_fwalk_sglue>
 8006aae:	bf00      	nop
 8006ab0:	20000018 	.word	0x20000018
 8006ab4:	080078a5 	.word	0x080078a5
 8006ab8:	20000028 	.word	0x20000028

08006abc <cleanup_stdio>:
 8006abc:	6841      	ldr	r1, [r0, #4]
 8006abe:	4b0c      	ldr	r3, [pc, #48]	@ (8006af0 <cleanup_stdio+0x34>)
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	d001      	beq.n	8006acc <cleanup_stdio+0x10>
 8006ac8:	f000 feec 	bl	80078a4 <_fflush_r>
 8006acc:	68a1      	ldr	r1, [r4, #8]
 8006ace:	4b09      	ldr	r3, [pc, #36]	@ (8006af4 <cleanup_stdio+0x38>)
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d002      	beq.n	8006ada <cleanup_stdio+0x1e>
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 fee5 	bl	80078a4 <_fflush_r>
 8006ada:	68e1      	ldr	r1, [r4, #12]
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <cleanup_stdio+0x3c>)
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	d004      	beq.n	8006aec <cleanup_stdio+0x30>
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae8:	f000 bedc 	b.w	80078a4 <_fflush_r>
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	bf00      	nop
 8006af0:	20001b1c 	.word	0x20001b1c
 8006af4:	20001b84 	.word	0x20001b84
 8006af8:	20001bec 	.word	0x20001bec

08006afc <global_stdio_init.part.0>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <global_stdio_init.part.0+0x30>)
 8006b00:	4c0b      	ldr	r4, [pc, #44]	@ (8006b30 <global_stdio_init.part.0+0x34>)
 8006b02:	4a0c      	ldr	r2, [pc, #48]	@ (8006b34 <global_stdio_init.part.0+0x38>)
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	4620      	mov	r0, r4
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2104      	movs	r1, #4
 8006b0c:	f7ff ff94 	bl	8006a38 <std>
 8006b10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b14:	2201      	movs	r2, #1
 8006b16:	2109      	movs	r1, #9
 8006b18:	f7ff ff8e 	bl	8006a38 <std>
 8006b1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b20:	2202      	movs	r2, #2
 8006b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b26:	2112      	movs	r1, #18
 8006b28:	f7ff bf86 	b.w	8006a38 <std>
 8006b2c:	20001c54 	.word	0x20001c54
 8006b30:	20001b1c 	.word	0x20001b1c
 8006b34:	08006aa5 	.word	0x08006aa5

08006b38 <__sfp_lock_acquire>:
 8006b38:	4801      	ldr	r0, [pc, #4]	@ (8006b40 <__sfp_lock_acquire+0x8>)
 8006b3a:	f000 ba56 	b.w	8006fea <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	20001c5d 	.word	0x20001c5d

08006b44 <__sfp_lock_release>:
 8006b44:	4801      	ldr	r0, [pc, #4]	@ (8006b4c <__sfp_lock_release+0x8>)
 8006b46:	f000 ba51 	b.w	8006fec <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	20001c5d 	.word	0x20001c5d

08006b50 <__sinit>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	4604      	mov	r4, r0
 8006b54:	f7ff fff0 	bl	8006b38 <__sfp_lock_acquire>
 8006b58:	6a23      	ldr	r3, [r4, #32]
 8006b5a:	b11b      	cbz	r3, 8006b64 <__sinit+0x14>
 8006b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b60:	f7ff bff0 	b.w	8006b44 <__sfp_lock_release>
 8006b64:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <__sinit+0x28>)
 8006b66:	6223      	str	r3, [r4, #32]
 8006b68:	4b04      	ldr	r3, [pc, #16]	@ (8006b7c <__sinit+0x2c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f5      	bne.n	8006b5c <__sinit+0xc>
 8006b70:	f7ff ffc4 	bl	8006afc <global_stdio_init.part.0>
 8006b74:	e7f2      	b.n	8006b5c <__sinit+0xc>
 8006b76:	bf00      	nop
 8006b78:	08006abd 	.word	0x08006abd
 8006b7c:	20001c54 	.word	0x20001c54

08006b80 <_fwalk_sglue>:
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	4607      	mov	r7, r0
 8006b86:	4688      	mov	r8, r1
 8006b88:	4614      	mov	r4, r2
 8006b8a:	2600      	movs	r6, #0
 8006b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b90:	f1b9 0901 	subs.w	r9, r9, #1
 8006b94:	d505      	bpl.n	8006ba2 <_fwalk_sglue+0x22>
 8006b96:	6824      	ldr	r4, [r4, #0]
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	d1f7      	bne.n	8006b8c <_fwalk_sglue+0xc>
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	89ab      	ldrh	r3, [r5, #12]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d907      	bls.n	8006bb8 <_fwalk_sglue+0x38>
 8006ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bac:	3301      	adds	r3, #1
 8006bae:	d003      	beq.n	8006bb8 <_fwalk_sglue+0x38>
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c0      	blx	r8
 8006bb6:	4306      	orrs	r6, r0
 8006bb8:	3568      	adds	r5, #104	@ 0x68
 8006bba:	e7e9      	b.n	8006b90 <_fwalk_sglue+0x10>

08006bbc <iprintf>:
 8006bbc:	b40f      	push	{r0, r1, r2, r3}
 8006bbe:	b507      	push	{r0, r1, r2, lr}
 8006bc0:	4906      	ldr	r1, [pc, #24]	@ (8006bdc <iprintf+0x20>)
 8006bc2:	ab04      	add	r3, sp, #16
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bca:	6881      	ldr	r1, [r0, #8]
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	f000 fb3f 	bl	8007250 <_vfiprintf_r>
 8006bd2:	b003      	add	sp, #12
 8006bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd8:	b004      	add	sp, #16
 8006bda:	4770      	bx	lr
 8006bdc:	20000024 	.word	0x20000024

08006be0 <_puts_r>:
 8006be0:	6a03      	ldr	r3, [r0, #32]
 8006be2:	b570      	push	{r4, r5, r6, lr}
 8006be4:	6884      	ldr	r4, [r0, #8]
 8006be6:	4605      	mov	r5, r0
 8006be8:	460e      	mov	r6, r1
 8006bea:	b90b      	cbnz	r3, 8006bf0 <_puts_r+0x10>
 8006bec:	f7ff ffb0 	bl	8006b50 <__sinit>
 8006bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bf2:	07db      	lsls	r3, r3, #31
 8006bf4:	d405      	bmi.n	8006c02 <_puts_r+0x22>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	0598      	lsls	r0, r3, #22
 8006bfa:	d402      	bmi.n	8006c02 <_puts_r+0x22>
 8006bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bfe:	f000 f9f4 	bl	8006fea <__retarget_lock_acquire_recursive>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	0719      	lsls	r1, r3, #28
 8006c06:	d502      	bpl.n	8006c0e <_puts_r+0x2e>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d135      	bne.n	8006c7a <_puts_r+0x9a>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f8c5 	bl	8006da0 <__swsetup_r>
 8006c16:	b380      	cbz	r0, 8006c7a <_puts_r+0x9a>
 8006c18:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006c1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c1e:	07da      	lsls	r2, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_puts_r+0x4e>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	059b      	lsls	r3, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_puts_r+0x4e>
 8006c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2a:	f000 f9df 	bl	8006fec <__retarget_lock_release_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da04      	bge.n	8006c40 <_puts_r+0x60>
 8006c36:	69a2      	ldr	r2, [r4, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	dc17      	bgt.n	8006c6c <_puts_r+0x8c>
 8006c3c:	290a      	cmp	r1, #10
 8006c3e:	d015      	beq.n	8006c6c <_puts_r+0x8c>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	7019      	strb	r1, [r3, #0]
 8006c48:	68a3      	ldr	r3, [r4, #8]
 8006c4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	60a3      	str	r3, [r4, #8]
 8006c52:	2900      	cmp	r1, #0
 8006c54:	d1ed      	bne.n	8006c32 <_puts_r+0x52>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	da11      	bge.n	8006c7e <_puts_r+0x9e>
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	210a      	movs	r1, #10
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f85f 	bl	8006d22 <__swbuf_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d0d7      	beq.n	8006c18 <_puts_r+0x38>
 8006c68:	250a      	movs	r5, #10
 8006c6a:	e7d7      	b.n	8006c1c <_puts_r+0x3c>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 f857 	bl	8006d22 <__swbuf_r>
 8006c74:	3001      	adds	r0, #1
 8006c76:	d1e7      	bne.n	8006c48 <_puts_r+0x68>
 8006c78:	e7ce      	b.n	8006c18 <_puts_r+0x38>
 8006c7a:	3e01      	subs	r6, #1
 8006c7c:	e7e4      	b.n	8006c48 <_puts_r+0x68>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	220a      	movs	r2, #10
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e7ee      	b.n	8006c68 <_puts_r+0x88>
	...

08006c8c <puts>:
 8006c8c:	4b02      	ldr	r3, [pc, #8]	@ (8006c98 <puts+0xc>)
 8006c8e:	4601      	mov	r1, r0
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	f7ff bfa5 	b.w	8006be0 <_puts_r>
 8006c96:	bf00      	nop
 8006c98:	20000024 	.word	0x20000024

08006c9c <__sread>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca4:	f000 f952 	bl	8006f4c <_read_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	bfab      	itete	ge
 8006cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cae:	89a3      	ldrhlt	r3, [r4, #12]
 8006cb0:	181b      	addge	r3, r3, r0
 8006cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cb6:	bfac      	ite	ge
 8006cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cba:	81a3      	strhlt	r3, [r4, #12]
 8006cbc:	bd10      	pop	{r4, pc}

08006cbe <__swrite>:
 8006cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc2:	461f      	mov	r7, r3
 8006cc4:	898b      	ldrh	r3, [r1, #12]
 8006cc6:	05db      	lsls	r3, r3, #23
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	4616      	mov	r6, r2
 8006cce:	d505      	bpl.n	8006cdc <__swrite+0x1e>
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f000 f926 	bl	8006f28 <_lseek_r>
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	4632      	mov	r2, r6
 8006cea:	463b      	mov	r3, r7
 8006cec:	4628      	mov	r0, r5
 8006cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf2:	f000 b93d 	b.w	8006f70 <_write_r>

08006cf6 <__sseek>:
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfe:	f000 f913 	bl	8006f28 <_lseek_r>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	bf15      	itete	ne
 8006d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d12:	81a3      	strheq	r3, [r4, #12]
 8006d14:	bf18      	it	ne
 8006d16:	81a3      	strhne	r3, [r4, #12]
 8006d18:	bd10      	pop	{r4, pc}

08006d1a <__sclose>:
 8006d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1e:	f000 b89d 	b.w	8006e5c <_close_r>

08006d22 <__swbuf_r>:
 8006d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d24:	460e      	mov	r6, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	4605      	mov	r5, r0
 8006d2a:	b118      	cbz	r0, 8006d34 <__swbuf_r+0x12>
 8006d2c:	6a03      	ldr	r3, [r0, #32]
 8006d2e:	b90b      	cbnz	r3, 8006d34 <__swbuf_r+0x12>
 8006d30:	f7ff ff0e 	bl	8006b50 <__sinit>
 8006d34:	69a3      	ldr	r3, [r4, #24]
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	071a      	lsls	r2, r3, #28
 8006d3c:	d501      	bpl.n	8006d42 <__swbuf_r+0x20>
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	b943      	cbnz	r3, 8006d54 <__swbuf_r+0x32>
 8006d42:	4621      	mov	r1, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 f82b 	bl	8006da0 <__swsetup_r>
 8006d4a:	b118      	cbz	r0, 8006d54 <__swbuf_r+0x32>
 8006d4c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006d50:	4638      	mov	r0, r7
 8006d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	6922      	ldr	r2, [r4, #16]
 8006d58:	1a98      	subs	r0, r3, r2
 8006d5a:	6963      	ldr	r3, [r4, #20]
 8006d5c:	b2f6      	uxtb	r6, r6
 8006d5e:	4283      	cmp	r3, r0
 8006d60:	4637      	mov	r7, r6
 8006d62:	dc05      	bgt.n	8006d70 <__swbuf_r+0x4e>
 8006d64:	4621      	mov	r1, r4
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 fd9c 	bl	80078a4 <_fflush_r>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d1ed      	bne.n	8006d4c <__swbuf_r+0x2a>
 8006d70:	68a3      	ldr	r3, [r4, #8]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	60a3      	str	r3, [r4, #8]
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	701e      	strb	r6, [r3, #0]
 8006d7e:	6962      	ldr	r2, [r4, #20]
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d004      	beq.n	8006d90 <__swbuf_r+0x6e>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	07db      	lsls	r3, r3, #31
 8006d8a:	d5e1      	bpl.n	8006d50 <__swbuf_r+0x2e>
 8006d8c:	2e0a      	cmp	r6, #10
 8006d8e:	d1df      	bne.n	8006d50 <__swbuf_r+0x2e>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 fd86 	bl	80078a4 <_fflush_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d0d9      	beq.n	8006d50 <__swbuf_r+0x2e>
 8006d9c:	e7d6      	b.n	8006d4c <__swbuf_r+0x2a>
	...

08006da0 <__swsetup_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4b29      	ldr	r3, [pc, #164]	@ (8006e48 <__swsetup_r+0xa8>)
 8006da4:	4605      	mov	r5, r0
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	460c      	mov	r4, r1
 8006daa:	b118      	cbz	r0, 8006db4 <__swsetup_r+0x14>
 8006dac:	6a03      	ldr	r3, [r0, #32]
 8006dae:	b90b      	cbnz	r3, 8006db4 <__swsetup_r+0x14>
 8006db0:	f7ff fece 	bl	8006b50 <__sinit>
 8006db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db8:	0719      	lsls	r1, r3, #28
 8006dba:	d422      	bmi.n	8006e02 <__swsetup_r+0x62>
 8006dbc:	06da      	lsls	r2, r3, #27
 8006dbe:	d407      	bmi.n	8006dd0 <__swsetup_r+0x30>
 8006dc0:	2209      	movs	r2, #9
 8006dc2:	602a      	str	r2, [r5, #0]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dce:	e033      	b.n	8006e38 <__swsetup_r+0x98>
 8006dd0:	0758      	lsls	r0, r3, #29
 8006dd2:	d512      	bpl.n	8006dfa <__swsetup_r+0x5a>
 8006dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dd6:	b141      	cbz	r1, 8006dea <__swsetup_r+0x4a>
 8006dd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ddc:	4299      	cmp	r1, r3
 8006dde:	d002      	beq.n	8006de6 <__swsetup_r+0x46>
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 f913 	bl	800700c <_free_r>
 8006de6:	2300      	movs	r3, #0
 8006de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006df0:	81a3      	strh	r3, [r4, #12]
 8006df2:	2300      	movs	r3, #0
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	f043 0308 	orr.w	r3, r3, #8
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	b94b      	cbnz	r3, 8006e1a <__swsetup_r+0x7a>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e10:	d003      	beq.n	8006e1a <__swsetup_r+0x7a>
 8006e12:	4621      	mov	r1, r4
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 fd93 	bl	8007940 <__smakebuf_r>
 8006e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e1e:	f013 0201 	ands.w	r2, r3, #1
 8006e22:	d00a      	beq.n	8006e3a <__swsetup_r+0x9a>
 8006e24:	2200      	movs	r2, #0
 8006e26:	60a2      	str	r2, [r4, #8]
 8006e28:	6962      	ldr	r2, [r4, #20]
 8006e2a:	4252      	negs	r2, r2
 8006e2c:	61a2      	str	r2, [r4, #24]
 8006e2e:	6922      	ldr	r2, [r4, #16]
 8006e30:	b942      	cbnz	r2, 8006e44 <__swsetup_r+0xa4>
 8006e32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e36:	d1c5      	bne.n	8006dc4 <__swsetup_r+0x24>
 8006e38:	bd38      	pop	{r3, r4, r5, pc}
 8006e3a:	0799      	lsls	r1, r3, #30
 8006e3c:	bf58      	it	pl
 8006e3e:	6962      	ldrpl	r2, [r4, #20]
 8006e40:	60a2      	str	r2, [r4, #8]
 8006e42:	e7f4      	b.n	8006e2e <__swsetup_r+0x8e>
 8006e44:	2000      	movs	r0, #0
 8006e46:	e7f7      	b.n	8006e38 <__swsetup_r+0x98>
 8006e48:	20000024 	.word	0x20000024

08006e4c <memset>:
 8006e4c:	4402      	add	r2, r0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d100      	bne.n	8006e56 <memset+0xa>
 8006e54:	4770      	bx	lr
 8006e56:	f803 1b01 	strb.w	r1, [r3], #1
 8006e5a:	e7f9      	b.n	8006e50 <memset+0x4>

08006e5c <_close_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d06      	ldr	r5, [pc, #24]	@ (8006e78 <_close_r+0x1c>)
 8006e60:	2300      	movs	r3, #0
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	f7f9 fe7a 	bl	8000b60 <_close>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_close_r+0x1a>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_close_r+0x1a>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	20001c58 	.word	0x20001c58

08006e7c <_reclaim_reent>:
 8006e7c:	4b29      	ldr	r3, [pc, #164]	@ (8006f24 <_reclaim_reent+0xa8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4283      	cmp	r3, r0
 8006e82:	b570      	push	{r4, r5, r6, lr}
 8006e84:	4604      	mov	r4, r0
 8006e86:	d04b      	beq.n	8006f20 <_reclaim_reent+0xa4>
 8006e88:	69c3      	ldr	r3, [r0, #28]
 8006e8a:	b1ab      	cbz	r3, 8006eb8 <_reclaim_reent+0x3c>
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	b16b      	cbz	r3, 8006eac <_reclaim_reent+0x30>
 8006e90:	2500      	movs	r5, #0
 8006e92:	69e3      	ldr	r3, [r4, #28]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	5959      	ldr	r1, [r3, r5]
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	d13b      	bne.n	8006f14 <_reclaim_reent+0x98>
 8006e9c:	3504      	adds	r5, #4
 8006e9e:	2d80      	cmp	r5, #128	@ 0x80
 8006ea0:	d1f7      	bne.n	8006e92 <_reclaim_reent+0x16>
 8006ea2:	69e3      	ldr	r3, [r4, #28]
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	68d9      	ldr	r1, [r3, #12]
 8006ea8:	f000 f8b0 	bl	800700c <_free_r>
 8006eac:	69e3      	ldr	r3, [r4, #28]
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	b111      	cbz	r1, 8006eb8 <_reclaim_reent+0x3c>
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 f8aa 	bl	800700c <_free_r>
 8006eb8:	6961      	ldr	r1, [r4, #20]
 8006eba:	b111      	cbz	r1, 8006ec2 <_reclaim_reent+0x46>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 f8a5 	bl	800700c <_free_r>
 8006ec2:	69e1      	ldr	r1, [r4, #28]
 8006ec4:	b111      	cbz	r1, 8006ecc <_reclaim_reent+0x50>
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 f8a0 	bl	800700c <_free_r>
 8006ecc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006ece:	b111      	cbz	r1, 8006ed6 <_reclaim_reent+0x5a>
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 f89b 	bl	800700c <_free_r>
 8006ed6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ed8:	b111      	cbz	r1, 8006ee0 <_reclaim_reent+0x64>
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 f896 	bl	800700c <_free_r>
 8006ee0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006ee2:	b111      	cbz	r1, 8006eea <_reclaim_reent+0x6e>
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 f891 	bl	800700c <_free_r>
 8006eea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006eec:	b111      	cbz	r1, 8006ef4 <_reclaim_reent+0x78>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f88c 	bl	800700c <_free_r>
 8006ef4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006ef6:	b111      	cbz	r1, 8006efe <_reclaim_reent+0x82>
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 f887 	bl	800700c <_free_r>
 8006efe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006f00:	b111      	cbz	r1, 8006f08 <_reclaim_reent+0x8c>
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 f882 	bl	800700c <_free_r>
 8006f08:	6a23      	ldr	r3, [r4, #32]
 8006f0a:	b14b      	cbz	r3, 8006f20 <_reclaim_reent+0xa4>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f12:	4718      	bx	r3
 8006f14:	680e      	ldr	r6, [r1, #0]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 f878 	bl	800700c <_free_r>
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	e7bb      	b.n	8006e98 <_reclaim_reent+0x1c>
 8006f20:	bd70      	pop	{r4, r5, r6, pc}
 8006f22:	bf00      	nop
 8006f24:	20000024 	.word	0x20000024

08006f28 <_lseek_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	@ (8006f48 <_lseek_r+0x20>)
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	4608      	mov	r0, r1
 8006f30:	4611      	mov	r1, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f7f9 fe39 	bl	8000bae <_lseek>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_lseek_r+0x1e>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_lseek_r+0x1e>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20001c58 	.word	0x20001c58

08006f4c <_read_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	@ (8006f6c <_read_r+0x20>)
 8006f50:	4604      	mov	r4, r0
 8006f52:	4608      	mov	r0, r1
 8006f54:	4611      	mov	r1, r2
 8006f56:	2200      	movs	r2, #0
 8006f58:	602a      	str	r2, [r5, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f7f9 fdcc 	bl	8000af8 <_read>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_read_r+0x1e>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_read_r+0x1e>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	20001c58 	.word	0x20001c58

08006f70 <_write_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	@ (8006f90 <_write_r+0x20>)
 8006f74:	4604      	mov	r4, r0
 8006f76:	4608      	mov	r0, r1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	602a      	str	r2, [r5, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f7f9 fdd8 	bl	8000b34 <_write>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_write_r+0x1e>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_write_r+0x1e>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	20001c58 	.word	0x20001c58

08006f94 <__errno>:
 8006f94:	4b01      	ldr	r3, [pc, #4]	@ (8006f9c <__errno+0x8>)
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	20000024 	.word	0x20000024

08006fa0 <__libc_init_array>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8006fd8 <__libc_init_array+0x38>)
 8006fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8006fdc <__libc_init_array+0x3c>)
 8006fa6:	1b64      	subs	r4, r4, r5
 8006fa8:	10a4      	asrs	r4, r4, #2
 8006faa:	2600      	movs	r6, #0
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	d109      	bne.n	8006fc4 <__libc_init_array+0x24>
 8006fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8006fe0 <__libc_init_array+0x40>)
 8006fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8006fe4 <__libc_init_array+0x44>)
 8006fb4:	f000 fd32 	bl	8007a1c <_init>
 8006fb8:	1b64      	subs	r4, r4, r5
 8006fba:	10a4      	asrs	r4, r4, #2
 8006fbc:	2600      	movs	r6, #0
 8006fbe:	42a6      	cmp	r6, r4
 8006fc0:	d105      	bne.n	8006fce <__libc_init_array+0x2e>
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc8:	4798      	blx	r3
 8006fca:	3601      	adds	r6, #1
 8006fcc:	e7ee      	b.n	8006fac <__libc_init_array+0xc>
 8006fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd2:	4798      	blx	r3
 8006fd4:	3601      	adds	r6, #1
 8006fd6:	e7f2      	b.n	8006fbe <__libc_init_array+0x1e>
 8006fd8:	08007bc0 	.word	0x08007bc0
 8006fdc:	08007bc0 	.word	0x08007bc0
 8006fe0:	08007bc0 	.word	0x08007bc0
 8006fe4:	08007bc4 	.word	0x08007bc4

08006fe8 <__retarget_lock_init_recursive>:
 8006fe8:	4770      	bx	lr

08006fea <__retarget_lock_acquire_recursive>:
 8006fea:	4770      	bx	lr

08006fec <__retarget_lock_release_recursive>:
 8006fec:	4770      	bx	lr

08006fee <memcpy>:
 8006fee:	440a      	add	r2, r1
 8006ff0:	4291      	cmp	r1, r2
 8006ff2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ff6:	d100      	bne.n	8006ffa <memcpy+0xc>
 8006ff8:	4770      	bx	lr
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007004:	4291      	cmp	r1, r2
 8007006:	d1f9      	bne.n	8006ffc <memcpy+0xe>
 8007008:	bd10      	pop	{r4, pc}
	...

0800700c <_free_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4605      	mov	r5, r0
 8007010:	2900      	cmp	r1, #0
 8007012:	d041      	beq.n	8007098 <_free_r+0x8c>
 8007014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007018:	1f0c      	subs	r4, r1, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfb8      	it	lt
 800701e:	18e4      	addlt	r4, r4, r3
 8007020:	f000 f8e0 	bl	80071e4 <__malloc_lock>
 8007024:	4a1d      	ldr	r2, [pc, #116]	@ (800709c <_free_r+0x90>)
 8007026:	6813      	ldr	r3, [r2, #0]
 8007028:	b933      	cbnz	r3, 8007038 <_free_r+0x2c>
 800702a:	6063      	str	r3, [r4, #4]
 800702c:	6014      	str	r4, [r2, #0]
 800702e:	4628      	mov	r0, r5
 8007030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007034:	f000 b8dc 	b.w	80071f0 <__malloc_unlock>
 8007038:	42a3      	cmp	r3, r4
 800703a:	d908      	bls.n	800704e <_free_r+0x42>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	1821      	adds	r1, r4, r0
 8007040:	428b      	cmp	r3, r1
 8007042:	bf01      	itttt	eq
 8007044:	6819      	ldreq	r1, [r3, #0]
 8007046:	685b      	ldreq	r3, [r3, #4]
 8007048:	1809      	addeq	r1, r1, r0
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	e7ed      	b.n	800702a <_free_r+0x1e>
 800704e:	461a      	mov	r2, r3
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b10b      	cbz	r3, 8007058 <_free_r+0x4c>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d9fa      	bls.n	800704e <_free_r+0x42>
 8007058:	6811      	ldr	r1, [r2, #0]
 800705a:	1850      	adds	r0, r2, r1
 800705c:	42a0      	cmp	r0, r4
 800705e:	d10b      	bne.n	8007078 <_free_r+0x6c>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	4401      	add	r1, r0
 8007064:	1850      	adds	r0, r2, r1
 8007066:	4283      	cmp	r3, r0
 8007068:	6011      	str	r1, [r2, #0]
 800706a:	d1e0      	bne.n	800702e <_free_r+0x22>
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	6053      	str	r3, [r2, #4]
 8007072:	4408      	add	r0, r1
 8007074:	6010      	str	r0, [r2, #0]
 8007076:	e7da      	b.n	800702e <_free_r+0x22>
 8007078:	d902      	bls.n	8007080 <_free_r+0x74>
 800707a:	230c      	movs	r3, #12
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	e7d6      	b.n	800702e <_free_r+0x22>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	1821      	adds	r1, r4, r0
 8007084:	428b      	cmp	r3, r1
 8007086:	bf04      	itt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	6063      	str	r3, [r4, #4]
 800708e:	bf04      	itt	eq
 8007090:	1809      	addeq	r1, r1, r0
 8007092:	6021      	streq	r1, [r4, #0]
 8007094:	6054      	str	r4, [r2, #4]
 8007096:	e7ca      	b.n	800702e <_free_r+0x22>
 8007098:	bd38      	pop	{r3, r4, r5, pc}
 800709a:	bf00      	nop
 800709c:	20001c64 	.word	0x20001c64

080070a0 <sbrk_aligned>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4e0f      	ldr	r6, [pc, #60]	@ (80070e0 <sbrk_aligned+0x40>)
 80070a4:	460c      	mov	r4, r1
 80070a6:	6831      	ldr	r1, [r6, #0]
 80070a8:	4605      	mov	r5, r0
 80070aa:	b911      	cbnz	r1, 80070b2 <sbrk_aligned+0x12>
 80070ac:	f000 fca6 	bl	80079fc <_sbrk_r>
 80070b0:	6030      	str	r0, [r6, #0]
 80070b2:	4621      	mov	r1, r4
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 fca1 	bl	80079fc <_sbrk_r>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d103      	bne.n	80070c6 <sbrk_aligned+0x26>
 80070be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80070c2:	4620      	mov	r0, r4
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
 80070c6:	1cc4      	adds	r4, r0, #3
 80070c8:	f024 0403 	bic.w	r4, r4, #3
 80070cc:	42a0      	cmp	r0, r4
 80070ce:	d0f8      	beq.n	80070c2 <sbrk_aligned+0x22>
 80070d0:	1a21      	subs	r1, r4, r0
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 fc92 	bl	80079fc <_sbrk_r>
 80070d8:	3001      	adds	r0, #1
 80070da:	d1f2      	bne.n	80070c2 <sbrk_aligned+0x22>
 80070dc:	e7ef      	b.n	80070be <sbrk_aligned+0x1e>
 80070de:	bf00      	nop
 80070e0:	20001c60 	.word	0x20001c60

080070e4 <_malloc_r>:
 80070e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e8:	1ccd      	adds	r5, r1, #3
 80070ea:	f025 0503 	bic.w	r5, r5, #3
 80070ee:	3508      	adds	r5, #8
 80070f0:	2d0c      	cmp	r5, #12
 80070f2:	bf38      	it	cc
 80070f4:	250c      	movcc	r5, #12
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	4606      	mov	r6, r0
 80070fa:	db01      	blt.n	8007100 <_malloc_r+0x1c>
 80070fc:	42a9      	cmp	r1, r5
 80070fe:	d904      	bls.n	800710a <_malloc_r+0x26>
 8007100:	230c      	movs	r3, #12
 8007102:	6033      	str	r3, [r6, #0]
 8007104:	2000      	movs	r0, #0
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071e0 <_malloc_r+0xfc>
 800710e:	f000 f869 	bl	80071e4 <__malloc_lock>
 8007112:	f8d8 3000 	ldr.w	r3, [r8]
 8007116:	461c      	mov	r4, r3
 8007118:	bb44      	cbnz	r4, 800716c <_malloc_r+0x88>
 800711a:	4629      	mov	r1, r5
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ffbf 	bl	80070a0 <sbrk_aligned>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	4604      	mov	r4, r0
 8007126:	d158      	bne.n	80071da <_malloc_r+0xf6>
 8007128:	f8d8 4000 	ldr.w	r4, [r8]
 800712c:	4627      	mov	r7, r4
 800712e:	2f00      	cmp	r7, #0
 8007130:	d143      	bne.n	80071ba <_malloc_r+0xd6>
 8007132:	2c00      	cmp	r4, #0
 8007134:	d04b      	beq.n	80071ce <_malloc_r+0xea>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	4639      	mov	r1, r7
 800713a:	4630      	mov	r0, r6
 800713c:	eb04 0903 	add.w	r9, r4, r3
 8007140:	f000 fc5c 	bl	80079fc <_sbrk_r>
 8007144:	4581      	cmp	r9, r0
 8007146:	d142      	bne.n	80071ce <_malloc_r+0xea>
 8007148:	6821      	ldr	r1, [r4, #0]
 800714a:	1a6d      	subs	r5, r5, r1
 800714c:	4629      	mov	r1, r5
 800714e:	4630      	mov	r0, r6
 8007150:	f7ff ffa6 	bl	80070a0 <sbrk_aligned>
 8007154:	3001      	adds	r0, #1
 8007156:	d03a      	beq.n	80071ce <_malloc_r+0xea>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	442b      	add	r3, r5
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	f8d8 3000 	ldr.w	r3, [r8]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	bb62      	cbnz	r2, 80071c0 <_malloc_r+0xdc>
 8007166:	f8c8 7000 	str.w	r7, [r8]
 800716a:	e00f      	b.n	800718c <_malloc_r+0xa8>
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	1b52      	subs	r2, r2, r5
 8007170:	d420      	bmi.n	80071b4 <_malloc_r+0xd0>
 8007172:	2a0b      	cmp	r2, #11
 8007174:	d917      	bls.n	80071a6 <_malloc_r+0xc2>
 8007176:	1961      	adds	r1, r4, r5
 8007178:	42a3      	cmp	r3, r4
 800717a:	6025      	str	r5, [r4, #0]
 800717c:	bf18      	it	ne
 800717e:	6059      	strne	r1, [r3, #4]
 8007180:	6863      	ldr	r3, [r4, #4]
 8007182:	bf08      	it	eq
 8007184:	f8c8 1000 	streq.w	r1, [r8]
 8007188:	5162      	str	r2, [r4, r5]
 800718a:	604b      	str	r3, [r1, #4]
 800718c:	4630      	mov	r0, r6
 800718e:	f000 f82f 	bl	80071f0 <__malloc_unlock>
 8007192:	f104 000b 	add.w	r0, r4, #11
 8007196:	1d23      	adds	r3, r4, #4
 8007198:	f020 0007 	bic.w	r0, r0, #7
 800719c:	1ac2      	subs	r2, r0, r3
 800719e:	bf1c      	itt	ne
 80071a0:	1a1b      	subne	r3, r3, r0
 80071a2:	50a3      	strne	r3, [r4, r2]
 80071a4:	e7af      	b.n	8007106 <_malloc_r+0x22>
 80071a6:	6862      	ldr	r2, [r4, #4]
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	bf0c      	ite	eq
 80071ac:	f8c8 2000 	streq.w	r2, [r8]
 80071b0:	605a      	strne	r2, [r3, #4]
 80071b2:	e7eb      	b.n	800718c <_malloc_r+0xa8>
 80071b4:	4623      	mov	r3, r4
 80071b6:	6864      	ldr	r4, [r4, #4]
 80071b8:	e7ae      	b.n	8007118 <_malloc_r+0x34>
 80071ba:	463c      	mov	r4, r7
 80071bc:	687f      	ldr	r7, [r7, #4]
 80071be:	e7b6      	b.n	800712e <_malloc_r+0x4a>
 80071c0:	461a      	mov	r2, r3
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d1fb      	bne.n	80071c0 <_malloc_r+0xdc>
 80071c8:	2300      	movs	r3, #0
 80071ca:	6053      	str	r3, [r2, #4]
 80071cc:	e7de      	b.n	800718c <_malloc_r+0xa8>
 80071ce:	230c      	movs	r3, #12
 80071d0:	6033      	str	r3, [r6, #0]
 80071d2:	4630      	mov	r0, r6
 80071d4:	f000 f80c 	bl	80071f0 <__malloc_unlock>
 80071d8:	e794      	b.n	8007104 <_malloc_r+0x20>
 80071da:	6005      	str	r5, [r0, #0]
 80071dc:	e7d6      	b.n	800718c <_malloc_r+0xa8>
 80071de:	bf00      	nop
 80071e0:	20001c64 	.word	0x20001c64

080071e4 <__malloc_lock>:
 80071e4:	4801      	ldr	r0, [pc, #4]	@ (80071ec <__malloc_lock+0x8>)
 80071e6:	f7ff bf00 	b.w	8006fea <__retarget_lock_acquire_recursive>
 80071ea:	bf00      	nop
 80071ec:	20001c5c 	.word	0x20001c5c

080071f0 <__malloc_unlock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	@ (80071f8 <__malloc_unlock+0x8>)
 80071f2:	f7ff befb 	b.w	8006fec <__retarget_lock_release_recursive>
 80071f6:	bf00      	nop
 80071f8:	20001c5c 	.word	0x20001c5c

080071fc <__sfputc_r>:
 80071fc:	6893      	ldr	r3, [r2, #8]
 80071fe:	3b01      	subs	r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	b410      	push	{r4}
 8007204:	6093      	str	r3, [r2, #8]
 8007206:	da08      	bge.n	800721a <__sfputc_r+0x1e>
 8007208:	6994      	ldr	r4, [r2, #24]
 800720a:	42a3      	cmp	r3, r4
 800720c:	db01      	blt.n	8007212 <__sfputc_r+0x16>
 800720e:	290a      	cmp	r1, #10
 8007210:	d103      	bne.n	800721a <__sfputc_r+0x1e>
 8007212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007216:	f7ff bd84 	b.w	8006d22 <__swbuf_r>
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	1c58      	adds	r0, r3, #1
 800721e:	6010      	str	r0, [r2, #0]
 8007220:	7019      	strb	r1, [r3, #0]
 8007222:	4608      	mov	r0, r1
 8007224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007228:	4770      	bx	lr

0800722a <__sfputs_r>:
 800722a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722c:	4606      	mov	r6, r0
 800722e:	460f      	mov	r7, r1
 8007230:	4614      	mov	r4, r2
 8007232:	18d5      	adds	r5, r2, r3
 8007234:	42ac      	cmp	r4, r5
 8007236:	d101      	bne.n	800723c <__sfputs_r+0x12>
 8007238:	2000      	movs	r0, #0
 800723a:	e007      	b.n	800724c <__sfputs_r+0x22>
 800723c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007240:	463a      	mov	r2, r7
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ffda 	bl	80071fc <__sfputc_r>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d1f3      	bne.n	8007234 <__sfputs_r+0xa>
 800724c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007250 <_vfiprintf_r>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	460d      	mov	r5, r1
 8007256:	b09d      	sub	sp, #116	@ 0x74
 8007258:	4614      	mov	r4, r2
 800725a:	4698      	mov	r8, r3
 800725c:	4606      	mov	r6, r0
 800725e:	b118      	cbz	r0, 8007268 <_vfiprintf_r+0x18>
 8007260:	6a03      	ldr	r3, [r0, #32]
 8007262:	b90b      	cbnz	r3, 8007268 <_vfiprintf_r+0x18>
 8007264:	f7ff fc74 	bl	8006b50 <__sinit>
 8007268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800726a:	07d9      	lsls	r1, r3, #31
 800726c:	d405      	bmi.n	800727a <_vfiprintf_r+0x2a>
 800726e:	89ab      	ldrh	r3, [r5, #12]
 8007270:	059a      	lsls	r2, r3, #22
 8007272:	d402      	bmi.n	800727a <_vfiprintf_r+0x2a>
 8007274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007276:	f7ff feb8 	bl	8006fea <__retarget_lock_acquire_recursive>
 800727a:	89ab      	ldrh	r3, [r5, #12]
 800727c:	071b      	lsls	r3, r3, #28
 800727e:	d501      	bpl.n	8007284 <_vfiprintf_r+0x34>
 8007280:	692b      	ldr	r3, [r5, #16]
 8007282:	b99b      	cbnz	r3, 80072ac <_vfiprintf_r+0x5c>
 8007284:	4629      	mov	r1, r5
 8007286:	4630      	mov	r0, r6
 8007288:	f7ff fd8a 	bl	8006da0 <__swsetup_r>
 800728c:	b170      	cbz	r0, 80072ac <_vfiprintf_r+0x5c>
 800728e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007290:	07dc      	lsls	r4, r3, #31
 8007292:	d504      	bpl.n	800729e <_vfiprintf_r+0x4e>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007298:	b01d      	add	sp, #116	@ 0x74
 800729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	89ab      	ldrh	r3, [r5, #12]
 80072a0:	0598      	lsls	r0, r3, #22
 80072a2:	d4f7      	bmi.n	8007294 <_vfiprintf_r+0x44>
 80072a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072a6:	f7ff fea1 	bl	8006fec <__retarget_lock_release_recursive>
 80072aa:	e7f3      	b.n	8007294 <_vfiprintf_r+0x44>
 80072ac:	2300      	movs	r3, #0
 80072ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80072b0:	2320      	movs	r3, #32
 80072b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ba:	2330      	movs	r3, #48	@ 0x30
 80072bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800746c <_vfiprintf_r+0x21c>
 80072c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072c4:	f04f 0901 	mov.w	r9, #1
 80072c8:	4623      	mov	r3, r4
 80072ca:	469a      	mov	sl, r3
 80072cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072d0:	b10a      	cbz	r2, 80072d6 <_vfiprintf_r+0x86>
 80072d2:	2a25      	cmp	r2, #37	@ 0x25
 80072d4:	d1f9      	bne.n	80072ca <_vfiprintf_r+0x7a>
 80072d6:	ebba 0b04 	subs.w	fp, sl, r4
 80072da:	d00b      	beq.n	80072f4 <_vfiprintf_r+0xa4>
 80072dc:	465b      	mov	r3, fp
 80072de:	4622      	mov	r2, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7ff ffa1 	bl	800722a <__sfputs_r>
 80072e8:	3001      	adds	r0, #1
 80072ea:	f000 80a7 	beq.w	800743c <_vfiprintf_r+0x1ec>
 80072ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072f0:	445a      	add	r2, fp
 80072f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80072f4:	f89a 3000 	ldrb.w	r3, [sl]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 809f 	beq.w	800743c <_vfiprintf_r+0x1ec>
 80072fe:	2300      	movs	r3, #0
 8007300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007308:	f10a 0a01 	add.w	sl, sl, #1
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007314:	931a      	str	r3, [sp, #104]	@ 0x68
 8007316:	4654      	mov	r4, sl
 8007318:	2205      	movs	r2, #5
 800731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731e:	4853      	ldr	r0, [pc, #332]	@ (800746c <_vfiprintf_r+0x21c>)
 8007320:	f7f8 ff66 	bl	80001f0 <memchr>
 8007324:	9a04      	ldr	r2, [sp, #16]
 8007326:	b9d8      	cbnz	r0, 8007360 <_vfiprintf_r+0x110>
 8007328:	06d1      	lsls	r1, r2, #27
 800732a:	bf44      	itt	mi
 800732c:	2320      	movmi	r3, #32
 800732e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007332:	0713      	lsls	r3, r2, #28
 8007334:	bf44      	itt	mi
 8007336:	232b      	movmi	r3, #43	@ 0x2b
 8007338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800733c:	f89a 3000 	ldrb.w	r3, [sl]
 8007340:	2b2a      	cmp	r3, #42	@ 0x2a
 8007342:	d015      	beq.n	8007370 <_vfiprintf_r+0x120>
 8007344:	9a07      	ldr	r2, [sp, #28]
 8007346:	4654      	mov	r4, sl
 8007348:	2000      	movs	r0, #0
 800734a:	f04f 0c0a 	mov.w	ip, #10
 800734e:	4621      	mov	r1, r4
 8007350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007354:	3b30      	subs	r3, #48	@ 0x30
 8007356:	2b09      	cmp	r3, #9
 8007358:	d94b      	bls.n	80073f2 <_vfiprintf_r+0x1a2>
 800735a:	b1b0      	cbz	r0, 800738a <_vfiprintf_r+0x13a>
 800735c:	9207      	str	r2, [sp, #28]
 800735e:	e014      	b.n	800738a <_vfiprintf_r+0x13a>
 8007360:	eba0 0308 	sub.w	r3, r0, r8
 8007364:	fa09 f303 	lsl.w	r3, r9, r3
 8007368:	4313      	orrs	r3, r2
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	46a2      	mov	sl, r4
 800736e:	e7d2      	b.n	8007316 <_vfiprintf_r+0xc6>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	1d19      	adds	r1, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	9103      	str	r1, [sp, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	bfbb      	ittet	lt
 800737c:	425b      	neglt	r3, r3
 800737e:	f042 0202 	orrlt.w	r2, r2, #2
 8007382:	9307      	strge	r3, [sp, #28]
 8007384:	9307      	strlt	r3, [sp, #28]
 8007386:	bfb8      	it	lt
 8007388:	9204      	strlt	r2, [sp, #16]
 800738a:	7823      	ldrb	r3, [r4, #0]
 800738c:	2b2e      	cmp	r3, #46	@ 0x2e
 800738e:	d10a      	bne.n	80073a6 <_vfiprintf_r+0x156>
 8007390:	7863      	ldrb	r3, [r4, #1]
 8007392:	2b2a      	cmp	r3, #42	@ 0x2a
 8007394:	d132      	bne.n	80073fc <_vfiprintf_r+0x1ac>
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	9203      	str	r2, [sp, #12]
 800739e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073a2:	3402      	adds	r4, #2
 80073a4:	9305      	str	r3, [sp, #20]
 80073a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800747c <_vfiprintf_r+0x22c>
 80073aa:	7821      	ldrb	r1, [r4, #0]
 80073ac:	2203      	movs	r2, #3
 80073ae:	4650      	mov	r0, sl
 80073b0:	f7f8 ff1e 	bl	80001f0 <memchr>
 80073b4:	b138      	cbz	r0, 80073c6 <_vfiprintf_r+0x176>
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	eba0 000a 	sub.w	r0, r0, sl
 80073bc:	2240      	movs	r2, #64	@ 0x40
 80073be:	4082      	lsls	r2, r0
 80073c0:	4313      	orrs	r3, r2
 80073c2:	3401      	adds	r4, #1
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ca:	4829      	ldr	r0, [pc, #164]	@ (8007470 <_vfiprintf_r+0x220>)
 80073cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073d0:	2206      	movs	r2, #6
 80073d2:	f7f8 ff0d 	bl	80001f0 <memchr>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d03f      	beq.n	800745a <_vfiprintf_r+0x20a>
 80073da:	4b26      	ldr	r3, [pc, #152]	@ (8007474 <_vfiprintf_r+0x224>)
 80073dc:	bb1b      	cbnz	r3, 8007426 <_vfiprintf_r+0x1d6>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	3307      	adds	r3, #7
 80073e2:	f023 0307 	bic.w	r3, r3, #7
 80073e6:	3308      	adds	r3, #8
 80073e8:	9303      	str	r3, [sp, #12]
 80073ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ec:	443b      	add	r3, r7
 80073ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f0:	e76a      	b.n	80072c8 <_vfiprintf_r+0x78>
 80073f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073f6:	460c      	mov	r4, r1
 80073f8:	2001      	movs	r0, #1
 80073fa:	e7a8      	b.n	800734e <_vfiprintf_r+0xfe>
 80073fc:	2300      	movs	r3, #0
 80073fe:	3401      	adds	r4, #1
 8007400:	9305      	str	r3, [sp, #20]
 8007402:	4619      	mov	r1, r3
 8007404:	f04f 0c0a 	mov.w	ip, #10
 8007408:	4620      	mov	r0, r4
 800740a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800740e:	3a30      	subs	r2, #48	@ 0x30
 8007410:	2a09      	cmp	r2, #9
 8007412:	d903      	bls.n	800741c <_vfiprintf_r+0x1cc>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0c6      	beq.n	80073a6 <_vfiprintf_r+0x156>
 8007418:	9105      	str	r1, [sp, #20]
 800741a:	e7c4      	b.n	80073a6 <_vfiprintf_r+0x156>
 800741c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007420:	4604      	mov	r4, r0
 8007422:	2301      	movs	r3, #1
 8007424:	e7f0      	b.n	8007408 <_vfiprintf_r+0x1b8>
 8007426:	ab03      	add	r3, sp, #12
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	462a      	mov	r2, r5
 800742c:	4b12      	ldr	r3, [pc, #72]	@ (8007478 <_vfiprintf_r+0x228>)
 800742e:	a904      	add	r1, sp, #16
 8007430:	4630      	mov	r0, r6
 8007432:	f3af 8000 	nop.w
 8007436:	4607      	mov	r7, r0
 8007438:	1c78      	adds	r0, r7, #1
 800743a:	d1d6      	bne.n	80073ea <_vfiprintf_r+0x19a>
 800743c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800743e:	07d9      	lsls	r1, r3, #31
 8007440:	d405      	bmi.n	800744e <_vfiprintf_r+0x1fe>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	059a      	lsls	r2, r3, #22
 8007446:	d402      	bmi.n	800744e <_vfiprintf_r+0x1fe>
 8007448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800744a:	f7ff fdcf 	bl	8006fec <__retarget_lock_release_recursive>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	065b      	lsls	r3, r3, #25
 8007452:	f53f af1f 	bmi.w	8007294 <_vfiprintf_r+0x44>
 8007456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007458:	e71e      	b.n	8007298 <_vfiprintf_r+0x48>
 800745a:	ab03      	add	r3, sp, #12
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	462a      	mov	r2, r5
 8007460:	4b05      	ldr	r3, [pc, #20]	@ (8007478 <_vfiprintf_r+0x228>)
 8007462:	a904      	add	r1, sp, #16
 8007464:	4630      	mov	r0, r6
 8007466:	f000 f879 	bl	800755c <_printf_i>
 800746a:	e7e4      	b.n	8007436 <_vfiprintf_r+0x1e6>
 800746c:	08007b84 	.word	0x08007b84
 8007470:	08007b8e 	.word	0x08007b8e
 8007474:	00000000 	.word	0x00000000
 8007478:	0800722b 	.word	0x0800722b
 800747c:	08007b8a 	.word	0x08007b8a

08007480 <_printf_common>:
 8007480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	4616      	mov	r6, r2
 8007486:	4698      	mov	r8, r3
 8007488:	688a      	ldr	r2, [r1, #8]
 800748a:	690b      	ldr	r3, [r1, #16]
 800748c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007490:	4293      	cmp	r3, r2
 8007492:	bfb8      	it	lt
 8007494:	4613      	movlt	r3, r2
 8007496:	6033      	str	r3, [r6, #0]
 8007498:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800749c:	4607      	mov	r7, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	b10a      	cbz	r2, 80074a6 <_printf_common+0x26>
 80074a2:	3301      	adds	r3, #1
 80074a4:	6033      	str	r3, [r6, #0]
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	0699      	lsls	r1, r3, #26
 80074aa:	bf42      	ittt	mi
 80074ac:	6833      	ldrmi	r3, [r6, #0]
 80074ae:	3302      	addmi	r3, #2
 80074b0:	6033      	strmi	r3, [r6, #0]
 80074b2:	6825      	ldr	r5, [r4, #0]
 80074b4:	f015 0506 	ands.w	r5, r5, #6
 80074b8:	d106      	bne.n	80074c8 <_printf_common+0x48>
 80074ba:	f104 0a19 	add.w	sl, r4, #25
 80074be:	68e3      	ldr	r3, [r4, #12]
 80074c0:	6832      	ldr	r2, [r6, #0]
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	42ab      	cmp	r3, r5
 80074c6:	dc26      	bgt.n	8007516 <_printf_common+0x96>
 80074c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	3b00      	subs	r3, #0
 80074d0:	bf18      	it	ne
 80074d2:	2301      	movne	r3, #1
 80074d4:	0692      	lsls	r2, r2, #26
 80074d6:	d42b      	bmi.n	8007530 <_printf_common+0xb0>
 80074d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074dc:	4641      	mov	r1, r8
 80074de:	4638      	mov	r0, r7
 80074e0:	47c8      	blx	r9
 80074e2:	3001      	adds	r0, #1
 80074e4:	d01e      	beq.n	8007524 <_printf_common+0xa4>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	6922      	ldr	r2, [r4, #16]
 80074ea:	f003 0306 	and.w	r3, r3, #6
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	bf02      	ittt	eq
 80074f2:	68e5      	ldreq	r5, [r4, #12]
 80074f4:	6833      	ldreq	r3, [r6, #0]
 80074f6:	1aed      	subeq	r5, r5, r3
 80074f8:	68a3      	ldr	r3, [r4, #8]
 80074fa:	bf0c      	ite	eq
 80074fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007500:	2500      	movne	r5, #0
 8007502:	4293      	cmp	r3, r2
 8007504:	bfc4      	itt	gt
 8007506:	1a9b      	subgt	r3, r3, r2
 8007508:	18ed      	addgt	r5, r5, r3
 800750a:	2600      	movs	r6, #0
 800750c:	341a      	adds	r4, #26
 800750e:	42b5      	cmp	r5, r6
 8007510:	d11a      	bne.n	8007548 <_printf_common+0xc8>
 8007512:	2000      	movs	r0, #0
 8007514:	e008      	b.n	8007528 <_printf_common+0xa8>
 8007516:	2301      	movs	r3, #1
 8007518:	4652      	mov	r2, sl
 800751a:	4641      	mov	r1, r8
 800751c:	4638      	mov	r0, r7
 800751e:	47c8      	blx	r9
 8007520:	3001      	adds	r0, #1
 8007522:	d103      	bne.n	800752c <_printf_common+0xac>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752c:	3501      	adds	r5, #1
 800752e:	e7c6      	b.n	80074be <_printf_common+0x3e>
 8007530:	18e1      	adds	r1, r4, r3
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	2030      	movs	r0, #48	@ 0x30
 8007536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800753a:	4422      	add	r2, r4
 800753c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007544:	3302      	adds	r3, #2
 8007546:	e7c7      	b.n	80074d8 <_printf_common+0x58>
 8007548:	2301      	movs	r3, #1
 800754a:	4622      	mov	r2, r4
 800754c:	4641      	mov	r1, r8
 800754e:	4638      	mov	r0, r7
 8007550:	47c8      	blx	r9
 8007552:	3001      	adds	r0, #1
 8007554:	d0e6      	beq.n	8007524 <_printf_common+0xa4>
 8007556:	3601      	adds	r6, #1
 8007558:	e7d9      	b.n	800750e <_printf_common+0x8e>
	...

0800755c <_printf_i>:
 800755c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	7e0f      	ldrb	r7, [r1, #24]
 8007562:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007564:	2f78      	cmp	r7, #120	@ 0x78
 8007566:	4691      	mov	r9, r2
 8007568:	4680      	mov	r8, r0
 800756a:	460c      	mov	r4, r1
 800756c:	469a      	mov	sl, r3
 800756e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007572:	d807      	bhi.n	8007584 <_printf_i+0x28>
 8007574:	2f62      	cmp	r7, #98	@ 0x62
 8007576:	d80a      	bhi.n	800758e <_printf_i+0x32>
 8007578:	2f00      	cmp	r7, #0
 800757a:	f000 80d2 	beq.w	8007722 <_printf_i+0x1c6>
 800757e:	2f58      	cmp	r7, #88	@ 0x58
 8007580:	f000 80b9 	beq.w	80076f6 <_printf_i+0x19a>
 8007584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800758c:	e03a      	b.n	8007604 <_printf_i+0xa8>
 800758e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007592:	2b15      	cmp	r3, #21
 8007594:	d8f6      	bhi.n	8007584 <_printf_i+0x28>
 8007596:	a101      	add	r1, pc, #4	@ (adr r1, 800759c <_printf_i+0x40>)
 8007598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800759c:	080075f5 	.word	0x080075f5
 80075a0:	08007609 	.word	0x08007609
 80075a4:	08007585 	.word	0x08007585
 80075a8:	08007585 	.word	0x08007585
 80075ac:	08007585 	.word	0x08007585
 80075b0:	08007585 	.word	0x08007585
 80075b4:	08007609 	.word	0x08007609
 80075b8:	08007585 	.word	0x08007585
 80075bc:	08007585 	.word	0x08007585
 80075c0:	08007585 	.word	0x08007585
 80075c4:	08007585 	.word	0x08007585
 80075c8:	08007709 	.word	0x08007709
 80075cc:	08007633 	.word	0x08007633
 80075d0:	080076c3 	.word	0x080076c3
 80075d4:	08007585 	.word	0x08007585
 80075d8:	08007585 	.word	0x08007585
 80075dc:	0800772b 	.word	0x0800772b
 80075e0:	08007585 	.word	0x08007585
 80075e4:	08007633 	.word	0x08007633
 80075e8:	08007585 	.word	0x08007585
 80075ec:	08007585 	.word	0x08007585
 80075f0:	080076cb 	.word	0x080076cb
 80075f4:	6833      	ldr	r3, [r6, #0]
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6032      	str	r2, [r6, #0]
 80075fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007604:	2301      	movs	r3, #1
 8007606:	e09d      	b.n	8007744 <_printf_i+0x1e8>
 8007608:	6833      	ldr	r3, [r6, #0]
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	1d19      	adds	r1, r3, #4
 800760e:	6031      	str	r1, [r6, #0]
 8007610:	0606      	lsls	r6, r0, #24
 8007612:	d501      	bpl.n	8007618 <_printf_i+0xbc>
 8007614:	681d      	ldr	r5, [r3, #0]
 8007616:	e003      	b.n	8007620 <_printf_i+0xc4>
 8007618:	0645      	lsls	r5, r0, #25
 800761a:	d5fb      	bpl.n	8007614 <_printf_i+0xb8>
 800761c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007620:	2d00      	cmp	r5, #0
 8007622:	da03      	bge.n	800762c <_printf_i+0xd0>
 8007624:	232d      	movs	r3, #45	@ 0x2d
 8007626:	426d      	negs	r5, r5
 8007628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800762c:	4859      	ldr	r0, [pc, #356]	@ (8007794 <_printf_i+0x238>)
 800762e:	230a      	movs	r3, #10
 8007630:	e011      	b.n	8007656 <_printf_i+0xfa>
 8007632:	6821      	ldr	r1, [r4, #0]
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	0608      	lsls	r0, r1, #24
 8007638:	f853 5b04 	ldr.w	r5, [r3], #4
 800763c:	d402      	bmi.n	8007644 <_printf_i+0xe8>
 800763e:	0649      	lsls	r1, r1, #25
 8007640:	bf48      	it	mi
 8007642:	b2ad      	uxthmi	r5, r5
 8007644:	2f6f      	cmp	r7, #111	@ 0x6f
 8007646:	4853      	ldr	r0, [pc, #332]	@ (8007794 <_printf_i+0x238>)
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	bf14      	ite	ne
 800764c:	230a      	movne	r3, #10
 800764e:	2308      	moveq	r3, #8
 8007650:	2100      	movs	r1, #0
 8007652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007656:	6866      	ldr	r6, [r4, #4]
 8007658:	60a6      	str	r6, [r4, #8]
 800765a:	2e00      	cmp	r6, #0
 800765c:	bfa2      	ittt	ge
 800765e:	6821      	ldrge	r1, [r4, #0]
 8007660:	f021 0104 	bicge.w	r1, r1, #4
 8007664:	6021      	strge	r1, [r4, #0]
 8007666:	b90d      	cbnz	r5, 800766c <_printf_i+0x110>
 8007668:	2e00      	cmp	r6, #0
 800766a:	d04b      	beq.n	8007704 <_printf_i+0x1a8>
 800766c:	4616      	mov	r6, r2
 800766e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007672:	fb03 5711 	mls	r7, r3, r1, r5
 8007676:	5dc7      	ldrb	r7, [r0, r7]
 8007678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800767c:	462f      	mov	r7, r5
 800767e:	42bb      	cmp	r3, r7
 8007680:	460d      	mov	r5, r1
 8007682:	d9f4      	bls.n	800766e <_printf_i+0x112>
 8007684:	2b08      	cmp	r3, #8
 8007686:	d10b      	bne.n	80076a0 <_printf_i+0x144>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	07df      	lsls	r7, r3, #31
 800768c:	d508      	bpl.n	80076a0 <_printf_i+0x144>
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	6861      	ldr	r1, [r4, #4]
 8007692:	4299      	cmp	r1, r3
 8007694:	bfde      	ittt	le
 8007696:	2330      	movle	r3, #48	@ 0x30
 8007698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800769c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80076a0:	1b92      	subs	r2, r2, r6
 80076a2:	6122      	str	r2, [r4, #16]
 80076a4:	f8cd a000 	str.w	sl, [sp]
 80076a8:	464b      	mov	r3, r9
 80076aa:	aa03      	add	r2, sp, #12
 80076ac:	4621      	mov	r1, r4
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7ff fee6 	bl	8007480 <_printf_common>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d14a      	bne.n	800774e <_printf_i+0x1f2>
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076bc:	b004      	add	sp, #16
 80076be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	f043 0320 	orr.w	r3, r3, #32
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	4833      	ldr	r0, [pc, #204]	@ (8007798 <_printf_i+0x23c>)
 80076cc:	2778      	movs	r7, #120	@ 0x78
 80076ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	6831      	ldr	r1, [r6, #0]
 80076d6:	061f      	lsls	r7, r3, #24
 80076d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80076dc:	d402      	bmi.n	80076e4 <_printf_i+0x188>
 80076de:	065f      	lsls	r7, r3, #25
 80076e0:	bf48      	it	mi
 80076e2:	b2ad      	uxthmi	r5, r5
 80076e4:	6031      	str	r1, [r6, #0]
 80076e6:	07d9      	lsls	r1, r3, #31
 80076e8:	bf44      	itt	mi
 80076ea:	f043 0320 	orrmi.w	r3, r3, #32
 80076ee:	6023      	strmi	r3, [r4, #0]
 80076f0:	b11d      	cbz	r5, 80076fa <_printf_i+0x19e>
 80076f2:	2310      	movs	r3, #16
 80076f4:	e7ac      	b.n	8007650 <_printf_i+0xf4>
 80076f6:	4827      	ldr	r0, [pc, #156]	@ (8007794 <_printf_i+0x238>)
 80076f8:	e7e9      	b.n	80076ce <_printf_i+0x172>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	f023 0320 	bic.w	r3, r3, #32
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	e7f6      	b.n	80076f2 <_printf_i+0x196>
 8007704:	4616      	mov	r6, r2
 8007706:	e7bd      	b.n	8007684 <_printf_i+0x128>
 8007708:	6833      	ldr	r3, [r6, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	6961      	ldr	r1, [r4, #20]
 800770e:	1d18      	adds	r0, r3, #4
 8007710:	6030      	str	r0, [r6, #0]
 8007712:	062e      	lsls	r6, r5, #24
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	d501      	bpl.n	800771c <_printf_i+0x1c0>
 8007718:	6019      	str	r1, [r3, #0]
 800771a:	e002      	b.n	8007722 <_printf_i+0x1c6>
 800771c:	0668      	lsls	r0, r5, #25
 800771e:	d5fb      	bpl.n	8007718 <_printf_i+0x1bc>
 8007720:	8019      	strh	r1, [r3, #0]
 8007722:	2300      	movs	r3, #0
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	4616      	mov	r6, r2
 8007728:	e7bc      	b.n	80076a4 <_printf_i+0x148>
 800772a:	6833      	ldr	r3, [r6, #0]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	6032      	str	r2, [r6, #0]
 8007730:	681e      	ldr	r6, [r3, #0]
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	2100      	movs	r1, #0
 8007736:	4630      	mov	r0, r6
 8007738:	f7f8 fd5a 	bl	80001f0 <memchr>
 800773c:	b108      	cbz	r0, 8007742 <_printf_i+0x1e6>
 800773e:	1b80      	subs	r0, r0, r6
 8007740:	6060      	str	r0, [r4, #4]
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	2300      	movs	r3, #0
 8007748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800774c:	e7aa      	b.n	80076a4 <_printf_i+0x148>
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	4632      	mov	r2, r6
 8007752:	4649      	mov	r1, r9
 8007754:	4640      	mov	r0, r8
 8007756:	47d0      	blx	sl
 8007758:	3001      	adds	r0, #1
 800775a:	d0ad      	beq.n	80076b8 <_printf_i+0x15c>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	079b      	lsls	r3, r3, #30
 8007760:	d413      	bmi.n	800778a <_printf_i+0x22e>
 8007762:	68e0      	ldr	r0, [r4, #12]
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	4298      	cmp	r0, r3
 8007768:	bfb8      	it	lt
 800776a:	4618      	movlt	r0, r3
 800776c:	e7a6      	b.n	80076bc <_printf_i+0x160>
 800776e:	2301      	movs	r3, #1
 8007770:	4632      	mov	r2, r6
 8007772:	4649      	mov	r1, r9
 8007774:	4640      	mov	r0, r8
 8007776:	47d0      	blx	sl
 8007778:	3001      	adds	r0, #1
 800777a:	d09d      	beq.n	80076b8 <_printf_i+0x15c>
 800777c:	3501      	adds	r5, #1
 800777e:	68e3      	ldr	r3, [r4, #12]
 8007780:	9903      	ldr	r1, [sp, #12]
 8007782:	1a5b      	subs	r3, r3, r1
 8007784:	42ab      	cmp	r3, r5
 8007786:	dcf2      	bgt.n	800776e <_printf_i+0x212>
 8007788:	e7eb      	b.n	8007762 <_printf_i+0x206>
 800778a:	2500      	movs	r5, #0
 800778c:	f104 0619 	add.w	r6, r4, #25
 8007790:	e7f5      	b.n	800777e <_printf_i+0x222>
 8007792:	bf00      	nop
 8007794:	08007b95 	.word	0x08007b95
 8007798:	08007ba6 	.word	0x08007ba6

0800779c <__sflush_r>:
 800779c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a4:	0716      	lsls	r6, r2, #28
 80077a6:	4605      	mov	r5, r0
 80077a8:	460c      	mov	r4, r1
 80077aa:	d454      	bmi.n	8007856 <__sflush_r+0xba>
 80077ac:	684b      	ldr	r3, [r1, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dc02      	bgt.n	80077b8 <__sflush_r+0x1c>
 80077b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd48      	ble.n	800784a <__sflush_r+0xae>
 80077b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	d045      	beq.n	800784a <__sflush_r+0xae>
 80077be:	2300      	movs	r3, #0
 80077c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077c4:	682f      	ldr	r7, [r5, #0]
 80077c6:	6a21      	ldr	r1, [r4, #32]
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	d030      	beq.n	800782e <__sflush_r+0x92>
 80077cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	0759      	lsls	r1, r3, #29
 80077d2:	d505      	bpl.n	80077e0 <__sflush_r+0x44>
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	1ad2      	subs	r2, r2, r3
 80077d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077da:	b10b      	cbz	r3, 80077e0 <__sflush_r+0x44>
 80077dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	2300      	movs	r3, #0
 80077e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077e4:	6a21      	ldr	r1, [r4, #32]
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b0      	blx	r6
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	d106      	bne.n	80077fe <__sflush_r+0x62>
 80077f0:	6829      	ldr	r1, [r5, #0]
 80077f2:	291d      	cmp	r1, #29
 80077f4:	d82b      	bhi.n	800784e <__sflush_r+0xb2>
 80077f6:	4a2a      	ldr	r2, [pc, #168]	@ (80078a0 <__sflush_r+0x104>)
 80077f8:	410a      	asrs	r2, r1
 80077fa:	07d6      	lsls	r6, r2, #31
 80077fc:	d427      	bmi.n	800784e <__sflush_r+0xb2>
 80077fe:	2200      	movs	r2, #0
 8007800:	6062      	str	r2, [r4, #4]
 8007802:	04d9      	lsls	r1, r3, #19
 8007804:	6922      	ldr	r2, [r4, #16]
 8007806:	6022      	str	r2, [r4, #0]
 8007808:	d504      	bpl.n	8007814 <__sflush_r+0x78>
 800780a:	1c42      	adds	r2, r0, #1
 800780c:	d101      	bne.n	8007812 <__sflush_r+0x76>
 800780e:	682b      	ldr	r3, [r5, #0]
 8007810:	b903      	cbnz	r3, 8007814 <__sflush_r+0x78>
 8007812:	6560      	str	r0, [r4, #84]	@ 0x54
 8007814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007816:	602f      	str	r7, [r5, #0]
 8007818:	b1b9      	cbz	r1, 800784a <__sflush_r+0xae>
 800781a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800781e:	4299      	cmp	r1, r3
 8007820:	d002      	beq.n	8007828 <__sflush_r+0x8c>
 8007822:	4628      	mov	r0, r5
 8007824:	f7ff fbf2 	bl	800700c <_free_r>
 8007828:	2300      	movs	r3, #0
 800782a:	6363      	str	r3, [r4, #52]	@ 0x34
 800782c:	e00d      	b.n	800784a <__sflush_r+0xae>
 800782e:	2301      	movs	r3, #1
 8007830:	4628      	mov	r0, r5
 8007832:	47b0      	blx	r6
 8007834:	4602      	mov	r2, r0
 8007836:	1c50      	adds	r0, r2, #1
 8007838:	d1c9      	bne.n	80077ce <__sflush_r+0x32>
 800783a:	682b      	ldr	r3, [r5, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0c6      	beq.n	80077ce <__sflush_r+0x32>
 8007840:	2b1d      	cmp	r3, #29
 8007842:	d001      	beq.n	8007848 <__sflush_r+0xac>
 8007844:	2b16      	cmp	r3, #22
 8007846:	d11e      	bne.n	8007886 <__sflush_r+0xea>
 8007848:	602f      	str	r7, [r5, #0]
 800784a:	2000      	movs	r0, #0
 800784c:	e022      	b.n	8007894 <__sflush_r+0xf8>
 800784e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007852:	b21b      	sxth	r3, r3
 8007854:	e01b      	b.n	800788e <__sflush_r+0xf2>
 8007856:	690f      	ldr	r7, [r1, #16]
 8007858:	2f00      	cmp	r7, #0
 800785a:	d0f6      	beq.n	800784a <__sflush_r+0xae>
 800785c:	0793      	lsls	r3, r2, #30
 800785e:	680e      	ldr	r6, [r1, #0]
 8007860:	bf08      	it	eq
 8007862:	694b      	ldreq	r3, [r1, #20]
 8007864:	600f      	str	r7, [r1, #0]
 8007866:	bf18      	it	ne
 8007868:	2300      	movne	r3, #0
 800786a:	eba6 0807 	sub.w	r8, r6, r7
 800786e:	608b      	str	r3, [r1, #8]
 8007870:	f1b8 0f00 	cmp.w	r8, #0
 8007874:	dde9      	ble.n	800784a <__sflush_r+0xae>
 8007876:	6a21      	ldr	r1, [r4, #32]
 8007878:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800787a:	4643      	mov	r3, r8
 800787c:	463a      	mov	r2, r7
 800787e:	4628      	mov	r0, r5
 8007880:	47b0      	blx	r6
 8007882:	2800      	cmp	r0, #0
 8007884:	dc08      	bgt.n	8007898 <__sflush_r+0xfc>
 8007886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007898:	4407      	add	r7, r0
 800789a:	eba8 0800 	sub.w	r8, r8, r0
 800789e:	e7e7      	b.n	8007870 <__sflush_r+0xd4>
 80078a0:	dfbffffe 	.word	0xdfbffffe

080078a4 <_fflush_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	690b      	ldr	r3, [r1, #16]
 80078a8:	4605      	mov	r5, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	b913      	cbnz	r3, 80078b4 <_fflush_r+0x10>
 80078ae:	2500      	movs	r5, #0
 80078b0:	4628      	mov	r0, r5
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	b118      	cbz	r0, 80078be <_fflush_r+0x1a>
 80078b6:	6a03      	ldr	r3, [r0, #32]
 80078b8:	b90b      	cbnz	r3, 80078be <_fflush_r+0x1a>
 80078ba:	f7ff f949 	bl	8006b50 <__sinit>
 80078be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0f3      	beq.n	80078ae <_fflush_r+0xa>
 80078c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078c8:	07d0      	lsls	r0, r2, #31
 80078ca:	d404      	bmi.n	80078d6 <_fflush_r+0x32>
 80078cc:	0599      	lsls	r1, r3, #22
 80078ce:	d402      	bmi.n	80078d6 <_fflush_r+0x32>
 80078d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d2:	f7ff fb8a 	bl	8006fea <__retarget_lock_acquire_recursive>
 80078d6:	4628      	mov	r0, r5
 80078d8:	4621      	mov	r1, r4
 80078da:	f7ff ff5f 	bl	800779c <__sflush_r>
 80078de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078e0:	07da      	lsls	r2, r3, #31
 80078e2:	4605      	mov	r5, r0
 80078e4:	d4e4      	bmi.n	80078b0 <_fflush_r+0xc>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	059b      	lsls	r3, r3, #22
 80078ea:	d4e1      	bmi.n	80078b0 <_fflush_r+0xc>
 80078ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ee:	f7ff fb7d 	bl	8006fec <__retarget_lock_release_recursive>
 80078f2:	e7dd      	b.n	80078b0 <_fflush_r+0xc>

080078f4 <__swhatbuf_r>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	2900      	cmp	r1, #0
 80078fe:	b096      	sub	sp, #88	@ 0x58
 8007900:	4615      	mov	r5, r2
 8007902:	461e      	mov	r6, r3
 8007904:	da0d      	bge.n	8007922 <__swhatbuf_r+0x2e>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800790c:	f04f 0100 	mov.w	r1, #0
 8007910:	bf14      	ite	ne
 8007912:	2340      	movne	r3, #64	@ 0x40
 8007914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007918:	2000      	movs	r0, #0
 800791a:	6031      	str	r1, [r6, #0]
 800791c:	602b      	str	r3, [r5, #0]
 800791e:	b016      	add	sp, #88	@ 0x58
 8007920:	bd70      	pop	{r4, r5, r6, pc}
 8007922:	466a      	mov	r2, sp
 8007924:	f000 f848 	bl	80079b8 <_fstat_r>
 8007928:	2800      	cmp	r0, #0
 800792a:	dbec      	blt.n	8007906 <__swhatbuf_r+0x12>
 800792c:	9901      	ldr	r1, [sp, #4]
 800792e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007936:	4259      	negs	r1, r3
 8007938:	4159      	adcs	r1, r3
 800793a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800793e:	e7eb      	b.n	8007918 <__swhatbuf_r+0x24>

08007940 <__smakebuf_r>:
 8007940:	898b      	ldrh	r3, [r1, #12]
 8007942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007944:	079d      	lsls	r5, r3, #30
 8007946:	4606      	mov	r6, r0
 8007948:	460c      	mov	r4, r1
 800794a:	d507      	bpl.n	800795c <__smakebuf_r+0x1c>
 800794c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	6123      	str	r3, [r4, #16]
 8007954:	2301      	movs	r3, #1
 8007956:	6163      	str	r3, [r4, #20]
 8007958:	b003      	add	sp, #12
 800795a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795c:	ab01      	add	r3, sp, #4
 800795e:	466a      	mov	r2, sp
 8007960:	f7ff ffc8 	bl	80078f4 <__swhatbuf_r>
 8007964:	9f00      	ldr	r7, [sp, #0]
 8007966:	4605      	mov	r5, r0
 8007968:	4639      	mov	r1, r7
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff fbba 	bl	80070e4 <_malloc_r>
 8007970:	b948      	cbnz	r0, 8007986 <__smakebuf_r+0x46>
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	059a      	lsls	r2, r3, #22
 8007978:	d4ee      	bmi.n	8007958 <__smakebuf_r+0x18>
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	f043 0302 	orr.w	r3, r3, #2
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	e7e2      	b.n	800794c <__smakebuf_r+0xc>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	6020      	str	r0, [r4, #0]
 800798a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	9b01      	ldr	r3, [sp, #4]
 8007992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007996:	b15b      	cbz	r3, 80079b0 <__smakebuf_r+0x70>
 8007998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800799c:	4630      	mov	r0, r6
 800799e:	f000 f81d 	bl	80079dc <_isatty_r>
 80079a2:	b128      	cbz	r0, 80079b0 <__smakebuf_r+0x70>
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	431d      	orrs	r5, r3
 80079b4:	81a5      	strh	r5, [r4, #12]
 80079b6:	e7cf      	b.n	8007958 <__smakebuf_r+0x18>

080079b8 <_fstat_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d07      	ldr	r5, [pc, #28]	@ (80079d8 <_fstat_r+0x20>)
 80079bc:	2300      	movs	r3, #0
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	602b      	str	r3, [r5, #0]
 80079c6:	f7f9 f8d7 	bl	8000b78 <_fstat>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	d102      	bne.n	80079d4 <_fstat_r+0x1c>
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	b103      	cbz	r3, 80079d4 <_fstat_r+0x1c>
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	bd38      	pop	{r3, r4, r5, pc}
 80079d6:	bf00      	nop
 80079d8:	20001c58 	.word	0x20001c58

080079dc <_isatty_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d06      	ldr	r5, [pc, #24]	@ (80079f8 <_isatty_r+0x1c>)
 80079e0:	2300      	movs	r3, #0
 80079e2:	4604      	mov	r4, r0
 80079e4:	4608      	mov	r0, r1
 80079e6:	602b      	str	r3, [r5, #0]
 80079e8:	f7f9 f8d6 	bl	8000b98 <_isatty>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_isatty_r+0x1a>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_isatty_r+0x1a>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	20001c58 	.word	0x20001c58

080079fc <_sbrk_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d06      	ldr	r5, [pc, #24]	@ (8007a18 <_sbrk_r+0x1c>)
 8007a00:	2300      	movs	r3, #0
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	f7f9 f8de 	bl	8000bc8 <_sbrk>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_sbrk_r+0x1a>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_sbrk_r+0x1a>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20001c58 	.word	0x20001c58

08007a1c <_init>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr

08007a28 <_fini>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	bf00      	nop
 8007a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2e:	bc08      	pop	{r3}
 8007a30:	469e      	mov	lr, r3
 8007a32:	4770      	bx	lr
