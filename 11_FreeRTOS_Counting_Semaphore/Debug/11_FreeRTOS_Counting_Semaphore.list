
11_FreeRTOS_Counting_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007764  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007914  08007914  00008914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac0  08007ac0  00008ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac8  08007ac8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00008ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007acc  08007acc  00008acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007ad0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b60  2000006c  08007b3c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bcc  08007b3c  00009bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8a7  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f5  00000000  00000000  00023943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00027138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122a  00000000  00000000  000288a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004cc0  00000000  00000000  00029aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191d6  00000000  00000000  0002e78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f0bd  00000000  00000000  00047960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f4  00000000  00000000  00156a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015d354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080078fc 	.word	0x080078fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080078fc 	.word	0x080078fc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fb6f 	bl	8000bc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f84e 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8ca 	bl	8000684 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f0:	f000 f89c 	bl	800062c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f003 fa78 	bl	80039e8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CountingSem1 */
  CountingSem1Handle = osSemaphoreNew(2, 2, &CountingSem1_attributes);
 80004f8:	4a15      	ldr	r2, [pc, #84]	@ (8000550 <main+0x70>)
 80004fa:	2102      	movs	r1, #2
 80004fc:	2002      	movs	r0, #2
 80004fe:	f003 fb6a 	bl	8003bd6 <osSemaphoreNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a13      	ldr	r2, [pc, #76]	@ (8000554 <main+0x74>)
 8000506:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Producer_Task */
  Producer_TaskHandle = osThreadNew(Start_Producer_Task, NULL, &Producer_Task_attributes);
 8000508:	4a13      	ldr	r2, [pc, #76]	@ (8000558 <main+0x78>)
 800050a:	2100      	movs	r1, #0
 800050c:	4813      	ldr	r0, [pc, #76]	@ (800055c <main+0x7c>)
 800050e:	f003 fab5 	bl	8003a7c <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a12      	ldr	r2, [pc, #72]	@ (8000560 <main+0x80>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of Consumer_Task_1 */
  Consumer_Task_1Handle = osThreadNew(Start_Consumer_Task_1, NULL, &Consumer_Task_1_attributes);
 8000518:	4a12      	ldr	r2, [pc, #72]	@ (8000564 <main+0x84>)
 800051a:	2100      	movs	r1, #0
 800051c:	4812      	ldr	r0, [pc, #72]	@ (8000568 <main+0x88>)
 800051e:	f003 faad 	bl	8003a7c <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a11      	ldr	r2, [pc, #68]	@ (800056c <main+0x8c>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of Consumer_Task_2 */
  Consumer_Task_2Handle = osThreadNew(Start_Consumer_Task_2, NULL, &Consumer_Task_2_attributes);
 8000528:	4a11      	ldr	r2, [pc, #68]	@ (8000570 <main+0x90>)
 800052a:	2100      	movs	r1, #0
 800052c:	4811      	ldr	r0, [pc, #68]	@ (8000574 <main+0x94>)
 800052e:	f003 faa5 	bl	8003a7c <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a10      	ldr	r2, [pc, #64]	@ (8000578 <main+0x98>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of Consumer_Task_3 */
  Consumer_Task_3Handle = osThreadNew(Start_Consumer_Task_3, NULL, &Consumer_Task_3_attributes);
 8000538:	4a10      	ldr	r2, [pc, #64]	@ (800057c <main+0x9c>)
 800053a:	2100      	movs	r1, #0
 800053c:	4810      	ldr	r0, [pc, #64]	@ (8000580 <main+0xa0>)
 800053e:	f003 fa9d 	bl	8003a7c <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0f      	ldr	r2, [pc, #60]	@ (8000584 <main+0xa4>)
 8000546:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f003 fa72 	bl	8003a30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x6c>
 8000550:	08007a68 	.word	0x08007a68
 8000554:	20000120 	.word	0x20000120
 8000558:	080079d8 	.word	0x080079d8
 800055c:	080006cd 	.word	0x080006cd
 8000560:	20000110 	.word	0x20000110
 8000564:	080079fc 	.word	0x080079fc
 8000568:	080006f9 	.word	0x080006f9
 800056c:	20000114 	.word	0x20000114
 8000570:	08007a20 	.word	0x08007a20
 8000574:	0800072d 	.word	0x0800072d
 8000578:	20000118 	.word	0x20000118
 800057c:	08007a44 	.word	0x08007a44
 8000580:	08000761 	.word	0x08000761
 8000584:	2000011c 	.word	0x2000011c

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	@ 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	@ 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 feee 	bl	8007378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ae:	f000 fdc5 	bl	800113c <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f8fe 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2340      	movs	r3, #64	@ 0x40
 80005c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d6:	230a      	movs	r3, #10
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fe0c 	bl	8001208 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f6:	f000 f8df 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2104      	movs	r1, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fa11 	bl	8001a3c <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000620:	f000 f8ca 	bl	80007b8 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3758      	adds	r7, #88	@ 0x58
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_LPUART1_UART_Init+0x50>)
 800066a:	f002 fbcd 	bl	8002e08 <HAL_UART_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f8a0 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000088 	.word	0x20000088
 8000680:	40008000 	.word	0x40008000

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_GPIO_Init+0x44>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a0e      	ldr	r2, [pc, #56]	@ (80006c8 <MX_GPIO_Init+0x44>)
 8000690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_GPIO_Init+0x44>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006a2:	f000 fda1 	bl	80011e8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_GPIO_Init+0x44>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <MX_GPIO_Init+0x44>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <MX_GPIO_Init+0x44>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <Start_Producer_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Producer_Task */
void Start_Producer_Task(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreRelease(CountingSem1Handle);
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <Start_Producer_Task+0x24>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fb57 	bl	8003d8c <osSemaphoreRelease>
	printf("PRODUCER RELEASE SEMAPHORE \r\n");
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <Start_Producer_Task+0x28>)
 80006e0:	f006 fd6a 	bl	80071b8 <puts>
	osDelay(1000);
 80006e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e8:	f003 fa5a 	bl	8003ba0 <osDelay>
	osSemaphoreRelease(CountingSem1Handle);
 80006ec:	bf00      	nop
 80006ee:	e7f1      	b.n	80006d4 <Start_Producer_Task+0x8>
 80006f0:	20000120 	.word	0x20000120
 80006f4:	08007964 	.word	0x08007964

080006f8 <Start_Consumer_Task_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Consumer_Task_1 */
void Start_Consumer_Task_1(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Consumer_Task_1 */
  /* Infinite loop */
  for(;;)
  {
	 // Wait indefinitely to acquire the semaphore
	 if (osSemaphoreAcquire(CountingSem1Handle, osWaitForever) == osOK)
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <Start_Consumer_Task_1+0x2c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000708:	4618      	mov	r0, r3
 800070a:	f003 faed 	bl	8003ce8 <osSemaphoreAcquire>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <Start_Consumer_Task_1+0x22>
	 {
	 printf("Consumer Task 1\r\n");
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <Start_Consumer_Task_1+0x30>)
 8000716:	f006 fd4f 	bl	80071b8 <puts>
	 }
	 osDelay(500);
 800071a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800071e:	f003 fa3f 	bl	8003ba0 <osDelay>
	 if (osSemaphoreAcquire(CountingSem1Handle, osWaitForever) == osOK)
 8000722:	e7ed      	b.n	8000700 <Start_Consumer_Task_1+0x8>
 8000724:	20000120 	.word	0x20000120
 8000728:	08007984 	.word	0x08007984

0800072c <Start_Consumer_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Consumer_Task_2 */
void Start_Consumer_Task_2(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Consumer_Task_2 */
  /* Infinite loop */
  for(;;)
  {
	// Wait indefinitely to acquire the semaphore
	 if (osSemaphoreAcquire(CountingSem1Handle, osWaitForever) == osOK)
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <Start_Consumer_Task_2+0x2c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fad3 	bl	8003ce8 <osSemaphoreAcquire>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <Start_Consumer_Task_2+0x22>
	 {
	 printf("Consumer Task 2\r\n");
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <Start_Consumer_Task_2+0x30>)
 800074a:	f006 fd35 	bl	80071b8 <puts>
	 }
	 osDelay(1000);
 800074e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000752:	f003 fa25 	bl	8003ba0 <osDelay>
	 if (osSemaphoreAcquire(CountingSem1Handle, osWaitForever) == osOK)
 8000756:	e7ed      	b.n	8000734 <Start_Consumer_Task_2+0x8>
 8000758:	20000120 	.word	0x20000120
 800075c:	08007998 	.word	0x08007998

08000760 <Start_Consumer_Task_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Consumer_Task_3 */
void Start_Consumer_Task_3(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Consumer_Task_3 */
  /* Infinite loop */
  for(;;)
  {
	 // Wait indefinitely to acquire the semaphore
	 if (osSemaphoreAcquire(CountingSem1Handle, osWaitForever) == osOK)
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <Start_Consumer_Task_3+0x2c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fab9 	bl	8003ce8 <osSemaphoreAcquire>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <Start_Consumer_Task_3+0x22>
     {
	 printf("Consumer Task 3\r\n");
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <Start_Consumer_Task_3+0x30>)
 800077e:	f006 fd1b 	bl	80071b8 <puts>
     }
	 osDelay(1500);
 8000782:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000786:	f003 fa0b 	bl	8003ba0 <osDelay>
	 if (osSemaphoreAcquire(CountingSem1Handle, osWaitForever) == osOK)
 800078a:	e7ed      	b.n	8000768 <Start_Consumer_Task_3+0x8>
 800078c:	20000120 	.word	0x20000120
 8000790:	080079ac 	.word	0x080079ac

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 fa27 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40001000 	.word	0x40001000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <HAL_MspInit+0x4c>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ce:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <HAL_MspInit+0x4c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <HAL_MspInit+0x4c>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <HAL_MspInit+0x4c>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_MspInit+0x4c>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	210f      	movs	r1, #15
 80007fe:	f06f 0001 	mvn.w	r0, #1
 8000802:	f000 fad1 	bl	8000da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b0ac      	sub	sp, #176	@ 0xb0
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	228c      	movs	r2, #140	@ 0x8c
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f006 fd9f 	bl	8007378 <memset>
  if(huart->Instance==LPUART1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a22      	ldr	r2, [pc, #136]	@ (80008c8 <HAL_UART_MspInit+0xb4>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d13d      	bne.n	80008c0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000844:	2320      	movs	r3, #32
 8000846:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000848:	2300      	movs	r3, #0
 800084a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fb49 	bl	8001ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800085c:	f7ff ffac 	bl	80007b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000860:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <HAL_UART_MspInit+0xb8>)
 8000862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000864:	4a19      	ldr	r2, [pc, #100]	@ (80008cc <HAL_UART_MspInit+0xb8>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <HAL_UART_MspInit+0xb8>)
 800086e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_UART_MspInit+0xb8>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087c:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <HAL_UART_MspInit+0xb8>)
 800087e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_UART_MspInit+0xb8>)
 8000886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000890:	f000 fcaa 	bl	80011e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000894:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ae:	2308      	movs	r3, #8
 80008b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <HAL_UART_MspInit+0xbc>)
 80008bc:	f000 fa9e 	bl	8000dfc <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80008c0:	bf00      	nop
 80008c2:	37b0      	adds	r7, #176	@ 0xb0
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40008000 	.word	0x40008000
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48001800 	.word	0x48001800

080008d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	@ 0x38
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e2:	4b34      	ldr	r3, [pc, #208]	@ (80009b4 <HAL_InitTick+0xe0>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e6:	4a33      	ldr	r2, [pc, #204]	@ (80009b4 <HAL_InitTick+0xe0>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ee:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <HAL_InitTick+0xe0>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fa:	f107 0210 	add.w	r2, r7, #16
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fa5d 	bl	8001dc4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800090e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000914:	f001 fa2a 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8000918:	6378      	str	r0, [r7, #52]	@ 0x34
 800091a:	e004      	b.n	8000926 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091c:	f001 fa26 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8000920:	4603      	mov	r3, r0
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000928:	4a23      	ldr	r2, [pc, #140]	@ (80009b8 <HAL_InitTick+0xe4>)
 800092a:	fba2 2303 	umull	r2, r3, r2, r3
 800092e:	0c9b      	lsrs	r3, r3, #18
 8000930:	3b01      	subs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000934:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <HAL_InitTick+0xe8>)
 8000936:	4a22      	ldr	r2, [pc, #136]	@ (80009c0 <HAL_InitTick+0xec>)
 8000938:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <HAL_InitTick+0xe8>)
 800093c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000940:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000942:	4a1e      	ldr	r2, [pc, #120]	@ (80009bc <HAL_InitTick+0xe8>)
 8000944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000946:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <HAL_InitTick+0xe8>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <HAL_InitTick+0xe8>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <HAL_InitTick+0xe8>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800095a:	4818      	ldr	r0, [pc, #96]	@ (80009bc <HAL_InitTick+0xe8>)
 800095c:	f001 ff8e 	bl	800287c <HAL_TIM_Base_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000966:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800096a:	2b00      	cmp	r3, #0
 800096c:	d11b      	bne.n	80009a6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800096e:	4813      	ldr	r0, [pc, #76]	@ (80009bc <HAL_InitTick+0xe8>)
 8000970:	f001 ffe6 	bl	8002940 <HAL_TIM_Base_Start_IT>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800097a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800097e:	2b00      	cmp	r3, #0
 8000980:	d111      	bne.n	80009a6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000982:	2036      	movs	r0, #54	@ 0x36
 8000984:	f000 fa2c 	bl	8000de0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	d808      	bhi.n	80009a0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800098e:	2200      	movs	r2, #0
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	2036      	movs	r0, #54	@ 0x36
 8000994:	f000 fa08 	bl	8000da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000998:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <HAL_InitTick+0xf0>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	e002      	b.n	80009a6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3738      	adds	r7, #56	@ 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	431bde83 	.word	0x431bde83
 80009bc:	20000124 	.word	0x20000124
 80009c0:	40001000 	.word	0x40001000
 80009c4:	20000004 	.word	0x20000004

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <TIM6_DAC_IRQHandler+0x10>)
 8000a06:	f002 f80b 	bl	8002a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000124 	.word	0x20000124

08000a14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e00a      	b.n	8000a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a26:	f3af 8000 	nop.w
 8000a2a:	4601      	mov	r1, r0
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	60ba      	str	r2, [r7, #8]
 8000a32:	b2ca      	uxtb	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf0      	blt.n	8000a26 <_read+0x12>
  }

  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *) ptr, len, HAL_MAX_DELAY);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <_write+0x28>)
 8000a68:	f002 fa1c 	bl	8002ea4 <HAL_UART_Transmit>
  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000088 	.word	0x20000088

08000a7c <_close>:

int _close(int file)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa4:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_isatty>:

int _isatty(int file)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000abc:	2301      	movs	r3, #1
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b085      	sub	sp, #20
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	@ (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b14:	f006 fc7e 	bl	8007414 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20050000 	.word	0x20050000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000170 	.word	0x20000170
 8000b4c:	20001bd0 	.word	0x20001bd0

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b78:	f7ff ffea 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f006 fc3d 	bl	8007420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba6:	f7ff fc9b 	bl	80004e0 <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000bb8:	08007ad0 	.word	0x08007ad0
  ldr r2, =_sbss
 8000bbc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bc0:	20001bcc 	.word	0x20001bcc

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>

08000bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f8de 	bl	8000d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f7ff fe7c 	bl	80008d4 <HAL_InitTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e001      	b.n	8000bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be8:	f7ff fdec 	bl	80007c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000174 	.word	0x20000174

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000174 	.word	0x20000174

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	@ (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	@ (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff4c 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dba:	f7ff ff61 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f7ff ffb1 	bl	8000d2c <NVIC_EncodePriority>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff80 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff54 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	e166      	b.n	80010da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8158 	beq.w	80010d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d005      	beq.n	8000e3c <HAL_GPIO_Init+0x40>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d017      	beq.n	8000eda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d123      	bne.n	8000f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0203 	and.w	r2, r3, #3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80b2 	beq.w	80010d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	4b61      	ldr	r3, [pc, #388]	@ (80010f8 <HAL_GPIO_Init+0x2fc>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f74:	4a60      	ldr	r2, [pc, #384]	@ (80010f8 <HAL_GPIO_Init+0x2fc>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80010f8 <HAL_GPIO_Init+0x2fc>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f88:	4a5c      	ldr	r2, [pc, #368]	@ (80010fc <HAL_GPIO_Init+0x300>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fb2:	d02b      	beq.n	800100c <HAL_GPIO_Init+0x210>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a52      	ldr	r2, [pc, #328]	@ (8001100 <HAL_GPIO_Init+0x304>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d025      	beq.n	8001008 <HAL_GPIO_Init+0x20c>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a51      	ldr	r2, [pc, #324]	@ (8001104 <HAL_GPIO_Init+0x308>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d01f      	beq.n	8001004 <HAL_GPIO_Init+0x208>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a50      	ldr	r2, [pc, #320]	@ (8001108 <HAL_GPIO_Init+0x30c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d019      	beq.n	8001000 <HAL_GPIO_Init+0x204>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4f      	ldr	r2, [pc, #316]	@ (800110c <HAL_GPIO_Init+0x310>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d013      	beq.n	8000ffc <HAL_GPIO_Init+0x200>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001110 <HAL_GPIO_Init+0x314>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1fc>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4d      	ldr	r2, [pc, #308]	@ (8001114 <HAL_GPIO_Init+0x318>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1f8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8001118 <HAL_GPIO_Init+0x31c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1f4>
 8000fec:	2307      	movs	r3, #7
 8000fee:	e00e      	b.n	800100e <HAL_GPIO_Init+0x212>
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	e00c      	b.n	800100e <HAL_GPIO_Init+0x212>
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	e00a      	b.n	800100e <HAL_GPIO_Init+0x212>
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	e008      	b.n	800100e <HAL_GPIO_Init+0x212>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x212>
 8001000:	2303      	movs	r3, #3
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x212>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x212>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x212>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4937      	ldr	r1, [pc, #220]	@ (80010fc <HAL_GPIO_Init+0x300>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102c:	4b3b      	ldr	r3, [pc, #236]	@ (800111c <HAL_GPIO_Init+0x320>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001050:	4a32      	ldr	r2, [pc, #200]	@ (800111c <HAL_GPIO_Init+0x320>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001056:	4b31      	ldr	r3, [pc, #196]	@ (800111c <HAL_GPIO_Init+0x320>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <HAL_GPIO_Init+0x320>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <HAL_GPIO_Init+0x320>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <HAL_GPIO_Init+0x320>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_GPIO_Init+0x320>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <HAL_GPIO_Init+0x320>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f ae91 	bne.w	8000e0c <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	48001000 	.word	0x48001000
 8001110:	48001400 	.word	0x48001400
 8001114:	48001800 	.word	0x48001800
 8001118:	48001c00 	.word	0x48001c00
 800111c:	40010400 	.word	0x40010400

08001120 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <HAL_PWREx_GetVoltageRange+0x18>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40007000 	.word	0x40007000

0800113c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800114a:	d130      	bne.n	80011ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001158:	d038      	beq.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001162:	4a1e      	ldr	r2, [pc, #120]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001164:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001168:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2232      	movs	r2, #50	@ 0x32
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	4a1b      	ldr	r2, [pc, #108]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	0c9b      	lsrs	r3, r3, #18
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001180:	e002      	b.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3b01      	subs	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001194:	d102      	bne.n	800119c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f2      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a8:	d110      	bne.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e00f      	b.n	80011ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ba:	d007      	beq.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c4:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40007000 	.word	0x40007000
 80011e0:	20000000 	.word	0x20000000
 80011e4:	431bde83 	.word	0x431bde83

080011e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f6:	6053      	str	r3, [r2, #4]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	f000 bc08 	b.w	8001a2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121c:	4b96      	ldr	r3, [pc, #600]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001226:	4b94      	ldr	r3, [pc, #592]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80e4 	beq.w	8001406 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_RCC_OscConfig+0x4c>
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b0c      	cmp	r3, #12
 8001248:	f040 808b 	bne.w	8001362 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b01      	cmp	r3, #1
 8001250:	f040 8087 	bne.w	8001362 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001254:	4b88      	ldr	r3, [pc, #544]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_OscConfig+0x64>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e3df      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	4b81      	ldr	r3, [pc, #516]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_RCC_OscConfig+0x7e>
 800127c:	4b7e      	ldr	r3, [pc, #504]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001284:	e005      	b.n	8001292 <HAL_RCC_OscConfig+0x8a>
 8001286:	4b7c      	ldr	r3, [pc, #496]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001292:	4293      	cmp	r3, r2
 8001294:	d223      	bcs.n	80012de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fdc4 	bl	8001e28 <RCC_SetFlashLatencyFromMSIRange>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e3c0      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012aa:	4b73      	ldr	r3, [pc, #460]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a72      	ldr	r2, [pc, #456]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b70      	ldr	r3, [pc, #448]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	496d      	ldr	r1, [pc, #436]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	4968      	ldr	r1, [pc, #416]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	e025      	b.n	800132a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012de:	4b66      	ldr	r3, [pc, #408]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a65      	ldr	r2, [pc, #404]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b63      	ldr	r3, [pc, #396]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4960      	ldr	r1, [pc, #384]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	495b      	ldr	r1, [pc, #364]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fd84 	bl	8001e28 <RCC_SetFlashLatencyFromMSIRange>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e380      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800132a:	f000 fc87 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 800132e:	4602      	mov	r2, r0
 8001330:	4b51      	ldr	r3, [pc, #324]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	4950      	ldr	r1, [pc, #320]	@ (800147c <HAL_RCC_OscConfig+0x274>)
 800133c:	5ccb      	ldrb	r3, [r1, r3]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	4a4e      	ldr	r2, [pc, #312]	@ (8001480 <HAL_RCC_OscConfig+0x278>)
 8001348:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800134a:	4b4e      	ldr	r3, [pc, #312]	@ (8001484 <HAL_RCC_OscConfig+0x27c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fac0 	bl	80008d4 <HAL_InitTick>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d052      	beq.n	8001404 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	e364      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d032      	beq.n	80013d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800136a:	4b43      	ldr	r3, [pc, #268]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a42      	ldr	r2, [pc, #264]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001376:	f7ff fc53 	bl	8000c20 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137e:	f7ff fc4f 	bl	8000c20 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e34d      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001390:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139c:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a35      	ldr	r2, [pc, #212]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4930      	ldr	r1, [pc, #192]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	492b      	ldr	r1, [pc, #172]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
 80013ce:	e01a      	b.n	8001406 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013d0:	4b29      	ldr	r3, [pc, #164]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a28      	ldr	r2, [pc, #160]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc20 	bl	8000c20 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc1c 	bl	8000c20 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e31a      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1dc>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d073      	beq.n	80014fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b08      	cmp	r3, #8
 8001416:	d005      	beq.n	8001424 <HAL_RCC_OscConfig+0x21c>
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b0c      	cmp	r3, #12
 800141c:	d10e      	bne.n	800143c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d10b      	bne.n	800143c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d063      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d15f      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e2f7      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x24c>
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e025      	b.n	80014a0 <HAL_RCC_OscConfig+0x298>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800145c:	d114      	bne.n	8001488 <HAL_RCC_OscConfig+0x280>
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a02      	ldr	r2, [pc, #8]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e013      	b.n	80014a0 <HAL_RCC_OscConfig+0x298>
 8001478:	40021000 	.word	0x40021000
 800147c:	08007a78 	.word	0x08007a78
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004
 8001488:	4ba0      	ldr	r3, [pc, #640]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a9f      	ldr	r2, [pc, #636]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b9d      	ldr	r3, [pc, #628]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a9c      	ldr	r2, [pc, #624]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fbba 	bl	8000c20 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fbb6 	bl	8000c20 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	@ 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e2b4      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c2:	4b92      	ldr	r3, [pc, #584]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2a8>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fba6 	bl	8000c20 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fba2 	bl	8000c20 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	@ 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e2a0      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ea:	4b88      	ldr	r3, [pc, #544]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d0>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d060      	beq.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b04      	cmp	r3, #4
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x310>
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d119      	bne.n	8001546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d116      	bne.n	8001546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	4b7c      	ldr	r3, [pc, #496]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x328>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e27d      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b76      	ldr	r3, [pc, #472]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	4973      	ldr	r1, [pc, #460]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	e040      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d023      	beq.n	8001596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154e:	4b6f      	ldr	r3, [pc, #444]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6e      	ldr	r2, [pc, #440]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fb61 	bl	8000c20 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff fb5d 	bl	8000c20 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e25b      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001574:	4b65      	ldr	r3, [pc, #404]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b62      	ldr	r3, [pc, #392]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	495f      	ldr	r1, [pc, #380]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
 8001594:	e018      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001596:	4b5d      	ldr	r3, [pc, #372]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5c      	ldr	r2, [pc, #368]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 800159c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb3d 	bl	8000c20 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb39 	bl	8000c20 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e237      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015bc:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d03c      	beq.n	800164e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01c      	beq.n	8001616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015dc:	4b4b      	ldr	r3, [pc, #300]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80015de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e2:	4a4a      	ldr	r2, [pc, #296]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb18 	bl	8000c20 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fb14 	bl	8000c20 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e212      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001606:	4b41      	ldr	r3, [pc, #260]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ef      	beq.n	80015f4 <HAL_RCC_OscConfig+0x3ec>
 8001614:	e01b      	b.n	800164e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800161c:	4a3b      	ldr	r2, [pc, #236]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff fafb 	bl	8000c20 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff faf7 	bl	8000c20 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1f5      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ef      	bne.n	800162e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80a6 	beq.w	80017a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001660:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001670:	4a26      	ldr	r2, [pc, #152]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001676:	6593      	str	r3, [r2, #88]	@ 0x58
 8001678:	4b24      	ldr	r3, [pc, #144]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001684:	2301      	movs	r3, #1
 8001686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <HAL_RCC_OscConfig+0x508>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d118      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001694:	4b1e      	ldr	r3, [pc, #120]	@ (8001710 <HAL_RCC_OscConfig+0x508>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <HAL_RCC_OscConfig+0x508>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a0:	f7ff fabe 	bl	8000c20 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a8:	f7ff faba 	bl	8000c20 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1b8      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_RCC_OscConfig+0x508>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4d8>
 80016ce:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016de:	e029      	b.n	8001734 <HAL_RCC_OscConfig+0x52c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d115      	bne.n	8001714 <HAL_RCC_OscConfig+0x50c>
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ee:	4a07      	ldr	r2, [pc, #28]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fe:	4a03      	ldr	r2, [pc, #12]	@ (800170c <HAL_RCC_OscConfig+0x504>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x52c>
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	40007000 	.word	0x40007000
 8001714:	4b9d      	ldr	r3, [pc, #628]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171a:	4a9c      	ldr	r2, [pc, #624]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001724:	4b99      	ldr	r3, [pc, #612]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172a:	4a98      	ldr	r2, [pc, #608]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d016      	beq.n	800176a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff fa70 	bl	8000c20 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff fa6c 	bl	8000c20 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e168      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175a:	4b8c      	ldr	r3, [pc, #560]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ed      	beq.n	8001744 <HAL_RCC_OscConfig+0x53c>
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fa59 	bl	8000c20 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fa55 	bl	8000c20 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e151      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001788:	4b80      	ldr	r3, [pc, #512]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ed      	bne.n	8001772 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4b7b      	ldr	r3, [pc, #492]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	4a7a      	ldr	r2, [pc, #488]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80017a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03c      	beq.n	800182e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017bc:	4b73      	ldr	r3, [pc, #460]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80017be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017c2:	4a72      	ldr	r2, [pc, #456]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fa28 	bl	8000c20 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d4:	f7ff fa24 	bl	8000c20 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e122      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017e6:	4b69      	ldr	r3, [pc, #420]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80017e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ef      	beq.n	80017d4 <HAL_RCC_OscConfig+0x5cc>
 80017f4:	e01b      	b.n	800182e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017f6:	4b65      	ldr	r3, [pc, #404]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80017f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017fc:	4a63      	ldr	r2, [pc, #396]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fa0b 	bl	8000c20 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180e:	f7ff fa07 	bl	8000c20 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e105      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001820:	4b5a      	ldr	r3, [pc, #360]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 8001822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ef      	bne.n	800180e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80f9 	beq.w	8001a2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	2b02      	cmp	r3, #2
 800183e:	f040 80cf 	bne.w	80019e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001842:	4b52      	ldr	r3, [pc, #328]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 0203 	and.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	429a      	cmp	r2, r3
 8001854:	d12c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001860:	3b01      	subs	r3, #1
 8001862:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d123      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001872:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d11b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001882:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d113      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	3b01      	subs	r3, #1
 8001896:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d109      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	085b      	lsrs	r3, r3, #1
 80018a8:	3b01      	subs	r3, #1
 80018aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d071      	beq.n	8001994 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d068      	beq.n	8001988 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018b6:	4b35      	ldr	r3, [pc, #212]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018c2:	4b32      	ldr	r3, [pc, #200]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0ac      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018d2:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a2d      	ldr	r2, [pc, #180]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80018d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018de:	f7ff f99f 	bl	8000c20 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f99b 	bl	8000c20 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e099      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	4b24      	ldr	r3, [pc, #144]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b21      	ldr	r3, [pc, #132]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <HAL_RCC_OscConfig+0x788>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001914:	3a01      	subs	r2, #1
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800191e:	0212      	lsls	r2, r2, #8
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001926:	0852      	lsrs	r2, r2, #1
 8001928:	3a01      	subs	r2, #1
 800192a:	0552      	lsls	r2, r2, #21
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001932:	0852      	lsrs	r2, r2, #1
 8001934:	3a01      	subs	r2, #1
 8001936:	0652      	lsls	r2, r2, #25
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800193e:	06d2      	lsls	r2, r2, #27
 8001940:	430a      	orrs	r2, r1
 8001942:	4912      	ldr	r1, [pc, #72]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 8001944:	4313      	orrs	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001948:	4b10      	ldr	r3, [pc, #64]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0f      	ldr	r2, [pc, #60]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001954:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a0c      	ldr	r2, [pc, #48]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800195e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001960:	f7ff f95e 	bl	8000c20 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f95a 	bl	8000c20 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e058      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <HAL_RCC_OscConfig+0x784>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001986:	e050      	b.n	8001a2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e04f      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
 800198c:	40021000 	.word	0x40021000
 8001990:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d144      	bne.n	8001a2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a23      	ldr	r2, [pc, #140]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ac:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a20      	ldr	r2, [pc, #128]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b8:	f7ff f932 	bl	8000c20 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f92e 	bl	8000c20 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e02c      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x7b8>
 80019de:	e024      	b.n	8001a2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d01f      	beq.n	8001a26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f915 	bl	8000c20 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f911 	bl	8000c20 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e00f      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4905      	ldr	r1, [pc, #20]	@ (8001a34 <HAL_RCC_OscConfig+0x82c>)
 8001a1e:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_RCC_OscConfig+0x830>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
 8001a24:	e001      	b.n	8001a2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	feeefffc 	.word	0xfeeefffc

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0e7      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b75      	ldr	r3, [pc, #468]	@ (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d910      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b72      	ldr	r3, [pc, #456]	@ (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 0207 	bic.w	r2, r3, #7
 8001a66:	4970      	ldr	r1, [pc, #448]	@ (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0cf      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4b66      	ldr	r3, [pc, #408]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d908      	bls.n	8001aae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9c:	4b63      	ldr	r3, [pc, #396]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4960      	ldr	r1, [pc, #384]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d04c      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d121      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0a6      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ada:	4b54      	ldr	r3, [pc, #336]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d115      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e09a      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af2:	4b4e      	ldr	r3, [pc, #312]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e08e      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b02:	4b4a      	ldr	r3, [pc, #296]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e086      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b12:	4b46      	ldr	r3, [pc, #280]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 0203 	bic.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4943      	ldr	r1, [pc, #268]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b24:	f7ff f87c 	bl	8000c20 <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7ff f878 	bl	8000c20 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e06e      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 020c 	and.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1eb      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d010      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	4b31      	ldr	r3, [pc, #196]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d208      	bcs.n	8001b82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b70:	4b2e      	ldr	r3, [pc, #184]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	492b      	ldr	r1, [pc, #172]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b82:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d210      	bcs.n	8001bb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b90:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 0207 	bic.w	r2, r3, #7
 8001b98:	4923      	ldr	r1, [pc, #140]	@ (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba0:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e036      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	4918      	ldr	r1, [pc, #96]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4910      	ldr	r1, [pc, #64]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf0:	f000 f824 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	490b      	ldr	r1, [pc, #44]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f4>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	4a09      	ldr	r2, [pc, #36]	@ (8001c34 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <HAL_RCC_ClockConfig+0x1fc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fe5d 	bl	80008d4 <HAL_InitTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08007a78 	.word	0x08007a78
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4b3b      	ldr	r3, [pc, #236]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x34>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d121      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d11e      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c70:	4b34      	ldr	r3, [pc, #208]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c7c:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c98:	4a2b      	ldr	r2, [pc, #172]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	e004      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc0:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d134      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cca:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d003      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ce0:	e005      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce4:	617b      	str	r3, [r7, #20]
      break;
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cea:	617b      	str	r3, [r7, #20]
      break;
 8001cec:	e002      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	617b      	str	r3, [r7, #20]
      break;
 8001cf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	3301      	adds	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	fb03 f202 	mul.w	r2, r3, r2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	0e5b      	lsrs	r3, r3, #25
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	3301      	adds	r3, #1
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d34:	69bb      	ldr	r3, [r7, #24]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	@ 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08007a90 	.word	0x08007a90
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	007a1200 	.word	0x007a1200

08001d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4904      	ldr	r1, [pc, #16]	@ (8001d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08007a88 	.word	0x08007a88

08001d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d9c:	f7ff ffda 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0adb      	lsrs	r3, r3, #11
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4904      	ldr	r1, [pc, #16]	@ (8001dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08007a88 	.word	0x08007a88

08001dc4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e06:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <HAL_RCC_GetClockConfig+0x60>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0207 	and.w	r2, r3, #7
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	601a      	str	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40022000 	.word	0x40022000

08001e28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e40:	f7ff f96e 	bl	8001120 <HAL_PWREx_GetVoltageRange>
 8001e44:	6178      	str	r0, [r7, #20]
 8001e46:	e014      	b.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4c:	4a24      	ldr	r2, [pc, #144]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e60:	f7ff f95e 	bl	8001120 <HAL_PWREx_GetVoltageRange>
 8001e64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e78:	d10b      	bne.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b80      	cmp	r3, #128	@ 0x80
 8001e7e:	d919      	bls.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e84:	d902      	bls.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e86:	2302      	movs	r3, #2
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e013      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e010      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b80      	cmp	r3, #128	@ 0x80
 8001e96:	d902      	bls.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e98:	2303      	movs	r3, #3
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	e00a      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b80      	cmp	r3, #128	@ 0x80
 8001ea2:	d102      	bne.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e004      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b70      	cmp	r3, #112	@ 0x70
 8001eae:	d101      	bne.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 0207 	bic.w	r2, r3, #7
 8001ebc:	4909      	ldr	r1, [pc, #36]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ec4:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d041      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f0c:	d02a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f12:	d824      	bhi.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f18:	d008      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f1e:	d81e      	bhi.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f28:	d010      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f2c:	4b86      	ldr	r3, [pc, #536]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a85      	ldr	r2, [pc, #532]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f38:	e015      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 facd 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f4a:	e00c      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3320      	adds	r3, #32
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fbb6 	bl	80026c4 <RCCEx_PLLSAI2_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5c:	e003      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	74fb      	strb	r3, [r7, #19]
      break;
 8001f62:	e000      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f6c:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f7a:	4973      	ldr	r1, [pc, #460]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f82:	e001      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d041      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f9c:	d02a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fa2:	d824      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fa8:	d008      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001faa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fae:	d81e      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb8:	d010      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fba:	e018      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fbc:	4b62      	ldr	r3, [pc, #392]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a61      	ldr	r2, [pc, #388]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fa85 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fda:	e00c      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fb6e 	bl	80026c4 <RCCEx_PLLSAI2_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fec:	e003      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ffc:	4b52      	ldr	r3, [pc, #328]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002002:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800200a:	494f      	ldr	r1, [pc, #316]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002012:	e001      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a0 	beq.w	8002166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800202a:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	4a40      	ldr	r2, [pc, #256]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	@ 0x58
 800204c:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800205c:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3a      	ldr	r2, [pc, #232]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002066:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002068:	f7fe fdda 	bl	8000c20 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800206e:	e009      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002070:	f7fe fdd6 	bl	8000c20 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d902      	bls.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	74fb      	strb	r3, [r7, #19]
        break;
 8002082:	e005      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002084:	4b31      	ldr	r3, [pc, #196]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ef      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d15c      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002096:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01f      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d019      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b4:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c0:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	4a20      	ldr	r2, [pc, #128]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e0:	4a19      	ldr	r2, [pc, #100]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fd95 	bl	8000c20 <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f8:	e00b      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fd91 	bl	8000c20 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d902      	bls.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	74fb      	strb	r3, [r7, #19]
            break;
 8002110:	e006      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002112:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ec      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002126:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	4904      	ldr	r1, [pc, #16]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002154:	7c7b      	ldrb	r3, [r7, #17]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4ba6      	ldr	r3, [pc, #664]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	4aa5      	ldr	r2, [pc, #660]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002172:	4ba0      	ldr	r3, [pc, #640]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002178:	f023 0203 	bic.w	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002180:	499c      	ldr	r1, [pc, #624]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002194:	4b97      	ldr	r3, [pc, #604]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219a:	f023 020c 	bic.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a2:	4994      	ldr	r1, [pc, #592]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021b6:	4b8f      	ldr	r3, [pc, #572]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	498b      	ldr	r1, [pc, #556]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021d8:	4b86      	ldr	r3, [pc, #536]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	4983      	ldr	r1, [pc, #524]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021fa:	4b7e      	ldr	r3, [pc, #504]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002208:	497a      	ldr	r1, [pc, #488]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800221c:	4b75      	ldr	r3, [pc, #468]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	4972      	ldr	r1, [pc, #456]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800223e:	4b6d      	ldr	r3, [pc, #436]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002244:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224c:	4969      	ldr	r1, [pc, #420]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002260:	4b64      	ldr	r3, [pc, #400]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800226e:	4961      	ldr	r1, [pc, #388]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	4b5c      	ldr	r3, [pc, #368]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002288:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002290:	4958      	ldr	r1, [pc, #352]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a4:	4b53      	ldr	r3, [pc, #332]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	4950      	ldr	r1, [pc, #320]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c6:	4b4b      	ldr	r3, [pc, #300]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d4:	4947      	ldr	r1, [pc, #284]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e8:	4b42      	ldr	r3, [pc, #264]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	493f      	ldr	r1, [pc, #252]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d028      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800230a:	4b3a      	ldr	r3, [pc, #232]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002310:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002318:	4936      	ldr	r1, [pc, #216]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002328:	d106      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232a:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4a31      	ldr	r2, [pc, #196]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002334:	60d3      	str	r3, [r2, #12]
 8002336:	e011      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002340:	d10c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f8c9 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d028      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002368:	4b22      	ldr	r3, [pc, #136]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002376:	491f      	ldr	r1, [pc, #124]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002386:	d106      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a19      	ldr	r2, [pc, #100]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e011      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800239e:	d10c      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f89a 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d02a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c6:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023d4:	4907      	ldr	r1, [pc, #28]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e4:	d108      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a02      	ldr	r2, [pc, #8]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
 80023f2:	e013      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80023f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002400:	d10c      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f869 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02f      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002428:	4b2c      	ldr	r3, [pc, #176]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002436:	4929      	ldr	r1, [pc, #164]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002446:	d10d      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	2102      	movs	r1, #2
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f846 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d014      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	74bb      	strb	r3, [r7, #18]
 8002462:	e011      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800246c:	d10c      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3320      	adds	r3, #32
 8002472:	2102      	movs	r1, #2
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f925 	bl	80026c4 <RCCEx_PLLSAI2_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024a4:	490d      	ldr	r1, [pc, #52]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024c8:	4904      	ldr	r1, [pc, #16]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000

080024e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ee:	4b74      	ldr	r3, [pc, #464]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d018      	beq.n	800252c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024fa:	4b71      	ldr	r3, [pc, #452]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d10d      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
       ||
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002512:	4b6b      	ldr	r3, [pc, #428]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
       ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d047      	beq.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e044      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d018      	beq.n	8002566 <RCCEx_PLLSAI1_Config+0x86>
 8002534:	2b03      	cmp	r3, #3
 8002536:	d825      	bhi.n	8002584 <RCCEx_PLLSAI1_Config+0xa4>
 8002538:	2b01      	cmp	r3, #1
 800253a:	d002      	beq.n	8002542 <RCCEx_PLLSAI1_Config+0x62>
 800253c:	2b02      	cmp	r3, #2
 800253e:	d009      	beq.n	8002554 <RCCEx_PLLSAI1_Config+0x74>
 8002540:	e020      	b.n	8002584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002542:	4b5f      	ldr	r3, [pc, #380]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11d      	bne.n	800258a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002552:	e01a      	b.n	800258a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002554:	4b5a      	ldr	r3, [pc, #360]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d116      	bne.n	800258e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002564:	e013      	b.n	800258e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002566:	4b56      	ldr	r3, [pc, #344]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002572:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002582:	e006      	b.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      break;
 8002588:	e004      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002592:	bf00      	nop
    }

    if(status == HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800259a:	4b49      	ldr	r3, [pc, #292]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	430b      	orrs	r3, r1
 80025b0:	4943      	ldr	r1, [pc, #268]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d17c      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025bc:	4b40      	ldr	r3, [pc, #256]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a3f      	ldr	r2, [pc, #252]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c8:	f7fe fb2a 	bl	8000c20 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ce:	e009      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d0:	f7fe fb26 	bl	8000c20 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d902      	bls.n	80025e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	73fb      	strb	r3, [r7, #15]
        break;
 80025e2:	e005      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e4:	4b36      	ldr	r3, [pc, #216]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ef      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d15f      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d110      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025fc:	4b30      	ldr	r3, [pc, #192]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002604:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6892      	ldr	r2, [r2, #8]
 800260c:	0211      	lsls	r1, r2, #8
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	06d2      	lsls	r2, r2, #27
 8002614:	430a      	orrs	r2, r1
 8002616:	492a      	ldr	r1, [pc, #168]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	610b      	str	r3, [r1, #16]
 800261c:	e027      	b.n	800266e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d112      	bne.n	800264a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002624:	4b26      	ldr	r3, [pc, #152]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800262c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6892      	ldr	r2, [r2, #8]
 8002634:	0211      	lsls	r1, r2, #8
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6912      	ldr	r2, [r2, #16]
 800263a:	0852      	lsrs	r2, r2, #1
 800263c:	3a01      	subs	r2, #1
 800263e:	0552      	lsls	r2, r2, #21
 8002640:	430a      	orrs	r2, r1
 8002642:	491f      	ldr	r1, [pc, #124]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	610b      	str	r3, [r1, #16]
 8002648:	e011      	b.n	800266e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800264a:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002652:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6892      	ldr	r2, [r2, #8]
 800265a:	0211      	lsls	r1, r2, #8
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6952      	ldr	r2, [r2, #20]
 8002660:	0852      	lsrs	r2, r2, #1
 8002662:	3a01      	subs	r2, #1
 8002664:	0652      	lsls	r2, r2, #25
 8002666:	430a      	orrs	r2, r1
 8002668:	4915      	ldr	r1, [pc, #84]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002674:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002678:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe fad1 	bl	8000c20 <HAL_GetTick>
 800267e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002680:	e009      	b.n	8002696 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002682:	f7fe facd 	bl	8000c20 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d902      	bls.n	8002696 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	73fb      	strb	r3, [r7, #15]
          break;
 8002694:	e005      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002696:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0ef      	beq.n	8002682 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d106      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4903      	ldr	r1, [pc, #12]	@ (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000

080026c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026d2:	4b69      	ldr	r3, [pc, #420]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d018      	beq.n	8002710 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026de:	4b66      	ldr	r3, [pc, #408]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0203 	and.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d10d      	bne.n	800270a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
       ||
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026f6:	4b60      	ldr	r3, [pc, #384]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
       ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d047      	beq.n	800279a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e044      	b.n	800279a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d018      	beq.n	800274a <RCCEx_PLLSAI2_Config+0x86>
 8002718:	2b03      	cmp	r3, #3
 800271a:	d825      	bhi.n	8002768 <RCCEx_PLLSAI2_Config+0xa4>
 800271c:	2b01      	cmp	r3, #1
 800271e:	d002      	beq.n	8002726 <RCCEx_PLLSAI2_Config+0x62>
 8002720:	2b02      	cmp	r3, #2
 8002722:	d009      	beq.n	8002738 <RCCEx_PLLSAI2_Config+0x74>
 8002724:	e020      	b.n	8002768 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002726:	4b54      	ldr	r3, [pc, #336]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d11d      	bne.n	800276e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002736:	e01a      	b.n	800276e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002738:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d116      	bne.n	8002772 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002748:	e013      	b.n	8002772 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800274a:	4b4b      	ldr	r3, [pc, #300]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002756:	4b48      	ldr	r3, [pc, #288]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002766:	e006      	b.n	8002776 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      break;
 800276c:	e004      	b.n	8002778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800276e:	bf00      	nop
 8002770:	e002      	b.n	8002778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002772:	bf00      	nop
 8002774:	e000      	b.n	8002778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002776:	bf00      	nop
    }

    if(status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800277e:	4b3e      	ldr	r3, [pc, #248]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	430b      	orrs	r3, r1
 8002794:	4938      	ldr	r1, [pc, #224]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d166      	bne.n	800286e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027a0:	4b35      	ldr	r3, [pc, #212]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a34      	ldr	r2, [pc, #208]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ac:	f7fe fa38 	bl	8000c20 <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027b2:	e009      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027b4:	f7fe fa34 	bl	8000c20 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d902      	bls.n	80027c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	73fb      	strb	r3, [r7, #15]
        break;
 80027c6:	e005      	b.n	80027d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ef      	bne.n	80027b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d149      	bne.n	800286e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d110      	bne.n	8002802 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027e0:	4b25      	ldr	r3, [pc, #148]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80027e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6892      	ldr	r2, [r2, #8]
 80027f0:	0211      	lsls	r1, r2, #8
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	06d2      	lsls	r2, r2, #27
 80027f8:	430a      	orrs	r2, r1
 80027fa:	491f      	ldr	r1, [pc, #124]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	614b      	str	r3, [r1, #20]
 8002800:	e011      	b.n	8002826 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800280a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	0211      	lsls	r1, r2, #8
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6912      	ldr	r2, [r2, #16]
 8002818:	0852      	lsrs	r2, r2, #1
 800281a:	3a01      	subs	r2, #1
 800281c:	0652      	lsls	r2, r2, #25
 800281e:	430a      	orrs	r2, r1
 8002820:	4915      	ldr	r1, [pc, #84]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002826:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a13      	ldr	r2, [pc, #76]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002830:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe f9f5 	bl	8000c20 <HAL_GetTick>
 8002836:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002838:	e009      	b.n	800284e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800283a:	f7fe f9f1 	bl	8000c20 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d902      	bls.n	800284e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	73fb      	strb	r3, [r7, #15]
          break;
 800284c:	e005      	b.n	800285a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ef      	beq.n	800283a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4903      	ldr	r1, [pc, #12]	@ (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e049      	b.n	8002922 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f841 	bl	800292a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 f9e0 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d001      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e04f      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a23      	ldr	r2, [pc, #140]	@ (8002a04 <HAL_TIM_Base_Start_IT+0xc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01d      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002982:	d018      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1f      	ldr	r2, [pc, #124]	@ (8002a08 <HAL_TIM_Base_Start_IT+0xc8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1e      	ldr	r2, [pc, #120]	@ (8002a0c <HAL_TIM_Base_Start_IT+0xcc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a10 <HAL_TIM_Base_Start_IT+0xd0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <HAL_TIM_Base_Start_IT+0xd4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a19      	ldr	r2, [pc, #100]	@ (8002a18 <HAL_TIM_Base_Start_IT+0xd8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d115      	bne.n	80029e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <HAL_TIM_Base_Start_IT+0xdc>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d015      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0xb4>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ce:	d011      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	e008      	b.n	80029f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e000      	b.n	80029f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40013400 	.word	0x40013400
 8002a18:	40014000 	.word	0x40014000
 8002a1c:	00010007 	.word	0x00010007

08002a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d020      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01b      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0202 	mvn.w	r2, #2
 8002a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8e9 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8db 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8ec 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d020      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0204 	mvn.w	r2, #4
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f8c3 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8b5 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f8c6 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d020      	beq.n	8002b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0208 	mvn.w	r2, #8
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2204      	movs	r2, #4
 8002af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f89d 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f88f 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8a0 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01b      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0210 	mvn.w	r2, #16
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f877 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f869 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f87a 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00c      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0201 	mvn.w	r2, #1
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fe04 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00c      	beq.n	8002bba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f913 	bl	8002de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00c      	beq.n	8002bde <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f90b 	bl	8002df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f834 	bl	8002c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00c      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0220 	mvn.w	r2, #32
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8d3 	bl	8002dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a46      	ldr	r2, [pc, #280]	@ (8002dac <TIM_Base_SetConfig+0x12c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c9e:	d00f      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a43      	ldr	r2, [pc, #268]	@ (8002db0 <TIM_Base_SetConfig+0x130>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a42      	ldr	r2, [pc, #264]	@ (8002db4 <TIM_Base_SetConfig+0x134>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a41      	ldr	r2, [pc, #260]	@ (8002db8 <TIM_Base_SetConfig+0x138>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a40      	ldr	r2, [pc, #256]	@ (8002dbc <TIM_Base_SetConfig+0x13c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d108      	bne.n	8002cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a35      	ldr	r2, [pc, #212]	@ (8002dac <TIM_Base_SetConfig+0x12c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01f      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce0:	d01b      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a32      	ldr	r2, [pc, #200]	@ (8002db0 <TIM_Base_SetConfig+0x130>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d017      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a31      	ldr	r2, [pc, #196]	@ (8002db4 <TIM_Base_SetConfig+0x134>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a30      	ldr	r2, [pc, #192]	@ (8002db8 <TIM_Base_SetConfig+0x138>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00f      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8002dbc <TIM_Base_SetConfig+0x13c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc0 <TIM_Base_SetConfig+0x140>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc4 <TIM_Base_SetConfig+0x144>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2c      	ldr	r2, [pc, #176]	@ (8002dc8 <TIM_Base_SetConfig+0x148>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d108      	bne.n	8002d2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a16      	ldr	r2, [pc, #88]	@ (8002dac <TIM_Base_SetConfig+0x12c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00f      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a18      	ldr	r2, [pc, #96]	@ (8002dbc <TIM_Base_SetConfig+0x13c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <TIM_Base_SetConfig+0x140>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a16      	ldr	r2, [pc, #88]	@ (8002dc4 <TIM_Base_SetConfig+0x144>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a15      	ldr	r2, [pc, #84]	@ (8002dc8 <TIM_Base_SetConfig+0x148>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d103      	bne.n	8002d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	611a      	str	r2, [r3, #16]
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	40013400 	.word	0x40013400
 8002dc0:	40014000 	.word	0x40014000
 8002dc4:	40014400 	.word	0x40014400
 8002dc8:	40014800 	.word	0x40014800

08002dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e040      	b.n	8002e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd fcf2 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	@ 0x24
 8002e34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fb6a 	bl	8003528 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f8af 	bl	8002fb8 <UART_SetConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e01b      	b.n	8002e9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fbe9 	bl	800366c <UART_CheckIdleState>
 8002e9a:	4603      	mov	r3, r0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	@ 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d177      	bne.n	8002fac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Transmit+0x24>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e070      	b.n	8002fae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2221      	movs	r2, #33	@ 0x21
 8002ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eda:	f7fd fea1 	bl	8000c20 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef8:	d108      	bne.n	8002f0c <HAL_UART_Transmit+0x68>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e003      	b.n	8002f14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f14:	e02f      	b.n	8002f76 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	@ 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fc4b 	bl	80037bc <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e03b      	b.n	8002fae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10b      	bne.n	8002f54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	881a      	ldrh	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	3302      	adds	r3, #2
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e007      	b.n	8002f64 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1c9      	bne.n	8002f16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2140      	movs	r1, #64	@ 0x40
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fc15 	bl	80037bc <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e005      	b.n	8002fae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fbc:	b08a      	sub	sp, #40	@ 0x28
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4ba4      	ldr	r3, [pc, #656]	@ (8003278 <UART_SetConfig+0x2c0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a99      	ldr	r2, [pc, #612]	@ (800327c <UART_SetConfig+0x2c4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003020:	4313      	orrs	r3, r2
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a90      	ldr	r2, [pc, #576]	@ (8003280 <UART_SetConfig+0x2c8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d126      	bne.n	8003090 <UART_SetConfig+0xd8>
 8003042:	4b90      	ldr	r3, [pc, #576]	@ (8003284 <UART_SetConfig+0x2cc>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b03      	cmp	r3, #3
 800304e:	d81b      	bhi.n	8003088 <UART_SetConfig+0xd0>
 8003050:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <UART_SetConfig+0xa0>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	08003069 	.word	0x08003069
 800305c:	08003079 	.word	0x08003079
 8003060:	08003071 	.word	0x08003071
 8003064:	08003081 	.word	0x08003081
 8003068:	2301      	movs	r3, #1
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306e:	e116      	b.n	800329e <UART_SetConfig+0x2e6>
 8003070:	2302      	movs	r3, #2
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003076:	e112      	b.n	800329e <UART_SetConfig+0x2e6>
 8003078:	2304      	movs	r3, #4
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307e:	e10e      	b.n	800329e <UART_SetConfig+0x2e6>
 8003080:	2308      	movs	r3, #8
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003086:	e10a      	b.n	800329e <UART_SetConfig+0x2e6>
 8003088:	2310      	movs	r3, #16
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308e:	e106      	b.n	800329e <UART_SetConfig+0x2e6>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a7c      	ldr	r2, [pc, #496]	@ (8003288 <UART_SetConfig+0x2d0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d138      	bne.n	800310c <UART_SetConfig+0x154>
 800309a:	4b7a      	ldr	r3, [pc, #488]	@ (8003284 <UART_SetConfig+0x2cc>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d82d      	bhi.n	8003104 <UART_SetConfig+0x14c>
 80030a8:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <UART_SetConfig+0xf8>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003105 	.word	0x08003105
 80030bc:	08003105 	.word	0x08003105
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	08003105 	.word	0x08003105
 80030c8:	08003105 	.word	0x08003105
 80030cc:	08003105 	.word	0x08003105
 80030d0:	080030ed 	.word	0x080030ed
 80030d4:	08003105 	.word	0x08003105
 80030d8:	08003105 	.word	0x08003105
 80030dc:	08003105 	.word	0x08003105
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ea:	e0d8      	b.n	800329e <UART_SetConfig+0x2e6>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f2:	e0d4      	b.n	800329e <UART_SetConfig+0x2e6>
 80030f4:	2304      	movs	r3, #4
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fa:	e0d0      	b.n	800329e <UART_SetConfig+0x2e6>
 80030fc:	2308      	movs	r3, #8
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003102:	e0cc      	b.n	800329e <UART_SetConfig+0x2e6>
 8003104:	2310      	movs	r3, #16
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310a:	e0c8      	b.n	800329e <UART_SetConfig+0x2e6>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5e      	ldr	r2, [pc, #376]	@ (800328c <UART_SetConfig+0x2d4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d125      	bne.n	8003162 <UART_SetConfig+0x1aa>
 8003116:	4b5b      	ldr	r3, [pc, #364]	@ (8003284 <UART_SetConfig+0x2cc>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003120:	2b30      	cmp	r3, #48	@ 0x30
 8003122:	d016      	beq.n	8003152 <UART_SetConfig+0x19a>
 8003124:	2b30      	cmp	r3, #48	@ 0x30
 8003126:	d818      	bhi.n	800315a <UART_SetConfig+0x1a2>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d00a      	beq.n	8003142 <UART_SetConfig+0x18a>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d814      	bhi.n	800315a <UART_SetConfig+0x1a2>
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <UART_SetConfig+0x182>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d008      	beq.n	800314a <UART_SetConfig+0x192>
 8003138:	e00f      	b.n	800315a <UART_SetConfig+0x1a2>
 800313a:	2300      	movs	r3, #0
 800313c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003140:	e0ad      	b.n	800329e <UART_SetConfig+0x2e6>
 8003142:	2302      	movs	r3, #2
 8003144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003148:	e0a9      	b.n	800329e <UART_SetConfig+0x2e6>
 800314a:	2304      	movs	r3, #4
 800314c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003150:	e0a5      	b.n	800329e <UART_SetConfig+0x2e6>
 8003152:	2308      	movs	r3, #8
 8003154:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003158:	e0a1      	b.n	800329e <UART_SetConfig+0x2e6>
 800315a:	2310      	movs	r3, #16
 800315c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003160:	e09d      	b.n	800329e <UART_SetConfig+0x2e6>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4a      	ldr	r2, [pc, #296]	@ (8003290 <UART_SetConfig+0x2d8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d125      	bne.n	80031b8 <UART_SetConfig+0x200>
 800316c:	4b45      	ldr	r3, [pc, #276]	@ (8003284 <UART_SetConfig+0x2cc>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003176:	2bc0      	cmp	r3, #192	@ 0xc0
 8003178:	d016      	beq.n	80031a8 <UART_SetConfig+0x1f0>
 800317a:	2bc0      	cmp	r3, #192	@ 0xc0
 800317c:	d818      	bhi.n	80031b0 <UART_SetConfig+0x1f8>
 800317e:	2b80      	cmp	r3, #128	@ 0x80
 8003180:	d00a      	beq.n	8003198 <UART_SetConfig+0x1e0>
 8003182:	2b80      	cmp	r3, #128	@ 0x80
 8003184:	d814      	bhi.n	80031b0 <UART_SetConfig+0x1f8>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <UART_SetConfig+0x1d8>
 800318a:	2b40      	cmp	r3, #64	@ 0x40
 800318c:	d008      	beq.n	80031a0 <UART_SetConfig+0x1e8>
 800318e:	e00f      	b.n	80031b0 <UART_SetConfig+0x1f8>
 8003190:	2300      	movs	r3, #0
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003196:	e082      	b.n	800329e <UART_SetConfig+0x2e6>
 8003198:	2302      	movs	r3, #2
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319e:	e07e      	b.n	800329e <UART_SetConfig+0x2e6>
 80031a0:	2304      	movs	r3, #4
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a6:	e07a      	b.n	800329e <UART_SetConfig+0x2e6>
 80031a8:	2308      	movs	r3, #8
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ae:	e076      	b.n	800329e <UART_SetConfig+0x2e6>
 80031b0:	2310      	movs	r3, #16
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b6:	e072      	b.n	800329e <UART_SetConfig+0x2e6>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	@ (8003294 <UART_SetConfig+0x2dc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d12a      	bne.n	8003218 <UART_SetConfig+0x260>
 80031c2:	4b30      	ldr	r3, [pc, #192]	@ (8003284 <UART_SetConfig+0x2cc>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031d0:	d01a      	beq.n	8003208 <UART_SetConfig+0x250>
 80031d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031d6:	d81b      	bhi.n	8003210 <UART_SetConfig+0x258>
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031dc:	d00c      	beq.n	80031f8 <UART_SetConfig+0x240>
 80031de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e2:	d815      	bhi.n	8003210 <UART_SetConfig+0x258>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <UART_SetConfig+0x238>
 80031e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ec:	d008      	beq.n	8003200 <UART_SetConfig+0x248>
 80031ee:	e00f      	b.n	8003210 <UART_SetConfig+0x258>
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f6:	e052      	b.n	800329e <UART_SetConfig+0x2e6>
 80031f8:	2302      	movs	r3, #2
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e04e      	b.n	800329e <UART_SetConfig+0x2e6>
 8003200:	2304      	movs	r3, #4
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003206:	e04a      	b.n	800329e <UART_SetConfig+0x2e6>
 8003208:	2308      	movs	r3, #8
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e046      	b.n	800329e <UART_SetConfig+0x2e6>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e042      	b.n	800329e <UART_SetConfig+0x2e6>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a17      	ldr	r2, [pc, #92]	@ (800327c <UART_SetConfig+0x2c4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d13a      	bne.n	8003298 <UART_SetConfig+0x2e0>
 8003222:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <UART_SetConfig+0x2cc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800322c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003230:	d01a      	beq.n	8003268 <UART_SetConfig+0x2b0>
 8003232:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003236:	d81b      	bhi.n	8003270 <UART_SetConfig+0x2b8>
 8003238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800323c:	d00c      	beq.n	8003258 <UART_SetConfig+0x2a0>
 800323e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003242:	d815      	bhi.n	8003270 <UART_SetConfig+0x2b8>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <UART_SetConfig+0x298>
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324c:	d008      	beq.n	8003260 <UART_SetConfig+0x2a8>
 800324e:	e00f      	b.n	8003270 <UART_SetConfig+0x2b8>
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003256:	e022      	b.n	800329e <UART_SetConfig+0x2e6>
 8003258:	2302      	movs	r3, #2
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325e:	e01e      	b.n	800329e <UART_SetConfig+0x2e6>
 8003260:	2304      	movs	r3, #4
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003266:	e01a      	b.n	800329e <UART_SetConfig+0x2e6>
 8003268:	2308      	movs	r3, #8
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326e:	e016      	b.n	800329e <UART_SetConfig+0x2e6>
 8003270:	2310      	movs	r3, #16
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003276:	e012      	b.n	800329e <UART_SetConfig+0x2e6>
 8003278:	efff69f3 	.word	0xefff69f3
 800327c:	40008000 	.word	0x40008000
 8003280:	40013800 	.word	0x40013800
 8003284:	40021000 	.word	0x40021000
 8003288:	40004400 	.word	0x40004400
 800328c:	40004800 	.word	0x40004800
 8003290:	40004c00 	.word	0x40004c00
 8003294:	40005000 	.word	0x40005000
 8003298:	2310      	movs	r3, #16
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a9f      	ldr	r2, [pc, #636]	@ (8003520 <UART_SetConfig+0x568>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d17a      	bne.n	800339e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d824      	bhi.n	80032fa <UART_SetConfig+0x342>
 80032b0:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <UART_SetConfig+0x300>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032eb 	.word	0x080032eb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032fb 	.word	0x080032fb
 80032d4:	080032fb 	.word	0x080032fb
 80032d8:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe fd46 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 80032e0:	61f8      	str	r0, [r7, #28]
        break;
 80032e2:	e010      	b.n	8003306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003524 <UART_SetConfig+0x56c>)
 80032e6:	61fb      	str	r3, [r7, #28]
        break;
 80032e8:	e00d      	b.n	8003306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fca7 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80032ee:	61f8      	str	r0, [r7, #28]
        break;
 80032f0:	e009      	b.n	8003306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f6:	61fb      	str	r3, [r7, #28]
        break;
 80032f8:	e005      	b.n	8003306 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80fb 	beq.w	8003504 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	429a      	cmp	r2, r3
 800331c:	d305      	bcc.n	800332a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	429a      	cmp	r2, r3
 8003328:	d903      	bls.n	8003332 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003330:	e0e8      	b.n	8003504 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2200      	movs	r2, #0
 8003336:	461c      	mov	r4, r3
 8003338:	4615      	mov	r5, r2
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	022b      	lsls	r3, r5, #8
 8003344:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003348:	0222      	lsls	r2, r4, #8
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	6849      	ldr	r1, [r1, #4]
 800334e:	0849      	lsrs	r1, r1, #1
 8003350:	2000      	movs	r0, #0
 8003352:	4688      	mov	r8, r1
 8003354:	4681      	mov	r9, r0
 8003356:	eb12 0a08 	adds.w	sl, r2, r8
 800335a:	eb43 0b09 	adc.w	fp, r3, r9
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800336c:	4650      	mov	r0, sl
 800336e:	4659      	mov	r1, fp
 8003370:	f7fc ff3e 	bl	80001f0 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003382:	d308      	bcc.n	8003396 <UART_SetConfig+0x3de>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800338a:	d204      	bcs.n	8003396 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	e0b6      	b.n	8003504 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800339c:	e0b2      	b.n	8003504 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a6:	d15e      	bne.n	8003466 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d828      	bhi.n	8003402 <UART_SetConfig+0x44a>
 80033b0:	a201      	add	r2, pc, #4	@ (adr r2, 80033b8 <UART_SetConfig+0x400>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033dd 	.word	0x080033dd
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	08003403 	.word	0x08003403
 80033c8:	080033f3 	.word	0x080033f3
 80033cc:	08003403 	.word	0x08003403
 80033d0:	08003403 	.word	0x08003403
 80033d4:	08003403 	.word	0x08003403
 80033d8:	080033fb 	.word	0x080033fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7fe fcc6 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 80033e0:	61f8      	str	r0, [r7, #28]
        break;
 80033e2:	e014      	b.n	800340e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7fe fcd8 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80033e8:	61f8      	str	r0, [r7, #28]
        break;
 80033ea:	e010      	b.n	800340e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003524 <UART_SetConfig+0x56c>)
 80033ee:	61fb      	str	r3, [r7, #28]
        break;
 80033f0:	e00d      	b.n	800340e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f2:	f7fe fc23 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80033f6:	61f8      	str	r0, [r7, #28]
        break;
 80033f8:	e009      	b.n	800340e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033fe:	61fb      	str	r3, [r7, #28]
        break;
 8003400:	e005      	b.n	800340e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800340c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d077      	beq.n	8003504 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005a      	lsls	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	441a      	add	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d916      	bls.n	800345e <UART_SetConfig+0x4a6>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003436:	d212      	bcs.n	800345e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f023 030f 	bic.w	r3, r3, #15
 8003440:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	b29a      	uxth	r2, r3
 800344e:	8afb      	ldrh	r3, [r7, #22]
 8003450:	4313      	orrs	r3, r2
 8003452:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	8afa      	ldrh	r2, [r7, #22]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	e052      	b.n	8003504 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003464:	e04e      	b.n	8003504 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003466:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800346a:	2b08      	cmp	r3, #8
 800346c:	d827      	bhi.n	80034be <UART_SetConfig+0x506>
 800346e:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <UART_SetConfig+0x4bc>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	08003499 	.word	0x08003499
 8003478:	080034a1 	.word	0x080034a1
 800347c:	080034a9 	.word	0x080034a9
 8003480:	080034bf 	.word	0x080034bf
 8003484:	080034af 	.word	0x080034af
 8003488:	080034bf 	.word	0x080034bf
 800348c:	080034bf 	.word	0x080034bf
 8003490:	080034bf 	.word	0x080034bf
 8003494:	080034b7 	.word	0x080034b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003498:	f7fe fc68 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 800349c:	61f8      	str	r0, [r7, #28]
        break;
 800349e:	e014      	b.n	80034ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a0:	f7fe fc7a 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80034a4:	61f8      	str	r0, [r7, #28]
        break;
 80034a6:	e010      	b.n	80034ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003524 <UART_SetConfig+0x56c>)
 80034aa:	61fb      	str	r3, [r7, #28]
        break;
 80034ac:	e00d      	b.n	80034ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ae:	f7fe fbc5 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80034b2:	61f8      	str	r0, [r7, #28]
        break;
 80034b4:	e009      	b.n	80034ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ba:	61fb      	str	r3, [r7, #28]
        break;
 80034bc:	e005      	b.n	80034ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034c8:	bf00      	nop
    }

    if (pclk != 0U)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d019      	beq.n	8003504 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	085a      	lsrs	r2, r3, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	441a      	add	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	d909      	bls.n	80034fe <UART_SetConfig+0x546>
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f0:	d205      	bcs.n	80034fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60da      	str	r2, [r3, #12]
 80034fc:	e002      	b.n	8003504 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003510:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003514:	4618      	mov	r0, r3
 8003516:	3728      	adds	r7, #40	@ 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351e:	bf00      	nop
 8003520:	40008000 	.word	0x40008000
 8003524:	00f42400 	.word	0x00f42400

08003528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01a      	beq.n	800363e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003626:	d10a      	bne.n	800363e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b098      	sub	sp, #96	@ 0x60
 8003670:	af02      	add	r7, sp, #8
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800367c:	f7fd fad0 	bl	8000c20 <HAL_GetTick>
 8003680:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d12e      	bne.n	80036ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003690:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f88c 	bl	80037bc <UART_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d021      	beq.n	80036ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036be:	653b      	str	r3, [r7, #80]	@ 0x50
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e6      	bne.n	80036aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e062      	b.n	80037b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d149      	bne.n	8003790 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	2200      	movs	r2, #0
 8003706:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f856 	bl	80037bc <UART_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d03c      	beq.n	8003790 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	623b      	str	r3, [r7, #32]
   return(result);
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003734:	633b      	str	r3, [r7, #48]	@ 0x30
 8003736:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800373a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e6      	bne.n	8003716 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3308      	adds	r3, #8
 800374e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	60fb      	str	r3, [r7, #12]
   return(result);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3308      	adds	r3, #8
 8003766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003768:	61fa      	str	r2, [r7, #28]
 800376a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	69b9      	ldr	r1, [r7, #24]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	617b      	str	r3, [r7, #20]
   return(result);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e011      	b.n	80037b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3758      	adds	r7, #88	@ 0x58
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037cc:	e04f      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037d4:	d04b      	beq.n	800386e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fd fa23 	bl	8000c20 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <UART_WaitOnFlagUntilTimeout+0x30>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e04e      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d037      	beq.n	800386e <UART_WaitOnFlagUntilTimeout+0xb2>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b80      	cmp	r3, #128	@ 0x80
 8003802:	d034      	beq.n	800386e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d031      	beq.n	800386e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d110      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2208      	movs	r2, #8
 800381e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f838 	bl	8003896 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2208      	movs	r2, #8
 800382a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e029      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003848:	d111      	bne.n	800386e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f81e 	bl	8003896 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e00f      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4013      	ands	r3, r2
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	429a      	cmp	r2, r3
 800388a:	d0a0      	beq.n	80037ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003896:	b480      	push	{r7}
 8003898:	b095      	sub	sp, #84	@ 0x54
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80038be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e6      	bne.n	800389e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3308      	adds	r3, #8
 80038d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	61fb      	str	r3, [r7, #28]
   return(result);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003908:	2b01      	cmp	r3, #1
 800390a:	d118      	bne.n	800393e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	60bb      	str	r3, [r7, #8]
   return(result);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f023 0310 	bic.w	r3, r3, #16
 8003920:	647b      	str	r3, [r7, #68]	@ 0x44
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6979      	ldr	r1, [r7, #20]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	613b      	str	r3, [r7, #16]
   return(result);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e6      	bne.n	800390c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003952:	bf00      	nop
 8003954:	3754      	adds	r7, #84	@ 0x54
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <__NVIC_SetPriority>:
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	db0a      	blt.n	800398a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	490c      	ldr	r1, [pc, #48]	@ (80039ac <__NVIC_SetPriority+0x4c>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	440b      	add	r3, r1
 8003984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003988:	e00a      	b.n	80039a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4908      	ldr	r1, [pc, #32]	@ (80039b0 <__NVIC_SetPriority+0x50>)
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	3b04      	subs	r3, #4
 8003998:	0112      	lsls	r2, r2, #4
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	440b      	add	r3, r1
 800399e:	761a      	strb	r2, [r3, #24]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000e100 	.word	0xe000e100
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <SysTick_Handler+0x1c>)
 80039ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039bc:	f002 f968 	bl	8005c90 <xTaskGetSchedulerState>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039c6:	f003 f85f 	bl	8006a88 <xPortSysTickHandler>
  }
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	e000e010 	.word	0xe000e010

080039d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039d8:	2100      	movs	r1, #0
 80039da:	f06f 0004 	mvn.w	r0, #4
 80039de:	f7ff ffbf 	bl	8003960 <__NVIC_SetPriority>
#endif
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ee:	f3ef 8305 	mrs	r3, IPSR
 80039f2:	603b      	str	r3, [r7, #0]
  return(result);
 80039f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039fa:	f06f 0305 	mvn.w	r3, #5
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	e00c      	b.n	8003a1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a02:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <osKernelInitialize+0x44>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a0a:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <osKernelInitialize+0x44>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	e002      	b.n	8003a1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a1c:	687b      	ldr	r3, [r7, #4]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000178 	.word	0x20000178

08003a30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a36:	f3ef 8305 	mrs	r3, IPSR
 8003a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a42:	f06f 0305 	mvn.w	r3, #5
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	e010      	b.n	8003a6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <osKernelStart+0x48>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d109      	bne.n	8003a66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a52:	f7ff ffbf 	bl	80039d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a56:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <osKernelStart+0x48>)
 8003a58:	2202      	movs	r2, #2
 8003a5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a5c:	f001 fcca 	bl	80053f4 <vTaskStartScheduler>
      stat = osOK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	e002      	b.n	8003a6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a6c:	687b      	ldr	r3, [r7, #4]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000178 	.word	0x20000178

08003a7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08e      	sub	sp, #56	@ 0x38
 8003a80:	af04      	add	r7, sp, #16
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a8c:	f3ef 8305 	mrs	r3, IPSR
 8003a90:	617b      	str	r3, [r7, #20]
  return(result);
 8003a92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d17e      	bne.n	8003b96 <osThreadNew+0x11a>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d07b      	beq.n	8003b96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003aa2:	2318      	movs	r3, #24
 8003aa4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003aae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d045      	beq.n	8003b42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <osThreadNew+0x48>
        name = attr->name;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <osThreadNew+0x6e>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b38      	cmp	r3, #56	@ 0x38
 8003adc:	d805      	bhi.n	8003aea <osThreadNew+0x6e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <osThreadNew+0x72>
        return (NULL);
 8003aea:	2300      	movs	r3, #0
 8003aec:	e054      	b.n	8003b98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00e      	beq.n	8003b24 <osThreadNew+0xa8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8003b0c:	d90a      	bls.n	8003b24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <osThreadNew+0xa8>
        mem = 1;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e010      	b.n	8003b46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10c      	bne.n	8003b46 <osThreadNew+0xca>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d108      	bne.n	8003b46 <osThreadNew+0xca>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d104      	bne.n	8003b46 <osThreadNew+0xca>
          mem = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e001      	b.n	8003b46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d110      	bne.n	8003b6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b54:	9202      	str	r2, [sp, #8]
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6a3a      	ldr	r2, [r7, #32]
 8003b60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f001 fa6a 	bl	800503c <xTaskCreateStatic>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	e013      	b.n	8003b96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d110      	bne.n	8003b96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	f107 0310 	add.w	r3, r7, #16
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f001 fab8 	bl	80050fc <xTaskCreate>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <osThreadNew+0x11a>
            hTask = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b96:	693b      	ldr	r3, [r7, #16]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3728      	adds	r7, #40	@ 0x28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba8:	f3ef 8305 	mrs	r3, IPSR
 8003bac:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <osDelay+0x1c>
    stat = osErrorISR;
 8003bb4:	f06f 0305 	mvn.w	r3, #5
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e007      	b.n	8003bcc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f001 fbde 	bl	8005388 <vTaskDelay>
    }
  }

  return (stat);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b08a      	sub	sp, #40	@ 0x28
 8003bda:	af02      	add	r7, sp, #8
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003be6:	f3ef 8305 	mrs	r3, IPSR
 8003bea:	613b      	str	r3, [r7, #16]
  return(result);
 8003bec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d175      	bne.n	8003cde <osSemaphoreNew+0x108>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d072      	beq.n	8003cde <osSemaphoreNew+0x108>
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d86e      	bhi.n	8003cde <osSemaphoreNew+0x108>
    mem = -1;
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <osSemaphoreNew+0x4c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c1a:	d902      	bls.n	8003c22 <osSemaphoreNew+0x4c>
        mem = 1;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	e00c      	b.n	8003c3c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d108      	bne.n	8003c3c <osSemaphoreNew+0x66>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <osSemaphoreNew+0x66>
          mem = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e001      	b.n	8003c3c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c42:	d04c      	beq.n	8003cde <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d128      	bne.n	8003c9c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10a      	bne.n	8003c66 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2203      	movs	r2, #3
 8003c56:	9200      	str	r2, [sp, #0]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f000 fa2b 	bl	80040b8 <xQueueGenericCreateStatic>
 8003c62:	61f8      	str	r0, [r7, #28]
 8003c64:	e005      	b.n	8003c72 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003c66:	2203      	movs	r2, #3
 8003c68:	2100      	movs	r1, #0
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f000 faa1 	bl	80041b2 <xQueueGenericCreate>
 8003c70:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d022      	beq.n	8003cbe <osSemaphoreNew+0xe8>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01f      	beq.n	8003cbe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2200      	movs	r2, #0
 8003c82:	2100      	movs	r1, #0
 8003c84:	69f8      	ldr	r0, [r7, #28]
 8003c86:	f000 fb61 	bl	800434c <xQueueGenericSend>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d016      	beq.n	8003cbe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003c90:	69f8      	ldr	r0, [r7, #28]
 8003c92:	f000 ffff 	bl	8004c94 <vQueueDelete>
            hSemaphore = NULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	e010      	b.n	8003cbe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d108      	bne.n	8003cb4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fadf 	bl	800426e <xQueueCreateCountingSemaphoreStatic>
 8003cb0:	61f8      	str	r0, [r7, #28]
 8003cb2:	e004      	b.n	8003cbe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fb12 	bl	80042e0 <xQueueCreateCountingSemaphore>
 8003cbc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00c      	beq.n	8003cde <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e001      	b.n	8003cd6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003cd6:	6979      	ldr	r1, [r7, #20]
 8003cd8:	69f8      	ldr	r0, [r7, #28]
 8003cda:	f001 f927 	bl	8004f2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003cde:	69fb      	ldr	r3, [r7, #28]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003d00:	f06f 0303 	mvn.w	r3, #3
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e039      	b.n	8003d7c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d08:	f3ef 8305 	mrs	r3, IPSR
 8003d0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d022      	beq.n	8003d5a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003d1a:	f06f 0303 	mvn.w	r3, #3
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e02c      	b.n	8003d7c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003d26:	f107 0308 	add.w	r3, r7, #8
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	6938      	ldr	r0, [r7, #16]
 8003d30:	f000 ff2e 	bl	8004b90 <xQueueReceiveFromISR>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d003      	beq.n	8003d42 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003d3a:	f06f 0302 	mvn.w	r3, #2
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e01c      	b.n	8003d7c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d019      	beq.n	8003d7c <osSemaphoreAcquire+0x94>
 8003d48:	4b0f      	ldr	r3, [pc, #60]	@ (8003d88 <osSemaphoreAcquire+0xa0>)
 8003d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	e010      	b.n	8003d7c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	6938      	ldr	r0, [r7, #16]
 8003d5e:	f000 fe07 	bl	8004970 <xQueueSemaphoreTake>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d009      	beq.n	8003d7c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003d6e:	f06f 0301 	mvn.w	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e002      	b.n	8003d7c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003d76:	f06f 0302 	mvn.w	r3, #2
 8003d7a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003d7c:	697b      	ldr	r3, [r7, #20]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003da2:	f06f 0303 	mvn.w	r3, #3
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e02c      	b.n	8003e04 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003daa:	f3ef 8305 	mrs	r3, IPSR
 8003dae:	60fb      	str	r3, [r7, #12]
  return(result);
 8003db0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01a      	beq.n	8003dec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003dba:	f107 0308 	add.w	r3, r7, #8
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6938      	ldr	r0, [r7, #16]
 8003dc2:	f000 fc63 	bl	800468c <xQueueGiveFromISR>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d003      	beq.n	8003dd4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003dcc:	f06f 0302 	mvn.w	r3, #2
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e017      	b.n	8003e04 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d014      	beq.n	8003e04 <osSemaphoreRelease+0x78>
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <osSemaphoreRelease+0x84>)
 8003ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	e00b      	b.n	8003e04 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003dec:	2300      	movs	r3, #0
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	6938      	ldr	r0, [r7, #16]
 8003df4:	f000 faaa 	bl	800434c <xQueueGenericSend>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d002      	beq.n	8003e04 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003dfe:	f06f 0302 	mvn.w	r3, #2
 8003e02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003e04:	697b      	ldr	r3, [r7, #20]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	e000ed04 	.word	0xe000ed04

08003e14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a07      	ldr	r2, [pc, #28]	@ (8003e40 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4a06      	ldr	r2, [pc, #24]	@ (8003e44 <vApplicationGetIdleTaskMemory+0x30>)
 8003e2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2280      	movs	r2, #128	@ 0x80
 8003e30:	601a      	str	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	2000017c 	.word	0x2000017c
 8003e44:	200001d8 	.word	0x200001d8

08003e48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a07      	ldr	r2, [pc, #28]	@ (8003e74 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4a06      	ldr	r2, [pc, #24]	@ (8003e78 <vApplicationGetTimerTaskMemory+0x30>)
 8003e5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e66:	601a      	str	r2, [r3, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	200003d8 	.word	0x200003d8
 8003e78:	20000434 	.word	0x20000434

08003e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f103 0208 	add.w	r2, r3, #8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f103 0208 	add.w	r2, r3, #8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f103 0208 	add.w	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f34:	d103      	bne.n	8003f3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e00c      	b.n	8003f58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3308      	adds	r3, #8
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e002      	b.n	8003f4c <vListInsert+0x2e>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d2f6      	bcs.n	8003f46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6892      	ldr	r2, [r2, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6852      	ldr	r2, [r2, #4]
 8003fb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d103      	bne.n	8003fc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	1e5a      	subs	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004010:	f002 fcaa 	bl	8006968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	68f9      	ldr	r1, [r7, #12]
 800401e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	441a      	add	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	3b01      	subs	r3, #1
 8004042:	68f9      	ldr	r1, [r7, #12]
 8004044:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	441a      	add	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	22ff      	movs	r2, #255	@ 0xff
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	22ff      	movs	r2, #255	@ 0xff
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d114      	bne.n	8004090 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01a      	beq.n	80040a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3310      	adds	r3, #16
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fc4c 	bl	8005910 <xTaskRemoveFromEventList>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d012      	beq.n	80040a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <xQueueGenericReset+0xd0>)
 8004080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	e009      	b.n	80040a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3310      	adds	r3, #16
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fef1 	bl	8003e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3324      	adds	r3, #36	@ 0x24
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff feec 	bl	8003e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040a4:	f002 fc92 	bl	80069cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040a8:	2301      	movs	r3, #1
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	@ 0x38
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	e7fd      	b.n	80040e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	e7fd      	b.n	80040fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <xQueueGenericCreateStatic+0x56>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <xQueueGenericCreateStatic+0x5a>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <xQueueGenericCreateStatic+0x5c>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	623b      	str	r3, [r7, #32]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <xQueueGenericCreateStatic+0x84>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <xQueueGenericCreateStatic+0x88>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <xQueueGenericCreateStatic+0x8a>
 8004140:	2300      	movs	r3, #0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	61fb      	str	r3, [r7, #28]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800415e:	2350      	movs	r3, #80	@ 0x50
 8004160:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b50      	cmp	r3, #80	@ 0x50
 8004166:	d00b      	beq.n	8004180 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	61bb      	str	r3, [r7, #24]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004180:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00d      	beq.n	80041a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004194:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f840 	bl	8004228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3730      	adds	r7, #48	@ 0x30
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b08a      	sub	sp, #40	@ 0x28
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	4613      	mov	r3, r2
 80041be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <xQueueGenericCreate+0x2c>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	613b      	str	r3, [r7, #16]
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	e7fd      	b.n	80041da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3350      	adds	r3, #80	@ 0x50
 80041ec:	4618      	mov	r0, r3
 80041ee:	f002 fcdd 	bl	8006bac <pvPortMalloc>
 80041f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d011      	beq.n	800421e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	3350      	adds	r3, #80	@ 0x50
 8004202:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800420c:	79fa      	ldrb	r2, [r7, #7]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f805 	bl	8004228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800421e:	69bb      	ldr	r3, [r7, #24]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e002      	b.n	800424a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004256:	2101      	movs	r1, #1
 8004258:	69b8      	ldr	r0, [r7, #24]
 800425a:	f7ff fec3 	bl	8003fe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800426e:	b580      	push	{r7, lr}
 8004270:	b08a      	sub	sp, #40	@ 0x28
 8004272:	af02      	add	r7, sp, #8
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	61bb      	str	r3, [r7, #24]
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	429a      	cmp	r2, r3
 800429e:	d90b      	bls.n	80042b8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	617b      	str	r3, [r7, #20]
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80042b8:	2302      	movs	r3, #2
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7ff fef8 	bl	80040b8 <xQueueGenericCreateStatic>
 80042c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80042d6:	69fb      	ldr	r3, [r7, #28]
	}
 80042d8:	4618      	mov	r0, r3
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	613b      	str	r3, [r7, #16]
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d90b      	bls.n	8004328 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004328:	2202      	movs	r2, #2
 800432a:	2100      	movs	r1, #0
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ff40 	bl	80041b2 <xQueueGenericCreate>
 8004332:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004340:	697b      	ldr	r3, [r7, #20]
	}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08e      	sub	sp, #56	@ 0x38
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800435a:	2300      	movs	r3, #0
 800435c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <xQueueGenericSend+0x34>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <xQueueGenericSend+0x42>
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <xQueueGenericSend+0x46>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <xQueueGenericSend+0x48>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <xQueueGenericSend+0x64>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	e7fd      	b.n	80043ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d103      	bne.n	80043be <xQueueGenericSend+0x72>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <xQueueGenericSend+0x76>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <xQueueGenericSend+0x78>
 80043c2:	2300      	movs	r3, #0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <xQueueGenericSend+0x94>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	623b      	str	r3, [r7, #32]
}
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	e7fd      	b.n	80043dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043e0:	f001 fc56 	bl	8005c90 <xTaskGetSchedulerState>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <xQueueGenericSend+0xa4>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <xQueueGenericSend+0xa8>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <xQueueGenericSend+0xaa>
 80043f4:	2300      	movs	r3, #0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <xQueueGenericSend+0xc6>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	61fb      	str	r3, [r7, #28]
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004412:	f002 faa9 	bl	8006968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <xQueueGenericSend+0xdc>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d129      	bne.n	800447c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800442e:	f000 fc6d 	bl	8004d0c <prvCopyDataToQueue>
 8004432:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d010      	beq.n	800445e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	3324      	adds	r3, #36	@ 0x24
 8004440:	4618      	mov	r0, r3
 8004442:	f001 fa65 	bl	8005910 <xTaskRemoveFromEventList>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800444c:	4b3f      	ldr	r3, [pc, #252]	@ (800454c <xQueueGenericSend+0x200>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	e00a      	b.n	8004474 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800445e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004464:	4b39      	ldr	r3, [pc, #228]	@ (800454c <xQueueGenericSend+0x200>)
 8004466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004474:	f002 faaa 	bl	80069cc <vPortExitCritical>
				return pdPASS;
 8004478:	2301      	movs	r3, #1
 800447a:	e063      	b.n	8004544 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004482:	f002 faa3 	bl	80069cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004486:	2300      	movs	r3, #0
 8004488:	e05c      	b.n	8004544 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800448a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	4618      	mov	r0, r3
 8004496:	f001 fa9f 	bl	80059d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800449a:	2301      	movs	r3, #1
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800449e:	f002 fa95 	bl	80069cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044a2:	f001 f80f 	bl	80054c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044a6:	f002 fa5f 	bl	8006968 <vPortEnterCritical>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044b0:	b25b      	sxtb	r3, r3
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044b6:	d103      	bne.n	80044c0 <xQueueGenericSend+0x174>
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044cc:	d103      	bne.n	80044d6 <xQueueGenericSend+0x18a>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044d6:	f002 fa79 	bl	80069cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044da:	1d3a      	adds	r2, r7, #4
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 fa8e 	bl	8005a04 <xTaskCheckForTimeOut>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d124      	bne.n	8004538 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044f0:	f000 fd04 	bl	8004efc <prvIsQueueFull>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	3310      	adds	r3, #16
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f001 f9b2 	bl	800586c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800450a:	f000 fc8f 	bl	8004e2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800450e:	f000 ffe7 	bl	80054e0 <xTaskResumeAll>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	f47f af7c 	bne.w	8004412 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800451a:	4b0c      	ldr	r3, [pc, #48]	@ (800454c <xQueueGenericSend+0x200>)
 800451c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	e772      	b.n	8004412 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800452c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800452e:	f000 fc7d 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004532:	f000 ffd5 	bl	80054e0 <xTaskResumeAll>
 8004536:	e76c      	b.n	8004412 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800453a:	f000 fc77 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800453e:	f000 ffcf 	bl	80054e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004544:	4618      	mov	r0, r3
 8004546:	3738      	adds	r7, #56	@ 0x38
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b090      	sub	sp, #64	@ 0x40
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800457a:	bf00      	nop
 800457c:	bf00      	nop
 800457e:	e7fd      	b.n	800457c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <xQueueGenericSendFromISR+0x3e>
 8004586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <xQueueGenericSendFromISR+0x42>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <xQueueGenericSendFromISR+0x44>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d103      	bne.n	80045be <xQueueGenericSendFromISR+0x6e>
 80045b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <xQueueGenericSendFromISR+0x72>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <xQueueGenericSendFromISR+0x74>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	623b      	str	r3, [r7, #32]
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045e0:	f002 faa2 	bl	8006b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045e4:	f3ef 8211 	mrs	r2, BASEPRI
 80045e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	61fa      	str	r2, [r7, #28]
 80045fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	429a      	cmp	r2, r3
 800460a:	d302      	bcc.n	8004612 <xQueueGenericSendFromISR+0xc2>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d12f      	bne.n	8004672 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004618:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004628:	f000 fb70 	bl	8004d0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800462c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004634:	d112      	bne.n	800465c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800463e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004640:	3324      	adds	r3, #36	@ 0x24
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f964 	bl	8005910 <xTaskRemoveFromEventList>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e007      	b.n	800466c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800465c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004660:	3301      	adds	r3, #1
 8004662:	b2db      	uxtb	r3, r3
 8004664:	b25a      	sxtb	r2, r3
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800466c:	2301      	movs	r3, #1
 800466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004670:	e001      	b.n	8004676 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004672:	2300      	movs	r3, #0
 8004674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004680:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004684:	4618      	mov	r0, r3
 8004686:	3740      	adds	r7, #64	@ 0x40
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08e      	sub	sp, #56	@ 0x38
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	623b      	str	r3, [r7, #32]
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	e7fd      	b.n	80046b4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	61fb      	str	r3, [r7, #28]
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d103      	bne.n	80046e8 <xQueueGiveFromISR+0x5c>
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <xQueueGiveFromISR+0x60>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <xQueueGiveFromISR+0x62>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <xQueueGiveFromISR+0x7e>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	61bb      	str	r3, [r7, #24]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800470a:	f002 fa0d 	bl	8006b28 <vPortValidateInterruptPriority>
	__asm volatile
 800470e:	f3ef 8211 	mrs	r2, BASEPRI
 8004712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	617a      	str	r2, [r7, #20]
 8004724:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004726:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004728:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004736:	429a      	cmp	r2, r3
 8004738:	d22b      	bcs.n	8004792 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800474c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004754:	d112      	bne.n	800477c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800475e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004760:	3324      	adds	r3, #36	@ 0x24
 8004762:	4618      	mov	r0, r3
 8004764:	f001 f8d4 	bl	8005910 <xTaskRemoveFromEventList>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00e      	beq.n	800478c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	e007      	b.n	800478c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800477c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004780:	3301      	adds	r3, #1
 8004782:	b2db      	uxtb	r3, r3
 8004784:	b25a      	sxtb	r2, r3
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800478c:	2301      	movs	r3, #1
 800478e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004790:	e001      	b.n	8004796 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004792:	2300      	movs	r3, #0
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f383 8811 	msr	BASEPRI, r3
}
 80047a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3738      	adds	r7, #56	@ 0x38
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08c      	sub	sp, #48	@ 0x30
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <xQueueReceive+0x32>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	623b      	str	r3, [r7, #32]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d103      	bne.n	80047ec <xQueueReceive+0x40>
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <xQueueReceive+0x44>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <xQueueReceive+0x46>
 80047f0:	2300      	movs	r3, #0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <xQueueReceive+0x62>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	61fb      	str	r3, [r7, #28]
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	e7fd      	b.n	800480a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800480e:	f001 fa3f 	bl	8005c90 <xTaskGetSchedulerState>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <xQueueReceive+0x72>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <xQueueReceive+0x76>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <xQueueReceive+0x78>
 8004822:	2300      	movs	r3, #0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10b      	bne.n	8004840 <xQueueReceive+0x94>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	61bb      	str	r3, [r7, #24]
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	e7fd      	b.n	800483c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004840:	f002 f892 	bl	8006968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01f      	beq.n	8004890 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004854:	f000 fac4 	bl	8004de0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	1e5a      	subs	r2, r3, #1
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00f      	beq.n	8004888 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	3310      	adds	r3, #16
 800486c:	4618      	mov	r0, r3
 800486e:	f001 f84f 	bl	8005910 <xTaskRemoveFromEventList>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004878:	4b3c      	ldr	r3, [pc, #240]	@ (800496c <xQueueReceive+0x1c0>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004888:	f002 f8a0 	bl	80069cc <vPortExitCritical>
				return pdPASS;
 800488c:	2301      	movs	r3, #1
 800488e:	e069      	b.n	8004964 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004896:	f002 f899 	bl	80069cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800489a:	2300      	movs	r3, #0
 800489c:	e062      	b.n	8004964 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048a4:	f107 0310 	add.w	r3, r7, #16
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 f895 	bl	80059d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ae:	2301      	movs	r3, #1
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048b2:	f002 f88b 	bl	80069cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048b6:	f000 fe05 	bl	80054c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ba:	f002 f855 	bl	8006968 <vPortEnterCritical>
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048ca:	d103      	bne.n	80048d4 <xQueueReceive+0x128>
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e0:	d103      	bne.n	80048ea <xQueueReceive+0x13e>
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048ea:	f002 f86f 	bl	80069cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ee:	1d3a      	adds	r2, r7, #4
 80048f0:	f107 0310 	add.w	r3, r7, #16
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f884 	bl	8005a04 <xTaskCheckForTimeOut>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d123      	bne.n	800494a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004904:	f000 fae4 	bl	8004ed0 <prvIsQueueEmpty>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d017      	beq.n	800493e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800490e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004910:	3324      	adds	r3, #36	@ 0x24
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 ffa8 	bl	800586c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800491c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800491e:	f000 fa85 	bl	8004e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004922:	f000 fddd 	bl	80054e0 <xTaskResumeAll>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d189      	bne.n	8004840 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800492c:	4b0f      	ldr	r3, [pc, #60]	@ (800496c <xQueueReceive+0x1c0>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	e780      	b.n	8004840 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800493e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004940:	f000 fa74 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004944:	f000 fdcc 	bl	80054e0 <xTaskResumeAll>
 8004948:	e77a      	b.n	8004840 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800494a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800494c:	f000 fa6e 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004950:	f000 fdc6 	bl	80054e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004956:	f000 fabb 	bl	8004ed0 <prvIsQueueEmpty>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	f43f af6f 	beq.w	8004840 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004964:	4618      	mov	r0, r3
 8004966:	3730      	adds	r7, #48	@ 0x30
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	@ 0x38
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004982:	2300      	movs	r3, #0
 8004984:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	623b      	str	r3, [r7, #32]
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	e7fd      	b.n	80049a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	61fb      	str	r3, [r7, #28]
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c4:	f001 f964 	bl	8005c90 <xTaskGetSchedulerState>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <xQueueSemaphoreTake+0x64>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <xQueueSemaphoreTake+0x68>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <xQueueSemaphoreTake+0x6a>
 80049d8:	2300      	movs	r3, #0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	61bb      	str	r3, [r7, #24]
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	e7fd      	b.n	80049f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049f6:	f001 ffb7 	bl	8006968 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d024      	beq.n	8004a50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a08:	1e5a      	subs	r2, r3, #1
 8004a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004a16:	f001 fab5 	bl	8005f84 <pvTaskIncrementMutexHeldCount>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00f      	beq.n	8004a48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 ff6f 	bl	8005910 <xTaskRemoveFromEventList>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a38:	4b54      	ldr	r3, [pc, #336]	@ (8004b8c <xQueueSemaphoreTake+0x21c>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a48:	f001 ffc0 	bl	80069cc <vPortExitCritical>
				return pdPASS;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e098      	b.n	8004b82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d112      	bne.n	8004a7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	617b      	str	r3, [r7, #20]
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a74:	f001 ffaa 	bl	80069cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e082      	b.n	8004b82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a82:	f107 030c 	add.w	r3, r7, #12
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 ffa6 	bl	80059d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a90:	f001 ff9c 	bl	80069cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a94:	f000 fd16 	bl	80054c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a98:	f001 ff66 	bl	8006968 <vPortEnterCritical>
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aa8:	d103      	bne.n	8004ab2 <xQueueSemaphoreTake+0x142>
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004abe:	d103      	bne.n	8004ac8 <xQueueSemaphoreTake+0x158>
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ac8:	f001 ff80 	bl	80069cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004acc:	463a      	mov	r2, r7
 8004ace:	f107 030c 	add.w	r3, r7, #12
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 ff95 	bl	8005a04 <xTaskCheckForTimeOut>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d132      	bne.n	8004b46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ae0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ae2:	f000 f9f5 	bl	8004ed0 <prvIsQueueEmpty>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d026      	beq.n	8004b3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004af4:	f001 ff38 	bl	8006968 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 f8e5 	bl	8005ccc <xTaskPriorityInherit>
 8004b02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004b04:	f001 ff62 	bl	80069cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	3324      	adds	r3, #36	@ 0x24
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 feab 	bl	800586c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b18:	f000 f988 	bl	8004e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b1c:	f000 fce0 	bl	80054e0 <xTaskResumeAll>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f47f af67 	bne.w	80049f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004b28:	4b18      	ldr	r3, [pc, #96]	@ (8004b8c <xQueueSemaphoreTake+0x21c>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	e75d      	b.n	80049f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b3c:	f000 f976 	bl	8004e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b40:	f000 fcce 	bl	80054e0 <xTaskResumeAll>
 8004b44:	e757      	b.n	80049f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b48:	f000 f970 	bl	8004e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b4c:	f000 fcc8 	bl	80054e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b52:	f000 f9bd 	bl	8004ed0 <prvIsQueueEmpty>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f43f af4c 	beq.w	80049f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004b64:	f001 ff00 	bl	8006968 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b6a:	f000 f8b7 	bl	8004cdc <prvGetDisinheritPriorityAfterTimeout>
 8004b6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 f980 	bl	8005e7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b7c:	f001 ff26 	bl	80069cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3738      	adds	r7, #56	@ 0x38
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08e      	sub	sp, #56	@ 0x38
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	623b      	str	r3, [r7, #32]
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	e7fd      	b.n	8004bba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <xQueueReceiveFromISR+0x3c>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <xQueueReceiveFromISR+0x40>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <xQueueReceiveFromISR+0x42>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	61fb      	str	r3, [r7, #28]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bee:	f001 ff9b 	bl	8006b28 <vPortValidateInterruptPriority>
	__asm volatile
 8004bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8004bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	61ba      	str	r2, [r7, #24]
 8004c08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d02f      	beq.n	8004c7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c28:	f000 f8da 	bl	8004de0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	1e5a      	subs	r2, r3, #1
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c3c:	d112      	bne.n	8004c64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	3310      	adds	r3, #16
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fe60 	bl	8005910 <xTaskRemoveFromEventList>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00e      	beq.n	8004c74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e007      	b.n	8004c74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c68:	3301      	adds	r3, #1
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	b25a      	sxtb	r2, r3
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004c74:	2301      	movs	r3, #1
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c78:	e001      	b.n	8004c7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f383 8811 	msr	BASEPRI, r3
}
 8004c88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3738      	adds	r7, #56	@ 0x38
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <vQueueDelete+0x2a>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	60bb      	str	r3, [r7, #8]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f95e 	bl	8004f80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f002 f83a 	bl	8006d48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d006      	beq.n	8004cfa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e001      	b.n	8004cfe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
	}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d14d      	bne.n	8004dce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 f830 	bl	8005d9c <xTaskPriorityDisinherit>
 8004d3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	e043      	b.n	8004dce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d119      	bne.n	8004d80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6858      	ldr	r0, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	461a      	mov	r2, r3
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	f002 fb89 	bl	800746e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d32b      	bcc.n	8004dce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	e026      	b.n	8004dce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68d8      	ldr	r0, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	f002 fb6f 	bl	800746e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	425b      	negs	r3, r3
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d207      	bcs.n	8004dbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	425b      	negs	r3, r3
 8004db6:	441a      	add	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d105      	bne.n	8004dce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004dd6:	697b      	ldr	r3, [r7, #20]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	441a      	add	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d303      	bcc.n	8004e14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68d9      	ldr	r1, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f002 fb25 	bl	800746e <memcpy>
	}
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e34:	f001 fd98 	bl	8006968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e40:	e011      	b.n	8004e66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d012      	beq.n	8004e70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	@ 0x24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fd5e 	bl	8005910 <xTaskRemoveFromEventList>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e5a:	f000 fe37 	bl	8005acc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dce9      	bgt.n	8004e42 <prvUnlockQueue+0x16>
 8004e6e:	e000      	b.n	8004e72 <prvUnlockQueue+0x46>
					break;
 8004e70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	22ff      	movs	r2, #255	@ 0xff
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e7a:	f001 fda7 	bl	80069cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e7e:	f001 fd73 	bl	8006968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e8a:	e011      	b.n	8004eb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d012      	beq.n	8004eba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3310      	adds	r3, #16
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fd39 	bl	8005910 <xTaskRemoveFromEventList>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ea4:	f000 fe12 	bl	8005acc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ea8:	7bbb      	ldrb	r3, [r7, #14]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dce9      	bgt.n	8004e8c <prvUnlockQueue+0x60>
 8004eb8:	e000      	b.n	8004ebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004eba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	22ff      	movs	r2, #255	@ 0xff
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004ec4:	f001 fd82 	bl	80069cc <vPortExitCritical>
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ed8:	f001 fd46 	bl	8006968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e001      	b.n	8004eee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eee:	f001 fd6d 	bl	80069cc <vPortExitCritical>

	return xReturn;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f04:	f001 fd30 	bl	8006968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d102      	bne.n	8004f1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f14:	2301      	movs	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e001      	b.n	8004f1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f1e:	f001 fd55 	bl	80069cc <vPortExitCritical>

	return xReturn;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e014      	b.n	8004f66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004f7c <vQueueAddToRegistry+0x50>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f48:	490c      	ldr	r1, [pc, #48]	@ (8004f7c <vQueueAddToRegistry+0x50>)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f52:	4a0a      	ldr	r2, [pc, #40]	@ (8004f7c <vQueueAddToRegistry+0x50>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f5e:	e006      	b.n	8004f6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b07      	cmp	r3, #7
 8004f6a:	d9e7      	bls.n	8004f3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000834 	.word	0x20000834

08004f80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e016      	b.n	8004fbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004f8e:	4a10      	ldr	r2, [pc, #64]	@ (8004fd0 <vQueueUnregisterQueue+0x50>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4413      	add	r3, r2
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d10b      	bne.n	8004fb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fd0 <vQueueUnregisterQueue+0x50>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004fa8:	4a09      	ldr	r2, [pc, #36]	@ (8004fd0 <vQueueUnregisterQueue+0x50>)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
				break;
 8004fb4:	e006      	b.n	8004fc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b07      	cmp	r3, #7
 8004fc0:	d9e5      	bls.n	8004f8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	20000834 	.word	0x20000834

08004fd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fe4:	f001 fcc0 	bl	8006968 <vPortEnterCritical>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ff4:	d103      	bne.n	8004ffe <vQueueWaitForMessageRestricted+0x2a>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005004:	b25b      	sxtb	r3, r3
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800500a:	d103      	bne.n	8005014 <vQueueWaitForMessageRestricted+0x40>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005014:	f001 fcda 	bl	80069cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3324      	adds	r3, #36	@ 0x24
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fc45 	bl	80058b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800502e:	6978      	ldr	r0, [r7, #20]
 8005030:	f7ff fefc 	bl	8004e2c <prvUnlockQueue>
	}
 8005034:	bf00      	nop
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	@ 0x38
 8005040:	af04      	add	r7, sp, #16
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800504a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	623b      	str	r3, [r7, #32]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <xTaskCreateStatic+0x4a>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	61fb      	str	r3, [r7, #28]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005086:	235c      	movs	r3, #92	@ 0x5c
 8005088:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b5c      	cmp	r3, #92	@ 0x5c
 800508e:	d00b      	beq.n	80050a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	61bb      	str	r3, [r7, #24]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01e      	beq.n	80050ee <xTaskCreateStatic+0xb2>
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01b      	beq.n	80050ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050c8:	2300      	movs	r3, #0
 80050ca:	9303      	str	r3, [sp, #12]
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	9302      	str	r3, [sp, #8]
 80050d0:	f107 0314 	add.w	r3, r7, #20
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f850 	bl	8005186 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050e8:	f000 f8de 	bl	80052a8 <prvAddNewTaskToReadyList>
 80050ec:	e001      	b.n	80050f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050f2:	697b      	ldr	r3, [r7, #20]
	}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3728      	adds	r7, #40	@ 0x28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	@ 0x30
 8005100:	af04      	add	r7, sp, #16
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f001 fd4b 	bl	8006bac <pvPortMalloc>
 8005116:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00e      	beq.n	800513c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800511e:	205c      	movs	r0, #92	@ 0x5c
 8005120:	f001 fd44 	bl	8006bac <pvPortMalloc>
 8005124:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	631a      	str	r2, [r3, #48]	@ 0x30
 8005132:	e005      	b.n	8005140 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005134:	6978      	ldr	r0, [r7, #20]
 8005136:	f001 fe07 	bl	8006d48 <vPortFree>
 800513a:	e001      	b.n	8005140 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d017      	beq.n	8005176 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	2300      	movs	r3, #0
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	9302      	str	r3, [sp, #8]
 8005158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f80e 	bl	8005186 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800516a:	69f8      	ldr	r0, [r7, #28]
 800516c:	f000 f89c 	bl	80052a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005170:	2301      	movs	r3, #1
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e002      	b.n	800517c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800517a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800517c:	69bb      	ldr	r3, [r7, #24]
	}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b088      	sub	sp, #32
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	461a      	mov	r2, r3
 800519e:	21a5      	movs	r1, #165	@ 0xa5
 80051a0:	f002 f8ea 	bl	8007378 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051ae:	3b01      	subs	r3, #1
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f023 0307 	bic.w	r3, r3, #7
 80051bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	617b      	str	r3, [r7, #20]
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01f      	beq.n	8005226 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	e012      	b.n	8005212 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	7819      	ldrb	r1, [r3, #0]
 80051f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	3334      	adds	r3, #52	@ 0x34
 80051fc:	460a      	mov	r2, r1
 80051fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3301      	adds	r3, #1
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b0f      	cmp	r3, #15
 8005216:	d9e9      	bls.n	80051ec <prvInitialiseNewTask+0x66>
 8005218:	e000      	b.n	800521c <prvInitialiseNewTask+0x96>
			{
				break;
 800521a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800521c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005224:	e003      	b.n	800522e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	2b37      	cmp	r3, #55	@ 0x37
 8005232:	d901      	bls.n	8005238 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005234:	2337      	movs	r3, #55	@ 0x37
 8005236:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800523c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005242:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	2200      	movs	r2, #0
 8005248:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	3304      	adds	r3, #4
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fe34 	bl	8003ebc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005256:	3318      	adds	r3, #24
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fe2f 	bl	8003ebc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800526a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005272:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	2200      	movs	r2, #0
 8005278:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	69b8      	ldr	r0, [r7, #24]
 8005288:	f001 fa3e 	bl	8006708 <pxPortInitialiseStack>
 800528c:	4602      	mov	r2, r0
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800529e:	bf00      	nop
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052b0:	f001 fb5a 	bl	8006968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052b4:	4b2d      	ldr	r3, [pc, #180]	@ (800536c <prvAddNewTaskToReadyList+0xc4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	4a2c      	ldr	r2, [pc, #176]	@ (800536c <prvAddNewTaskToReadyList+0xc4>)
 80052bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052be:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <prvAddNewTaskToReadyList+0xc8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005370 <prvAddNewTaskToReadyList+0xc8>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052cc:	4b27      	ldr	r3, [pc, #156]	@ (800536c <prvAddNewTaskToReadyList+0xc4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d110      	bne.n	80052f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052d4:	f000 fc1e 	bl	8005b14 <prvInitialiseTaskLists>
 80052d8:	e00d      	b.n	80052f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052da:	4b26      	ldr	r3, [pc, #152]	@ (8005374 <prvAddNewTaskToReadyList+0xcc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052e2:	4b23      	ldr	r3, [pc, #140]	@ (8005370 <prvAddNewTaskToReadyList+0xc8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d802      	bhi.n	80052f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005370 <prvAddNewTaskToReadyList+0xc8>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052f6:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <prvAddNewTaskToReadyList+0xd0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3301      	adds	r3, #1
 80052fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005378 <prvAddNewTaskToReadyList+0xd0>)
 80052fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005300:	4b1d      	ldr	r3, [pc, #116]	@ (8005378 <prvAddNewTaskToReadyList+0xd0>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530c:	4b1b      	ldr	r3, [pc, #108]	@ (800537c <prvAddNewTaskToReadyList+0xd4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d903      	bls.n	800531c <prvAddNewTaskToReadyList+0x74>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	4a18      	ldr	r2, [pc, #96]	@ (800537c <prvAddNewTaskToReadyList+0xd4>)
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4a15      	ldr	r2, [pc, #84]	@ (8005380 <prvAddNewTaskToReadyList+0xd8>)
 800532a:	441a      	add	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f7fe fdcf 	bl	8003ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005338:	f001 fb48 	bl	80069cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800533c:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <prvAddNewTaskToReadyList+0xcc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00e      	beq.n	8005362 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <prvAddNewTaskToReadyList+0xc8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	429a      	cmp	r2, r3
 8005350:	d207      	bcs.n	8005362 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005352:	4b0c      	ldr	r3, [pc, #48]	@ (8005384 <prvAddNewTaskToReadyList+0xdc>)
 8005354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000d48 	.word	0x20000d48
 8005370:	20000874 	.word	0x20000874
 8005374:	20000d54 	.word	0x20000d54
 8005378:	20000d64 	.word	0x20000d64
 800537c:	20000d50 	.word	0x20000d50
 8005380:	20000878 	.word	0x20000878
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d018      	beq.n	80053cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800539a:	4b14      	ldr	r3, [pc, #80]	@ (80053ec <vTaskDelay+0x64>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <vTaskDelay+0x32>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60bb      	str	r3, [r7, #8]
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	e7fd      	b.n	80053b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053ba:	f000 f883 	bl	80054c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053be:	2100      	movs	r1, #0
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fdf3 	bl	8005fac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053c6:	f000 f88b 	bl	80054e0 <xTaskResumeAll>
 80053ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d107      	bne.n	80053e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80053d2:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <vTaskDelay+0x68>)
 80053d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000d70 	.word	0x20000d70
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	@ 0x28
 80053f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005402:	463a      	mov	r2, r7
 8005404:	1d39      	adds	r1, r7, #4
 8005406:	f107 0308 	add.w	r3, r7, #8
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fd02 	bl	8003e14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	9202      	str	r2, [sp, #8]
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	2300      	movs	r3, #0
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2300      	movs	r3, #0
 8005420:	460a      	mov	r2, r1
 8005422:	4922      	ldr	r1, [pc, #136]	@ (80054ac <vTaskStartScheduler+0xb8>)
 8005424:	4822      	ldr	r0, [pc, #136]	@ (80054b0 <vTaskStartScheduler+0xbc>)
 8005426:	f7ff fe09 	bl	800503c <xTaskCreateStatic>
 800542a:	4603      	mov	r3, r0
 800542c:	4a21      	ldr	r2, [pc, #132]	@ (80054b4 <vTaskStartScheduler+0xc0>)
 800542e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005430:	4b20      	ldr	r3, [pc, #128]	@ (80054b4 <vTaskStartScheduler+0xc0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e001      	b.n	8005442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d102      	bne.n	800544e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005448:	f000 fe04 	bl	8006054 <xTimerCreateTimerTask>
 800544c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d116      	bne.n	8005482 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	613b      	str	r3, [r7, #16]
}
 8005466:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005468:	4b13      	ldr	r3, [pc, #76]	@ (80054b8 <vTaskStartScheduler+0xc4>)
 800546a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800546e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005470:	4b12      	ldr	r3, [pc, #72]	@ (80054bc <vTaskStartScheduler+0xc8>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005476:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <vTaskStartScheduler+0xcc>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800547c:	f001 f9d0 	bl	8006820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005480:	e00f      	b.n	80054a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005488:	d10b      	bne.n	80054a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60fb      	str	r3, [r7, #12]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <vTaskStartScheduler+0xaa>
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	080079c0 	.word	0x080079c0
 80054b0:	08005ae5 	.word	0x08005ae5
 80054b4:	20000d6c 	.word	0x20000d6c
 80054b8:	20000d68 	.word	0x20000d68
 80054bc:	20000d54 	.word	0x20000d54
 80054c0:	20000d4c 	.word	0x20000d4c

080054c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054c8:	4b04      	ldr	r3, [pc, #16]	@ (80054dc <vTaskSuspendAll+0x18>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a03      	ldr	r2, [pc, #12]	@ (80054dc <vTaskSuspendAll+0x18>)
 80054d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000d70 	.word	0x20000d70

080054e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ee:	4b42      	ldr	r3, [pc, #264]	@ (80055f8 <xTaskResumeAll+0x118>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <xTaskResumeAll+0x2e>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	603b      	str	r3, [r7, #0]
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	e7fd      	b.n	800550a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800550e:	f001 fa2b 	bl	8006968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005512:	4b39      	ldr	r3, [pc, #228]	@ (80055f8 <xTaskResumeAll+0x118>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3b01      	subs	r3, #1
 8005518:	4a37      	ldr	r2, [pc, #220]	@ (80055f8 <xTaskResumeAll+0x118>)
 800551a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551c:	4b36      	ldr	r3, [pc, #216]	@ (80055f8 <xTaskResumeAll+0x118>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d162      	bne.n	80055ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005524:	4b35      	ldr	r3, [pc, #212]	@ (80055fc <xTaskResumeAll+0x11c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d05e      	beq.n	80055ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800552c:	e02f      	b.n	800558e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552e:	4b34      	ldr	r3, [pc, #208]	@ (8005600 <xTaskResumeAll+0x120>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3318      	adds	r3, #24
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fd28 	bl	8003f90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3304      	adds	r3, #4
 8005544:	4618      	mov	r0, r3
 8005546:	f7fe fd23 	bl	8003f90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554e:	4b2d      	ldr	r3, [pc, #180]	@ (8005604 <xTaskResumeAll+0x124>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d903      	bls.n	800555e <xTaskResumeAll+0x7e>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	4a2a      	ldr	r2, [pc, #168]	@ (8005604 <xTaskResumeAll+0x124>)
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4a27      	ldr	r2, [pc, #156]	@ (8005608 <xTaskResumeAll+0x128>)
 800556c:	441a      	add	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3304      	adds	r3, #4
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f7fe fcae 	bl	8003ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557e:	4b23      	ldr	r3, [pc, #140]	@ (800560c <xTaskResumeAll+0x12c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	429a      	cmp	r2, r3
 8005586:	d302      	bcc.n	800558e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005588:	4b21      	ldr	r3, [pc, #132]	@ (8005610 <xTaskResumeAll+0x130>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800558e:	4b1c      	ldr	r3, [pc, #112]	@ (8005600 <xTaskResumeAll+0x120>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1cb      	bne.n	800552e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800559c:	f000 fb58 	bl	8005c50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005614 <xTaskResumeAll+0x134>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d010      	beq.n	80055ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055ac:	f000 f846 	bl	800563c <xTaskIncrementTick>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055b6:	4b16      	ldr	r3, [pc, #88]	@ (8005610 <xTaskResumeAll+0x130>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3b01      	subs	r3, #1
 80055c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f1      	bne.n	80055ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80055c8:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <xTaskResumeAll+0x134>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055ce:	4b10      	ldr	r3, [pc, #64]	@ (8005610 <xTaskResumeAll+0x130>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055d6:	2301      	movs	r3, #1
 80055d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055da:	4b0f      	ldr	r3, [pc, #60]	@ (8005618 <xTaskResumeAll+0x138>)
 80055dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055ea:	f001 f9ef 	bl	80069cc <vPortExitCritical>

	return xAlreadyYielded;
 80055ee:	68bb      	ldr	r3, [r7, #8]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000d70 	.word	0x20000d70
 80055fc:	20000d48 	.word	0x20000d48
 8005600:	20000d08 	.word	0x20000d08
 8005604:	20000d50 	.word	0x20000d50
 8005608:	20000878 	.word	0x20000878
 800560c:	20000874 	.word	0x20000874
 8005610:	20000d5c 	.word	0x20000d5c
 8005614:	20000d58 	.word	0x20000d58
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005622:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <xTaskGetTickCount+0x1c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005628:	687b      	ldr	r3, [r7, #4]
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000d4c 	.word	0x20000d4c

0800563c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005646:	4b4f      	ldr	r3, [pc, #316]	@ (8005784 <xTaskIncrementTick+0x148>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 8090 	bne.w	8005770 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005650:	4b4d      	ldr	r3, [pc, #308]	@ (8005788 <xTaskIncrementTick+0x14c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005658:	4a4b      	ldr	r2, [pc, #300]	@ (8005788 <xTaskIncrementTick+0x14c>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d121      	bne.n	80056a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005664:	4b49      	ldr	r3, [pc, #292]	@ (800578c <xTaskIncrementTick+0x150>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <xTaskIncrementTick+0x4a>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <xTaskIncrementTick+0x46>
 8005686:	4b41      	ldr	r3, [pc, #260]	@ (800578c <xTaskIncrementTick+0x150>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	4b40      	ldr	r3, [pc, #256]	@ (8005790 <xTaskIncrementTick+0x154>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a3e      	ldr	r2, [pc, #248]	@ (800578c <xTaskIncrementTick+0x150>)
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4a3e      	ldr	r2, [pc, #248]	@ (8005790 <xTaskIncrementTick+0x154>)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	4b3e      	ldr	r3, [pc, #248]	@ (8005794 <xTaskIncrementTick+0x158>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3301      	adds	r3, #1
 80056a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005794 <xTaskIncrementTick+0x158>)
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	f000 fad4 	bl	8005c50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005798 <xTaskIncrementTick+0x15c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d349      	bcc.n	8005746 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b2:	4b36      	ldr	r3, [pc, #216]	@ (800578c <xTaskIncrementTick+0x150>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056bc:	4b36      	ldr	r3, [pc, #216]	@ (8005798 <xTaskIncrementTick+0x15c>)
 80056be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056c2:	601a      	str	r2, [r3, #0]
					break;
 80056c4:	e03f      	b.n	8005746 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c6:	4b31      	ldr	r3, [pc, #196]	@ (800578c <xTaskIncrementTick+0x150>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d203      	bcs.n	80056e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056de:	4a2e      	ldr	r2, [pc, #184]	@ (8005798 <xTaskIncrementTick+0x15c>)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056e4:	e02f      	b.n	8005746 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fc50 	bl	8003f90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	3318      	adds	r3, #24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe fc47 	bl	8003f90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	4b25      	ldr	r3, [pc, #148]	@ (800579c <xTaskIncrementTick+0x160>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d903      	bls.n	8005716 <xTaskIncrementTick+0xda>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	4a22      	ldr	r2, [pc, #136]	@ (800579c <xTaskIncrementTick+0x160>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4a1f      	ldr	r2, [pc, #124]	@ (80057a0 <xTaskIncrementTick+0x164>)
 8005724:	441a      	add	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3304      	adds	r3, #4
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f7fe fbd2 	bl	8003ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005736:	4b1b      	ldr	r3, [pc, #108]	@ (80057a4 <xTaskIncrementTick+0x168>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	429a      	cmp	r2, r3
 800573e:	d3b8      	bcc.n	80056b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005744:	e7b5      	b.n	80056b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005746:	4b17      	ldr	r3, [pc, #92]	@ (80057a4 <xTaskIncrementTick+0x168>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574c:	4914      	ldr	r1, [pc, #80]	@ (80057a0 <xTaskIncrementTick+0x164>)
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d901      	bls.n	8005762 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800575e:	2301      	movs	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005762:	4b11      	ldr	r3, [pc, #68]	@ (80057a8 <xTaskIncrementTick+0x16c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800576a:	2301      	movs	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e004      	b.n	800577a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005770:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <xTaskIncrementTick+0x170>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	4a0d      	ldr	r2, [pc, #52]	@ (80057ac <xTaskIncrementTick+0x170>)
 8005778:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000d70 	.word	0x20000d70
 8005788:	20000d4c 	.word	0x20000d4c
 800578c:	20000d00 	.word	0x20000d00
 8005790:	20000d04 	.word	0x20000d04
 8005794:	20000d60 	.word	0x20000d60
 8005798:	20000d68 	.word	0x20000d68
 800579c:	20000d50 	.word	0x20000d50
 80057a0:	20000878 	.word	0x20000878
 80057a4:	20000874 	.word	0x20000874
 80057a8:	20000d5c 	.word	0x20000d5c
 80057ac:	20000d58 	.word	0x20000d58

080057b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057b6:	4b28      	ldr	r3, [pc, #160]	@ (8005858 <vTaskSwitchContext+0xa8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057be:	4b27      	ldr	r3, [pc, #156]	@ (800585c <vTaskSwitchContext+0xac>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057c4:	e042      	b.n	800584c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80057c6:	4b25      	ldr	r3, [pc, #148]	@ (800585c <vTaskSwitchContext+0xac>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057cc:	4b24      	ldr	r3, [pc, #144]	@ (8005860 <vTaskSwitchContext+0xb0>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e011      	b.n	80057f8 <vTaskSwitchContext+0x48>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	607b      	str	r3, [r7, #4]
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <vTaskSwitchContext+0x3e>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	491a      	ldr	r1, [pc, #104]	@ (8005864 <vTaskSwitchContext+0xb4>)
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0e3      	beq.n	80057d4 <vTaskSwitchContext+0x24>
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4a13      	ldr	r2, [pc, #76]	@ (8005864 <vTaskSwitchContext+0xb4>)
 8005818:	4413      	add	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3308      	adds	r3, #8
 800582e:	429a      	cmp	r2, r3
 8005830:	d104      	bne.n	800583c <vTaskSwitchContext+0x8c>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4a09      	ldr	r2, [pc, #36]	@ (8005868 <vTaskSwitchContext+0xb8>)
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4a06      	ldr	r2, [pc, #24]	@ (8005860 <vTaskSwitchContext+0xb0>)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	20000d70 	.word	0x20000d70
 800585c:	20000d5c 	.word	0x20000d5c
 8005860:	20000d50 	.word	0x20000d50
 8005864:	20000878 	.word	0x20000878
 8005868:	20000874 	.word	0x20000874

0800586c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60fb      	str	r3, [r7, #12]
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005894:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <vTaskPlaceOnEventList+0x48>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3318      	adds	r3, #24
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7fe fb3e 	bl	8003f1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058a2:	2101      	movs	r1, #1
 80058a4:	6838      	ldr	r0, [r7, #0]
 80058a6:	f000 fb81 	bl	8005fac <prvAddCurrentTaskToDelayedList>
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000874 	.word	0x20000874

080058b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	617b      	str	r3, [r7, #20]
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	e7fd      	b.n	80058de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <vTaskPlaceOnEventListRestricted+0x54>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3318      	adds	r3, #24
 80058e8:	4619      	mov	r1, r3
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7fe faf3 	bl	8003ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	68b8      	ldr	r0, [r7, #8]
 8005900:	f000 fb54 	bl	8005fac <prvAddCurrentTaskToDelayedList>
	}
 8005904:	bf00      	nop
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000874 	.word	0x20000874

08005910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60fb      	str	r3, [r7, #12]
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	e7fd      	b.n	800593a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3318      	adds	r3, #24
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe fb24 	bl	8003f90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005948:	4b1d      	ldr	r3, [pc, #116]	@ (80059c0 <xTaskRemoveFromEventList+0xb0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d11d      	bne.n	800598c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fb1b 	bl	8003f90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595e:	4b19      	ldr	r3, [pc, #100]	@ (80059c4 <xTaskRemoveFromEventList+0xb4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d903      	bls.n	800596e <xTaskRemoveFromEventList+0x5e>
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	4a16      	ldr	r2, [pc, #88]	@ (80059c4 <xTaskRemoveFromEventList+0xb4>)
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4a13      	ldr	r2, [pc, #76]	@ (80059c8 <xTaskRemoveFromEventList+0xb8>)
 800597c:	441a      	add	r2, r3
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fe faa6 	bl	8003ed6 <vListInsertEnd>
 800598a:	e005      	b.n	8005998 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	3318      	adds	r3, #24
 8005990:	4619      	mov	r1, r3
 8005992:	480e      	ldr	r0, [pc, #56]	@ (80059cc <xTaskRemoveFromEventList+0xbc>)
 8005994:	f7fe fa9f 	bl	8003ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599c:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <xTaskRemoveFromEventList+0xc0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d905      	bls.n	80059b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059a6:	2301      	movs	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059aa:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <xTaskRemoveFromEventList+0xc4>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e001      	b.n	80059b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059b6:	697b      	ldr	r3, [r7, #20]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000d70 	.word	0x20000d70
 80059c4:	20000d50 	.word	0x20000d50
 80059c8:	20000878 	.word	0x20000878
 80059cc:	20000d08 	.word	0x20000d08
 80059d0:	20000874 	.word	0x20000874
 80059d4:	20000d5c 	.word	0x20000d5c

080059d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059e0:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <vTaskInternalSetTimeOutState+0x24>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059e8:	4b05      	ldr	r3, [pc, #20]	@ (8005a00 <vTaskInternalSetTimeOutState+0x28>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	605a      	str	r2, [r3, #4]
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	20000d60 	.word	0x20000d60
 8005a00:	20000d4c 	.word	0x20000d4c

08005a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10b      	bne.n	8005a2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	613b      	str	r3, [r7, #16]
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	e7fd      	b.n	8005a28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	60fb      	str	r3, [r7, #12]
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	e7fd      	b.n	8005a46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a4a:	f000 ff8d 	bl	8006968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac4 <xTaskCheckForTimeOut+0xc0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a66:	d102      	bne.n	8005a6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e023      	b.n	8005ab6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b15      	ldr	r3, [pc, #84]	@ (8005ac8 <xTaskCheckForTimeOut+0xc4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d007      	beq.n	8005a8a <xTaskCheckForTimeOut+0x86>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e015      	b.n	8005ab6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d20b      	bcs.n	8005aac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1ad2      	subs	r2, r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff ff99 	bl	80059d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	e004      	b.n	8005ab6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ab6:	f000 ff89 	bl	80069cc <vPortExitCritical>

	return xReturn;
 8005aba:	69fb      	ldr	r3, [r7, #28]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000d4c 	.word	0x20000d4c
 8005ac8:	20000d60 	.word	0x20000d60

08005acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ad0:	4b03      	ldr	r3, [pc, #12]	@ (8005ae0 <vTaskMissedYield+0x14>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000d5c 	.word	0x20000d5c

08005ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005aec:	f000 f852 	bl	8005b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <prvIdleTask+0x28>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d9f9      	bls.n	8005aec <prvIdleTask+0x8>
			{
				taskYIELD();
 8005af8:	4b05      	ldr	r3, [pc, #20]	@ (8005b10 <prvIdleTask+0x2c>)
 8005afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b08:	e7f0      	b.n	8005aec <prvIdleTask+0x8>
 8005b0a:	bf00      	nop
 8005b0c:	20000878 	.word	0x20000878
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	e00c      	b.n	8005b3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4a12      	ldr	r2, [pc, #72]	@ (8005b74 <prvInitialiseTaskLists+0x60>)
 8005b2c:	4413      	add	r3, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe f9a4 	bl	8003e7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3301      	adds	r3, #1
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b37      	cmp	r3, #55	@ 0x37
 8005b3e:	d9ef      	bls.n	8005b20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b40:	480d      	ldr	r0, [pc, #52]	@ (8005b78 <prvInitialiseTaskLists+0x64>)
 8005b42:	f7fe f99b 	bl	8003e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b46:	480d      	ldr	r0, [pc, #52]	@ (8005b7c <prvInitialiseTaskLists+0x68>)
 8005b48:	f7fe f998 	bl	8003e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b4c:	480c      	ldr	r0, [pc, #48]	@ (8005b80 <prvInitialiseTaskLists+0x6c>)
 8005b4e:	f7fe f995 	bl	8003e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b52:	480c      	ldr	r0, [pc, #48]	@ (8005b84 <prvInitialiseTaskLists+0x70>)
 8005b54:	f7fe f992 	bl	8003e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b58:	480b      	ldr	r0, [pc, #44]	@ (8005b88 <prvInitialiseTaskLists+0x74>)
 8005b5a:	f7fe f98f 	bl	8003e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <prvInitialiseTaskLists+0x78>)
 8005b60:	4a05      	ldr	r2, [pc, #20]	@ (8005b78 <prvInitialiseTaskLists+0x64>)
 8005b62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b64:	4b0a      	ldr	r3, [pc, #40]	@ (8005b90 <prvInitialiseTaskLists+0x7c>)
 8005b66:	4a05      	ldr	r2, [pc, #20]	@ (8005b7c <prvInitialiseTaskLists+0x68>)
 8005b68:	601a      	str	r2, [r3, #0]
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000878 	.word	0x20000878
 8005b78:	20000cd8 	.word	0x20000cd8
 8005b7c:	20000cec 	.word	0x20000cec
 8005b80:	20000d08 	.word	0x20000d08
 8005b84:	20000d1c 	.word	0x20000d1c
 8005b88:	20000d34 	.word	0x20000d34
 8005b8c:	20000d00 	.word	0x20000d00
 8005b90:	20000d04 	.word	0x20000d04

08005b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b9a:	e019      	b.n	8005bd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b9c:	f000 fee4 	bl	8006968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba0:	4b10      	ldr	r3, [pc, #64]	@ (8005be4 <prvCheckTasksWaitingTermination+0x50>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe f9ef 	bl	8003f90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <prvCheckTasksWaitingTermination+0x54>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8005be8 <prvCheckTasksWaitingTermination+0x54>)
 8005bba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005bec <prvCheckTasksWaitingTermination+0x58>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <prvCheckTasksWaitingTermination+0x58>)
 8005bc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bc6:	f000 ff01 	bl	80069cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f810 	bl	8005bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bd0:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <prvCheckTasksWaitingTermination+0x58>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e1      	bne.n	8005b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000d1c 	.word	0x20000d1c
 8005be8:	20000d48 	.word	0x20000d48
 8005bec:	20000d30 	.word	0x20000d30

08005bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d108      	bne.n	8005c14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 f89e 	bl	8006d48 <vPortFree>
				vPortFree( pxTCB );
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 f89b 	bl	8006d48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c12:	e019      	b.n	8005c48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d103      	bne.n	8005c26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 f892 	bl	8006d48 <vPortFree>
	}
 8005c24:	e010      	b.n	8005c48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d00b      	beq.n	8005c48 <prvDeleteTCB+0x58>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <prvDeleteTCB+0x54>
	}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c56:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <prvResetNextTaskUnblockTime+0x38>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c60:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <prvResetNextTaskUnblockTime+0x3c>)
 8005c62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c68:	e008      	b.n	8005c7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6a:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <prvResetNextTaskUnblockTime+0x38>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a04      	ldr	r2, [pc, #16]	@ (8005c8c <prvResetNextTaskUnblockTime+0x3c>)
 8005c7a:	6013      	str	r3, [r2, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20000d00 	.word	0x20000d00
 8005c8c:	20000d68 	.word	0x20000d68

08005c90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c96:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <xTaskGetSchedulerState+0x34>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	e008      	b.n	8005cb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca4:	4b08      	ldr	r3, [pc, #32]	@ (8005cc8 <xTaskGetSchedulerState+0x38>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cac:	2302      	movs	r3, #2
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	e001      	b.n	8005cb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cb6:	687b      	ldr	r3, [r7, #4]
	}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	20000d54 	.word	0x20000d54
 8005cc8:	20000d70 	.word	0x20000d70

08005ccc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d051      	beq.n	8005d86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d90 <xTaskPriorityInherit+0xc4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d241      	bcs.n	8005d74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	db06      	blt.n	8005d06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf8:	4b25      	ldr	r3, [pc, #148]	@ (8005d90 <xTaskPriorityInherit+0xc4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6959      	ldr	r1, [r3, #20]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <xTaskPriorityInherit+0xc8>)
 8005d18:	4413      	add	r3, r2
 8005d1a:	4299      	cmp	r1, r3
 8005d1c:	d122      	bne.n	8005d64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe f934 	bl	8003f90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d28:	4b19      	ldr	r3, [pc, #100]	@ (8005d90 <xTaskPriorityInherit+0xc4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d36:	4b18      	ldr	r3, [pc, #96]	@ (8005d98 <xTaskPriorityInherit+0xcc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d903      	bls.n	8005d46 <xTaskPriorityInherit+0x7a>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	4a15      	ldr	r2, [pc, #84]	@ (8005d98 <xTaskPriorityInherit+0xcc>)
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4a10      	ldr	r2, [pc, #64]	@ (8005d94 <xTaskPriorityInherit+0xc8>)
 8005d54:	441a      	add	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f7fe f8ba 	bl	8003ed6 <vListInsertEnd>
 8005d62:	e004      	b.n	8005d6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d64:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <xTaskPriorityInherit+0xc4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e008      	b.n	8005d86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d78:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <xTaskPriorityInherit+0xc4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d201      	bcs.n	8005d86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d82:	2301      	movs	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d86:	68fb      	ldr	r3, [r7, #12]
	}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000874 	.word	0x20000874
 8005d94:	20000878 	.word	0x20000878
 8005d98:	20000d50 	.word	0x20000d50

08005d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d058      	beq.n	8005e64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005db2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e70 <xTaskPriorityDisinherit+0xd4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d00b      	beq.n	8005dd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60bb      	str	r3, [r7, #8]
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df8:	1e5a      	subs	r2, r3, #1
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d02c      	beq.n	8005e64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d128      	bne.n	8005e64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe f8ba 	bl	8003f90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e34:	4b0f      	ldr	r3, [pc, #60]	@ (8005e74 <xTaskPriorityDisinherit+0xd8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d903      	bls.n	8005e44 <xTaskPriorityDisinherit+0xa8>
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e40:	4a0c      	ldr	r2, [pc, #48]	@ (8005e74 <xTaskPriorityDisinherit+0xd8>)
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4a09      	ldr	r2, [pc, #36]	@ (8005e78 <xTaskPriorityDisinherit+0xdc>)
 8005e52:	441a      	add	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f7fe f83b 	bl	8003ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e60:	2301      	movs	r3, #1
 8005e62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e64:	697b      	ldr	r3, [r7, #20]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000874 	.word	0x20000874
 8005e74:	20000d50 	.word	0x20000d50
 8005e78:	20000878 	.word	0x20000878

08005e7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d06c      	beq.n	8005f6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60fb      	str	r3, [r7, #12]
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	e7fd      	b.n	8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d902      	bls.n	8005ec4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	e002      	b.n	8005eca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d04c      	beq.n	8005f6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d147      	bne.n	8005f6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ede:	4b26      	ldr	r3, [pc, #152]	@ (8005f78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d10b      	bne.n	8005f00 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	60bb      	str	r3, [r7, #8]
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	e7fd      	b.n	8005efc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	db04      	blt.n	8005f1e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	6959      	ldr	r1, [r3, #20]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4a13      	ldr	r2, [pc, #76]	@ (8005f7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f2e:	4413      	add	r3, r2
 8005f30:	4299      	cmp	r1, r3
 8005f32:	d11c      	bne.n	8005f6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe f829 	bl	8003f90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f42:	4b0f      	ldr	r3, [pc, #60]	@ (8005f80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d903      	bls.n	8005f52 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005f80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4a07      	ldr	r2, [pc, #28]	@ (8005f7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f60:	441a      	add	r2, r3
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7fd ffb4 	bl	8003ed6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f6e:	bf00      	nop
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000874 	.word	0x20000874
 8005f7c:	20000878 	.word	0x20000878
 8005f80:	20000d50 	.word	0x20000d50

08005f84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f88:	4b07      	ldr	r3, [pc, #28]	@ (8005fa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f90:	4b05      	ldr	r3, [pc, #20]	@ (8005fa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f96:	3201      	adds	r2, #1
 8005f98:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005f9a:	4b03      	ldr	r3, [pc, #12]	@ (8005fa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
	}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	20000874 	.word	0x20000874

08005fac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fb6:	4b21      	ldr	r3, [pc, #132]	@ (800603c <prvAddCurrentTaskToDelayedList+0x90>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fbc:	4b20      	ldr	r3, [pc, #128]	@ (8006040 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fd ffe4 	bl	8003f90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fce:	d10a      	bne.n	8005fe6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8006040 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4819      	ldr	r0, [pc, #100]	@ (8006044 <prvAddCurrentTaskToDelayedList+0x98>)
 8005fe0:	f7fd ff79 	bl	8003ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fe4:	e026      	b.n	8006034 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4413      	add	r3, r2
 8005fec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fee:	4b14      	ldr	r3, [pc, #80]	@ (8006040 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d209      	bcs.n	8006012 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ffe:	4b12      	ldr	r3, [pc, #72]	@ (8006048 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b0f      	ldr	r3, [pc, #60]	@ (8006040 <prvAddCurrentTaskToDelayedList+0x94>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3304      	adds	r3, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4610      	mov	r0, r2
 800600c:	f7fd ff87 	bl	8003f1e <vListInsert>
}
 8006010:	e010      	b.n	8006034 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006012:	4b0e      	ldr	r3, [pc, #56]	@ (800604c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <prvAddCurrentTaskToDelayedList+0x94>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7fd ff7d 	bl	8003f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006024:	4b0a      	ldr	r3, [pc, #40]	@ (8006050 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	d202      	bcs.n	8006034 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800602e:	4a08      	ldr	r2, [pc, #32]	@ (8006050 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6013      	str	r3, [r2, #0]
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000d4c 	.word	0x20000d4c
 8006040:	20000874 	.word	0x20000874
 8006044:	20000d34 	.word	0x20000d34
 8006048:	20000d04 	.word	0x20000d04
 800604c:	20000d00 	.word	0x20000d00
 8006050:	20000d68 	.word	0x20000d68

08006054 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	@ 0x28
 8006058:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800605e:	f000 fb13 	bl	8006688 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006062:	4b1d      	ldr	r3, [pc, #116]	@ (80060d8 <xTimerCreateTimerTask+0x84>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d021      	beq.n	80060ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006072:	1d3a      	adds	r2, r7, #4
 8006074:	f107 0108 	add.w	r1, r7, #8
 8006078:	f107 030c 	add.w	r3, r7, #12
 800607c:	4618      	mov	r0, r3
 800607e:	f7fd fee3 	bl	8003e48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	9202      	str	r2, [sp, #8]
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	2302      	movs	r3, #2
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	2300      	movs	r3, #0
 8006092:	460a      	mov	r2, r1
 8006094:	4911      	ldr	r1, [pc, #68]	@ (80060dc <xTimerCreateTimerTask+0x88>)
 8006096:	4812      	ldr	r0, [pc, #72]	@ (80060e0 <xTimerCreateTimerTask+0x8c>)
 8006098:	f7fe ffd0 	bl	800503c <xTaskCreateStatic>
 800609c:	4603      	mov	r3, r0
 800609e:	4a11      	ldr	r2, [pc, #68]	@ (80060e4 <xTimerCreateTimerTask+0x90>)
 80060a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060a2:	4b10      	ldr	r3, [pc, #64]	@ (80060e4 <xTimerCreateTimerTask+0x90>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060aa:	2301      	movs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10b      	bne.n	80060cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	613b      	str	r3, [r7, #16]
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	e7fd      	b.n	80060c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060cc:	697b      	ldr	r3, [r7, #20]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000da4 	.word	0x20000da4
 80060dc:	080079c8 	.word	0x080079c8
 80060e0:	08006221 	.word	0x08006221
 80060e4:	20000da8 	.word	0x20000da8

080060e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	@ 0x28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10b      	bne.n	8006118 <xTimerGenericCommand+0x30>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	623b      	str	r3, [r7, #32]
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	e7fd      	b.n	8006114 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006118:	4b19      	ldr	r3, [pc, #100]	@ (8006180 <xTimerGenericCommand+0x98>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d02a      	beq.n	8006176 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b05      	cmp	r3, #5
 8006130:	dc18      	bgt.n	8006164 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006132:	f7ff fdad 	bl	8005c90 <xTaskGetSchedulerState>
 8006136:	4603      	mov	r3, r0
 8006138:	2b02      	cmp	r3, #2
 800613a:	d109      	bne.n	8006150 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800613c:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <xTimerGenericCommand+0x98>)
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	f107 0110 	add.w	r1, r7, #16
 8006144:	2300      	movs	r3, #0
 8006146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006148:	f7fe f900 	bl	800434c <xQueueGenericSend>
 800614c:	6278      	str	r0, [r7, #36]	@ 0x24
 800614e:	e012      	b.n	8006176 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <xTimerGenericCommand+0x98>)
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	f107 0110 	add.w	r1, r7, #16
 8006158:	2300      	movs	r3, #0
 800615a:	2200      	movs	r2, #0
 800615c:	f7fe f8f6 	bl	800434c <xQueueGenericSend>
 8006160:	6278      	str	r0, [r7, #36]	@ 0x24
 8006162:	e008      	b.n	8006176 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006164:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <xTimerGenericCommand+0x98>)
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	f107 0110 	add.w	r1, r7, #16
 800616c:	2300      	movs	r3, #0
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	f7fe f9ee 	bl	8004550 <xQueueGenericSendFromISR>
 8006174:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006178:	4618      	mov	r0, r3
 800617a:	3728      	adds	r7, #40	@ 0x28
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000da4 	.word	0x20000da4

08006184 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af02      	add	r7, sp, #8
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800618e:	4b23      	ldr	r3, [pc, #140]	@ (800621c <prvProcessExpiredTimer+0x98>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	3304      	adds	r3, #4
 800619c:	4618      	mov	r0, r3
 800619e:	f7fd fef7 	bl	8003f90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d023      	beq.n	80061f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	699a      	ldr	r2, [r3, #24]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	18d1      	adds	r1, r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	6978      	ldr	r0, [r7, #20]
 80061be:	f000 f8d5 	bl	800636c <prvInsertTimerInActiveList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d020      	beq.n	800620a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061c8:	2300      	movs	r3, #0
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2300      	movs	r3, #0
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	2100      	movs	r1, #0
 80061d2:	6978      	ldr	r0, [r7, #20]
 80061d4:	f7ff ff88 	bl	80060e8 <xTimerGenericCommand>
 80061d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d114      	bne.n	800620a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	60fb      	str	r3, [r7, #12]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	b2da      	uxtb	r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	4798      	blx	r3
}
 8006212:	bf00      	nop
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000d9c 	.word	0x20000d9c

08006220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4618      	mov	r0, r3
 800622e:	f000 f859 	bl	80062e4 <prvGetNextExpireTime>
 8006232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4619      	mov	r1, r3
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f805 	bl	8006248 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800623e:	f000 f8d7 	bl	80063f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006242:	bf00      	nop
 8006244:	e7f0      	b.n	8006228 <prvTimerTask+0x8>
	...

08006248 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006252:	f7ff f937 	bl	80054c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006256:	f107 0308 	add.w	r3, r7, #8
 800625a:	4618      	mov	r0, r3
 800625c:	f000 f866 	bl	800632c <prvSampleTimeNow>
 8006260:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d130      	bne.n	80062ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <prvProcessTimerOrBlockTask+0x3c>
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	429a      	cmp	r2, r3
 8006274:	d806      	bhi.n	8006284 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006276:	f7ff f933 	bl	80054e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ff81 	bl	8006184 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006282:	e024      	b.n	80062ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800628a:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <prvProcessTimerOrBlockTask+0x90>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <prvProcessTimerOrBlockTask+0x50>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <prvProcessTimerOrBlockTask+0x52>
 8006298:	2300      	movs	r3, #0
 800629a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800629c:	4b0f      	ldr	r3, [pc, #60]	@ (80062dc <prvProcessTimerOrBlockTask+0x94>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7fe fe93 	bl	8004fd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062ae:	f7ff f917 	bl	80054e0 <xTaskResumeAll>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062b8:	4b09      	ldr	r3, [pc, #36]	@ (80062e0 <prvProcessTimerOrBlockTask+0x98>)
 80062ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	f3bf 8f6f 	isb	sy
}
 80062c8:	e001      	b.n	80062ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062ca:	f7ff f909 	bl	80054e0 <xTaskResumeAll>
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000da0 	.word	0x20000da0
 80062dc:	20000da4 	.word	0x20000da4
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006328 <prvGetNextExpireTime+0x44>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <prvGetNextExpireTime+0x16>
 80062f6:	2201      	movs	r2, #1
 80062f8:	e000      	b.n	80062fc <prvGetNextExpireTime+0x18>
 80062fa:	2200      	movs	r2, #0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006308:	4b07      	ldr	r3, [pc, #28]	@ (8006328 <prvGetNextExpireTime+0x44>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e001      	b.n	8006318 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006318:	68fb      	ldr	r3, [r7, #12]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20000d9c 	.word	0x20000d9c

0800632c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006334:	f7ff f972 	bl	800561c <xTaskGetTickCount>
 8006338:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800633a:	4b0b      	ldr	r3, [pc, #44]	@ (8006368 <prvSampleTimeNow+0x3c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	429a      	cmp	r2, r3
 8006342:	d205      	bcs.n	8006350 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006344:	f000 f93a 	bl	80065bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e002      	b.n	8006356 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006356:	4a04      	ldr	r2, [pc, #16]	@ (8006368 <prvSampleTimeNow+0x3c>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800635c:	68fb      	ldr	r3, [r7, #12]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000dac 	.word	0x20000dac

0800636c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d812      	bhi.n	80063b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	1ad2      	subs	r2, r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	429a      	cmp	r2, r3
 800639e:	d302      	bcc.n	80063a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e01b      	b.n	80063de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063a6:	4b10      	ldr	r3, [pc, #64]	@ (80063e8 <prvInsertTimerInActiveList+0x7c>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f7fd fdb4 	bl	8003f1e <vListInsert>
 80063b6:	e012      	b.n	80063de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d206      	bcs.n	80063ce <prvInsertTimerInActiveList+0x62>
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d302      	bcc.n	80063ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e007      	b.n	80063de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ce:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <prvInsertTimerInActiveList+0x80>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7fd fda0 	bl	8003f1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063de:	697b      	ldr	r3, [r7, #20]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000da0 	.word	0x20000da0
 80063ec:	20000d9c 	.word	0x20000d9c

080063f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08e      	sub	sp, #56	@ 0x38
 80063f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063f6:	e0ce      	b.n	8006596 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	da19      	bge.n	8006432 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	3304      	adds	r3, #4
 8006402:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	61fb      	str	r3, [r7, #28]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006428:	6850      	ldr	r0, [r2, #4]
 800642a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800642c:	6892      	ldr	r2, [r2, #8]
 800642e:	4611      	mov	r1, r2
 8006430:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f2c0 80ae 	blt.w	8006596 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d004      	beq.n	8006450 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	3304      	adds	r3, #4
 800644a:	4618      	mov	r0, r3
 800644c:	f7fd fda0 	bl	8003f90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006450:	463b      	mov	r3, r7
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff ff6a 	bl	800632c <prvSampleTimeNow>
 8006458:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b09      	cmp	r3, #9
 800645e:	f200 8097 	bhi.w	8006590 <prvProcessReceivedCommands+0x1a0>
 8006462:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <prvProcessReceivedCommands+0x78>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	08006491 	.word	0x08006491
 800646c:	08006491 	.word	0x08006491
 8006470:	08006491 	.word	0x08006491
 8006474:	08006507 	.word	0x08006507
 8006478:	0800651b 	.word	0x0800651b
 800647c:	08006567 	.word	0x08006567
 8006480:	08006491 	.word	0x08006491
 8006484:	08006491 	.word	0x08006491
 8006488:	08006507 	.word	0x08006507
 800648c:	0800651b 	.word	0x0800651b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006492:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	b2da      	uxtb	r2, r3
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	18d1      	adds	r1, r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064b0:	f7ff ff5c 	bl	800636c <prvInsertTimerInActiveList>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d06c      	beq.n	8006594 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d061      	beq.n	8006594 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	441a      	add	r2, r3
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2300      	movs	r3, #0
 80064de:	2100      	movs	r1, #0
 80064e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e2:	f7ff fe01 	bl	80060e8 <xTimerGenericCommand>
 80064e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d152      	bne.n	8006594 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	61bb      	str	r3, [r7, #24]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	b2da      	uxtb	r2, r3
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006518:	e03d      	b.n	8006596 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	617b      	str	r3, [r7, #20]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	18d1      	adds	r1, r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800655e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006560:	f7ff ff04 	bl	800636c <prvInsertTimerInActiveList>
					break;
 8006564:	e017      	b.n	8006596 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006576:	f000 fbe7 	bl	8006d48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800657a:	e00c      	b.n	8006596 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	b2da      	uxtb	r2, r3
 8006588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800658e:	e002      	b.n	8006596 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <prvProcessReceivedCommands+0x1a6>
					break;
 8006594:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006596:	4b08      	ldr	r3, [pc, #32]	@ (80065b8 <prvProcessReceivedCommands+0x1c8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	1d39      	adds	r1, r7, #4
 800659c:	2200      	movs	r2, #0
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe f904 	bl	80047ac <xQueueReceive>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f47f af26 	bne.w	80063f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	3730      	adds	r7, #48	@ 0x30
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000da4 	.word	0x20000da4

080065bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065c2:	e049      	b.n	8006658 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006680 <prvSwitchTimerLists+0xc4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006680 <prvSwitchTimerLists+0xc4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3304      	adds	r3, #4
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fd fcd7 	bl	8003f90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02f      	beq.n	8006658 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4413      	add	r3, r2
 8006600:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	d90e      	bls.n	8006628 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006616:	4b1a      	ldr	r3, [pc, #104]	@ (8006680 <prvSwitchTimerLists+0xc4>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3304      	adds	r3, #4
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f7fd fc7c 	bl	8003f1e <vListInsert>
 8006626:	e017      	b.n	8006658 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006628:	2300      	movs	r3, #0
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	2300      	movs	r3, #0
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	2100      	movs	r1, #0
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fd58 	bl	80060e8 <xTimerGenericCommand>
 8006638:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	603b      	str	r3, [r7, #0]
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	e7fd      	b.n	8006654 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006658:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <prvSwitchTimerLists+0xc4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1b0      	bne.n	80065c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006662:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <prvSwitchTimerLists+0xc4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006668:	4b06      	ldr	r3, [pc, #24]	@ (8006684 <prvSwitchTimerLists+0xc8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a04      	ldr	r2, [pc, #16]	@ (8006680 <prvSwitchTimerLists+0xc4>)
 800666e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006670:	4a04      	ldr	r2, [pc, #16]	@ (8006684 <prvSwitchTimerLists+0xc8>)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	6013      	str	r3, [r2, #0]
}
 8006676:	bf00      	nop
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000d9c 	.word	0x20000d9c
 8006684:	20000da0 	.word	0x20000da0

08006688 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800668e:	f000 f96b 	bl	8006968 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006692:	4b15      	ldr	r3, [pc, #84]	@ (80066e8 <prvCheckForValidListAndQueue+0x60>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d120      	bne.n	80066dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800669a:	4814      	ldr	r0, [pc, #80]	@ (80066ec <prvCheckForValidListAndQueue+0x64>)
 800669c:	f7fd fbee 	bl	8003e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066a0:	4813      	ldr	r0, [pc, #76]	@ (80066f0 <prvCheckForValidListAndQueue+0x68>)
 80066a2:	f7fd fbeb 	bl	8003e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066a6:	4b13      	ldr	r3, [pc, #76]	@ (80066f4 <prvCheckForValidListAndQueue+0x6c>)
 80066a8:	4a10      	ldr	r2, [pc, #64]	@ (80066ec <prvCheckForValidListAndQueue+0x64>)
 80066aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066ac:	4b12      	ldr	r3, [pc, #72]	@ (80066f8 <prvCheckForValidListAndQueue+0x70>)
 80066ae:	4a10      	ldr	r2, [pc, #64]	@ (80066f0 <prvCheckForValidListAndQueue+0x68>)
 80066b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066b2:	2300      	movs	r3, #0
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4b11      	ldr	r3, [pc, #68]	@ (80066fc <prvCheckForValidListAndQueue+0x74>)
 80066b8:	4a11      	ldr	r2, [pc, #68]	@ (8006700 <prvCheckForValidListAndQueue+0x78>)
 80066ba:	2110      	movs	r1, #16
 80066bc:	200a      	movs	r0, #10
 80066be:	f7fd fcfb 	bl	80040b8 <xQueueGenericCreateStatic>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4a08      	ldr	r2, [pc, #32]	@ (80066e8 <prvCheckForValidListAndQueue+0x60>)
 80066c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066c8:	4b07      	ldr	r3, [pc, #28]	@ (80066e8 <prvCheckForValidListAndQueue+0x60>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066d0:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <prvCheckForValidListAndQueue+0x60>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	490b      	ldr	r1, [pc, #44]	@ (8006704 <prvCheckForValidListAndQueue+0x7c>)
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fc28 	bl	8004f2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066dc:	f000 f976 	bl	80069cc <vPortExitCritical>
}
 80066e0:	bf00      	nop
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000da4 	.word	0x20000da4
 80066ec:	20000d74 	.word	0x20000d74
 80066f0:	20000d88 	.word	0x20000d88
 80066f4:	20000d9c 	.word	0x20000d9c
 80066f8:	20000da0 	.word	0x20000da0
 80066fc:	20000e50 	.word	0x20000e50
 8006700:	20000db0 	.word	0x20000db0
 8006704:	080079d0 	.word	0x080079d0

08006708 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3b04      	subs	r3, #4
 8006718:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3b04      	subs	r3, #4
 8006726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b04      	subs	r3, #4
 8006736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006738:	4a0c      	ldr	r2, [pc, #48]	@ (800676c <pxPortInitialiseStack+0x64>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3b14      	subs	r3, #20
 8006742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3b04      	subs	r3, #4
 800674e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f06f 0202 	mvn.w	r2, #2
 8006756:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3b20      	subs	r3, #32
 800675c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	08006771 	.word	0x08006771

08006770 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800677a:	4b13      	ldr	r3, [pc, #76]	@ (80067c8 <prvTaskExitError+0x58>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006782:	d00b      	beq.n	800679c <prvTaskExitError+0x2c>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	60fb      	str	r3, [r7, #12]
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	e7fd      	b.n	8006798 <prvTaskExitError+0x28>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	60bb      	str	r3, [r7, #8]
}
 80067ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067b0:	bf00      	nop
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0fc      	beq.n	80067b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	2000000c 	.word	0x2000000c
 80067cc:	00000000 	.word	0x00000000

080067d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067d0:	4b07      	ldr	r3, [pc, #28]	@ (80067f0 <pxCurrentTCBConst2>)
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	6808      	ldr	r0, [r1, #0]
 80067d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	f380 8809 	msr	PSP, r0
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f380 8811 	msr	BASEPRI, r0
 80067ea:	4770      	bx	lr
 80067ec:	f3af 8000 	nop.w

080067f0 <pxCurrentTCBConst2>:
 80067f0:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop

080067f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067f8:	4808      	ldr	r0, [pc, #32]	@ (800681c <prvPortStartFirstTask+0x24>)
 80067fa:	6800      	ldr	r0, [r0, #0]
 80067fc:	6800      	ldr	r0, [r0, #0]
 80067fe:	f380 8808 	msr	MSP, r0
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8814 	msr	CONTROL, r0
 800680a:	b662      	cpsie	i
 800680c:	b661      	cpsie	f
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	df00      	svc	0
 8006818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800681a:	bf00      	nop
 800681c:	e000ed08 	.word	0xe000ed08

08006820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006826:	4b47      	ldr	r3, [pc, #284]	@ (8006944 <xPortStartScheduler+0x124>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a47      	ldr	r2, [pc, #284]	@ (8006948 <xPortStartScheduler+0x128>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10b      	bne.n	8006848 <xPortStartScheduler+0x28>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	613b      	str	r3, [r7, #16]
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	e7fd      	b.n	8006844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006848:	4b3e      	ldr	r3, [pc, #248]	@ (8006944 <xPortStartScheduler+0x124>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a3f      	ldr	r2, [pc, #252]	@ (800694c <xPortStartScheduler+0x12c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d10b      	bne.n	800686a <xPortStartScheduler+0x4a>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	60fb      	str	r3, [r7, #12]
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	e7fd      	b.n	8006866 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800686a:	4b39      	ldr	r3, [pc, #228]	@ (8006950 <xPortStartScheduler+0x130>)
 800686c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	22ff      	movs	r2, #255	@ 0xff
 800687a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800688c:	b2da      	uxtb	r2, r3
 800688e:	4b31      	ldr	r3, [pc, #196]	@ (8006954 <xPortStartScheduler+0x134>)
 8006890:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006892:	4b31      	ldr	r3, [pc, #196]	@ (8006958 <xPortStartScheduler+0x138>)
 8006894:	2207      	movs	r2, #7
 8006896:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006898:	e009      	b.n	80068ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800689a:	4b2f      	ldr	r3, [pc, #188]	@ (8006958 <xPortStartScheduler+0x138>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3b01      	subs	r3, #1
 80068a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006958 <xPortStartScheduler+0x138>)
 80068a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b6:	2b80      	cmp	r3, #128	@ 0x80
 80068b8:	d0ef      	beq.n	800689a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068ba:	4b27      	ldr	r3, [pc, #156]	@ (8006958 <xPortStartScheduler+0x138>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1c3 0307 	rsb	r3, r3, #7
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d00b      	beq.n	80068de <xPortStartScheduler+0xbe>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	60bb      	str	r3, [r7, #8]
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	e7fd      	b.n	80068da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068de:	4b1e      	ldr	r3, [pc, #120]	@ (8006958 <xPortStartScheduler+0x138>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006958 <xPortStartScheduler+0x138>)
 80068e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <xPortStartScheduler+0x138>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068f0:	4a19      	ldr	r2, [pc, #100]	@ (8006958 <xPortStartScheduler+0x138>)
 80068f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068fc:	4b17      	ldr	r3, [pc, #92]	@ (800695c <xPortStartScheduler+0x13c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a16      	ldr	r2, [pc, #88]	@ (800695c <xPortStartScheduler+0x13c>)
 8006902:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006908:	4b14      	ldr	r3, [pc, #80]	@ (800695c <xPortStartScheduler+0x13c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a13      	ldr	r2, [pc, #76]	@ (800695c <xPortStartScheduler+0x13c>)
 800690e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006914:	f000 f8da 	bl	8006acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006918:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <xPortStartScheduler+0x140>)
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800691e:	f000 f8f9 	bl	8006b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006922:	4b10      	ldr	r3, [pc, #64]	@ (8006964 <xPortStartScheduler+0x144>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a0f      	ldr	r2, [pc, #60]	@ (8006964 <xPortStartScheduler+0x144>)
 8006928:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800692c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800692e:	f7ff ff63 	bl	80067f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006932:	f7fe ff3d 	bl	80057b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006936:	f7ff ff1b 	bl	8006770 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	e000ed00 	.word	0xe000ed00
 8006948:	410fc271 	.word	0x410fc271
 800694c:	410fc270 	.word	0x410fc270
 8006950:	e000e400 	.word	0xe000e400
 8006954:	20000ea0 	.word	0x20000ea0
 8006958:	20000ea4 	.word	0x20000ea4
 800695c:	e000ed20 	.word	0xe000ed20
 8006960:	2000000c 	.word	0x2000000c
 8006964:	e000ef34 	.word	0xe000ef34

08006968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	607b      	str	r3, [r7, #4]
}
 8006980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006982:	4b10      	ldr	r3, [pc, #64]	@ (80069c4 <vPortEnterCritical+0x5c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3301      	adds	r3, #1
 8006988:	4a0e      	ldr	r2, [pc, #56]	@ (80069c4 <vPortEnterCritical+0x5c>)
 800698a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800698c:	4b0d      	ldr	r3, [pc, #52]	@ (80069c4 <vPortEnterCritical+0x5c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d110      	bne.n	80069b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006994:	4b0c      	ldr	r3, [pc, #48]	@ (80069c8 <vPortEnterCritical+0x60>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	603b      	str	r3, [r7, #0]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <vPortEnterCritical+0x4a>
	}
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	2000000c 	.word	0x2000000c
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069d2:	4b12      	ldr	r3, [pc, #72]	@ (8006a1c <vPortExitCritical+0x50>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <vPortExitCritical+0x26>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	607b      	str	r3, [r7, #4]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069f2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	4a08      	ldr	r2, [pc, #32]	@ (8006a1c <vPortExitCritical+0x50>)
 80069fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069fc:	4b07      	ldr	r3, [pc, #28]	@ (8006a1c <vPortExitCritical+0x50>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d105      	bne.n	8006a10 <vPortExitCritical+0x44>
 8006a04:	2300      	movs	r3, #0
 8006a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
}
 8006a0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	2000000c 	.word	0x2000000c

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b15      	ldr	r3, [pc, #84]	@ (8006a80 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f01e 0f10 	tst.w	lr, #16
 8006a30:	bf08      	it	eq
 8006a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	6010      	str	r0, [r2, #0]
 8006a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a44:	f380 8811 	msr	BASEPRI, r0
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f7fe feae 	bl	80057b0 <vTaskSwitchContext>
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	f380 8811 	msr	BASEPRI, r0
 8006a5c:	bc09      	pop	{r0, r3}
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a66:	f01e 0f10 	tst.w	lr, #16
 8006a6a:	bf08      	it	eq
 8006a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a70:	f380 8809 	msr	PSP, r0
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w

08006a80 <pxCurrentTCBConst>:
 8006a80:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
}
 8006aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006aa2:	f7fe fdcb 	bl	800563c <xTaskIncrementTick>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aac:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <xPortSysTickHandler+0x40>)
 8006aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f383 8811 	msr	BASEPRI, r3
}
 8006abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b04 <vPortSetupTimerInterrupt+0x38>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b08 <vPortSetupTimerInterrupt+0x3c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8006b0c <vPortSetupTimerInterrupt+0x40>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	099b      	lsrs	r3, r3, #6
 8006ae8:	4a09      	ldr	r2, [pc, #36]	@ (8006b10 <vPortSetupTimerInterrupt+0x44>)
 8006aea:	3b01      	subs	r3, #1
 8006aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aee:	4b04      	ldr	r3, [pc, #16]	@ (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010
 8006b04:	e000e018 	.word	0xe000e018
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	10624dd3 	.word	0x10624dd3
 8006b10:	e000e014 	.word	0xe000e014

08006b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b24 <vPortEnableVFP+0x10>
 8006b18:	6801      	ldr	r1, [r0, #0]
 8006b1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b1e:	6001      	str	r1, [r0, #0]
 8006b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b22:	bf00      	nop
 8006b24:	e000ed88 	.word	0xe000ed88

08006b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b2e:	f3ef 8305 	mrs	r3, IPSR
 8006b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d915      	bls.n	8006b66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b3a:	4a18      	ldr	r2, [pc, #96]	@ (8006b9c <vPortValidateInterruptPriority+0x74>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b44:	4b16      	ldr	r3, [pc, #88]	@ (8006ba0 <vPortValidateInterruptPriority+0x78>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	7afa      	ldrb	r2, [r7, #11]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d20b      	bcs.n	8006b66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	e7fd      	b.n	8006b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba4 <vPortValidateInterruptPriority+0x7c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba8 <vPortValidateInterruptPriority+0x80>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d90b      	bls.n	8006b8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	603b      	str	r3, [r7, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <vPortValidateInterruptPriority+0x62>
	}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	e000e3f0 	.word	0xe000e3f0
 8006ba0:	20000ea0 	.word	0x20000ea0
 8006ba4:	e000ed0c 	.word	0xe000ed0c
 8006ba8:	20000ea4 	.word	0x20000ea4

08006bac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	@ 0x28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bb8:	f7fe fc84 	bl	80054c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8006d30 <pvPortMalloc+0x184>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bc4:	f000 f924 	bl	8006e10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d34 <pvPortMalloc+0x188>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f040 8095 	bne.w	8006d00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01e      	beq.n	8006c1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bdc:	2208      	movs	r2, #8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4413      	add	r3, r2
 8006be2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d015      	beq.n	8006c1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f023 0307 	bic.w	r3, r3, #7
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <pvPortMalloc+0x6e>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	617b      	str	r3, [r7, #20]
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	e7fd      	b.n	8006c16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d06f      	beq.n	8006d00 <pvPortMalloc+0x154>
 8006c20:	4b45      	ldr	r3, [pc, #276]	@ (8006d38 <pvPortMalloc+0x18c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d86a      	bhi.n	8006d00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c2a:	4b44      	ldr	r3, [pc, #272]	@ (8006d3c <pvPortMalloc+0x190>)
 8006c2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c2e:	4b43      	ldr	r3, [pc, #268]	@ (8006d3c <pvPortMalloc+0x190>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c34:	e004      	b.n	8006c40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d903      	bls.n	8006c52 <pvPortMalloc+0xa6>
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f1      	bne.n	8006c36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c52:	4b37      	ldr	r3, [pc, #220]	@ (8006d30 <pvPortMalloc+0x184>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d051      	beq.n	8006d00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2208      	movs	r2, #8
 8006c62:	4413      	add	r3, r2
 8006c64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	1ad2      	subs	r2, r2, r3
 8006c76:	2308      	movs	r3, #8
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d920      	bls.n	8006cc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4413      	add	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <pvPortMalloc+0xfc>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	613b      	str	r3, [r7, #16]
}
 8006ca2:	bf00      	nop
 8006ca4:	bf00      	nop
 8006ca6:	e7fd      	b.n	8006ca4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cba:	69b8      	ldr	r0, [r7, #24]
 8006cbc:	f000 f90a 	bl	8006ed4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d38 <pvPortMalloc+0x18c>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	4a1b      	ldr	r2, [pc, #108]	@ (8006d38 <pvPortMalloc+0x18c>)
 8006ccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cce:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <pvPortMalloc+0x18c>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d40 <pvPortMalloc+0x194>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d203      	bcs.n	8006ce2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cda:	4b17      	ldr	r3, [pc, #92]	@ (8006d38 <pvPortMalloc+0x18c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a18      	ldr	r2, [pc, #96]	@ (8006d40 <pvPortMalloc+0x194>)
 8006ce0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4b13      	ldr	r3, [pc, #76]	@ (8006d34 <pvPortMalloc+0x188>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cf6:	4b13      	ldr	r3, [pc, #76]	@ (8006d44 <pvPortMalloc+0x198>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	4a11      	ldr	r2, [pc, #68]	@ (8006d44 <pvPortMalloc+0x198>)
 8006cfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d00:	f7fe fbee 	bl	80054e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <pvPortMalloc+0x17a>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	60fb      	str	r3, [r7, #12]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <pvPortMalloc+0x176>
	return pvReturn;
 8006d26:	69fb      	ldr	r3, [r7, #28]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3728      	adds	r7, #40	@ 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20001a68 	.word	0x20001a68
 8006d34:	20001a7c 	.word	0x20001a7c
 8006d38:	20001a6c 	.word	0x20001a6c
 8006d3c:	20001a60 	.word	0x20001a60
 8006d40:	20001a70 	.word	0x20001a70
 8006d44:	20001a74 	.word	0x20001a74

08006d48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d04f      	beq.n	8006dfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	425b      	negs	r3, r3
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4413      	add	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	4b25      	ldr	r3, [pc, #148]	@ (8006e04 <vPortFree+0xbc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <vPortFree+0x46>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60fb      	str	r3, [r7, #12]
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	e7fd      	b.n	8006d8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <vPortFree+0x66>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60bb      	str	r3, [r7, #8]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	4b14      	ldr	r3, [pc, #80]	@ (8006e04 <vPortFree+0xbc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01e      	beq.n	8006dfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d11a      	bne.n	8006dfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <vPortFree+0xbc>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	401a      	ands	r2, r3
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dd4:	f7fe fb76 	bl	80054c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e08 <vPortFree+0xc0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4413      	add	r3, r2
 8006de2:	4a09      	ldr	r2, [pc, #36]	@ (8006e08 <vPortFree+0xc0>)
 8006de4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006de6:	6938      	ldr	r0, [r7, #16]
 8006de8:	f000 f874 	bl	8006ed4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006dec:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <vPortFree+0xc4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	4a06      	ldr	r2, [pc, #24]	@ (8006e0c <vPortFree+0xc4>)
 8006df4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006df6:	f7fe fb73 	bl	80054e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dfa:	bf00      	nop
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20001a7c 	.word	0x20001a7c
 8006e08:	20001a6c 	.word	0x20001a6c
 8006e0c:	20001a78 	.word	0x20001a78

08006e10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e16:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006e1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e1c:	4b27      	ldr	r3, [pc, #156]	@ (8006ebc <prvHeapInit+0xac>)
 8006e1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00c      	beq.n	8006e44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3307      	adds	r3, #7
 8006e2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0307 	bic.w	r3, r3, #7
 8006e36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ebc <prvHeapInit+0xac>)
 8006e40:	4413      	add	r3, r2
 8006e42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e48:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec0 <prvHeapInit+0xb0>)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ec0 <prvHeapInit+0xb0>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	4413      	add	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0307 	bic.w	r3, r3, #7
 8006e6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4a15      	ldr	r2, [pc, #84]	@ (8006ec4 <prvHeapInit+0xb4>)
 8006e70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e72:	4b14      	ldr	r3, [pc, #80]	@ (8006ec4 <prvHeapInit+0xb4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e7a:	4b12      	ldr	r3, [pc, #72]	@ (8006ec4 <prvHeapInit+0xb4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	1ad2      	subs	r2, r2, r3
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec4 <prvHeapInit+0xb4>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec8 <prvHeapInit+0xb8>)
 8006e9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4a09      	ldr	r2, [pc, #36]	@ (8006ecc <prvHeapInit+0xbc>)
 8006ea6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ea8:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <prvHeapInit+0xc0>)
 8006eaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	20000ea8 	.word	0x20000ea8
 8006ec0:	20001a60 	.word	0x20001a60
 8006ec4:	20001a68 	.word	0x20001a68
 8006ec8:	20001a70 	.word	0x20001a70
 8006ecc:	20001a6c 	.word	0x20001a6c
 8006ed0:	20001a7c 	.word	0x20001a7c

08006ed4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006edc:	4b28      	ldr	r3, [pc, #160]	@ (8006f80 <prvInsertBlockIntoFreeList+0xac>)
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	e002      	b.n	8006ee8 <prvInsertBlockIntoFreeList+0x14>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d8f7      	bhi.n	8006ee2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	4413      	add	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d108      	bne.n	8006f16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	441a      	add	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	441a      	add	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d118      	bne.n	8006f5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4b15      	ldr	r3, [pc, #84]	@ (8006f84 <prvInsertBlockIntoFreeList+0xb0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d00d      	beq.n	8006f52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	441a      	add	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	e008      	b.n	8006f64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f52:	4b0c      	ldr	r3, [pc, #48]	@ (8006f84 <prvInsertBlockIntoFreeList+0xb0>)
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e003      	b.n	8006f64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d002      	beq.n	8006f72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20001a60 	.word	0x20001a60
 8006f84:	20001a68 	.word	0x20001a68

08006f88 <std>:
 8006f88:	2300      	movs	r3, #0
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f96:	6083      	str	r3, [r0, #8]
 8006f98:	8181      	strh	r1, [r0, #12]
 8006f9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f9c:	81c2      	strh	r2, [r0, #14]
 8006f9e:	6183      	str	r3, [r0, #24]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	305c      	adds	r0, #92	@ 0x5c
 8006fa6:	f000 f9e7 	bl	8007378 <memset>
 8006faa:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe0 <std+0x58>)
 8006fac:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fae:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <std+0x5c>)
 8006fb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <std+0x60>)
 8006fb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <std+0x64>)
 8006fb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <std+0x68>)
 8006fbc:	6224      	str	r4, [r4, #32]
 8006fbe:	429c      	cmp	r4, r3
 8006fc0:	d006      	beq.n	8006fd0 <std+0x48>
 8006fc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fc6:	4294      	cmp	r4, r2
 8006fc8:	d002      	beq.n	8006fd0 <std+0x48>
 8006fca:	33d0      	adds	r3, #208	@ 0xd0
 8006fcc:	429c      	cmp	r4, r3
 8006fce:	d105      	bne.n	8006fdc <std+0x54>
 8006fd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd8:	f000 ba46 	b.w	8007468 <__retarget_lock_init_recursive>
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	bf00      	nop
 8006fe0:	080071c9 	.word	0x080071c9
 8006fe4:	080071eb 	.word	0x080071eb
 8006fe8:	08007223 	.word	0x08007223
 8006fec:	08007247 	.word	0x08007247
 8006ff0:	20001a80 	.word	0x20001a80

08006ff4 <stdio_exit_handler>:
 8006ff4:	4a02      	ldr	r2, [pc, #8]	@ (8007000 <stdio_exit_handler+0xc>)
 8006ff6:	4903      	ldr	r1, [pc, #12]	@ (8007004 <stdio_exit_handler+0x10>)
 8006ff8:	4803      	ldr	r0, [pc, #12]	@ (8007008 <stdio_exit_handler+0x14>)
 8006ffa:	f000 b869 	b.w	80070d0 <_fwalk_sglue>
 8006ffe:	bf00      	nop
 8007000:	20000010 	.word	0x20000010
 8007004:	08007785 	.word	0x08007785
 8007008:	20000020 	.word	0x20000020

0800700c <cleanup_stdio>:
 800700c:	6841      	ldr	r1, [r0, #4]
 800700e:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <cleanup_stdio+0x34>)
 8007010:	4299      	cmp	r1, r3
 8007012:	b510      	push	{r4, lr}
 8007014:	4604      	mov	r4, r0
 8007016:	d001      	beq.n	800701c <cleanup_stdio+0x10>
 8007018:	f000 fbb4 	bl	8007784 <_fflush_r>
 800701c:	68a1      	ldr	r1, [r4, #8]
 800701e:	4b09      	ldr	r3, [pc, #36]	@ (8007044 <cleanup_stdio+0x38>)
 8007020:	4299      	cmp	r1, r3
 8007022:	d002      	beq.n	800702a <cleanup_stdio+0x1e>
 8007024:	4620      	mov	r0, r4
 8007026:	f000 fbad 	bl	8007784 <_fflush_r>
 800702a:	68e1      	ldr	r1, [r4, #12]
 800702c:	4b06      	ldr	r3, [pc, #24]	@ (8007048 <cleanup_stdio+0x3c>)
 800702e:	4299      	cmp	r1, r3
 8007030:	d004      	beq.n	800703c <cleanup_stdio+0x30>
 8007032:	4620      	mov	r0, r4
 8007034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007038:	f000 bba4 	b.w	8007784 <_fflush_r>
 800703c:	bd10      	pop	{r4, pc}
 800703e:	bf00      	nop
 8007040:	20001a80 	.word	0x20001a80
 8007044:	20001ae8 	.word	0x20001ae8
 8007048:	20001b50 	.word	0x20001b50

0800704c <global_stdio_init.part.0>:
 800704c:	b510      	push	{r4, lr}
 800704e:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <global_stdio_init.part.0+0x30>)
 8007050:	4c0b      	ldr	r4, [pc, #44]	@ (8007080 <global_stdio_init.part.0+0x34>)
 8007052:	4a0c      	ldr	r2, [pc, #48]	@ (8007084 <global_stdio_init.part.0+0x38>)
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	4620      	mov	r0, r4
 8007058:	2200      	movs	r2, #0
 800705a:	2104      	movs	r1, #4
 800705c:	f7ff ff94 	bl	8006f88 <std>
 8007060:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007064:	2201      	movs	r2, #1
 8007066:	2109      	movs	r1, #9
 8007068:	f7ff ff8e 	bl	8006f88 <std>
 800706c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007070:	2202      	movs	r2, #2
 8007072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007076:	2112      	movs	r1, #18
 8007078:	f7ff bf86 	b.w	8006f88 <std>
 800707c:	20001bb8 	.word	0x20001bb8
 8007080:	20001a80 	.word	0x20001a80
 8007084:	08006ff5 	.word	0x08006ff5

08007088 <__sfp_lock_acquire>:
 8007088:	4801      	ldr	r0, [pc, #4]	@ (8007090 <__sfp_lock_acquire+0x8>)
 800708a:	f000 b9ee 	b.w	800746a <__retarget_lock_acquire_recursive>
 800708e:	bf00      	nop
 8007090:	20001bc1 	.word	0x20001bc1

08007094 <__sfp_lock_release>:
 8007094:	4801      	ldr	r0, [pc, #4]	@ (800709c <__sfp_lock_release+0x8>)
 8007096:	f000 b9e9 	b.w	800746c <__retarget_lock_release_recursive>
 800709a:	bf00      	nop
 800709c:	20001bc1 	.word	0x20001bc1

080070a0 <__sinit>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	4604      	mov	r4, r0
 80070a4:	f7ff fff0 	bl	8007088 <__sfp_lock_acquire>
 80070a8:	6a23      	ldr	r3, [r4, #32]
 80070aa:	b11b      	cbz	r3, 80070b4 <__sinit+0x14>
 80070ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b0:	f7ff bff0 	b.w	8007094 <__sfp_lock_release>
 80070b4:	4b04      	ldr	r3, [pc, #16]	@ (80070c8 <__sinit+0x28>)
 80070b6:	6223      	str	r3, [r4, #32]
 80070b8:	4b04      	ldr	r3, [pc, #16]	@ (80070cc <__sinit+0x2c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1f5      	bne.n	80070ac <__sinit+0xc>
 80070c0:	f7ff ffc4 	bl	800704c <global_stdio_init.part.0>
 80070c4:	e7f2      	b.n	80070ac <__sinit+0xc>
 80070c6:	bf00      	nop
 80070c8:	0800700d 	.word	0x0800700d
 80070cc:	20001bb8 	.word	0x20001bb8

080070d0 <_fwalk_sglue>:
 80070d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d4:	4607      	mov	r7, r0
 80070d6:	4688      	mov	r8, r1
 80070d8:	4614      	mov	r4, r2
 80070da:	2600      	movs	r6, #0
 80070dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070e0:	f1b9 0901 	subs.w	r9, r9, #1
 80070e4:	d505      	bpl.n	80070f2 <_fwalk_sglue+0x22>
 80070e6:	6824      	ldr	r4, [r4, #0]
 80070e8:	2c00      	cmp	r4, #0
 80070ea:	d1f7      	bne.n	80070dc <_fwalk_sglue+0xc>
 80070ec:	4630      	mov	r0, r6
 80070ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d907      	bls.n	8007108 <_fwalk_sglue+0x38>
 80070f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070fc:	3301      	adds	r3, #1
 80070fe:	d003      	beq.n	8007108 <_fwalk_sglue+0x38>
 8007100:	4629      	mov	r1, r5
 8007102:	4638      	mov	r0, r7
 8007104:	47c0      	blx	r8
 8007106:	4306      	orrs	r6, r0
 8007108:	3568      	adds	r5, #104	@ 0x68
 800710a:	e7e9      	b.n	80070e0 <_fwalk_sglue+0x10>

0800710c <_puts_r>:
 800710c:	6a03      	ldr	r3, [r0, #32]
 800710e:	b570      	push	{r4, r5, r6, lr}
 8007110:	6884      	ldr	r4, [r0, #8]
 8007112:	4605      	mov	r5, r0
 8007114:	460e      	mov	r6, r1
 8007116:	b90b      	cbnz	r3, 800711c <_puts_r+0x10>
 8007118:	f7ff ffc2 	bl	80070a0 <__sinit>
 800711c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800711e:	07db      	lsls	r3, r3, #31
 8007120:	d405      	bmi.n	800712e <_puts_r+0x22>
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	0598      	lsls	r0, r3, #22
 8007126:	d402      	bmi.n	800712e <_puts_r+0x22>
 8007128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800712a:	f000 f99e 	bl	800746a <__retarget_lock_acquire_recursive>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	0719      	lsls	r1, r3, #28
 8007132:	d502      	bpl.n	800713a <_puts_r+0x2e>
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d135      	bne.n	80071a6 <_puts_r+0x9a>
 800713a:	4621      	mov	r1, r4
 800713c:	4628      	mov	r0, r5
 800713e:	f000 f8c5 	bl	80072cc <__swsetup_r>
 8007142:	b380      	cbz	r0, 80071a6 <_puts_r+0x9a>
 8007144:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007148:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800714a:	07da      	lsls	r2, r3, #31
 800714c:	d405      	bmi.n	800715a <_puts_r+0x4e>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	059b      	lsls	r3, r3, #22
 8007152:	d402      	bmi.n	800715a <_puts_r+0x4e>
 8007154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007156:	f000 f989 	bl	800746c <__retarget_lock_release_recursive>
 800715a:	4628      	mov	r0, r5
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	2b00      	cmp	r3, #0
 8007160:	da04      	bge.n	800716c <_puts_r+0x60>
 8007162:	69a2      	ldr	r2, [r4, #24]
 8007164:	429a      	cmp	r2, r3
 8007166:	dc17      	bgt.n	8007198 <_puts_r+0x8c>
 8007168:	290a      	cmp	r1, #10
 800716a:	d015      	beq.n	8007198 <_puts_r+0x8c>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	6022      	str	r2, [r4, #0]
 8007172:	7019      	strb	r1, [r3, #0]
 8007174:	68a3      	ldr	r3, [r4, #8]
 8007176:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800717a:	3b01      	subs	r3, #1
 800717c:	60a3      	str	r3, [r4, #8]
 800717e:	2900      	cmp	r1, #0
 8007180:	d1ed      	bne.n	800715e <_puts_r+0x52>
 8007182:	2b00      	cmp	r3, #0
 8007184:	da11      	bge.n	80071aa <_puts_r+0x9e>
 8007186:	4622      	mov	r2, r4
 8007188:	210a      	movs	r1, #10
 800718a:	4628      	mov	r0, r5
 800718c:	f000 f85f 	bl	800724e <__swbuf_r>
 8007190:	3001      	adds	r0, #1
 8007192:	d0d7      	beq.n	8007144 <_puts_r+0x38>
 8007194:	250a      	movs	r5, #10
 8007196:	e7d7      	b.n	8007148 <_puts_r+0x3c>
 8007198:	4622      	mov	r2, r4
 800719a:	4628      	mov	r0, r5
 800719c:	f000 f857 	bl	800724e <__swbuf_r>
 80071a0:	3001      	adds	r0, #1
 80071a2:	d1e7      	bne.n	8007174 <_puts_r+0x68>
 80071a4:	e7ce      	b.n	8007144 <_puts_r+0x38>
 80071a6:	3e01      	subs	r6, #1
 80071a8:	e7e4      	b.n	8007174 <_puts_r+0x68>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	6022      	str	r2, [r4, #0]
 80071b0:	220a      	movs	r2, #10
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	e7ee      	b.n	8007194 <_puts_r+0x88>
	...

080071b8 <puts>:
 80071b8:	4b02      	ldr	r3, [pc, #8]	@ (80071c4 <puts+0xc>)
 80071ba:	4601      	mov	r1, r0
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f7ff bfa5 	b.w	800710c <_puts_r>
 80071c2:	bf00      	nop
 80071c4:	2000001c 	.word	0x2000001c

080071c8 <__sread>:
 80071c8:	b510      	push	{r4, lr}
 80071ca:	460c      	mov	r4, r1
 80071cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d0:	f000 f8fc 	bl	80073cc <_read_r>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	bfab      	itete	ge
 80071d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071da:	89a3      	ldrhlt	r3, [r4, #12]
 80071dc:	181b      	addge	r3, r3, r0
 80071de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071e2:	bfac      	ite	ge
 80071e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071e6:	81a3      	strhlt	r3, [r4, #12]
 80071e8:	bd10      	pop	{r4, pc}

080071ea <__swrite>:
 80071ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	461f      	mov	r7, r3
 80071f0:	898b      	ldrh	r3, [r1, #12]
 80071f2:	05db      	lsls	r3, r3, #23
 80071f4:	4605      	mov	r5, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	4616      	mov	r6, r2
 80071fa:	d505      	bpl.n	8007208 <__swrite+0x1e>
 80071fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007200:	2302      	movs	r3, #2
 8007202:	2200      	movs	r2, #0
 8007204:	f000 f8d0 	bl	80073a8 <_lseek_r>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	4632      	mov	r2, r6
 8007216:	463b      	mov	r3, r7
 8007218:	4628      	mov	r0, r5
 800721a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800721e:	f000 b8e7 	b.w	80073f0 <_write_r>

08007222 <__sseek>:
 8007222:	b510      	push	{r4, lr}
 8007224:	460c      	mov	r4, r1
 8007226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722a:	f000 f8bd 	bl	80073a8 <_lseek_r>
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	bf15      	itete	ne
 8007234:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800723a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800723e:	81a3      	strheq	r3, [r4, #12]
 8007240:	bf18      	it	ne
 8007242:	81a3      	strhne	r3, [r4, #12]
 8007244:	bd10      	pop	{r4, pc}

08007246 <__sclose>:
 8007246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724a:	f000 b89d 	b.w	8007388 <_close_r>

0800724e <__swbuf_r>:
 800724e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007250:	460e      	mov	r6, r1
 8007252:	4614      	mov	r4, r2
 8007254:	4605      	mov	r5, r0
 8007256:	b118      	cbz	r0, 8007260 <__swbuf_r+0x12>
 8007258:	6a03      	ldr	r3, [r0, #32]
 800725a:	b90b      	cbnz	r3, 8007260 <__swbuf_r+0x12>
 800725c:	f7ff ff20 	bl	80070a0 <__sinit>
 8007260:	69a3      	ldr	r3, [r4, #24]
 8007262:	60a3      	str	r3, [r4, #8]
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	071a      	lsls	r2, r3, #28
 8007268:	d501      	bpl.n	800726e <__swbuf_r+0x20>
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	b943      	cbnz	r3, 8007280 <__swbuf_r+0x32>
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f82b 	bl	80072cc <__swsetup_r>
 8007276:	b118      	cbz	r0, 8007280 <__swbuf_r+0x32>
 8007278:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800727c:	4638      	mov	r0, r7
 800727e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	6922      	ldr	r2, [r4, #16]
 8007284:	1a98      	subs	r0, r3, r2
 8007286:	6963      	ldr	r3, [r4, #20]
 8007288:	b2f6      	uxtb	r6, r6
 800728a:	4283      	cmp	r3, r0
 800728c:	4637      	mov	r7, r6
 800728e:	dc05      	bgt.n	800729c <__swbuf_r+0x4e>
 8007290:	4621      	mov	r1, r4
 8007292:	4628      	mov	r0, r5
 8007294:	f000 fa76 	bl	8007784 <_fflush_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	d1ed      	bne.n	8007278 <__swbuf_r+0x2a>
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	3b01      	subs	r3, #1
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	701e      	strb	r6, [r3, #0]
 80072aa:	6962      	ldr	r2, [r4, #20]
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d004      	beq.n	80072bc <__swbuf_r+0x6e>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	07db      	lsls	r3, r3, #31
 80072b6:	d5e1      	bpl.n	800727c <__swbuf_r+0x2e>
 80072b8:	2e0a      	cmp	r6, #10
 80072ba:	d1df      	bne.n	800727c <__swbuf_r+0x2e>
 80072bc:	4621      	mov	r1, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 fa60 	bl	8007784 <_fflush_r>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d0d9      	beq.n	800727c <__swbuf_r+0x2e>
 80072c8:	e7d6      	b.n	8007278 <__swbuf_r+0x2a>
	...

080072cc <__swsetup_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4b29      	ldr	r3, [pc, #164]	@ (8007374 <__swsetup_r+0xa8>)
 80072d0:	4605      	mov	r5, r0
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	460c      	mov	r4, r1
 80072d6:	b118      	cbz	r0, 80072e0 <__swsetup_r+0x14>
 80072d8:	6a03      	ldr	r3, [r0, #32]
 80072da:	b90b      	cbnz	r3, 80072e0 <__swsetup_r+0x14>
 80072dc:	f7ff fee0 	bl	80070a0 <__sinit>
 80072e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e4:	0719      	lsls	r1, r3, #28
 80072e6:	d422      	bmi.n	800732e <__swsetup_r+0x62>
 80072e8:	06da      	lsls	r2, r3, #27
 80072ea:	d407      	bmi.n	80072fc <__swsetup_r+0x30>
 80072ec:	2209      	movs	r2, #9
 80072ee:	602a      	str	r2, [r5, #0]
 80072f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072fa:	e033      	b.n	8007364 <__swsetup_r+0x98>
 80072fc:	0758      	lsls	r0, r3, #29
 80072fe:	d512      	bpl.n	8007326 <__swsetup_r+0x5a>
 8007300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007302:	b141      	cbz	r1, 8007316 <__swsetup_r+0x4a>
 8007304:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007308:	4299      	cmp	r1, r3
 800730a:	d002      	beq.n	8007312 <__swsetup_r+0x46>
 800730c:	4628      	mov	r0, r5
 800730e:	f000 f8bd 	bl	800748c <_free_r>
 8007312:	2300      	movs	r3, #0
 8007314:	6363      	str	r3, [r4, #52]	@ 0x34
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	2300      	movs	r3, #0
 8007320:	6063      	str	r3, [r4, #4]
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	f043 0308 	orr.w	r3, r3, #8
 800732c:	81a3      	strh	r3, [r4, #12]
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	b94b      	cbnz	r3, 8007346 <__swsetup_r+0x7a>
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800733c:	d003      	beq.n	8007346 <__swsetup_r+0x7a>
 800733e:	4621      	mov	r1, r4
 8007340:	4628      	mov	r0, r5
 8007342:	f000 fa6d 	bl	8007820 <__smakebuf_r>
 8007346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800734a:	f013 0201 	ands.w	r2, r3, #1
 800734e:	d00a      	beq.n	8007366 <__swsetup_r+0x9a>
 8007350:	2200      	movs	r2, #0
 8007352:	60a2      	str	r2, [r4, #8]
 8007354:	6962      	ldr	r2, [r4, #20]
 8007356:	4252      	negs	r2, r2
 8007358:	61a2      	str	r2, [r4, #24]
 800735a:	6922      	ldr	r2, [r4, #16]
 800735c:	b942      	cbnz	r2, 8007370 <__swsetup_r+0xa4>
 800735e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007362:	d1c5      	bne.n	80072f0 <__swsetup_r+0x24>
 8007364:	bd38      	pop	{r3, r4, r5, pc}
 8007366:	0799      	lsls	r1, r3, #30
 8007368:	bf58      	it	pl
 800736a:	6962      	ldrpl	r2, [r4, #20]
 800736c:	60a2      	str	r2, [r4, #8]
 800736e:	e7f4      	b.n	800735a <__swsetup_r+0x8e>
 8007370:	2000      	movs	r0, #0
 8007372:	e7f7      	b.n	8007364 <__swsetup_r+0x98>
 8007374:	2000001c 	.word	0x2000001c

08007378 <memset>:
 8007378:	4402      	add	r2, r0
 800737a:	4603      	mov	r3, r0
 800737c:	4293      	cmp	r3, r2
 800737e:	d100      	bne.n	8007382 <memset+0xa>
 8007380:	4770      	bx	lr
 8007382:	f803 1b01 	strb.w	r1, [r3], #1
 8007386:	e7f9      	b.n	800737c <memset+0x4>

08007388 <_close_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4d06      	ldr	r5, [pc, #24]	@ (80073a4 <_close_r+0x1c>)
 800738c:	2300      	movs	r3, #0
 800738e:	4604      	mov	r4, r0
 8007390:	4608      	mov	r0, r1
 8007392:	602b      	str	r3, [r5, #0]
 8007394:	f7f9 fb72 	bl	8000a7c <_close>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_close_r+0x1a>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_close_r+0x1a>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20001bbc 	.word	0x20001bbc

080073a8 <_lseek_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4d07      	ldr	r5, [pc, #28]	@ (80073c8 <_lseek_r+0x20>)
 80073ac:	4604      	mov	r4, r0
 80073ae:	4608      	mov	r0, r1
 80073b0:	4611      	mov	r1, r2
 80073b2:	2200      	movs	r2, #0
 80073b4:	602a      	str	r2, [r5, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f7f9 fb87 	bl	8000aca <_lseek>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_lseek_r+0x1e>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_lseek_r+0x1e>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20001bbc 	.word	0x20001bbc

080073cc <_read_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d07      	ldr	r5, [pc, #28]	@ (80073ec <_read_r+0x20>)
 80073d0:	4604      	mov	r4, r0
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7f9 fb1a 	bl	8000a14 <_read>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_read_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_read_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20001bbc 	.word	0x20001bbc

080073f0 <_write_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4d07      	ldr	r5, [pc, #28]	@ (8007410 <_write_r+0x20>)
 80073f4:	4604      	mov	r4, r0
 80073f6:	4608      	mov	r0, r1
 80073f8:	4611      	mov	r1, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	602a      	str	r2, [r5, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	f7f9 fb26 	bl	8000a50 <_write>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_write_r+0x1e>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b103      	cbz	r3, 800740e <_write_r+0x1e>
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	20001bbc 	.word	0x20001bbc

08007414 <__errno>:
 8007414:	4b01      	ldr	r3, [pc, #4]	@ (800741c <__errno+0x8>)
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	2000001c 	.word	0x2000001c

08007420 <__libc_init_array>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4d0d      	ldr	r5, [pc, #52]	@ (8007458 <__libc_init_array+0x38>)
 8007424:	4c0d      	ldr	r4, [pc, #52]	@ (800745c <__libc_init_array+0x3c>)
 8007426:	1b64      	subs	r4, r4, r5
 8007428:	10a4      	asrs	r4, r4, #2
 800742a:	2600      	movs	r6, #0
 800742c:	42a6      	cmp	r6, r4
 800742e:	d109      	bne.n	8007444 <__libc_init_array+0x24>
 8007430:	4d0b      	ldr	r5, [pc, #44]	@ (8007460 <__libc_init_array+0x40>)
 8007432:	4c0c      	ldr	r4, [pc, #48]	@ (8007464 <__libc_init_array+0x44>)
 8007434:	f000 fa62 	bl	80078fc <_init>
 8007438:	1b64      	subs	r4, r4, r5
 800743a:	10a4      	asrs	r4, r4, #2
 800743c:	2600      	movs	r6, #0
 800743e:	42a6      	cmp	r6, r4
 8007440:	d105      	bne.n	800744e <__libc_init_array+0x2e>
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	f855 3b04 	ldr.w	r3, [r5], #4
 8007448:	4798      	blx	r3
 800744a:	3601      	adds	r6, #1
 800744c:	e7ee      	b.n	800742c <__libc_init_array+0xc>
 800744e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007452:	4798      	blx	r3
 8007454:	3601      	adds	r6, #1
 8007456:	e7f2      	b.n	800743e <__libc_init_array+0x1e>
 8007458:	08007ac8 	.word	0x08007ac8
 800745c:	08007ac8 	.word	0x08007ac8
 8007460:	08007ac8 	.word	0x08007ac8
 8007464:	08007acc 	.word	0x08007acc

08007468 <__retarget_lock_init_recursive>:
 8007468:	4770      	bx	lr

0800746a <__retarget_lock_acquire_recursive>:
 800746a:	4770      	bx	lr

0800746c <__retarget_lock_release_recursive>:
 800746c:	4770      	bx	lr

0800746e <memcpy>:
 800746e:	440a      	add	r2, r1
 8007470:	4291      	cmp	r1, r2
 8007472:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007476:	d100      	bne.n	800747a <memcpy+0xc>
 8007478:	4770      	bx	lr
 800747a:	b510      	push	{r4, lr}
 800747c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007484:	4291      	cmp	r1, r2
 8007486:	d1f9      	bne.n	800747c <memcpy+0xe>
 8007488:	bd10      	pop	{r4, pc}
	...

0800748c <_free_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4605      	mov	r5, r0
 8007490:	2900      	cmp	r1, #0
 8007492:	d041      	beq.n	8007518 <_free_r+0x8c>
 8007494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007498:	1f0c      	subs	r4, r1, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	bfb8      	it	lt
 800749e:	18e4      	addlt	r4, r4, r3
 80074a0:	f000 f8e0 	bl	8007664 <__malloc_lock>
 80074a4:	4a1d      	ldr	r2, [pc, #116]	@ (800751c <_free_r+0x90>)
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	b933      	cbnz	r3, 80074b8 <_free_r+0x2c>
 80074aa:	6063      	str	r3, [r4, #4]
 80074ac:	6014      	str	r4, [r2, #0]
 80074ae:	4628      	mov	r0, r5
 80074b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b4:	f000 b8dc 	b.w	8007670 <__malloc_unlock>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d908      	bls.n	80074ce <_free_r+0x42>
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	1821      	adds	r1, r4, r0
 80074c0:	428b      	cmp	r3, r1
 80074c2:	bf01      	itttt	eq
 80074c4:	6819      	ldreq	r1, [r3, #0]
 80074c6:	685b      	ldreq	r3, [r3, #4]
 80074c8:	1809      	addeq	r1, r1, r0
 80074ca:	6021      	streq	r1, [r4, #0]
 80074cc:	e7ed      	b.n	80074aa <_free_r+0x1e>
 80074ce:	461a      	mov	r2, r3
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	b10b      	cbz	r3, 80074d8 <_free_r+0x4c>
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d9fa      	bls.n	80074ce <_free_r+0x42>
 80074d8:	6811      	ldr	r1, [r2, #0]
 80074da:	1850      	adds	r0, r2, r1
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d10b      	bne.n	80074f8 <_free_r+0x6c>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	4401      	add	r1, r0
 80074e4:	1850      	adds	r0, r2, r1
 80074e6:	4283      	cmp	r3, r0
 80074e8:	6011      	str	r1, [r2, #0]
 80074ea:	d1e0      	bne.n	80074ae <_free_r+0x22>
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	6053      	str	r3, [r2, #4]
 80074f2:	4408      	add	r0, r1
 80074f4:	6010      	str	r0, [r2, #0]
 80074f6:	e7da      	b.n	80074ae <_free_r+0x22>
 80074f8:	d902      	bls.n	8007500 <_free_r+0x74>
 80074fa:	230c      	movs	r3, #12
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	e7d6      	b.n	80074ae <_free_r+0x22>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	1821      	adds	r1, r4, r0
 8007504:	428b      	cmp	r3, r1
 8007506:	bf04      	itt	eq
 8007508:	6819      	ldreq	r1, [r3, #0]
 800750a:	685b      	ldreq	r3, [r3, #4]
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	bf04      	itt	eq
 8007510:	1809      	addeq	r1, r1, r0
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	6054      	str	r4, [r2, #4]
 8007516:	e7ca      	b.n	80074ae <_free_r+0x22>
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	20001bc8 	.word	0x20001bc8

08007520 <sbrk_aligned>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	4e0f      	ldr	r6, [pc, #60]	@ (8007560 <sbrk_aligned+0x40>)
 8007524:	460c      	mov	r4, r1
 8007526:	6831      	ldr	r1, [r6, #0]
 8007528:	4605      	mov	r5, r0
 800752a:	b911      	cbnz	r1, 8007532 <sbrk_aligned+0x12>
 800752c:	f000 f9d6 	bl	80078dc <_sbrk_r>
 8007530:	6030      	str	r0, [r6, #0]
 8007532:	4621      	mov	r1, r4
 8007534:	4628      	mov	r0, r5
 8007536:	f000 f9d1 	bl	80078dc <_sbrk_r>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d103      	bne.n	8007546 <sbrk_aligned+0x26>
 800753e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007542:	4620      	mov	r0, r4
 8007544:	bd70      	pop	{r4, r5, r6, pc}
 8007546:	1cc4      	adds	r4, r0, #3
 8007548:	f024 0403 	bic.w	r4, r4, #3
 800754c:	42a0      	cmp	r0, r4
 800754e:	d0f8      	beq.n	8007542 <sbrk_aligned+0x22>
 8007550:	1a21      	subs	r1, r4, r0
 8007552:	4628      	mov	r0, r5
 8007554:	f000 f9c2 	bl	80078dc <_sbrk_r>
 8007558:	3001      	adds	r0, #1
 800755a:	d1f2      	bne.n	8007542 <sbrk_aligned+0x22>
 800755c:	e7ef      	b.n	800753e <sbrk_aligned+0x1e>
 800755e:	bf00      	nop
 8007560:	20001bc4 	.word	0x20001bc4

08007564 <_malloc_r>:
 8007564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007568:	1ccd      	adds	r5, r1, #3
 800756a:	f025 0503 	bic.w	r5, r5, #3
 800756e:	3508      	adds	r5, #8
 8007570:	2d0c      	cmp	r5, #12
 8007572:	bf38      	it	cc
 8007574:	250c      	movcc	r5, #12
 8007576:	2d00      	cmp	r5, #0
 8007578:	4606      	mov	r6, r0
 800757a:	db01      	blt.n	8007580 <_malloc_r+0x1c>
 800757c:	42a9      	cmp	r1, r5
 800757e:	d904      	bls.n	800758a <_malloc_r+0x26>
 8007580:	230c      	movs	r3, #12
 8007582:	6033      	str	r3, [r6, #0]
 8007584:	2000      	movs	r0, #0
 8007586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007660 <_malloc_r+0xfc>
 800758e:	f000 f869 	bl	8007664 <__malloc_lock>
 8007592:	f8d8 3000 	ldr.w	r3, [r8]
 8007596:	461c      	mov	r4, r3
 8007598:	bb44      	cbnz	r4, 80075ec <_malloc_r+0x88>
 800759a:	4629      	mov	r1, r5
 800759c:	4630      	mov	r0, r6
 800759e:	f7ff ffbf 	bl	8007520 <sbrk_aligned>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	4604      	mov	r4, r0
 80075a6:	d158      	bne.n	800765a <_malloc_r+0xf6>
 80075a8:	f8d8 4000 	ldr.w	r4, [r8]
 80075ac:	4627      	mov	r7, r4
 80075ae:	2f00      	cmp	r7, #0
 80075b0:	d143      	bne.n	800763a <_malloc_r+0xd6>
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	d04b      	beq.n	800764e <_malloc_r+0xea>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	4639      	mov	r1, r7
 80075ba:	4630      	mov	r0, r6
 80075bc:	eb04 0903 	add.w	r9, r4, r3
 80075c0:	f000 f98c 	bl	80078dc <_sbrk_r>
 80075c4:	4581      	cmp	r9, r0
 80075c6:	d142      	bne.n	800764e <_malloc_r+0xea>
 80075c8:	6821      	ldr	r1, [r4, #0]
 80075ca:	1a6d      	subs	r5, r5, r1
 80075cc:	4629      	mov	r1, r5
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ffa6 	bl	8007520 <sbrk_aligned>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d03a      	beq.n	800764e <_malloc_r+0xea>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	442b      	add	r3, r5
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	f8d8 3000 	ldr.w	r3, [r8]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	bb62      	cbnz	r2, 8007640 <_malloc_r+0xdc>
 80075e6:	f8c8 7000 	str.w	r7, [r8]
 80075ea:	e00f      	b.n	800760c <_malloc_r+0xa8>
 80075ec:	6822      	ldr	r2, [r4, #0]
 80075ee:	1b52      	subs	r2, r2, r5
 80075f0:	d420      	bmi.n	8007634 <_malloc_r+0xd0>
 80075f2:	2a0b      	cmp	r2, #11
 80075f4:	d917      	bls.n	8007626 <_malloc_r+0xc2>
 80075f6:	1961      	adds	r1, r4, r5
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	6025      	str	r5, [r4, #0]
 80075fc:	bf18      	it	ne
 80075fe:	6059      	strne	r1, [r3, #4]
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	bf08      	it	eq
 8007604:	f8c8 1000 	streq.w	r1, [r8]
 8007608:	5162      	str	r2, [r4, r5]
 800760a:	604b      	str	r3, [r1, #4]
 800760c:	4630      	mov	r0, r6
 800760e:	f000 f82f 	bl	8007670 <__malloc_unlock>
 8007612:	f104 000b 	add.w	r0, r4, #11
 8007616:	1d23      	adds	r3, r4, #4
 8007618:	f020 0007 	bic.w	r0, r0, #7
 800761c:	1ac2      	subs	r2, r0, r3
 800761e:	bf1c      	itt	ne
 8007620:	1a1b      	subne	r3, r3, r0
 8007622:	50a3      	strne	r3, [r4, r2]
 8007624:	e7af      	b.n	8007586 <_malloc_r+0x22>
 8007626:	6862      	ldr	r2, [r4, #4]
 8007628:	42a3      	cmp	r3, r4
 800762a:	bf0c      	ite	eq
 800762c:	f8c8 2000 	streq.w	r2, [r8]
 8007630:	605a      	strne	r2, [r3, #4]
 8007632:	e7eb      	b.n	800760c <_malloc_r+0xa8>
 8007634:	4623      	mov	r3, r4
 8007636:	6864      	ldr	r4, [r4, #4]
 8007638:	e7ae      	b.n	8007598 <_malloc_r+0x34>
 800763a:	463c      	mov	r4, r7
 800763c:	687f      	ldr	r7, [r7, #4]
 800763e:	e7b6      	b.n	80075ae <_malloc_r+0x4a>
 8007640:	461a      	mov	r2, r3
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	42a3      	cmp	r3, r4
 8007646:	d1fb      	bne.n	8007640 <_malloc_r+0xdc>
 8007648:	2300      	movs	r3, #0
 800764a:	6053      	str	r3, [r2, #4]
 800764c:	e7de      	b.n	800760c <_malloc_r+0xa8>
 800764e:	230c      	movs	r3, #12
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	4630      	mov	r0, r6
 8007654:	f000 f80c 	bl	8007670 <__malloc_unlock>
 8007658:	e794      	b.n	8007584 <_malloc_r+0x20>
 800765a:	6005      	str	r5, [r0, #0]
 800765c:	e7d6      	b.n	800760c <_malloc_r+0xa8>
 800765e:	bf00      	nop
 8007660:	20001bc8 	.word	0x20001bc8

08007664 <__malloc_lock>:
 8007664:	4801      	ldr	r0, [pc, #4]	@ (800766c <__malloc_lock+0x8>)
 8007666:	f7ff bf00 	b.w	800746a <__retarget_lock_acquire_recursive>
 800766a:	bf00      	nop
 800766c:	20001bc0 	.word	0x20001bc0

08007670 <__malloc_unlock>:
 8007670:	4801      	ldr	r0, [pc, #4]	@ (8007678 <__malloc_unlock+0x8>)
 8007672:	f7ff befb 	b.w	800746c <__retarget_lock_release_recursive>
 8007676:	bf00      	nop
 8007678:	20001bc0 	.word	0x20001bc0

0800767c <__sflush_r>:
 800767c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007684:	0716      	lsls	r6, r2, #28
 8007686:	4605      	mov	r5, r0
 8007688:	460c      	mov	r4, r1
 800768a:	d454      	bmi.n	8007736 <__sflush_r+0xba>
 800768c:	684b      	ldr	r3, [r1, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	dc02      	bgt.n	8007698 <__sflush_r+0x1c>
 8007692:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	dd48      	ble.n	800772a <__sflush_r+0xae>
 8007698:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800769a:	2e00      	cmp	r6, #0
 800769c:	d045      	beq.n	800772a <__sflush_r+0xae>
 800769e:	2300      	movs	r3, #0
 80076a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076a4:	682f      	ldr	r7, [r5, #0]
 80076a6:	6a21      	ldr	r1, [r4, #32]
 80076a8:	602b      	str	r3, [r5, #0]
 80076aa:	d030      	beq.n	800770e <__sflush_r+0x92>
 80076ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	0759      	lsls	r1, r3, #29
 80076b2:	d505      	bpl.n	80076c0 <__sflush_r+0x44>
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	1ad2      	subs	r2, r2, r3
 80076b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076ba:	b10b      	cbz	r3, 80076c0 <__sflush_r+0x44>
 80076bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	2300      	movs	r3, #0
 80076c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076c4:	6a21      	ldr	r1, [r4, #32]
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b0      	blx	r6
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	d106      	bne.n	80076de <__sflush_r+0x62>
 80076d0:	6829      	ldr	r1, [r5, #0]
 80076d2:	291d      	cmp	r1, #29
 80076d4:	d82b      	bhi.n	800772e <__sflush_r+0xb2>
 80076d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007780 <__sflush_r+0x104>)
 80076d8:	410a      	asrs	r2, r1
 80076da:	07d6      	lsls	r6, r2, #31
 80076dc:	d427      	bmi.n	800772e <__sflush_r+0xb2>
 80076de:	2200      	movs	r2, #0
 80076e0:	6062      	str	r2, [r4, #4]
 80076e2:	04d9      	lsls	r1, r3, #19
 80076e4:	6922      	ldr	r2, [r4, #16]
 80076e6:	6022      	str	r2, [r4, #0]
 80076e8:	d504      	bpl.n	80076f4 <__sflush_r+0x78>
 80076ea:	1c42      	adds	r2, r0, #1
 80076ec:	d101      	bne.n	80076f2 <__sflush_r+0x76>
 80076ee:	682b      	ldr	r3, [r5, #0]
 80076f0:	b903      	cbnz	r3, 80076f4 <__sflush_r+0x78>
 80076f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80076f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076f6:	602f      	str	r7, [r5, #0]
 80076f8:	b1b9      	cbz	r1, 800772a <__sflush_r+0xae>
 80076fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076fe:	4299      	cmp	r1, r3
 8007700:	d002      	beq.n	8007708 <__sflush_r+0x8c>
 8007702:	4628      	mov	r0, r5
 8007704:	f7ff fec2 	bl	800748c <_free_r>
 8007708:	2300      	movs	r3, #0
 800770a:	6363      	str	r3, [r4, #52]	@ 0x34
 800770c:	e00d      	b.n	800772a <__sflush_r+0xae>
 800770e:	2301      	movs	r3, #1
 8007710:	4628      	mov	r0, r5
 8007712:	47b0      	blx	r6
 8007714:	4602      	mov	r2, r0
 8007716:	1c50      	adds	r0, r2, #1
 8007718:	d1c9      	bne.n	80076ae <__sflush_r+0x32>
 800771a:	682b      	ldr	r3, [r5, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0c6      	beq.n	80076ae <__sflush_r+0x32>
 8007720:	2b1d      	cmp	r3, #29
 8007722:	d001      	beq.n	8007728 <__sflush_r+0xac>
 8007724:	2b16      	cmp	r3, #22
 8007726:	d11e      	bne.n	8007766 <__sflush_r+0xea>
 8007728:	602f      	str	r7, [r5, #0]
 800772a:	2000      	movs	r0, #0
 800772c:	e022      	b.n	8007774 <__sflush_r+0xf8>
 800772e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007732:	b21b      	sxth	r3, r3
 8007734:	e01b      	b.n	800776e <__sflush_r+0xf2>
 8007736:	690f      	ldr	r7, [r1, #16]
 8007738:	2f00      	cmp	r7, #0
 800773a:	d0f6      	beq.n	800772a <__sflush_r+0xae>
 800773c:	0793      	lsls	r3, r2, #30
 800773e:	680e      	ldr	r6, [r1, #0]
 8007740:	bf08      	it	eq
 8007742:	694b      	ldreq	r3, [r1, #20]
 8007744:	600f      	str	r7, [r1, #0]
 8007746:	bf18      	it	ne
 8007748:	2300      	movne	r3, #0
 800774a:	eba6 0807 	sub.w	r8, r6, r7
 800774e:	608b      	str	r3, [r1, #8]
 8007750:	f1b8 0f00 	cmp.w	r8, #0
 8007754:	dde9      	ble.n	800772a <__sflush_r+0xae>
 8007756:	6a21      	ldr	r1, [r4, #32]
 8007758:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800775a:	4643      	mov	r3, r8
 800775c:	463a      	mov	r2, r7
 800775e:	4628      	mov	r0, r5
 8007760:	47b0      	blx	r6
 8007762:	2800      	cmp	r0, #0
 8007764:	dc08      	bgt.n	8007778 <__sflush_r+0xfc>
 8007766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800776a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800776e:	81a3      	strh	r3, [r4, #12]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007778:	4407      	add	r7, r0
 800777a:	eba8 0800 	sub.w	r8, r8, r0
 800777e:	e7e7      	b.n	8007750 <__sflush_r+0xd4>
 8007780:	dfbffffe 	.word	0xdfbffffe

08007784 <_fflush_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	690b      	ldr	r3, [r1, #16]
 8007788:	4605      	mov	r5, r0
 800778a:	460c      	mov	r4, r1
 800778c:	b913      	cbnz	r3, 8007794 <_fflush_r+0x10>
 800778e:	2500      	movs	r5, #0
 8007790:	4628      	mov	r0, r5
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	b118      	cbz	r0, 800779e <_fflush_r+0x1a>
 8007796:	6a03      	ldr	r3, [r0, #32]
 8007798:	b90b      	cbnz	r3, 800779e <_fflush_r+0x1a>
 800779a:	f7ff fc81 	bl	80070a0 <__sinit>
 800779e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0f3      	beq.n	800778e <_fflush_r+0xa>
 80077a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077a8:	07d0      	lsls	r0, r2, #31
 80077aa:	d404      	bmi.n	80077b6 <_fflush_r+0x32>
 80077ac:	0599      	lsls	r1, r3, #22
 80077ae:	d402      	bmi.n	80077b6 <_fflush_r+0x32>
 80077b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077b2:	f7ff fe5a 	bl	800746a <__retarget_lock_acquire_recursive>
 80077b6:	4628      	mov	r0, r5
 80077b8:	4621      	mov	r1, r4
 80077ba:	f7ff ff5f 	bl	800767c <__sflush_r>
 80077be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077c0:	07da      	lsls	r2, r3, #31
 80077c2:	4605      	mov	r5, r0
 80077c4:	d4e4      	bmi.n	8007790 <_fflush_r+0xc>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	059b      	lsls	r3, r3, #22
 80077ca:	d4e1      	bmi.n	8007790 <_fflush_r+0xc>
 80077cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ce:	f7ff fe4d 	bl	800746c <__retarget_lock_release_recursive>
 80077d2:	e7dd      	b.n	8007790 <_fflush_r+0xc>

080077d4 <__swhatbuf_r>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	2900      	cmp	r1, #0
 80077de:	b096      	sub	sp, #88	@ 0x58
 80077e0:	4615      	mov	r5, r2
 80077e2:	461e      	mov	r6, r3
 80077e4:	da0d      	bge.n	8007802 <__swhatbuf_r+0x2e>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077ec:	f04f 0100 	mov.w	r1, #0
 80077f0:	bf14      	ite	ne
 80077f2:	2340      	movne	r3, #64	@ 0x40
 80077f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077f8:	2000      	movs	r0, #0
 80077fa:	6031      	str	r1, [r6, #0]
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	b016      	add	sp, #88	@ 0x58
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	466a      	mov	r2, sp
 8007804:	f000 f848 	bl	8007898 <_fstat_r>
 8007808:	2800      	cmp	r0, #0
 800780a:	dbec      	blt.n	80077e6 <__swhatbuf_r+0x12>
 800780c:	9901      	ldr	r1, [sp, #4]
 800780e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007812:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007816:	4259      	negs	r1, r3
 8007818:	4159      	adcs	r1, r3
 800781a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800781e:	e7eb      	b.n	80077f8 <__swhatbuf_r+0x24>

08007820 <__smakebuf_r>:
 8007820:	898b      	ldrh	r3, [r1, #12]
 8007822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007824:	079d      	lsls	r5, r3, #30
 8007826:	4606      	mov	r6, r0
 8007828:	460c      	mov	r4, r1
 800782a:	d507      	bpl.n	800783c <__smakebuf_r+0x1c>
 800782c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	6123      	str	r3, [r4, #16]
 8007834:	2301      	movs	r3, #1
 8007836:	6163      	str	r3, [r4, #20]
 8007838:	b003      	add	sp, #12
 800783a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783c:	ab01      	add	r3, sp, #4
 800783e:	466a      	mov	r2, sp
 8007840:	f7ff ffc8 	bl	80077d4 <__swhatbuf_r>
 8007844:	9f00      	ldr	r7, [sp, #0]
 8007846:	4605      	mov	r5, r0
 8007848:	4639      	mov	r1, r7
 800784a:	4630      	mov	r0, r6
 800784c:	f7ff fe8a 	bl	8007564 <_malloc_r>
 8007850:	b948      	cbnz	r0, 8007866 <__smakebuf_r+0x46>
 8007852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007856:	059a      	lsls	r2, r3, #22
 8007858:	d4ee      	bmi.n	8007838 <__smakebuf_r+0x18>
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	f043 0302 	orr.w	r3, r3, #2
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	e7e2      	b.n	800782c <__smakebuf_r+0xc>
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	6020      	str	r0, [r4, #0]
 800786a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	9b01      	ldr	r3, [sp, #4]
 8007872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007876:	b15b      	cbz	r3, 8007890 <__smakebuf_r+0x70>
 8007878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787c:	4630      	mov	r0, r6
 800787e:	f000 f81d 	bl	80078bc <_isatty_r>
 8007882:	b128      	cbz	r0, 8007890 <__smakebuf_r+0x70>
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	f043 0301 	orr.w	r3, r3, #1
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	431d      	orrs	r5, r3
 8007894:	81a5      	strh	r5, [r4, #12]
 8007896:	e7cf      	b.n	8007838 <__smakebuf_r+0x18>

08007898 <_fstat_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	4d07      	ldr	r5, [pc, #28]	@ (80078b8 <_fstat_r+0x20>)
 800789c:	2300      	movs	r3, #0
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f7f9 f8f5 	bl	8000a94 <_fstat>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d102      	bne.n	80078b4 <_fstat_r+0x1c>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b103      	cbz	r3, 80078b4 <_fstat_r+0x1c>
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20001bbc 	.word	0x20001bbc

080078bc <_isatty_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d06      	ldr	r5, [pc, #24]	@ (80078d8 <_isatty_r+0x1c>)
 80078c0:	2300      	movs	r3, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7f9 f8f4 	bl	8000ab4 <_isatty>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_isatty_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_isatty_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20001bbc 	.word	0x20001bbc

080078dc <_sbrk_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d06      	ldr	r5, [pc, #24]	@ (80078f8 <_sbrk_r+0x1c>)
 80078e0:	2300      	movs	r3, #0
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	f7f9 f8fc 	bl	8000ae4 <_sbrk>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_sbrk_r+0x1a>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_sbrk_r+0x1a>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	20001bbc 	.word	0x20001bbc

080078fc <_init>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr

08007908 <_fini>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	bf00      	nop
 800790c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790e:	bc08      	pop	{r3}
 8007910:	469e      	mov	lr, r3
 8007912:	4770      	bx	lr
