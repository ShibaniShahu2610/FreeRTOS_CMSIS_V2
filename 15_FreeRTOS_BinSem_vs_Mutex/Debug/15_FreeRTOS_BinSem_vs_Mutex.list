
15_FreeRTOS_BinSem_vs_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a40  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da4  08007da4  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007da4  08007da4  00008da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dac  08007dac  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dac  08007dac  00008dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db0  08007db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007db4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  2000006c  08007e20  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  08007e20  00009c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd5e  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038aa  00000000  00000000  00024dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  000286a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001224  00000000  00000000  00029e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004994  00000000  00000000  0002b02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019369  00000000  00000000  0002f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f326  00000000  00000000  00048d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015804f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068d4  00000000  00000000  00158094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007bd8 	.word	0x08007bd8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007bd8 	.word	0x08007bd8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fb61 	bl	8000baa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f84a 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8c6 	bl	800067c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f0:	f000 f898 	bl	8000624 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f003 fa6a 	bl	80039cc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex_1 */
  Mutex_1Handle = osMutexNew(&Mutex_1_attributes);
 80004f8:	4814      	ldr	r0, [pc, #80]	@ (800054c <main+0x6c>)
 80004fa:	f003 fb88 	bl	8003c0e <osMutexNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <main+0x70>)
 8000502:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem_1 */
  BinarySem_1Handle = osSemaphoreNew(1, 1, &BinarySem_1_attributes);
 8000504:	4a13      	ldr	r2, [pc, #76]	@ (8000554 <main+0x74>)
 8000506:	2101      	movs	r1, #1
 8000508:	2001      	movs	r0, #1
 800050a:	f003 fc8e 	bl	8003e2a <osSemaphoreNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a11      	ldr	r2, [pc, #68]	@ (8000558 <main+0x78>)
 8000512:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(Start_Task_1, NULL, &Task_1_attributes);
 8000514:	4a11      	ldr	r2, [pc, #68]	@ (800055c <main+0x7c>)
 8000516:	2100      	movs	r1, #0
 8000518:	4811      	ldr	r0, [pc, #68]	@ (8000560 <main+0x80>)
 800051a:	f003 faa1 	bl	8003a60 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <main+0x84>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Start_Task_2, NULL, &Task_2_attributes);
 8000524:	4a10      	ldr	r2, [pc, #64]	@ (8000568 <main+0x88>)
 8000526:	2100      	movs	r1, #0
 8000528:	4810      	ldr	r0, [pc, #64]	@ (800056c <main+0x8c>)
 800052a:	f003 fa99 	bl	8003a60 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0f      	ldr	r2, [pc, #60]	@ (8000570 <main+0x90>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task_3 */
  Task_3Handle = osThreadNew(Start_Task_3, NULL, &Task_3_attributes);
 8000534:	4a0f      	ldr	r2, [pc, #60]	@ (8000574 <main+0x94>)
 8000536:	2100      	movs	r1, #0
 8000538:	480f      	ldr	r0, [pc, #60]	@ (8000578 <main+0x98>)
 800053a:	f003 fa91 	bl	8003a60 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <main+0x9c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f003 fa66 	bl	8003a14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x68>
 800054c:	08007d3c 	.word	0x08007d3c
 8000550:	2000011c 	.word	0x2000011c
 8000554:	08007d4c 	.word	0x08007d4c
 8000558:	20000120 	.word	0x20000120
 800055c:	08007cd0 	.word	0x08007cd0
 8000560:	080006c5 	.word	0x080006c5
 8000564:	20000110 	.word	0x20000110
 8000568:	08007cf4 	.word	0x08007cf4
 800056c:	0800071d 	.word	0x0800071d
 8000570:	20000114 	.word	0x20000114
 8000574:	08007d18 	.word	0x08007d18
 8000578:	08000759 	.word	0x08000759
 800057c:	20000118 	.word	0x20000118

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	@ 0x58
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	@ 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f007 f80a 	bl	80075a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a6:	f000 fdbb 	bl	8001120 <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b0:	f000 f8f4 	bl	800079c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2340      	movs	r3, #64	@ 0x40
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c6:	2302      	movs	r3, #2
 80005c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ce:	230a      	movs	r3, #10
 80005d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fe02 	bl	80011ec <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ee:	f000 f8d5 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2303      	movs	r3, #3
 80005f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2104      	movs	r1, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fa07 	bl	8001a20 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000618:	f000 f8c0 	bl	800079c <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3758      	adds	r7, #88	@ 0x58
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 800062a:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <MX_LPUART1_UART_Init+0x54>)
 800062c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_LPUART1_UART_Init+0x50>)
 8000662:	f002 fbc3 	bl	8002dec <HAL_UART_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f896 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000088 	.word	0x20000088
 8000678:	40008000 	.word	0x40008000

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_GPIO_Init+0x44>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a0e      	ldr	r2, [pc, #56]	@ (80006c0 <MX_GPIO_Init+0x44>)
 8000688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_GPIO_Init+0x44>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800069a:	f000 fd97 	bl	80011cc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_GPIO_Init+0x44>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <MX_GPIO_Init+0x44>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <MX_GPIO_Init+0x44>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <Start_Task_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Task_1 */
void Start_Task_1(void *argument)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t count = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
//	osSemaphoreAcquire(BinarySem_1Handle, osWaitForever);
	osMutexAcquire(Mutex_1Handle, osWaitForever);
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <Start_Task_1+0x4c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fb1e 	bl	8003d1a <osMutexAcquire>
	printf("************* Task-1 completed ----------------\r\n");
 80006de:	480d      	ldr	r0, [pc, #52]	@ (8000714 <Start_Task_1+0x50>)
 80006e0:	f006 fe82 	bl	80073e8 <puts>

	if(count == 3)
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d105      	bne.n	80006f6 <Start_Task_1+0x32>
	{
		osThreadSetPriority(Task_1Handle, osPriorityLow);
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <Start_Task_1+0x54>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2108      	movs	r1, #8
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fa47 	bl	8003b84 <osThreadSetPriority>
	}
	count++;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	3301      	adds	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
//	osSemaphoreRelease(BinarySem_1Handle);
	osMutexRelease(Mutex_1Handle);
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <Start_Task_1+0x4c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fb55 	bl	8003db0 <osMutexRelease>
	osDelay(1000);
 8000706:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070a:	f003 fa65 	bl	8003bd8 <osDelay>
	osMutexAcquire(Mutex_1Handle, osWaitForever);
 800070e:	e7df      	b.n	80006d0 <Start_Task_1+0xc>
 8000710:	2000011c 	.word	0x2000011c
 8000714:	08007c1c 	.word	0x08007c1c
 8000718:	20000110 	.word	0x20000110

0800071c <Start_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_2 */
void Start_Task_2(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_2 */
  /* Infinite loop */
  for(;;)
  {
//	osSemaphoreAcquire(BinarySem_1Handle, osWaitForever);
	osMutexAcquire(Mutex_1Handle, osWaitForever);
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <Start_Task_2+0x34>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800072c:	4618      	mov	r0, r3
 800072e:	f003 faf4 	bl	8003d1a <osMutexAcquire>
	printf("************* Task-2 completed ---------------- \r\n");
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <Start_Task_2+0x38>)
 8000734:	f006 fe58 	bl	80073e8 <puts>
//	osSemaphoreRelease(BinarySem_1Handle);
	osMutexRelease(Mutex_1Handle);
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <Start_Task_2+0x34>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fb37 	bl	8003db0 <osMutexRelease>
    osDelay(2000);
 8000742:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000746:	f003 fa47 	bl	8003bd8 <osDelay>
	osMutexAcquire(Mutex_1Handle, osWaitForever);
 800074a:	bf00      	nop
 800074c:	e7ea      	b.n	8000724 <Start_Task_2+0x8>
 800074e:	bf00      	nop
 8000750:	2000011c 	.word	0x2000011c
 8000754:	08007c50 	.word	0x08007c50

08000758 <Start_Task_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_3 */
void Start_Task_3(void *argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_3 */
  /* Infinite loop */
  for(;;)
  {
	printf("************* Task-3 completed ---------------- \r\n");
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <Start_Task_3+0x1c>)
 8000762:	f006 fe41 	bl	80073e8 <puts>
    osDelay(3000);
 8000766:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800076a:	f003 fa35 	bl	8003bd8 <osDelay>
	printf("************* Task-3 completed ---------------- \r\n");
 800076e:	bf00      	nop
 8000770:	e7f6      	b.n	8000760 <Start_Task_3+0x8>
 8000772:	bf00      	nop
 8000774:	08007c84 	.word	0x08007c84

08000778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078a:	f000 fa27 	bl	8000bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40001000 	.word	0x40001000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_MspInit+0x4c>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	210f      	movs	r1, #15
 80007e2:	f06f 0001 	mvn.w	r0, #1
 80007e6:	f000 fad1 	bl	8000d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0ac      	sub	sp, #176	@ 0xb0
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	228c      	movs	r2, #140	@ 0x8c
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f006 fec5 	bl	80075a8 <memset>
  if(huart->Instance==LPUART1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a22      	ldr	r2, [pc, #136]	@ (80008ac <HAL_UART_MspInit+0xb4>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d13d      	bne.n	80008a4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000828:	2320      	movs	r3, #32
 800082a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fb49 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000840:	f7ff ffac 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <HAL_UART_MspInit+0xb8>)
 8000846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000848:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <HAL_UART_MspInit+0xb8>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <HAL_UART_MspInit+0xb8>)
 8000852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <HAL_UART_MspInit+0xb8>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000860:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <HAL_UART_MspInit+0xb8>)
 8000862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_UART_MspInit+0xb8>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000874:	f000 fcaa 	bl	80011cc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000878:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800087c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000892:	2308      	movs	r3, #8
 8000894:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000898:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800089c:	4619      	mov	r1, r3
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <HAL_UART_MspInit+0xbc>)
 80008a0:	f000 fa9e 	bl	8000de0 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80008a4:	bf00      	nop
 80008a6:	37b0      	adds	r7, #176	@ 0xb0
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40008000 	.word	0x40008000
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48001800 	.word	0x48001800

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	@ 0x38
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <HAL_InitTick+0xe0>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ca:	4a33      	ldr	r2, [pc, #204]	@ (8000998 <HAL_InitTick+0xe0>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d2:	4b31      	ldr	r3, [pc, #196]	@ (8000998 <HAL_InitTick+0xe0>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008de:	f107 0210 	add.w	r2, r7, #16
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fa5d 	bl	8001da8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ee:	6a3b      	ldr	r3, [r7, #32]
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f8:	f001 fa2a 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 80008fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80008fe:	e004      	b.n	800090a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000900:	f001 fa26 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8000904:	4603      	mov	r3, r0
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800090c:	4a23      	ldr	r2, [pc, #140]	@ (800099c <HAL_InitTick+0xe4>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0c9b      	lsrs	r3, r3, #18
 8000914:	3b01      	subs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000918:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <HAL_InitTick+0xe8>)
 800091a:	4a22      	ldr	r2, [pc, #136]	@ (80009a4 <HAL_InitTick+0xec>)
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <HAL_InitTick+0xe8>)
 8000920:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000926:	4a1e      	ldr	r2, [pc, #120]	@ (80009a0 <HAL_InitTick+0xe8>)
 8000928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800092a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <HAL_InitTick+0xe8>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_InitTick+0xe8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <HAL_InitTick+0xe8>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800093e:	4818      	ldr	r0, [pc, #96]	@ (80009a0 <HAL_InitTick+0xe8>)
 8000940:	f001 ff8e 	bl	8002860 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800094a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800094e:	2b00      	cmp	r3, #0
 8000950:	d11b      	bne.n	800098a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000952:	4813      	ldr	r0, [pc, #76]	@ (80009a0 <HAL_InitTick+0xe8>)
 8000954:	f001 ffe6 	bl	8002924 <HAL_TIM_Base_Start_IT>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800095e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000962:	2b00      	cmp	r3, #0
 8000964:	d111      	bne.n	800098a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000966:	2036      	movs	r0, #54	@ 0x36
 8000968:	f000 fa2c 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d808      	bhi.n	8000984 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000972:	2200      	movs	r2, #0
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	2036      	movs	r0, #54	@ 0x36
 8000978:	f000 fa08 	bl	8000d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_InitTick+0xf0>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e002      	b.n	800098a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800098a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800098e:	4618      	mov	r0, r3
 8000990:	3738      	adds	r7, #56	@ 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	20000124 	.word	0x20000124
 80009a4:	40001000 	.word	0x40001000
 80009a8:	20000004 	.word	0x20000004

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <TIM6_DAC_IRQHandler+0x10>)
 80009ea:	f002 f80b 	bl	8002a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000124 	.word	0x20000124

080009f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e00a      	b.n	8000a20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0a:	f3af 8000 	nop.w
 8000a0e:	4601      	mov	r1, r0
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf0      	blt.n	8000a0a <_read+0x12>
  }

  return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *)ptr, len, HAL_MAX_DELAY);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <_write+0x28>)
 8000a4c:	f002 fa1c 	bl	8002e88 <HAL_UART_Transmit>
  return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000088 	.word	0x20000088

08000a60 <_close>:

int _close(int file)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a88:	605a      	str	r2, [r3, #4]
  return 0;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_isatty>:

int _isatty(int file)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aa0:	2301      	movs	r3, #1
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b085      	sub	sp, #20
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f006 fdfa 	bl	80076f0 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20050000 	.word	0x20050000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	20000170 	.word	0x20000170
 8000b30:	20001c68 	.word	0x20001c68

08000b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b5c:	f7ff ffea 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	@ (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f006 fdb9 	bl	80076fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8a:	f7ff fca9 	bl	80004e0 <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b9c:	08007db4 	.word	0x08007db4
  ldr r2, =_sbss
 8000ba0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ba4:	20001c64 	.word	0x20001c64

08000ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_2_IRQHandler>

08000baa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8de 	bl	8000d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff fe7c 	bl	80008b8 <HAL_InitTick>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e001      	b.n	8000bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bcc:	f7ff fdec 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000174 	.word	0x20000174

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000174 	.word	0x20000174

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	@ (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	@ 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	@ 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff4c 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9e:	f7ff ff61 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000da2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	f7ff ffb1 	bl	8000d10 <NVIC_EncodePriority>
 8000dae:	4602      	mov	r2, r0
 8000db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff80 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff54 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e166      	b.n	80010be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8158 	beq.w	80010b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <HAL_GPIO_Init+0x40>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	f003 0201 	and.w	r2, r3, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d017      	beq.n	8000ebe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	6939      	ldr	r1, [r7, #16]
 8000f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0203 	and.w	r2, r3, #3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80b2 	beq.w	80010b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b61      	ldr	r3, [pc, #388]	@ (80010dc <HAL_GPIO_Init+0x2fc>)
 8000f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f58:	4a60      	ldr	r2, [pc, #384]	@ (80010dc <HAL_GPIO_Init+0x2fc>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f60:	4b5e      	ldr	r3, [pc, #376]	@ (80010dc <HAL_GPIO_Init+0x2fc>)
 8000f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a5c      	ldr	r2, [pc, #368]	@ (80010e0 <HAL_GPIO_Init+0x300>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f96:	d02b      	beq.n	8000ff0 <HAL_GPIO_Init+0x210>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a52      	ldr	r2, [pc, #328]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d025      	beq.n	8000fec <HAL_GPIO_Init+0x20c>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a51      	ldr	r2, [pc, #324]	@ (80010e8 <HAL_GPIO_Init+0x308>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d01f      	beq.n	8000fe8 <HAL_GPIO_Init+0x208>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a50      	ldr	r2, [pc, #320]	@ (80010ec <HAL_GPIO_Init+0x30c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d019      	beq.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4f      	ldr	r2, [pc, #316]	@ (80010f0 <HAL_GPIO_Init+0x310>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d013      	beq.n	8000fe0 <HAL_GPIO_Init+0x200>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a4e      	ldr	r2, [pc, #312]	@ (80010f4 <HAL_GPIO_Init+0x314>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00d      	beq.n	8000fdc <HAL_GPIO_Init+0x1fc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a4d      	ldr	r2, [pc, #308]	@ (80010f8 <HAL_GPIO_Init+0x318>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x1f8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a4c      	ldr	r2, [pc, #304]	@ (80010fc <HAL_GPIO_Init+0x31c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_GPIO_Init+0x1f4>
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	e00e      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	e00c      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fd8:	2306      	movs	r3, #6
 8000fda:	e00a      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fdc:	2305      	movs	r3, #5
 8000fde:	e008      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e004      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001002:	4937      	ldr	r1, [pc, #220]	@ (80010e0 <HAL_GPIO_Init+0x300>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001010:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <HAL_GPIO_Init+0x320>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001034:	4a32      	ldr	r2, [pc, #200]	@ (8001100 <HAL_GPIO_Init+0x320>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800103a:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <HAL_GPIO_Init+0x320>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800105e:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <HAL_GPIO_Init+0x320>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001064:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <HAL_GPIO_Init+0x320>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001088:	4a1d      	ldr	r2, [pc, #116]	@ (8001100 <HAL_GPIO_Init+0x320>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <HAL_GPIO_Init+0x320>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b2:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <HAL_GPIO_Init+0x320>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f47f ae91 	bne.w	8000df0 <HAL_GPIO_Init+0x10>
  }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	48000400 	.word	0x48000400
 80010e8:	48000800 	.word	0x48000800
 80010ec:	48000c00 	.word	0x48000c00
 80010f0:	48001000 	.word	0x48001000
 80010f4:	48001400 	.word	0x48001400
 80010f8:	48001800 	.word	0x48001800
 80010fc:	48001c00 	.word	0x48001c00
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <HAL_PWREx_GetVoltageRange+0x18>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40007000 	.word	0x40007000

08001120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800112e:	d130      	bne.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800113c:	d038      	beq.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800113e:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001146:	4a1e      	ldr	r2, [pc, #120]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001148:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800114c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2232      	movs	r2, #50	@ 0x32
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	4a1b      	ldr	r2, [pc, #108]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0c9b      	lsrs	r3, r3, #18
 8001160:	3301      	adds	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001164:	e002      	b.n	800116c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3b01      	subs	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800116c:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001178:	d102      	bne.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x60>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f2      	bne.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800118c:	d110      	bne.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e00f      	b.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800119a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800119e:	d007      	beq.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011a8:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40007000 	.word	0x40007000
 80011c4:	20000000 	.word	0x20000000
 80011c8:	431bde83 	.word	0x431bde83

080011cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011da:	6053      	str	r3, [r2, #4]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000

080011ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	f000 bc08 	b.w	8001a10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001200:	4b96      	ldr	r3, [pc, #600]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800120a:	4b94      	ldr	r3, [pc, #592]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80e4 	beq.w	80013ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_RCC_OscConfig+0x4c>
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b0c      	cmp	r3, #12
 800122c:	f040 808b 	bne.w	8001346 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b01      	cmp	r3, #1
 8001234:	f040 8087 	bne.w	8001346 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001238:	4b88      	ldr	r3, [pc, #544]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x64>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e3df      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	4b81      	ldr	r3, [pc, #516]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_RCC_OscConfig+0x7e>
 8001260:	4b7e      	ldr	r3, [pc, #504]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001268:	e005      	b.n	8001276 <HAL_RCC_OscConfig+0x8a>
 800126a:	4b7c      	ldr	r3, [pc, #496]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001276:	4293      	cmp	r3, r2
 8001278:	d223      	bcs.n	80012c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fdc4 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e3c0      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128e:	4b73      	ldr	r3, [pc, #460]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a72      	ldr	r2, [pc, #456]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b70      	ldr	r3, [pc, #448]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	496d      	ldr	r1, [pc, #436]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ac:	4b6b      	ldr	r3, [pc, #428]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	4968      	ldr	r1, [pc, #416]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
 80012c0:	e025      	b.n	800130e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c2:	4b66      	ldr	r3, [pc, #408]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a65      	ldr	r2, [pc, #404]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b63      	ldr	r3, [pc, #396]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4960      	ldr	r1, [pc, #384]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e0:	4b5e      	ldr	r3, [pc, #376]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	495b      	ldr	r1, [pc, #364]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fd84 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e380      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800130e:	f000 fc87 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001312:	4602      	mov	r2, r0
 8001314:	4b51      	ldr	r3, [pc, #324]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	4950      	ldr	r1, [pc, #320]	@ (8001460 <HAL_RCC_OscConfig+0x274>)
 8001320:	5ccb      	ldrb	r3, [r1, r3]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	4a4e      	ldr	r2, [pc, #312]	@ (8001464 <HAL_RCC_OscConfig+0x278>)
 800132c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800132e:	4b4e      	ldr	r3, [pc, #312]	@ (8001468 <HAL_RCC_OscConfig+0x27c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fac0 	bl	80008b8 <HAL_InitTick>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d052      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	e364      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d032      	beq.n	80013b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800134e:	4b43      	ldr	r3, [pc, #268]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a42      	ldr	r2, [pc, #264]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800135a:	f7ff fc53 	bl	8000c04 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001362:	f7ff fc4f 	bl	8000c04 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e34d      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001374:	4b39      	ldr	r3, [pc, #228]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001380:	4b36      	ldr	r3, [pc, #216]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a35      	ldr	r2, [pc, #212]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b33      	ldr	r3, [pc, #204]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4930      	ldr	r1, [pc, #192]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	492b      	ldr	r1, [pc, #172]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	604b      	str	r3, [r1, #4]
 80013b2:	e01a      	b.n	80013ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013b4:	4b29      	ldr	r3, [pc, #164]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a28      	ldr	r2, [pc, #160]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc20 	bl	8000c04 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc1c 	bl	8000c04 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e31a      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1dc>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d073      	beq.n	80014de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_OscConfig+0x21c>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d10e      	bne.n	8001420 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b03      	cmp	r3, #3
 8001406:	d10b      	bne.n	8001420 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d063      	beq.n	80014dc <HAL_RCC_OscConfig+0x2f0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d15f      	bne.n	80014dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e2f7      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x24c>
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e025      	b.n	8001484 <HAL_RCC_OscConfig+0x298>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001440:	d114      	bne.n	800146c <HAL_RCC_OscConfig+0x280>
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b03      	ldr	r3, [pc, #12]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a02      	ldr	r2, [pc, #8]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e013      	b.n	8001484 <HAL_RCC_OscConfig+0x298>
 800145c:	40021000 	.word	0x40021000
 8001460:	08007d5c 	.word	0x08007d5c
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004
 800146c:	4ba0      	ldr	r3, [pc, #640]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a9f      	ldr	r2, [pc, #636]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b9d      	ldr	r3, [pc, #628]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a9c      	ldr	r2, [pc, #624]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fbba 	bl	8000c04 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fbb6 	bl	8000c04 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	@ 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e2b4      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	4b92      	ldr	r3, [pc, #584]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x2a8>
 80014b2:	e014      	b.n	80014de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fba6 	bl	8000c04 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fba2 	bl	8000c04 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	@ 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e2a0      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	4b88      	ldr	r3, [pc, #544]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x2d0>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d060      	beq.n	80015ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x310>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d119      	bne.n	800152a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d116      	bne.n	800152a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fc:	4b7c      	ldr	r3, [pc, #496]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x328>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e27d      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b76      	ldr	r3, [pc, #472]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	4973      	ldr	r1, [pc, #460]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	e040      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d023      	beq.n	800157a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001532:	4b6f      	ldr	r3, [pc, #444]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6e      	ldr	r2, [pc, #440]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff fb61 	bl	8000c04 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fb5d 	bl	8000c04 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e25b      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b62      	ldr	r3, [pc, #392]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	495f      	ldr	r1, [pc, #380]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
 8001578:	e018      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	4b5d      	ldr	r3, [pc, #372]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a5c      	ldr	r2, [pc, #368]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff fb3d 	bl	8000c04 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff fb39 	bl	8000c04 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e237      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a0:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d03c      	beq.n	8001632 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01c      	beq.n	80015fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c0:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c6:	4a4a      	ldr	r2, [pc, #296]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fb18 	bl	8000c04 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fb14 	bl	8000c04 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e212      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	4b41      	ldr	r3, [pc, #260]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0ef      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3ec>
 80015f8:	e01b      	b.n	8001632 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001600:	4a3b      	ldr	r2, [pc, #236]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fafb 	bl	8000c04 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff faf7 	bl	8000c04 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1f5      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ef      	bne.n	8001612 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80a6 	beq.w	800178c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001644:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165a:	6593      	str	r3, [r2, #88]	@ 0x58
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001668:	2301      	movs	r3, #1
 800166a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166c:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <HAL_RCC_OscConfig+0x508>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d118      	bne.n	80016aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <HAL_RCC_OscConfig+0x508>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <HAL_RCC_OscConfig+0x508>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001684:	f7ff fabe 	bl	8000c04 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168c:	f7ff faba 	bl	8000c04 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1b8      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_RCC_OscConfig+0x508>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4d8>
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c2:	e029      	b.n	8001718 <HAL_RCC_OscConfig+0x52c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d115      	bne.n	80016f8 <HAL_RCC_OscConfig+0x50c>
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e2:	4a03      	ldr	r2, [pc, #12]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x52c>
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40007000 	.word	0x40007000
 80016f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fe:	4a9c      	ldr	r2, [pc, #624]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001708:	4b99      	ldr	r3, [pc, #612]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170e:	4a98      	ldr	r2, [pc, #608]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d016      	beq.n	800174e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fa70 	bl	8000c04 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fa6c 	bl	8000c04 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e168      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173e:	4b8c      	ldr	r3, [pc, #560]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ed      	beq.n	8001728 <HAL_RCC_OscConfig+0x53c>
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fa59 	bl	8000c04 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fa55 	bl	8000c04 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e151      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	4b80      	ldr	r3, [pc, #512]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ed      	bne.n	8001756 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b7b      	ldr	r3, [pc, #492]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	4a7a      	ldr	r2, [pc, #488]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d03c      	beq.n	8001812 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01c      	beq.n	80017da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a0:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80017a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017a6:	4a72      	ldr	r2, [pc, #456]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fa28 	bl	8000c04 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b8:	f7ff fa24 	bl	8000c04 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e122      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ca:	4b69      	ldr	r3, [pc, #420]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80017cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ef      	beq.n	80017b8 <HAL_RCC_OscConfig+0x5cc>
 80017d8:	e01b      	b.n	8001812 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017da:	4b65      	ldr	r3, [pc, #404]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80017dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e0:	4a63      	ldr	r2, [pc, #396]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fa0b 	bl	8000c04 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f2:	f7ff fa07 	bl	8000c04 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e105      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001804:	4b5a      	ldr	r3, [pc, #360]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ef      	bne.n	80017f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80f9 	beq.w	8001a0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001820:	2b02      	cmp	r3, #2
 8001822:	f040 80cf 	bne.w	80019c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001826:	4b52      	ldr	r3, [pc, #328]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001836:	429a      	cmp	r2, r3
 8001838:	d12c      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001844:	3b01      	subs	r3, #1
 8001846:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d123      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001856:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d11b      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001866:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d113      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d109      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d071      	beq.n	8001978 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d068      	beq.n	800196c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800189a:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018a6:	4b32      	ldr	r3, [pc, #200]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0ac      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80018bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018c2:	f7ff f99f 	bl	8000c04 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff f99b 	bl	8000c04 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e099      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018dc:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e8:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <HAL_RCC_OscConfig+0x788>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018f8:	3a01      	subs	r2, #1
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001902:	0212      	lsls	r2, r2, #8
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800190a:	0852      	lsrs	r2, r2, #1
 800190c:	3a01      	subs	r2, #1
 800190e:	0552      	lsls	r2, r2, #21
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001916:	0852      	lsrs	r2, r2, #1
 8001918:	3a01      	subs	r2, #1
 800191a:	0652      	lsls	r2, r2, #25
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001922:	06d2      	lsls	r2, r2, #27
 8001924:	430a      	orrs	r2, r1
 8001926:	4912      	ldr	r1, [pc, #72]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800192c:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001938:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a0c      	ldr	r2, [pc, #48]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001944:	f7ff f95e 	bl	8000c04 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f95a 	bl	8000c04 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e058      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196a:	e050      	b.n	8001a0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e04f      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
 8001970:	40021000 	.word	0x40021000
 8001974:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d144      	bne.n	8001a0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001984:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a23      	ldr	r2, [pc, #140]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800198e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a20      	ldr	r2, [pc, #128]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800199a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800199c:	f7ff f932 	bl	8000c04 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f92e 	bl	8000c04 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e02c      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x7b8>
 80019c2:	e024      	b.n	8001a0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d01f      	beq.n	8001a0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 80019d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f915 	bl	8000c04 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff f911 	bl	8000c04 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e00f      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	4905      	ldr	r1, [pc, #20]	@ (8001a18 <HAL_RCC_OscConfig+0x82c>)
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_RCC_OscConfig+0x830>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
 8001a08:	e001      	b.n	8001a0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	feeefffc 	.word	0xfeeefffc

08001a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0e7      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b75      	ldr	r3, [pc, #468]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d910      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b72      	ldr	r3, [pc, #456]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 0207 	bic.w	r2, r3, #7
 8001a4a:	4970      	ldr	r1, [pc, #448]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b6e      	ldr	r3, [pc, #440]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0cf      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d908      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4960      	ldr	r1, [pc, #384]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d04c      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d121      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0a6      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abe:	4b54      	ldr	r3, [pc, #336]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e09a      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e08e      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e086      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b46      	ldr	r3, [pc, #280]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4943      	ldr	r1, [pc, #268]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b08:	f7ff f87c 	bl	8000c04 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff f878 	bl	8000c04 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e06e      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b3a      	ldr	r3, [pc, #232]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d208      	bcs.n	8001b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b2e      	ldr	r3, [pc, #184]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	492b      	ldr	r1, [pc, #172]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b66:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d210      	bcs.n	8001b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 0207 	bic.w	r2, r3, #7
 8001b7c:	4923      	ldr	r1, [pc, #140]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e036      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4918      	ldr	r1, [pc, #96]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4910      	ldr	r1, [pc, #64]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd4:	f000 f824 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	490b      	ldr	r1, [pc, #44]	@ (8001c14 <HAL_RCC_ClockConfig+0x1f4>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_ClockConfig+0x1fc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fe5d 	bl	80008b8 <HAL_InitTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c02:	7afb      	ldrb	r3, [r7, #11]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08007d5c 	.word	0x08007d5c
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c38:	4b3b      	ldr	r3, [pc, #236]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d11e      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c54:	4b34      	ldr	r3, [pc, #208]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c60:	4b31      	ldr	r3, [pc, #196]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e005      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c98:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e004      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d134      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d003      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0xac>
 8001cc4:	e005      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cce:	617b      	str	r3, [r7, #20]
      break;
 8001cd0:	e002      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	617b      	str	r3, [r7, #20]
      break;
 8001cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	fb03 f202 	mul.w	r2, r3, r2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	0e5b      	lsrs	r3, r3, #25
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d18:	69bb      	ldr	r3, [r7, #24]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08007d74 	.word	0x08007d74
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4904      	ldr	r1, [pc, #16]	@ (8001d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08007d6c 	.word	0x08007d6c

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d80:	f7ff ffda 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0adb      	lsrs	r3, r3, #11
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4904      	ldr	r1, [pc, #16]	@ (8001da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08007d6c 	.word	0x08007d6c

08001da8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	220f      	movs	r2, #15
 8001db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dea:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <HAL_RCC_GetClockConfig+0x60>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0207 	and.w	r2, r3, #7
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	601a      	str	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40022000 	.word	0x40022000

08001e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e24:	f7ff f96e 	bl	8001104 <HAL_PWREx_GetVoltageRange>
 8001e28:	6178      	str	r0, [r7, #20]
 8001e2a:	e014      	b.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e30:	4a24      	ldr	r2, [pc, #144]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff f95e 	bl	8001104 <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5c:	d10b      	bne.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	@ 0x80
 8001e62:	d919      	bls.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e68:	d902      	bls.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	e013      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e010      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b80      	cmp	r3, #128	@ 0x80
 8001e7a:	d902      	bls.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e00a      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	@ 0x80
 8001e86:	d102      	bne.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e004      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b70      	cmp	r3, #112	@ 0x70
 8001e92:	d101      	bne.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4909      	ldr	r1, [pc, #36]	@ (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d041      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ef0:	d02a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ef2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ef6:	d824      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001efc:	d008      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001efe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f02:	d81e      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f0c:	d010      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f10:	4b86      	ldr	r3, [pc, #536]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a85      	ldr	r2, [pc, #532]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e015      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 facd 	bl	80024c4 <RCCEx_PLLSAI1_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2e:	e00c      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3320      	adds	r3, #32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fbb6 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f40:	e003      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	74fb      	strb	r3, [r7, #19]
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f50:	4b76      	ldr	r3, [pc, #472]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f5e:	4973      	ldr	r1, [pc, #460]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f66:	e001      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d041      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f80:	d02a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f86:	d824      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f92:	d81e      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa0:	4b62      	ldr	r3, [pc, #392]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a61      	ldr	r2, [pc, #388]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fac:	e015      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fa85 	bl	80024c4 <RCCEx_PLLSAI1_Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbe:	e00c      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb6e 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd0:	e003      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fd6:	e000      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe0:	4b52      	ldr	r3, [pc, #328]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fee:	494f      	ldr	r1, [pc, #316]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ff6:	e001      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a0 	beq.w	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800200e:	4b47      	ldr	r3, [pc, #284]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b41      	ldr	r3, [pc, #260]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	4a40      	ldr	r2, [pc, #256]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002030:	4b3e      	ldr	r3, [pc, #248]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203c:	2301      	movs	r3, #1
 800203e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002040:	4b3b      	ldr	r3, [pc, #236]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a3a      	ldr	r2, [pc, #232]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800204c:	f7fe fdda 	bl	8000c04 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002052:	e009      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002054:	f7fe fdd6 	bl	8000c04 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d902      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	74fb      	strb	r3, [r7, #19]
        break;
 8002066:	e005      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002068:	4b31      	ldr	r3, [pc, #196]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d15c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800207a:	4b2c      	ldr	r3, [pc, #176]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01f      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	d019      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002098:	4b24      	ldr	r3, [pc, #144]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a4:	4b21      	ldr	r3, [pc, #132]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020aa:	4a20      	ldr	r2, [pc, #128]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c4:	4a19      	ldr	r2, [pc, #100]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fd95 	bl	8000c04 <HAL_GetTick>
 80020da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020dc:	e00b      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe fd91 	bl	8000c04 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d902      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	74fb      	strb	r3, [r7, #19]
            break;
 80020f4:	e006      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f6:	4b0d      	ldr	r3, [pc, #52]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ec      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	4904      	ldr	r1, [pc, #16]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002122:	e009      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
 8002128:	e006      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002138:	7c7b      	ldrb	r3, [r7, #17]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4ba6      	ldr	r3, [pc, #664]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	4aa5      	ldr	r2, [pc, #660]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002156:	4ba0      	ldr	r3, [pc, #640]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	f023 0203 	bic.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	499c      	ldr	r1, [pc, #624]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002178:	4b97      	ldr	r3, [pc, #604]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f023 020c 	bic.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002186:	4994      	ldr	r1, [pc, #592]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800219a:	4b8f      	ldr	r3, [pc, #572]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	498b      	ldr	r1, [pc, #556]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021bc:	4b86      	ldr	r3, [pc, #536]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	4983      	ldr	r1, [pc, #524]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021de:	4b7e      	ldr	r3, [pc, #504]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ec:	497a      	ldr	r1, [pc, #488]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002200:	4b75      	ldr	r3, [pc, #468]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4972      	ldr	r1, [pc, #456]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002222:	4b6d      	ldr	r3, [pc, #436]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002228:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002230:	4969      	ldr	r1, [pc, #420]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002244:	4b64      	ldr	r3, [pc, #400]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002252:	4961      	ldr	r1, [pc, #388]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002266:	4b5c      	ldr	r3, [pc, #368]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002274:	4958      	ldr	r1, [pc, #352]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002288:	4b53      	ldr	r3, [pc, #332]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	4950      	ldr	r1, [pc, #320]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022aa:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	4947      	ldr	r1, [pc, #284]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022cc:	4b42      	ldr	r3, [pc, #264]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022da:	493f      	ldr	r1, [pc, #252]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d028      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ee:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fc:	4936      	ldr	r1, [pc, #216]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800230c:	d106      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230e:	4b32      	ldr	r3, [pc, #200]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4a31      	ldr	r2, [pc, #196]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002318:	60d3      	str	r3, [r2, #12]
 800231a:	e011      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f8c9 	bl	80024c4 <RCCEx_PLLSAI1_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d028      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800234c:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800235a:	491f      	ldr	r1, [pc, #124]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800236a:	d106      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a19      	ldr	r2, [pc, #100]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002376:	60d3      	str	r3, [r2, #12]
 8002378:	e011      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800237e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002382:	d10c      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f89a 	bl	80024c4 <RCCEx_PLLSAI1_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d02a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023b8:	4907      	ldr	r1, [pc, #28]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c8:	d108      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ca:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4a02      	ldr	r2, [pc, #8]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d4:	60d3      	str	r3, [r2, #12]
 80023d6:	e013      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80023d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f869 	bl	80024c4 <RCCEx_PLLSAI1_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02f      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800240c:	4b2c      	ldr	r3, [pc, #176]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800241a:	4929      	ldr	r1, [pc, #164]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800242a:	d10d      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	2102      	movs	r1, #2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f846 	bl	80024c4 <RCCEx_PLLSAI1_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d014      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	74bb      	strb	r3, [r7, #18]
 8002446:	e011      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800244c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002450:	d10c      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3320      	adds	r3, #32
 8002456:	2102      	movs	r1, #2
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f925 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002488:	490d      	ldr	r1, [pc, #52]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800249c:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ac:	4904      	ldr	r1, [pc, #16]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000

080024c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024d2:	4b74      	ldr	r3, [pc, #464]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d018      	beq.n	8002510 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024de:	4b71      	ldr	r3, [pc, #452]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0203 	and.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d10d      	bne.n	800250a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
       ||
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024f6:	4b6b      	ldr	r3, [pc, #428]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
       ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d047      	beq.n	800259a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e044      	b.n	800259a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d018      	beq.n	800254a <RCCEx_PLLSAI1_Config+0x86>
 8002518:	2b03      	cmp	r3, #3
 800251a:	d825      	bhi.n	8002568 <RCCEx_PLLSAI1_Config+0xa4>
 800251c:	2b01      	cmp	r3, #1
 800251e:	d002      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x62>
 8002520:	2b02      	cmp	r3, #2
 8002522:	d009      	beq.n	8002538 <RCCEx_PLLSAI1_Config+0x74>
 8002524:	e020      	b.n	8002568 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002526:	4b5f      	ldr	r3, [pc, #380]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11d      	bne.n	800256e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002536:	e01a      	b.n	800256e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002538:	4b5a      	ldr	r3, [pc, #360]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d116      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002548:	e013      	b.n	8002572 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800254a:	4b56      	ldr	r3, [pc, #344]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002556:	4b53      	ldr	r3, [pc, #332]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002566:	e006      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      break;
 800256c:	e004      	b.n	8002578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002576:	bf00      	nop
    }

    if(status == HAL_OK)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10d      	bne.n	800259a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800257e:	4b49      	ldr	r3, [pc, #292]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	430b      	orrs	r3, r1
 8002594:	4943      	ldr	r1, [pc, #268]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d17c      	bne.n	800269a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025a0:	4b40      	ldr	r3, [pc, #256]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a3f      	ldr	r2, [pc, #252]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ac:	f7fe fb2a 	bl	8000c04 <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025b2:	e009      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b4:	f7fe fb26 	bl	8000c04 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d902      	bls.n	80025c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	73fb      	strb	r3, [r7, #15]
        break;
 80025c6:	e005      	b.n	80025d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025c8:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ef      	bne.n	80025b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d15f      	bne.n	800269a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d110      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e0:	4b30      	ldr	r3, [pc, #192]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80025e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6892      	ldr	r2, [r2, #8]
 80025f0:	0211      	lsls	r1, r2, #8
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68d2      	ldr	r2, [r2, #12]
 80025f6:	06d2      	lsls	r2, r2, #27
 80025f8:	430a      	orrs	r2, r1
 80025fa:	492a      	ldr	r1, [pc, #168]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	610b      	str	r3, [r1, #16]
 8002600:	e027      	b.n	8002652 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d112      	bne.n	800262e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002608:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002610:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	0211      	lsls	r1, r2, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6912      	ldr	r2, [r2, #16]
 800261e:	0852      	lsrs	r2, r2, #1
 8002620:	3a01      	subs	r2, #1
 8002622:	0552      	lsls	r2, r2, #21
 8002624:	430a      	orrs	r2, r1
 8002626:	491f      	ldr	r1, [pc, #124]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002628:	4313      	orrs	r3, r2
 800262a:	610b      	str	r3, [r1, #16]
 800262c:	e011      	b.n	8002652 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800262e:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002636:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6892      	ldr	r2, [r2, #8]
 800263e:	0211      	lsls	r1, r2, #8
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6952      	ldr	r2, [r2, #20]
 8002644:	0852      	lsrs	r2, r2, #1
 8002646:	3a01      	subs	r2, #1
 8002648:	0652      	lsls	r2, r2, #25
 800264a:	430a      	orrs	r2, r1
 800264c:	4915      	ldr	r1, [pc, #84]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002658:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800265c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe fad1 	bl	8000c04 <HAL_GetTick>
 8002662:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002664:	e009      	b.n	800267a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002666:	f7fe facd 	bl	8000c04 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d902      	bls.n	800267a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	73fb      	strb	r3, [r7, #15]
          break;
 8002678:	e005      	b.n	8002686 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ef      	beq.n	8002666 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4903      	ldr	r1, [pc, #12]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000

080026a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026b6:	4b69      	ldr	r3, [pc, #420]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d018      	beq.n	80026f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026c2:	4b66      	ldr	r3, [pc, #408]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d10d      	bne.n	80026ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
       ||
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026da:	4b60      	ldr	r3, [pc, #384]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d047      	beq.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e044      	b.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d018      	beq.n	800272e <RCCEx_PLLSAI2_Config+0x86>
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d825      	bhi.n	800274c <RCCEx_PLLSAI2_Config+0xa4>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d002      	beq.n	800270a <RCCEx_PLLSAI2_Config+0x62>
 8002704:	2b02      	cmp	r3, #2
 8002706:	d009      	beq.n	800271c <RCCEx_PLLSAI2_Config+0x74>
 8002708:	e020      	b.n	800274c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800270a:	4b54      	ldr	r3, [pc, #336]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11d      	bne.n	8002752 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e01a      	b.n	8002752 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800271c:	4b4f      	ldr	r3, [pc, #316]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d116      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272c:	e013      	b.n	8002756 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800272e:	4b4b      	ldr	r3, [pc, #300]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800273a:	4b48      	ldr	r3, [pc, #288]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800274a:	e006      	b.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e004      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800275a:	bf00      	nop
    }

    if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002762:	4b3e      	ldr	r3, [pc, #248]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	430b      	orrs	r3, r1
 8002778:	4938      	ldr	r1, [pc, #224]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d166      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002784:	4b35      	ldr	r3, [pc, #212]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a34      	ldr	r2, [pc, #208]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002790:	f7fe fa38 	bl	8000c04 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002796:	e009      	b.n	80027ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002798:	f7fe fa34 	bl	8000c04 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d902      	bls.n	80027ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	73fb      	strb	r3, [r7, #15]
        break;
 80027aa:	e005      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ac:	4b2b      	ldr	r3, [pc, #172]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ef      	bne.n	8002798 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d149      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d110      	bne.n	80027e6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c4:	4b25      	ldr	r3, [pc, #148]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80027cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6892      	ldr	r2, [r2, #8]
 80027d4:	0211      	lsls	r1, r2, #8
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68d2      	ldr	r2, [r2, #12]
 80027da:	06d2      	lsls	r2, r2, #27
 80027dc:	430a      	orrs	r2, r1
 80027de:	491f      	ldr	r1, [pc, #124]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	614b      	str	r3, [r1, #20]
 80027e4:	e011      	b.n	800280a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6892      	ldr	r2, [r2, #8]
 80027f6:	0211      	lsls	r1, r2, #8
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6912      	ldr	r2, [r2, #16]
 80027fc:	0852      	lsrs	r2, r2, #1
 80027fe:	3a01      	subs	r2, #1
 8002800:	0652      	lsls	r2, r2, #25
 8002802:	430a      	orrs	r2, r1
 8002804:	4915      	ldr	r1, [pc, #84]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800280a:	4b14      	ldr	r3, [pc, #80]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a13      	ldr	r2, [pc, #76]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002814:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe f9f5 	bl	8000c04 <HAL_GetTick>
 800281a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800281c:	e009      	b.n	8002832 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800281e:	f7fe f9f1 	bl	8000c04 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d902      	bls.n	8002832 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	73fb      	strb	r3, [r7, #15]
          break;
 8002830:	e005      	b.n	800283e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0ef      	beq.n	800281e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	4903      	ldr	r1, [pc, #12]	@ (800285c <RCCEx_PLLSAI2_Config+0x1b4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e049      	b.n	8002906 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f841 	bl	800290e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f000 f9e0 	bl	8002c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e04f      	b.n	80029dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a23      	ldr	r2, [pc, #140]	@ (80029e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01d      	beq.n	800299a <HAL_TIM_Base_Start_IT+0x76>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002966:	d018      	beq.n	800299a <HAL_TIM_Base_Start_IT+0x76>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1f      	ldr	r2, [pc, #124]	@ (80029ec <HAL_TIM_Base_Start_IT+0xc8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <HAL_TIM_Base_Start_IT+0x76>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00e      	beq.n	800299a <HAL_TIM_Base_Start_IT+0x76>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_TIM_Base_Start_IT+0x76>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <HAL_TIM_Base_Start_IT+0x76>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a19      	ldr	r2, [pc, #100]	@ (80029fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d115      	bne.n	80029c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4b17      	ldr	r3, [pc, #92]	@ (8002a00 <HAL_TIM_Base_Start_IT+0xdc>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	d015      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0xb4>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b2:	d011      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	e008      	b.n	80029d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e000      	b.n	80029da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40013400 	.word	0x40013400
 80029fc:	40014000 	.word	0x40014000
 8002a00:	00010007 	.word	0x00010007

08002a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d020      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0202 	mvn.w	r2, #2
 8002a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8e9 	bl	8002c26 <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8db 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f8ec 	bl	8002c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d020      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01b      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0204 	mvn.w	r2, #4
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8c3 	bl	8002c26 <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8b5 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8c6 	bl	8002c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d020      	beq.n	8002b00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01b      	beq.n	8002b00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0208 	mvn.w	r2, #8
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f89d 	bl	8002c26 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f88f 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f8a0 	bl	8002c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d020      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01b      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0210 	mvn.w	r2, #16
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2208      	movs	r2, #8
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f877 	bl	8002c26 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f869 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f87a 	bl	8002c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0201 	mvn.w	r2, #1
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fd fe04 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d104      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f913 	bl	8002dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f90b 	bl	8002dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00c      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f834 	bl	8002c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00c      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f06f 0220 	mvn.w	r2, #32
 8002c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f8d3 	bl	8002db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a46      	ldr	r2, [pc, #280]	@ (8002d90 <TIM_Base_SetConfig+0x12c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c82:	d00f      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a43      	ldr	r2, [pc, #268]	@ (8002d94 <TIM_Base_SetConfig+0x130>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a42      	ldr	r2, [pc, #264]	@ (8002d98 <TIM_Base_SetConfig+0x134>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a41      	ldr	r2, [pc, #260]	@ (8002d9c <TIM_Base_SetConfig+0x138>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a40      	ldr	r2, [pc, #256]	@ (8002da0 <TIM_Base_SetConfig+0x13c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a35      	ldr	r2, [pc, #212]	@ (8002d90 <TIM_Base_SetConfig+0x12c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc4:	d01b      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a32      	ldr	r2, [pc, #200]	@ (8002d94 <TIM_Base_SetConfig+0x130>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d017      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a31      	ldr	r2, [pc, #196]	@ (8002d98 <TIM_Base_SetConfig+0x134>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a30      	ldr	r2, [pc, #192]	@ (8002d9c <TIM_Base_SetConfig+0x138>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00f      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8002da0 <TIM_Base_SetConfig+0x13c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8002da4 <TIM_Base_SetConfig+0x140>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8002da8 <TIM_Base_SetConfig+0x144>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_Base_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8002dac <TIM_Base_SetConfig+0x148>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <TIM_Base_SetConfig+0x12c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00f      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a18      	ldr	r2, [pc, #96]	@ (8002da0 <TIM_Base_SetConfig+0x13c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a17      	ldr	r2, [pc, #92]	@ (8002da4 <TIM_Base_SetConfig+0x140>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a16      	ldr	r2, [pc, #88]	@ (8002da8 <TIM_Base_SetConfig+0x144>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0xf8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a15      	ldr	r2, [pc, #84]	@ (8002dac <TIM_Base_SetConfig+0x148>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d103      	bne.n	8002d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f023 0201 	bic.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]
  }
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40013400 	.word	0x40013400
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40014400 	.word	0x40014400
 8002dac:	40014800 	.word	0x40014800

08002db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e040      	b.n	8002e80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fcf2 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	@ 0x24
 8002e18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fb6a 	bl	800350c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f8af 	bl	8002f9c <UART_SetConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e01b      	b.n	8002e80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fbe9 	bl	8003650 <UART_CheckIdleState>
 8002e7e:	4603      	mov	r3, r0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d177      	bne.n	8002f90 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_UART_Transmit+0x24>
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e070      	b.n	8002f92 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2221      	movs	r2, #33	@ 0x21
 8002ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ebe:	f7fd fea1 	bl	8000c04 <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002edc:	d108      	bne.n	8002ef0 <HAL_UART_Transmit+0x68>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d104      	bne.n	8002ef0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e003      	b.n	8002ef8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef8:	e02f      	b.n	8002f5a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2180      	movs	r1, #128	@ 0x80
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fc4b 	bl	80037a0 <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e03b      	b.n	8002f92 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	3302      	adds	r3, #2
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e007      	b.n	8002f48 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3301      	adds	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1c9      	bne.n	8002efa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2140      	movs	r1, #64	@ 0x40
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fc15 	bl	80037a0 <UART_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e005      	b.n	8002f92 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b08a      	sub	sp, #40	@ 0x28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4ba4      	ldr	r3, [pc, #656]	@ (800325c <UART_SetConfig+0x2c0>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a99      	ldr	r2, [pc, #612]	@ (8003260 <UART_SetConfig+0x2c4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003004:	4313      	orrs	r3, r2
 8003006:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003018:	430a      	orrs	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a90      	ldr	r2, [pc, #576]	@ (8003264 <UART_SetConfig+0x2c8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d126      	bne.n	8003074 <UART_SetConfig+0xd8>
 8003026:	4b90      	ldr	r3, [pc, #576]	@ (8003268 <UART_SetConfig+0x2cc>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d81b      	bhi.n	800306c <UART_SetConfig+0xd0>
 8003034:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <UART_SetConfig+0xa0>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800304d 	.word	0x0800304d
 8003040:	0800305d 	.word	0x0800305d
 8003044:	08003055 	.word	0x08003055
 8003048:	08003065 	.word	0x08003065
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003052:	e116      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003054:	2302      	movs	r3, #2
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305a:	e112      	b.n	8003282 <UART_SetConfig+0x2e6>
 800305c:	2304      	movs	r3, #4
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003062:	e10e      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003064:	2308      	movs	r3, #8
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306a:	e10a      	b.n	8003282 <UART_SetConfig+0x2e6>
 800306c:	2310      	movs	r3, #16
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003072:	e106      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7c      	ldr	r2, [pc, #496]	@ (800326c <UART_SetConfig+0x2d0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d138      	bne.n	80030f0 <UART_SetConfig+0x154>
 800307e:	4b7a      	ldr	r3, [pc, #488]	@ (8003268 <UART_SetConfig+0x2cc>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d82d      	bhi.n	80030e8 <UART_SetConfig+0x14c>
 800308c:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <UART_SetConfig+0xf8>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030c9 	.word	0x080030c9
 8003098:	080030e9 	.word	0x080030e9
 800309c:	080030e9 	.word	0x080030e9
 80030a0:	080030e9 	.word	0x080030e9
 80030a4:	080030d9 	.word	0x080030d9
 80030a8:	080030e9 	.word	0x080030e9
 80030ac:	080030e9 	.word	0x080030e9
 80030b0:	080030e9 	.word	0x080030e9
 80030b4:	080030d1 	.word	0x080030d1
 80030b8:	080030e9 	.word	0x080030e9
 80030bc:	080030e9 	.word	0x080030e9
 80030c0:	080030e9 	.word	0x080030e9
 80030c4:	080030e1 	.word	0x080030e1
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ce:	e0d8      	b.n	8003282 <UART_SetConfig+0x2e6>
 80030d0:	2302      	movs	r3, #2
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d6:	e0d4      	b.n	8003282 <UART_SetConfig+0x2e6>
 80030d8:	2304      	movs	r3, #4
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030de:	e0d0      	b.n	8003282 <UART_SetConfig+0x2e6>
 80030e0:	2308      	movs	r3, #8
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e6:	e0cc      	b.n	8003282 <UART_SetConfig+0x2e6>
 80030e8:	2310      	movs	r3, #16
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ee:	e0c8      	b.n	8003282 <UART_SetConfig+0x2e6>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003270 <UART_SetConfig+0x2d4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d125      	bne.n	8003146 <UART_SetConfig+0x1aa>
 80030fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003268 <UART_SetConfig+0x2cc>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003100:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003104:	2b30      	cmp	r3, #48	@ 0x30
 8003106:	d016      	beq.n	8003136 <UART_SetConfig+0x19a>
 8003108:	2b30      	cmp	r3, #48	@ 0x30
 800310a:	d818      	bhi.n	800313e <UART_SetConfig+0x1a2>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d00a      	beq.n	8003126 <UART_SetConfig+0x18a>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d814      	bhi.n	800313e <UART_SetConfig+0x1a2>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <UART_SetConfig+0x182>
 8003118:	2b10      	cmp	r3, #16
 800311a:	d008      	beq.n	800312e <UART_SetConfig+0x192>
 800311c:	e00f      	b.n	800313e <UART_SetConfig+0x1a2>
 800311e:	2300      	movs	r3, #0
 8003120:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003124:	e0ad      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003126:	2302      	movs	r3, #2
 8003128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312c:	e0a9      	b.n	8003282 <UART_SetConfig+0x2e6>
 800312e:	2304      	movs	r3, #4
 8003130:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003134:	e0a5      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003136:	2308      	movs	r3, #8
 8003138:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313c:	e0a1      	b.n	8003282 <UART_SetConfig+0x2e6>
 800313e:	2310      	movs	r3, #16
 8003140:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003144:	e09d      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4a      	ldr	r2, [pc, #296]	@ (8003274 <UART_SetConfig+0x2d8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d125      	bne.n	800319c <UART_SetConfig+0x200>
 8003150:	4b45      	ldr	r3, [pc, #276]	@ (8003268 <UART_SetConfig+0x2cc>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800315a:	2bc0      	cmp	r3, #192	@ 0xc0
 800315c:	d016      	beq.n	800318c <UART_SetConfig+0x1f0>
 800315e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003160:	d818      	bhi.n	8003194 <UART_SetConfig+0x1f8>
 8003162:	2b80      	cmp	r3, #128	@ 0x80
 8003164:	d00a      	beq.n	800317c <UART_SetConfig+0x1e0>
 8003166:	2b80      	cmp	r3, #128	@ 0x80
 8003168:	d814      	bhi.n	8003194 <UART_SetConfig+0x1f8>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <UART_SetConfig+0x1d8>
 800316e:	2b40      	cmp	r3, #64	@ 0x40
 8003170:	d008      	beq.n	8003184 <UART_SetConfig+0x1e8>
 8003172:	e00f      	b.n	8003194 <UART_SetConfig+0x1f8>
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317a:	e082      	b.n	8003282 <UART_SetConfig+0x2e6>
 800317c:	2302      	movs	r3, #2
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003182:	e07e      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003184:	2304      	movs	r3, #4
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e07a      	b.n	8003282 <UART_SetConfig+0x2e6>
 800318c:	2308      	movs	r3, #8
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003192:	e076      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003194:	2310      	movs	r3, #16
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319a:	e072      	b.n	8003282 <UART_SetConfig+0x2e6>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a35      	ldr	r2, [pc, #212]	@ (8003278 <UART_SetConfig+0x2dc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12a      	bne.n	80031fc <UART_SetConfig+0x260>
 80031a6:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <UART_SetConfig+0x2cc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031b4:	d01a      	beq.n	80031ec <UART_SetConfig+0x250>
 80031b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ba:	d81b      	bhi.n	80031f4 <UART_SetConfig+0x258>
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c0:	d00c      	beq.n	80031dc <UART_SetConfig+0x240>
 80031c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c6:	d815      	bhi.n	80031f4 <UART_SetConfig+0x258>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <UART_SetConfig+0x238>
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031d0:	d008      	beq.n	80031e4 <UART_SetConfig+0x248>
 80031d2:	e00f      	b.n	80031f4 <UART_SetConfig+0x258>
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031da:	e052      	b.n	8003282 <UART_SetConfig+0x2e6>
 80031dc:	2302      	movs	r3, #2
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e2:	e04e      	b.n	8003282 <UART_SetConfig+0x2e6>
 80031e4:	2304      	movs	r3, #4
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ea:	e04a      	b.n	8003282 <UART_SetConfig+0x2e6>
 80031ec:	2308      	movs	r3, #8
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f2:	e046      	b.n	8003282 <UART_SetConfig+0x2e6>
 80031f4:	2310      	movs	r3, #16
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fa:	e042      	b.n	8003282 <UART_SetConfig+0x2e6>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <UART_SetConfig+0x2c4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d13a      	bne.n	800327c <UART_SetConfig+0x2e0>
 8003206:	4b18      	ldr	r3, [pc, #96]	@ (8003268 <UART_SetConfig+0x2cc>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003214:	d01a      	beq.n	800324c <UART_SetConfig+0x2b0>
 8003216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800321a:	d81b      	bhi.n	8003254 <UART_SetConfig+0x2b8>
 800321c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003220:	d00c      	beq.n	800323c <UART_SetConfig+0x2a0>
 8003222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003226:	d815      	bhi.n	8003254 <UART_SetConfig+0x2b8>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <UART_SetConfig+0x298>
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003230:	d008      	beq.n	8003244 <UART_SetConfig+0x2a8>
 8003232:	e00f      	b.n	8003254 <UART_SetConfig+0x2b8>
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323a:	e022      	b.n	8003282 <UART_SetConfig+0x2e6>
 800323c:	2302      	movs	r3, #2
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003242:	e01e      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003244:	2304      	movs	r3, #4
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324a:	e01a      	b.n	8003282 <UART_SetConfig+0x2e6>
 800324c:	2308      	movs	r3, #8
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003252:	e016      	b.n	8003282 <UART_SetConfig+0x2e6>
 8003254:	2310      	movs	r3, #16
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325a:	e012      	b.n	8003282 <UART_SetConfig+0x2e6>
 800325c:	efff69f3 	.word	0xefff69f3
 8003260:	40008000 	.word	0x40008000
 8003264:	40013800 	.word	0x40013800
 8003268:	40021000 	.word	0x40021000
 800326c:	40004400 	.word	0x40004400
 8003270:	40004800 	.word	0x40004800
 8003274:	40004c00 	.word	0x40004c00
 8003278:	40005000 	.word	0x40005000
 800327c:	2310      	movs	r3, #16
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a9f      	ldr	r2, [pc, #636]	@ (8003504 <UART_SetConfig+0x568>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d17a      	bne.n	8003382 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800328c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003290:	2b08      	cmp	r3, #8
 8003292:	d824      	bhi.n	80032de <UART_SetConfig+0x342>
 8003294:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <UART_SetConfig+0x300>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032c1 	.word	0x080032c1
 80032a0:	080032df 	.word	0x080032df
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032df 	.word	0x080032df
 80032ac:	080032cf 	.word	0x080032cf
 80032b0:	080032df 	.word	0x080032df
 80032b4:	080032df 	.word	0x080032df
 80032b8:	080032df 	.word	0x080032df
 80032bc:	080032d7 	.word	0x080032d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c0:	f7fe fd46 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 80032c4:	61f8      	str	r0, [r7, #28]
        break;
 80032c6:	e010      	b.n	80032ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003508 <UART_SetConfig+0x56c>)
 80032ca:	61fb      	str	r3, [r7, #28]
        break;
 80032cc:	e00d      	b.n	80032ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ce:	f7fe fca7 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 80032d2:	61f8      	str	r0, [r7, #28]
        break;
 80032d4:	e009      	b.n	80032ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032da:	61fb      	str	r3, [r7, #28]
        break;
 80032dc:	e005      	b.n	80032ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80fb 	beq.w	80034e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d305      	bcc.n	800330e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	429a      	cmp	r2, r3
 800330c:	d903      	bls.n	8003316 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003314:	e0e8      	b.n	80034e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	2200      	movs	r2, #0
 800331a:	461c      	mov	r4, r3
 800331c:	4615      	mov	r5, r2
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	022b      	lsls	r3, r5, #8
 8003328:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800332c:	0222      	lsls	r2, r4, #8
 800332e:	68f9      	ldr	r1, [r7, #12]
 8003330:	6849      	ldr	r1, [r1, #4]
 8003332:	0849      	lsrs	r1, r1, #1
 8003334:	2000      	movs	r0, #0
 8003336:	4688      	mov	r8, r1
 8003338:	4681      	mov	r9, r0
 800333a:	eb12 0a08 	adds.w	sl, r2, r8
 800333e:	eb43 0b09 	adc.w	fp, r3, r9
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003350:	4650      	mov	r0, sl
 8003352:	4659      	mov	r1, fp
 8003354:	f7fc ff4c 	bl	80001f0 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4613      	mov	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003366:	d308      	bcc.n	800337a <UART_SetConfig+0x3de>
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800336e:	d204      	bcs.n	800337a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	e0b6      	b.n	80034e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003380:	e0b2      	b.n	80034e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800338a:	d15e      	bne.n	800344a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800338c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003390:	2b08      	cmp	r3, #8
 8003392:	d828      	bhi.n	80033e6 <UART_SetConfig+0x44a>
 8003394:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <UART_SetConfig+0x400>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	080033c9 	.word	0x080033c9
 80033a4:	080033d1 	.word	0x080033d1
 80033a8:	080033e7 	.word	0x080033e7
 80033ac:	080033d7 	.word	0x080033d7
 80033b0:	080033e7 	.word	0x080033e7
 80033b4:	080033e7 	.word	0x080033e7
 80033b8:	080033e7 	.word	0x080033e7
 80033bc:	080033df 	.word	0x080033df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c0:	f7fe fcc6 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 80033c4:	61f8      	str	r0, [r7, #28]
        break;
 80033c6:	e014      	b.n	80033f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7fe fcd8 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 80033cc:	61f8      	str	r0, [r7, #28]
        break;
 80033ce:	e010      	b.n	80033f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003508 <UART_SetConfig+0x56c>)
 80033d2:	61fb      	str	r3, [r7, #28]
        break;
 80033d4:	e00d      	b.n	80033f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d6:	f7fe fc23 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 80033da:	61f8      	str	r0, [r7, #28]
        break;
 80033dc:	e009      	b.n	80033f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033e2:	61fb      	str	r3, [r7, #28]
        break;
 80033e4:	e005      	b.n	80033f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d077      	beq.n	80034e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005a      	lsls	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	441a      	add	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b0f      	cmp	r3, #15
 8003412:	d916      	bls.n	8003442 <UART_SetConfig+0x4a6>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341a:	d212      	bcs.n	8003442 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f023 030f 	bic.w	r3, r3, #15
 8003424:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	b29b      	uxth	r3, r3
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	b29a      	uxth	r2, r3
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	4313      	orrs	r3, r2
 8003436:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	8afa      	ldrh	r2, [r7, #22]
 800343e:	60da      	str	r2, [r3, #12]
 8003440:	e052      	b.n	80034e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003448:	e04e      	b.n	80034e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800344a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800344e:	2b08      	cmp	r3, #8
 8003450:	d827      	bhi.n	80034a2 <UART_SetConfig+0x506>
 8003452:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <UART_SetConfig+0x4bc>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	0800347d 	.word	0x0800347d
 800345c:	08003485 	.word	0x08003485
 8003460:	0800348d 	.word	0x0800348d
 8003464:	080034a3 	.word	0x080034a3
 8003468:	08003493 	.word	0x08003493
 800346c:	080034a3 	.word	0x080034a3
 8003470:	080034a3 	.word	0x080034a3
 8003474:	080034a3 	.word	0x080034a3
 8003478:	0800349b 	.word	0x0800349b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7fe fc68 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003480:	61f8      	str	r0, [r7, #28]
        break;
 8003482:	e014      	b.n	80034ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7fe fc7a 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8003488:	61f8      	str	r0, [r7, #28]
        break;
 800348a:	e010      	b.n	80034ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348c:	4b1e      	ldr	r3, [pc, #120]	@ (8003508 <UART_SetConfig+0x56c>)
 800348e:	61fb      	str	r3, [r7, #28]
        break;
 8003490:	e00d      	b.n	80034ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003492:	f7fe fbc5 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8003496:	61f8      	str	r0, [r7, #28]
        break;
 8003498:	e009      	b.n	80034ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800349e:	61fb      	str	r3, [r7, #28]
        break;
 80034a0:	e005      	b.n	80034ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034ac:	bf00      	nop
    }

    if (pclk != 0U)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d019      	beq.n	80034e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	085a      	lsrs	r2, r3, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	441a      	add	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b0f      	cmp	r3, #15
 80034cc:	d909      	bls.n	80034e2 <UART_SetConfig+0x546>
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d4:	d205      	bcs.n	80034e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	e002      	b.n	80034e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3728      	adds	r7, #40	@ 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	40008000 	.word	0x40008000
 8003508:	00f42400 	.word	0x00f42400

0800350c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01a      	beq.n	8003622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800360a:	d10a      	bne.n	8003622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b098      	sub	sp, #96	@ 0x60
 8003654:	af02      	add	r7, sp, #8
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003660:	f7fd fad0 	bl	8000c04 <HAL_GetTick>
 8003664:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b08      	cmp	r3, #8
 8003672:	d12e      	bne.n	80036d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367c:	2200      	movs	r2, #0
 800367e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f88c 	bl	80037a0 <UART_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d021      	beq.n	80036d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e6      	bne.n	800368e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e062      	b.n	8003798 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d149      	bne.n	8003774 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e8:	2200      	movs	r2, #0
 80036ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f856 	bl	80037a0 <UART_WaitOnFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03c      	beq.n	8003774 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	623b      	str	r3, [r7, #32]
   return(result);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800370e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003718:	633b      	str	r3, [r7, #48]	@ 0x30
 800371a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800371e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e6      	bne.n	80036fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3308      	adds	r3, #8
 8003732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	60fb      	str	r3, [r7, #12]
   return(result);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3308      	adds	r3, #8
 800374a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800374c:	61fa      	str	r2, [r7, #28]
 800374e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	617b      	str	r3, [r7, #20]
   return(result);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e5      	bne.n	800372c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e011      	b.n	8003798 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3758      	adds	r7, #88	@ 0x58
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b0:	e04f      	b.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037b8:	d04b      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fd fa23 	bl	8000c04 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e04e      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d037      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b80      	cmp	r3, #128	@ 0x80
 80037e6:	d034      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b40      	cmp	r3, #64	@ 0x40
 80037ec:	d031      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d110      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2208      	movs	r2, #8
 8003802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f838 	bl	800387a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2208      	movs	r2, #8
 800380e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e029      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800382c:	d111      	bne.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f81e 	bl	800387a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e00f      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	429a      	cmp	r2, r3
 800386e:	d0a0      	beq.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387a:	b480      	push	{r7}
 800387c:	b095      	sub	sp, #84	@ 0x54
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80038a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e6      	bne.n	8003882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e5      	bne.n	80038b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d118      	bne.n	8003922 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f023 0310 	bic.w	r3, r3, #16
 8003904:	647b      	str	r3, [r7, #68]	@ 0x44
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	613b      	str	r3, [r7, #16]
   return(result);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e6      	bne.n	80038f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003936:	bf00      	nop
 8003938:	3754      	adds	r7, #84	@ 0x54
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <__NVIC_SetPriority>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db0a      	blt.n	800396e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	490c      	ldr	r1, [pc, #48]	@ (8003990 <__NVIC_SetPriority+0x4c>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	440b      	add	r3, r1
 8003968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800396c:	e00a      	b.n	8003984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4908      	ldr	r1, [pc, #32]	@ (8003994 <__NVIC_SetPriority+0x50>)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3b04      	subs	r3, #4
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	440b      	add	r3, r1
 8003982:	761a      	strb	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <SysTick_Handler+0x1c>)
 800399e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039a0:	f002 fa8c 	bl	8005ebc <xTaskGetSchedulerState>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d001      	beq.n	80039ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039aa:	f003 f985 	bl	8006cb8 <xPortSysTickHandler>
  }
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	e000e010 	.word	0xe000e010

080039b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039bc:	2100      	movs	r1, #0
 80039be:	f06f 0004 	mvn.w	r0, #4
 80039c2:	f7ff ffbf 	bl	8003944 <__NVIC_SetPriority>
#endif
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d2:	f3ef 8305 	mrs	r3, IPSR
 80039d6:	603b      	str	r3, [r7, #0]
  return(result);
 80039d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039de:	f06f 0305 	mvn.w	r3, #5
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	e00c      	b.n	8003a00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <osKernelInitialize+0x44>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039ee:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <osKernelInitialize+0x44>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	e002      	b.n	8003a00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a00:	687b      	ldr	r3, [r7, #4]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000178 	.word	0x20000178

08003a14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1a:	f3ef 8305 	mrs	r3, IPSR
 8003a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a26:	f06f 0305 	mvn.w	r3, #5
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e010      	b.n	8003a50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <osKernelStart+0x48>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d109      	bne.n	8003a4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a36:	f7ff ffbf 	bl	80039b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <osKernelStart+0x48>)
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a40:	f001 fdc8 	bl	80055d4 <vTaskStartScheduler>
      stat = osOK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	e002      	b.n	8003a50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a50:	687b      	ldr	r3, [r7, #4]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000178 	.word	0x20000178

08003a60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08e      	sub	sp, #56	@ 0x38
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a70:	f3ef 8305 	mrs	r3, IPSR
 8003a74:	617b      	str	r3, [r7, #20]
  return(result);
 8003a76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d17e      	bne.n	8003b7a <osThreadNew+0x11a>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d07b      	beq.n	8003b7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a86:	2318      	movs	r3, #24
 8003a88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d045      	beq.n	8003b26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <osThreadNew+0x48>
        name = attr->name;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <osThreadNew+0x6e>
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b38      	cmp	r3, #56	@ 0x38
 8003ac0:	d805      	bhi.n	8003ace <osThreadNew+0x6e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <osThreadNew+0x72>
        return (NULL);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e054      	b.n	8003b7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00e      	beq.n	8003b08 <osThreadNew+0xa8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2ba7      	cmp	r3, #167	@ 0xa7
 8003af0:	d90a      	bls.n	8003b08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <osThreadNew+0xa8>
        mem = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e010      	b.n	8003b2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10c      	bne.n	8003b2a <osThreadNew+0xca>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d108      	bne.n	8003b2a <osThreadNew+0xca>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <osThreadNew+0xca>
          mem = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e001      	b.n	8003b2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d110      	bne.n	8003b52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b38:	9202      	str	r2, [sp, #8]
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6a3a      	ldr	r2, [r7, #32]
 8003b44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f001 fab2 	bl	80050b0 <xTaskCreateStatic>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e013      	b.n	8003b7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d110      	bne.n	8003b7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	f107 0310 	add.w	r3, r7, #16
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f001 fb00 	bl	8005170 <xTaskCreate>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <osThreadNew+0x11a>
            hTask = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b7a:	693b      	ldr	r3, [r7, #16]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3728      	adds	r7, #40	@ 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b92:	f3ef 8305 	mrs	r3, IPSR
 8003b96:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b98:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8003b9e:	f06f 0305 	mvn.w	r3, #5
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e013      	b.n	8003bce <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <osThreadSetPriority+0x34>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	dd02      	ble.n	8003bb8 <osThreadSetPriority+0x34>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b38      	cmp	r3, #56	@ 0x38
 8003bb6:	dd03      	ble.n	8003bc0 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8003bb8:	f06f 0303 	mvn.w	r3, #3
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e006      	b.n	8003bce <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6938      	ldr	r0, [r7, #16]
 8003bca:	f001 fc65 	bl	8005498 <vTaskPrioritySet>
  }

  return (stat);
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003be0:	f3ef 8305 	mrs	r3, IPSR
 8003be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <osDelay+0x1c>
    stat = osErrorISR;
 8003bec:	f06f 0305 	mvn.w	r3, #5
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e007      	b.n	8003c04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f001 fc14 	bl	800542c <vTaskDelay>
    }
  }

  return (stat);
 8003c04:	68fb      	ldr	r3, [r7, #12]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b088      	sub	sp, #32
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c1a:	f3ef 8305 	mrs	r3, IPSR
 8003c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c20:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d174      	bne.n	8003d10 <osMutexNew+0x102>
    if (attr != NULL) {
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e001      	b.n	8003c38 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <osMutexNew+0x3a>
      rmtx = 1U;
 8003c42:	2301      	movs	r3, #1
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e001      	b.n	8003c4c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d15c      	bne.n	8003d10 <osMutexNew+0x102>
      mem = -1;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c5a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d015      	beq.n	8003c8e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <osMutexNew+0x6a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c70:	d902      	bls.n	8003c78 <osMutexNew+0x6a>
          mem = 1;
 8003c72:	2301      	movs	r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e00c      	b.n	8003c92 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d108      	bne.n	8003c92 <osMutexNew+0x84>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <osMutexNew+0x84>
            mem = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	e001      	b.n	8003c92 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d112      	bne.n	8003cbe <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	2004      	movs	r0, #4
 8003ca6:	f000 fba8 	bl	80043fa <xQueueCreateMutexStatic>
 8003caa:	61f8      	str	r0, [r7, #28]
 8003cac:	e016      	b.n	8003cdc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f000 fba0 	bl	80043fa <xQueueCreateMutexStatic>
 8003cba:	61f8      	str	r0, [r7, #28]
 8003cbc:	e00e      	b.n	8003cdc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003cca:	2004      	movs	r0, #4
 8003ccc:	f000 fb7d 	bl	80043ca <xQueueCreateMutex>
 8003cd0:	61f8      	str	r0, [r7, #28]
 8003cd2:	e003      	b.n	8003cdc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f000 fb78 	bl	80043ca <xQueueCreateMutex>
 8003cda:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <osMutexNew+0xee>
        if (attr != NULL) {
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <osMutexNew+0xe2>
          name = attr->name;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e001      	b.n	8003cf4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	69f8      	ldr	r0, [r7, #28]
 8003cf8:	f001 f952 	bl	8004fa0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <osMutexNew+0x102>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003d10:	69fb      	ldr	r3, [r7, #28]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d38:	f3ef 8305 	mrs	r3, IPSR
 8003d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d3e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003d44:	f06f 0305 	mvn.w	r3, #5
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e02c      	b.n	8003da6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003d52:	f06f 0303 	mvn.w	r3, #3
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e025      	b.n	8003da6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d011      	beq.n	8003d84 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	6938      	ldr	r0, [r7, #16]
 8003d64:	f000 fb99 	bl	800449a <xQueueTakeMutexRecursive>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d01b      	beq.n	8003da6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003d74:	f06f 0301 	mvn.w	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e014      	b.n	8003da6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d7c:	f06f 0302 	mvn.w	r3, #2
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e010      	b.n	8003da6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003d84:	6839      	ldr	r1, [r7, #0]
 8003d86:	6938      	ldr	r0, [r7, #16]
 8003d88:	f000 feae 	bl	8004ae8 <xQueueSemaphoreTake>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d009      	beq.n	8003da6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003d98:	f06f 0301 	mvn.w	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e002      	b.n	8003da6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003da0:	f06f 0302 	mvn.w	r3, #2
 8003da4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003da6:	697b      	ldr	r3, [r7, #20]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dcc:	f3ef 8305 	mrs	r3, IPSR
 8003dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dd2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003dd8:	f06f 0305 	mvn.w	r3, #5
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e01f      	b.n	8003e20 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d103      	bne.n	8003dee <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003de6:	f06f 0303 	mvn.w	r3, #3
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e018      	b.n	8003e20 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003df4:	6938      	ldr	r0, [r7, #16]
 8003df6:	f000 fb1b 	bl	8004430 <xQueueGiveMutexRecursive>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d00f      	beq.n	8003e20 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003e00:	f06f 0302 	mvn.w	r3, #2
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e00b      	b.n	8003e20 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	6938      	ldr	r0, [r7, #16]
 8003e10:	f000 fbe8 	bl	80045e4 <xQueueGenericSend>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d002      	beq.n	8003e20 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003e1a:	f06f 0302 	mvn.w	r3, #2
 8003e1e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003e20:	697b      	ldr	r3, [r7, #20]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b08a      	sub	sp, #40	@ 0x28
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e3a:	f3ef 8305 	mrs	r3, IPSR
 8003e3e:	613b      	str	r3, [r7, #16]
  return(result);
 8003e40:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d175      	bne.n	8003f32 <osSemaphoreNew+0x108>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d072      	beq.n	8003f32 <osSemaphoreNew+0x108>
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d86e      	bhi.n	8003f32 <osSemaphoreNew+0x108>
    mem = -1;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d006      	beq.n	8003e76 <osSemaphoreNew+0x4c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b4f      	cmp	r3, #79	@ 0x4f
 8003e6e:	d902      	bls.n	8003e76 <osSemaphoreNew+0x4c>
        mem = 1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e00c      	b.n	8003e90 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d108      	bne.n	8003e90 <osSemaphoreNew+0x66>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <osSemaphoreNew+0x66>
          mem = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e001      	b.n	8003e90 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e96:	d04c      	beq.n	8003f32 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d128      	bne.n	8003ef0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10a      	bne.n	8003eba <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	9200      	str	r2, [sp, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2100      	movs	r1, #0
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	f000 f995 	bl	80041e0 <xQueueGenericCreateStatic>
 8003eb6:	61f8      	str	r0, [r7, #28]
 8003eb8:	e005      	b.n	8003ec6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003eba:	2203      	movs	r2, #3
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f000 fa0b 	bl	80042da <xQueueGenericCreate>
 8003ec4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d022      	beq.n	8003f12 <osSemaphoreNew+0xe8>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01f      	beq.n	8003f12 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	69f8      	ldr	r0, [r7, #28]
 8003eda:	f000 fb83 	bl	80045e4 <xQueueGenericSend>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d016      	beq.n	8003f12 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003ee4:	69f8      	ldr	r0, [r7, #28]
 8003ee6:	f000 ff0f 	bl	8004d08 <vQueueDelete>
            hSemaphore = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e010      	b.n	8003f12 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d108      	bne.n	8003f08 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	461a      	mov	r2, r3
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fb02 	bl	8004508 <xQueueCreateCountingSemaphoreStatic>
 8003f04:	61f8      	str	r0, [r7, #28]
 8003f06:	e004      	b.n	8003f12 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fb35 	bl	800457a <xQueueCreateCountingSemaphore>
 8003f10:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00c      	beq.n	8003f32 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e001      	b.n	8003f2a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003f2a:	6979      	ldr	r1, [r7, #20]
 8003f2c:	69f8      	ldr	r0, [r7, #28]
 8003f2e:	f001 f837 	bl	8004fa0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003f32:	69fb      	ldr	r3, [r7, #28]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a07      	ldr	r2, [pc, #28]	@ (8003f68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a06      	ldr	r2, [pc, #24]	@ (8003f6c <vApplicationGetIdleTaskMemory+0x30>)
 8003f52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2280      	movs	r2, #128	@ 0x80
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	2000017c 	.word	0x2000017c
 8003f6c:	20000224 	.word	0x20000224

08003f70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4a07      	ldr	r2, [pc, #28]	@ (8003f9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003f80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a06      	ldr	r2, [pc, #24]	@ (8003fa0 <vApplicationGetTimerTaskMemory+0x30>)
 8003f86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f8e:	601a      	str	r2, [r3, #0]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	20000424 	.word	0x20000424
 8003fa0:	200004cc 	.word	0x200004cc

08003fa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f103 0208 	add.w	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f103 0208 	add.w	r2, r3, #8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f103 0208 	add.w	r2, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800405c:	d103      	bne.n	8004066 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e00c      	b.n	8004080 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3308      	adds	r3, #8
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e002      	b.n	8004074 <vListInsert+0x2e>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	d2f6      	bcs.n	800406e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	601a      	str	r2, [r3, #0]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6892      	ldr	r2, [r2, #8]
 80040ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6852      	ldr	r2, [r2, #4]
 80040d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d103      	bne.n	80040ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	1e5a      	subs	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004138:	f002 fd2e 	bl	8006b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	68f9      	ldr	r1, [r7, #12]
 8004146:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004168:	3b01      	subs	r3, #1
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	441a      	add	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	22ff      	movs	r2, #255	@ 0xff
 800417c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	22ff      	movs	r2, #255	@ 0xff
 8004184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d114      	bne.n	80041b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01a      	beq.n	80041cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3310      	adds	r3, #16
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fcb8 	bl	8005b10 <xTaskRemoveFromEventList>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d012      	beq.n	80041cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <xQueueGenericReset+0xd0>)
 80041a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	e009      	b.n	80041cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3310      	adds	r3, #16
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fef1 	bl	8003fa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3324      	adds	r3, #36	@ 0x24
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff feec 	bl	8003fa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041cc:	f002 fd16 	bl	8006bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041d0:	2301      	movs	r3, #1
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08e      	sub	sp, #56	@ 0x38
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <xQueueGenericCreateStatic+0x56>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <xQueueGenericCreateStatic+0x5a>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <xQueueGenericCreateStatic+0x5c>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	623b      	str	r3, [r7, #32]
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <xQueueGenericCreateStatic+0x84>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <xQueueGenericCreateStatic+0x88>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <xQueueGenericCreateStatic+0x8a>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	61fb      	str	r3, [r7, #28]
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	e7fd      	b.n	8004282 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004286:	2350      	movs	r3, #80	@ 0x50
 8004288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b50      	cmp	r3, #80	@ 0x50
 800428e:	d00b      	beq.n	80042a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	61bb      	str	r3, [r7, #24]
}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	e7fd      	b.n	80042a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f840 	bl	8004350 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3730      	adds	r7, #48	@ 0x30
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b08a      	sub	sp, #40	@ 0x28
 80042de:	af02      	add	r7, sp, #8
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	4613      	mov	r3, r2
 80042e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <xQueueGenericCreate+0x2c>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	613b      	str	r3, [r7, #16]
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	e7fd      	b.n	8004302 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3350      	adds	r3, #80	@ 0x50
 8004314:	4618      	mov	r0, r3
 8004316:	f002 fd61 	bl	8006ddc <pvPortMalloc>
 800431a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d011      	beq.n	8004346 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3350      	adds	r3, #80	@ 0x50
 800432a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004334:	79fa      	ldrb	r2, [r7, #7]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f805 	bl	8004350 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004346:	69bb      	ldr	r3, [r7, #24]
	}
 8004348:	4618      	mov	r0, r3
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d103      	bne.n	800436c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e002      	b.n	8004372 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800437e:	2101      	movs	r1, #1
 8004380:	69b8      	ldr	r0, [r7, #24]
 8004382:	f7ff fec3 	bl	800410c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80043b6:	2300      	movs	r3, #0
 80043b8:	2200      	movs	r2, #0
 80043ba:	2100      	movs	r1, #0
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f911 	bl	80045e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043d4:	2301      	movs	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	461a      	mov	r2, r3
 80043e0:	6939      	ldr	r1, [r7, #16]
 80043e2:	6978      	ldr	r0, [r7, #20]
 80043e4:	f7ff ff79 	bl	80042da <xQueueGenericCreate>
 80043e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff ffd3 	bl	8004396 <prvInitialiseMutex>

		return xNewQueue;
 80043f0:	68fb      	ldr	r3, [r7, #12]
	}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b088      	sub	sp, #32
 80043fe:	af02      	add	r7, sp, #8
 8004400:	4603      	mov	r3, r0
 8004402:	6039      	str	r1, [r7, #0]
 8004404:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004406:	2301      	movs	r3, #1
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2200      	movs	r2, #0
 8004416:	6939      	ldr	r1, [r7, #16]
 8004418:	6978      	ldr	r0, [r7, #20]
 800441a:	f7ff fee1 	bl	80041e0 <xQueueGenericCreateStatic>
 800441e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff ffb8 	bl	8004396 <prvInitialiseMutex>

		return xNewQueue;
 8004426:	68fb      	ldr	r3, [r7, #12]
	}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	e7fd      	b.n	8004456 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	689c      	ldr	r4, [r3, #8]
 800445e:	f001 fd1d 	bl	8005e9c <xTaskGetCurrentTaskHandle>
 8004462:	4603      	mov	r3, r0
 8004464:	429c      	cmp	r4, r3
 8004466:	d111      	bne.n	800448c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	1e5a      	subs	r2, r3, #1
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800447a:	2300      	movs	r3, #0
 800447c:	2200      	movs	r2, #0
 800447e:	2100      	movs	r1, #0
 8004480:	6938      	ldr	r0, [r7, #16]
 8004482:	f000 f8af 	bl	80045e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004486:	2301      	movs	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e001      	b.n	8004490 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004490:	697b      	ldr	r3, [r7, #20]
	}
 8004492:	4618      	mov	r0, r3
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	bd90      	pop	{r4, r7, pc}

0800449a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800449a:	b590      	push	{r4, r7, lr}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60fb      	str	r3, [r7, #12]
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	e7fd      	b.n	80044c2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	689c      	ldr	r4, [r3, #8]
 80044ca:	f001 fce7 	bl	8005e9c <xTaskGetCurrentTaskHandle>
 80044ce:	4603      	mov	r3, r0
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d107      	bne.n	80044e4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80044de:	2301      	movs	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e00c      	b.n	80044fe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	6938      	ldr	r0, [r7, #16]
 80044e8:	f000 fafe 	bl	8004ae8 <xQueueSemaphoreTake>
 80044ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80044fe:	697b      	ldr	r3, [r7, #20]
	}
 8004500:	4618      	mov	r0, r3
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd90      	pop	{r4, r7, pc}

08004508 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	@ 0x28
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10b      	bne.n	8004532 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	61bb      	str	r3, [r7, #24]
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	e7fd      	b.n	800452e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	429a      	cmp	r2, r3
 8004538:	d90b      	bls.n	8004552 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	617b      	str	r3, [r7, #20]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004552:	2302      	movs	r3, #2
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	2100      	movs	r1, #0
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff fe3f 	bl	80041e0 <xQueueGenericCreateStatic>
 8004562:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004570:	69fb      	ldr	r3, [r7, #28]
	}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800457a:	b580      	push	{r7, lr}
 800457c:	b086      	sub	sp, #24
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	613b      	str	r3, [r7, #16]
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	e7fd      	b.n	800459e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d90b      	bls.n	80045c2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	60fb      	str	r3, [r7, #12]
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	e7fd      	b.n	80045be <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80045c2:	2202      	movs	r2, #2
 80045c4:	2100      	movs	r1, #0
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff fe87 	bl	80042da <xQueueGenericCreate>
 80045cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80045da:	697b      	ldr	r3, [r7, #20]
	}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	@ 0x38
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045f2:	2300      	movs	r3, #0
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80045fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <xQueueGenericSend+0x34>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <xQueueGenericSend+0x42>
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <xQueueGenericSend+0x46>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericSend+0x48>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <xQueueGenericSend+0x64>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d103      	bne.n	8004656 <xQueueGenericSend+0x72>
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <xQueueGenericSend+0x76>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <xQueueGenericSend+0x78>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <xQueueGenericSend+0x94>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	623b      	str	r3, [r7, #32]
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004678:	f001 fc20 	bl	8005ebc <xTaskGetSchedulerState>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <xQueueGenericSend+0xa4>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <xQueueGenericSend+0xa8>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <xQueueGenericSend+0xaa>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <xQueueGenericSend+0xc6>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	61fb      	str	r3, [r7, #28]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046aa:	f002 fa75 	bl	8006b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <xQueueGenericSend+0xdc>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d129      	bne.n	8004714 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046c6:	f000 fb5b 	bl	8004d80 <prvCopyDataToQueue>
 80046ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	3324      	adds	r3, #36	@ 0x24
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fa19 	bl	8005b10 <xTaskRemoveFromEventList>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046e4:	4b3f      	ldr	r3, [pc, #252]	@ (80047e4 <xQueueGenericSend+0x200>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	e00a      	b.n	800470c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046fc:	4b39      	ldr	r3, [pc, #228]	@ (80047e4 <xQueueGenericSend+0x200>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800470c:	f002 fa76 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8004710:	2301      	movs	r3, #1
 8004712:	e063      	b.n	80047dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800471a:	f002 fa6f 	bl	8006bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800471e:	2300      	movs	r3, #0
 8004720:	e05c      	b.n	80047dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	4618      	mov	r0, r3
 800472e:	f001 fa53 	bl	8005bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004732:	2301      	movs	r3, #1
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004736:	f002 fa61 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800473a:	f000 ffbb 	bl	80056b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800473e:	f002 fa2b 	bl	8006b98 <vPortEnterCritical>
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004748:	b25b      	sxtb	r3, r3
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800474e:	d103      	bne.n	8004758 <xQueueGenericSend+0x174>
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800475e:	b25b      	sxtb	r3, r3
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004764:	d103      	bne.n	800476e <xQueueGenericSend+0x18a>
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800476e:	f002 fa45 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004772:	1d3a      	adds	r2, r7, #4
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	4611      	mov	r1, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f001 fa42 	bl	8005c04 <xTaskCheckForTimeOut>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d124      	bne.n	80047d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004786:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004788:	f000 fbf2 	bl	8004f70 <prvIsQueueFull>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d018      	beq.n	80047c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	3310      	adds	r3, #16
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f001 f966 	bl	8005a6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047a2:	f000 fb7d 	bl	8004ea0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047a6:	f000 ff93 	bl	80056d0 <xTaskResumeAll>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f47f af7c 	bne.w	80046aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80047b2:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <xQueueGenericSend+0x200>)
 80047b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	e772      	b.n	80046aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047c6:	f000 fb6b 	bl	8004ea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ca:	f000 ff81 	bl	80056d0 <xTaskResumeAll>
 80047ce:	e76c      	b.n	80046aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047d2:	f000 fb65 	bl	8004ea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d6:	f000 ff7b 	bl	80056d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3738      	adds	r7, #56	@ 0x38
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b090      	sub	sp, #64	@ 0x40
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80047fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <xQueueGenericSendFromISR+0x3e>
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <xQueueGenericSendFromISR+0x42>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <xQueueGenericSendFromISR+0x44>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10b      	bne.n	8004848 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d103      	bne.n	8004856 <xQueueGenericSendFromISR+0x6e>
 800484e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <xQueueGenericSendFromISR+0x72>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <xQueueGenericSendFromISR+0x74>
 800485a:	2300      	movs	r3, #0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	623b      	str	r3, [r7, #32]
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004878:	f002 fa6e 	bl	8006d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800487c:	f3ef 8211 	mrs	r2, BASEPRI
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	61fa      	str	r2, [r7, #28]
 8004892:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004894:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <xQueueGenericSendFromISR+0xc2>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d12f      	bne.n	800490a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048c0:	f000 fa5e 	bl	8004d80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048cc:	d112      	bne.n	80048f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d8:	3324      	adds	r3, #36	@ 0x24
 80048da:	4618      	mov	r0, r3
 80048dc:	f001 f918 	bl	8005b10 <xTaskRemoveFromEventList>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00e      	beq.n	8004904 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e007      	b.n	8004904 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80048f8:	3301      	adds	r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	b25a      	sxtb	r2, r3
 80048fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004904:	2301      	movs	r3, #1
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004908:	e001      	b.n	800490e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800490a:	2300      	movs	r3, #0
 800490c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004918:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800491a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800491c:	4618      	mov	r0, r3
 800491e:	3740      	adds	r7, #64	@ 0x40
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08c      	sub	sp, #48	@ 0x30
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <xQueueReceive+0x32>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	623b      	str	r3, [r7, #32]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <xQueueReceive+0x40>
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <xQueueReceive+0x44>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <xQueueReceive+0x46>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <xQueueReceive+0x62>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	61fb      	str	r3, [r7, #28]
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	e7fd      	b.n	8004982 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004986:	f001 fa99 	bl	8005ebc <xTaskGetSchedulerState>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <xQueueReceive+0x72>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <xQueueReceive+0x76>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <xQueueReceive+0x78>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <xQueueReceive+0x94>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	61bb      	str	r3, [r7, #24]
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049b8:	f002 f8ee 	bl	8006b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01f      	beq.n	8004a08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049cc:	f000 fa42 	bl	8004e54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	1e5a      	subs	r2, r3, #1
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00f      	beq.n	8004a00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	3310      	adds	r3, #16
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 f893 	bl	8005b10 <xTaskRemoveFromEventList>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049f0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ae4 <xQueueReceive+0x1c0>)
 80049f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a00:	f002 f8fc 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e069      	b.n	8004adc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a0e:	f002 f8f5 	bl	8006bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e062      	b.n	8004adc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d106      	bne.n	8004a2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a1c:	f107 0310 	add.w	r3, r7, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f8d9 	bl	8005bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a2a:	f002 f8e7 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a2e:	f000 fe41 	bl	80056b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a32:	f002 f8b1 	bl	8006b98 <vPortEnterCritical>
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a3c:	b25b      	sxtb	r3, r3
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a42:	d103      	bne.n	8004a4c <xQueueReceive+0x128>
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a58:	d103      	bne.n	8004a62 <xQueueReceive+0x13e>
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a62:	f002 f8cb 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a66:	1d3a      	adds	r2, r7, #4
 8004a68:	f107 0310 	add.w	r3, r7, #16
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f8c8 	bl	8005c04 <xTaskCheckForTimeOut>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d123      	bne.n	8004ac2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a7c:	f000 fa62 	bl	8004f44 <prvIsQueueEmpty>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d017      	beq.n	8004ab6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	3324      	adds	r3, #36	@ 0x24
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 ffec 	bl	8005a6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a96:	f000 fa03 	bl	8004ea0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a9a:	f000 fe19 	bl	80056d0 <xTaskResumeAll>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d189      	bne.n	80049b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <xQueueReceive+0x1c0>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	e780      	b.n	80049b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ab8:	f000 f9f2 	bl	8004ea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004abc:	f000 fe08 	bl	80056d0 <xTaskResumeAll>
 8004ac0:	e77a      	b.n	80049b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac4:	f000 f9ec 	bl	8004ea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ac8:	f000 fe02 	bl	80056d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ace:	f000 fa39 	bl	8004f44 <prvIsQueueEmpty>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f43f af6f 	beq.w	80049b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ada:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3730      	adds	r7, #48	@ 0x30
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08e      	sub	sp, #56	@ 0x38
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10b      	bne.n	8004b1c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	623b      	str	r3, [r7, #32]
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	e7fd      	b.n	8004b18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	61fb      	str	r3, [r7, #28]
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	e7fd      	b.n	8004b38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b3c:	f001 f9be 	bl	8005ebc <xTaskGetSchedulerState>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <xQueueSemaphoreTake+0x64>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <xQueueSemaphoreTake+0x68>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <xQueueSemaphoreTake+0x6a>
 8004b50:	2300      	movs	r3, #0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	61bb      	str	r3, [r7, #24]
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	e7fd      	b.n	8004b6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b6e:	f002 f813 	bl	8006b98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d024      	beq.n	8004bc8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	1e5a      	subs	r2, r3, #1
 8004b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b8e:	f001 fb0f 	bl	80061b0 <pvTaskIncrementMutexHeldCount>
 8004b92:	4602      	mov	r2, r0
 8004b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00f      	beq.n	8004bc0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba2:	3310      	adds	r3, #16
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 ffb3 	bl	8005b10 <xTaskRemoveFromEventList>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bb0:	4b54      	ldr	r3, [pc, #336]	@ (8004d04 <xQueueSemaphoreTake+0x21c>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bc0:	f002 f81c 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e098      	b.n	8004cfa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d112      	bne.n	8004bf4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	617b      	str	r3, [r7, #20]
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004bec:	f002 f806 	bl	8006bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e082      	b.n	8004cfa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 ffea 	bl	8005bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c08:	f001 fff8 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c0c:	f000 fd52 	bl	80056b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c10:	f001 ffc2 	bl	8006b98 <vPortEnterCritical>
 8004c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c1a:	b25b      	sxtb	r3, r3
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c20:	d103      	bne.n	8004c2a <xQueueSemaphoreTake+0x142>
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c30:	b25b      	sxtb	r3, r3
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c36:	d103      	bne.n	8004c40 <xQueueSemaphoreTake+0x158>
 8004c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c40:	f001 ffdc 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c44:	463a      	mov	r2, r7
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 ffd9 	bl	8005c04 <xTaskCheckForTimeOut>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d132      	bne.n	8004cbe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c5a:	f000 f973 	bl	8004f44 <prvIsQueueEmpty>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d026      	beq.n	8004cb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004c6c:	f001 ff94 	bl	8006b98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f93f 	bl	8005ef8 <xTaskPriorityInherit>
 8004c7a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004c7c:	f001 ffbe 	bl	8006bfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c82:	3324      	adds	r3, #36	@ 0x24
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 feef 	bl	8005a6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c90:	f000 f906 	bl	8004ea0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c94:	f000 fd1c 	bl	80056d0 <xTaskResumeAll>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f47f af67 	bne.w	8004b6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004ca0:	4b18      	ldr	r3, [pc, #96]	@ (8004d04 <xQueueSemaphoreTake+0x21c>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	e75d      	b.n	8004b6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004cb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cb4:	f000 f8f4 	bl	8004ea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cb8:	f000 fd0a 	bl	80056d0 <xTaskResumeAll>
 8004cbc:	e757      	b.n	8004b6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004cbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cc0:	f000 f8ee 	bl	8004ea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cc4:	f000 fd04 	bl	80056d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cca:	f000 f93b 	bl	8004f44 <prvIsQueueEmpty>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f43f af4c 	beq.w	8004b6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004cdc:	f001 ff5c 	bl	8006b98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ce0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ce2:	f000 f835 	bl	8004d50 <prvGetDisinheritPriorityAfterTimeout>
 8004ce6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f9da 	bl	80060a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004cf4:	f001 ff82 	bl	8006bfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3738      	adds	r7, #56	@ 0x38
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	e000ed04 	.word	0xe000ed04

08004d08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <vQueueDelete+0x2a>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60bb      	str	r3, [r7, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f95e 	bl	8004ff4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f002 f918 	bl	8006f78 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e001      	b.n	8004d72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d72:	68fb      	ldr	r3, [r7, #12]
	}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10d      	bne.n	8004dba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d14d      	bne.n	8004e42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 f90c 	bl	8005fc8 <xTaskPriorityDisinherit>
 8004db0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	e043      	b.n	8004e42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d119      	bne.n	8004df4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6858      	ldr	r0, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	f002 fcbd 	bl	800774a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	441a      	add	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d32b      	bcc.n	8004e42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]
 8004df2:	e026      	b.n	8004e42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68d8      	ldr	r0, [r3, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	f002 fca3 	bl	800774a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	425b      	negs	r3, r3
 8004e0e:	441a      	add	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d207      	bcs.n	8004e30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	425b      	negs	r3, r3
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d105      	bne.n	8004e42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e4a:	697b      	ldr	r3, [r7, #20]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	441a      	add	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d303      	bcc.n	8004e88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68d9      	ldr	r1, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	461a      	mov	r2, r3
 8004e92:	6838      	ldr	r0, [r7, #0]
 8004e94:	f002 fc59 	bl	800774a <memcpy>
	}
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ea8:	f001 fe76 	bl	8006b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004eb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eb4:	e011      	b.n	8004eda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d012      	beq.n	8004ee4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3324      	adds	r3, #36	@ 0x24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fe24 	bl	8005b10 <xTaskRemoveFromEventList>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ece:	f000 fefd 	bl	8005ccc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	dce9      	bgt.n	8004eb6 <prvUnlockQueue+0x16>
 8004ee2:	e000      	b.n	8004ee6 <prvUnlockQueue+0x46>
					break;
 8004ee4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	22ff      	movs	r2, #255	@ 0xff
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004eee:	f001 fe85 	bl	8006bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ef2:	f001 fe51 	bl	8006b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004efc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004efe:	e011      	b.n	8004f24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d012      	beq.n	8004f2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3310      	adds	r3, #16
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fdff 	bl	8005b10 <xTaskRemoveFromEventList>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f18:	f000 fed8 	bl	8005ccc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f1c:	7bbb      	ldrb	r3, [r7, #14]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	dce9      	bgt.n	8004f00 <prvUnlockQueue+0x60>
 8004f2c:	e000      	b.n	8004f30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	22ff      	movs	r2, #255	@ 0xff
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f38:	f001 fe60 	bl	8006bfc <vPortExitCritical>
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f4c:	f001 fe24 	bl	8006b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e001      	b.n	8004f62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f62:	f001 fe4b 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8004f66:	68fb      	ldr	r3, [r7, #12]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f78:	f001 fe0e 	bl	8006b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d102      	bne.n	8004f8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e001      	b.n	8004f92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f92:	f001 fe33 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e014      	b.n	8004fda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff0 <vQueueAddToRegistry+0x50>)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fbc:	490c      	ldr	r1, [pc, #48]	@ (8004ff0 <vQueueAddToRegistry+0x50>)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff0 <vQueueAddToRegistry+0x50>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4413      	add	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fd2:	e006      	b.n	8004fe2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b07      	cmp	r3, #7
 8004fde:	d9e7      	bls.n	8004fb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	200008cc 	.word	0x200008cc

08004ff4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e016      	b.n	8005030 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005002:	4a10      	ldr	r2, [pc, #64]	@ (8005044 <vQueueUnregisterQueue+0x50>)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	429a      	cmp	r2, r3
 8005010:	d10b      	bne.n	800502a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005012:	4a0c      	ldr	r2, [pc, #48]	@ (8005044 <vQueueUnregisterQueue+0x50>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2100      	movs	r1, #0
 8005018:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800501c:	4a09      	ldr	r2, [pc, #36]	@ (8005044 <vQueueUnregisterQueue+0x50>)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	2200      	movs	r2, #0
 8005026:	605a      	str	r2, [r3, #4]
				break;
 8005028:	e006      	b.n	8005038 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b07      	cmp	r3, #7
 8005034:	d9e5      	bls.n	8005002 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	200008cc 	.word	0x200008cc

08005048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005058:	f001 fd9e 	bl	8006b98 <vPortEnterCritical>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005062:	b25b      	sxtb	r3, r3
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005068:	d103      	bne.n	8005072 <vQueueWaitForMessageRestricted+0x2a>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005078:	b25b      	sxtb	r3, r3
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800507e:	d103      	bne.n	8005088 <vQueueWaitForMessageRestricted+0x40>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005088:	f001 fdb8 	bl	8006bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	3324      	adds	r3, #36	@ 0x24
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fd0b 	bl	8005ab8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050a2:	6978      	ldr	r0, [r7, #20]
 80050a4:	f7ff fefc 	bl	8004ea0 <prvUnlockQueue>
	}
 80050a8:	bf00      	nop
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08e      	sub	sp, #56	@ 0x38
 80050b4:	af04      	add	r7, sp, #16
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	623b      	str	r3, [r7, #32]
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	61fb      	str	r3, [r7, #28]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050fa:	23a8      	movs	r3, #168	@ 0xa8
 80050fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2ba8      	cmp	r3, #168	@ 0xa8
 8005102:	d00b      	beq.n	800511c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	61bb      	str	r3, [r7, #24]
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800511c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01e      	beq.n	8005162 <xTaskCreateStatic+0xb2>
 8005124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01b      	beq.n	8005162 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	2202      	movs	r2, #2
 8005138:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800513c:	2300      	movs	r3, #0
 800513e:	9303      	str	r3, [sp, #12]
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	9302      	str	r3, [sp, #8]
 8005144:	f107 0314 	add.w	r3, r7, #20
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f851 	bl	80051fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800515a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800515c:	f000 f8f6 	bl	800534c <prvAddNewTaskToReadyList>
 8005160:	e001      	b.n	8005166 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005166:	697b      	ldr	r3, [r7, #20]
	}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	@ 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08c      	sub	sp, #48	@ 0x30
 8005174:	af04      	add	r7, sp, #16
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4618      	mov	r0, r3
 8005186:	f001 fe29 	bl	8006ddc <pvPortMalloc>
 800518a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00e      	beq.n	80051b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005192:	20a8      	movs	r0, #168	@ 0xa8
 8005194:	f001 fe22 	bl	8006ddc <pvPortMalloc>
 8005198:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80051a6:	e005      	b.n	80051b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051a8:	6978      	ldr	r0, [r7, #20]
 80051aa:	f001 fee5 	bl	8006f78 <vPortFree>
 80051ae:	e001      	b.n	80051b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d017      	beq.n	80051ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	2300      	movs	r3, #0
 80051c6:	9303      	str	r3, [sp, #12]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	9302      	str	r3, [sp, #8]
 80051cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f80f 	bl	80051fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051de:	69f8      	ldr	r0, [r7, #28]
 80051e0:	f000 f8b4 	bl	800534c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051e4:	2301      	movs	r3, #1
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	e002      	b.n	80051f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051f0:	69bb      	ldr	r3, [r7, #24]
	}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	461a      	mov	r2, r3
 8005214:	21a5      	movs	r1, #165	@ 0xa5
 8005216:	f002 f9c7 	bl	80075a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005224:	3b01      	subs	r3, #1
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	617b      	str	r3, [r7, #20]
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	e7fd      	b.n	8005252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01f      	beq.n	800529c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	e012      	b.n	8005288 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	7819      	ldrb	r1, [r3, #0]
 800526a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	3334      	adds	r3, #52	@ 0x34
 8005272:	460a      	mov	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d006      	beq.n	8005290 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3301      	adds	r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b0f      	cmp	r3, #15
 800528c:	d9e9      	bls.n	8005262 <prvInitialiseNewTask+0x66>
 800528e:	e000      	b.n	8005292 <prvInitialiseNewTask+0x96>
			{
				break;
 8005290:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800529a:	e003      	b.n	80052a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	2b37      	cmp	r3, #55	@ 0x37
 80052a8:	d901      	bls.n	80052ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052aa:	2337      	movs	r3, #55	@ 0x37
 80052ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	2200      	movs	r2, #0
 80052be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	3304      	adds	r3, #4
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe fe8d 	bl	8003fe4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	3318      	adds	r3, #24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fe88 	bl	8003fe4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	3354      	adds	r3, #84	@ 0x54
 80052fe:	224c      	movs	r2, #76	@ 0x4c
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f002 f950 	bl	80075a8 <memset>
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	4a0d      	ldr	r2, [pc, #52]	@ (8005340 <prvInitialiseNewTask+0x144>)
 800530c:	659a      	str	r2, [r3, #88]	@ 0x58
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	4a0c      	ldr	r2, [pc, #48]	@ (8005344 <prvInitialiseNewTask+0x148>)
 8005312:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005316:	4a0c      	ldr	r2, [pc, #48]	@ (8005348 <prvInitialiseNewTask+0x14c>)
 8005318:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	68f9      	ldr	r1, [r7, #12]
 800531e:	69b8      	ldr	r0, [r7, #24]
 8005320:	f001 fb08 	bl	8006934 <pxPortInitialiseStack>
 8005324:	4602      	mov	r2, r0
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005336:	bf00      	nop
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20001b18 	.word	0x20001b18
 8005344:	20001b80 	.word	0x20001b80
 8005348:	20001be8 	.word	0x20001be8

0800534c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005354:	f001 fc20 	bl	8006b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005358:	4b2d      	ldr	r3, [pc, #180]	@ (8005410 <prvAddNewTaskToReadyList+0xc4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	4a2c      	ldr	r2, [pc, #176]	@ (8005410 <prvAddNewTaskToReadyList+0xc4>)
 8005360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005362:	4b2c      	ldr	r3, [pc, #176]	@ (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800536a:	4a2a      	ldr	r2, [pc, #168]	@ (8005414 <prvAddNewTaskToReadyList+0xc8>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005370:	4b27      	ldr	r3, [pc, #156]	@ (8005410 <prvAddNewTaskToReadyList+0xc4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d110      	bne.n	800539a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005378:	f000 fccc 	bl	8005d14 <prvInitialiseTaskLists>
 800537c:	e00d      	b.n	800539a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800537e:	4b26      	ldr	r3, [pc, #152]	@ (8005418 <prvAddNewTaskToReadyList+0xcc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005386:	4b23      	ldr	r3, [pc, #140]	@ (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	429a      	cmp	r2, r3
 8005392:	d802      	bhi.n	800539a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005394:	4a1f      	ldr	r2, [pc, #124]	@ (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800539a:	4b20      	ldr	r3, [pc, #128]	@ (800541c <prvAddNewTaskToReadyList+0xd0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3301      	adds	r3, #1
 80053a0:	4a1e      	ldr	r2, [pc, #120]	@ (800541c <prvAddNewTaskToReadyList+0xd0>)
 80053a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053a4:	4b1d      	ldr	r3, [pc, #116]	@ (800541c <prvAddNewTaskToReadyList+0xd0>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <prvAddNewTaskToReadyList+0xd4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d903      	bls.n	80053c0 <prvAddNewTaskToReadyList+0x74>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	4a18      	ldr	r2, [pc, #96]	@ (8005420 <prvAddNewTaskToReadyList+0xd4>)
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a15      	ldr	r2, [pc, #84]	@ (8005424 <prvAddNewTaskToReadyList+0xd8>)
 80053ce:	441a      	add	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7fe fe11 	bl	8003ffe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053dc:	f001 fc0e 	bl	8006bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005418 <prvAddNewTaskToReadyList+0xcc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00e      	beq.n	8005406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <prvAddNewTaskToReadyList+0xc8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d207      	bcs.n	8005406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <prvAddNewTaskToReadyList+0xdc>)
 80053f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000de0 	.word	0x20000de0
 8005414:	2000090c 	.word	0x2000090c
 8005418:	20000dec 	.word	0x20000dec
 800541c:	20000dfc 	.word	0x20000dfc
 8005420:	20000de8 	.word	0x20000de8
 8005424:	20000910 	.word	0x20000910
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800543e:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <vTaskDelay+0x64>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <vTaskDelay+0x32>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60bb      	str	r3, [r7, #8]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800545e:	f000 f929 	bl	80056b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005462:	2100      	movs	r1, #0
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 feb7 	bl	80061d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800546a:	f000 f931 	bl	80056d0 <xTaskResumeAll>
 800546e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d107      	bne.n	8005486 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005476:	4b07      	ldr	r3, [pc, #28]	@ (8005494 <vTaskDelay+0x68>)
 8005478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000e08 	.word	0x20000e08
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b37      	cmp	r3, #55	@ 0x37
 80054aa:	d90b      	bls.n	80054c4 <vTaskPrioritySet+0x2c>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
 80054c2:	e7fd      	b.n	80054c0 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b37      	cmp	r3, #55	@ 0x37
 80054c8:	d901      	bls.n	80054ce <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054ca:	2337      	movs	r3, #55	@ 0x37
 80054cc:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80054ce:	f001 fb63 	bl	8006b98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <vTaskPrioritySet+0x46>
 80054d8:	4b3a      	ldr	r3, [pc, #232]	@ (80055c4 <vTaskPrioritySet+0x12c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	e000      	b.n	80054e0 <vTaskPrioritySet+0x48>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e6:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d063      	beq.n	80055b8 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d90d      	bls.n	8005514 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 80054f8:	4b32      	ldr	r3, [pc, #200]	@ (80055c4 <vTaskPrioritySet+0x12c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d00f      	beq.n	8005522 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005502:	4b30      	ldr	r3, [pc, #192]	@ (80055c4 <vTaskPrioritySet+0x12c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d309      	bcc.n	8005522 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800550e:	2301      	movs	r3, #1
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	e006      	b.n	8005522 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005514:	4b2b      	ldr	r3, [pc, #172]	@ (80055c4 <vTaskPrioritySet+0x12c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	429a      	cmp	r2, r3
 800551c:	d101      	bne.n	8005522 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d102      	bne.n	800553a <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	db04      	blt.n	8005552 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	6959      	ldr	r1, [r3, #20]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4a19      	ldr	r2, [pc, #100]	@ (80055c8 <vTaskPrioritySet+0x130>)
 8005562:	4413      	add	r3, r2
 8005564:	4299      	cmp	r1, r3
 8005566:	d11c      	bne.n	80055a2 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fda3 	bl	80040b8 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005576:	4b15      	ldr	r3, [pc, #84]	@ (80055cc <vTaskPrioritySet+0x134>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d903      	bls.n	8005586 <vTaskPrioritySet+0xee>
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <vTaskPrioritySet+0x134>)
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4a0d      	ldr	r2, [pc, #52]	@ (80055c8 <vTaskPrioritySet+0x130>)
 8005594:	441a      	add	r2, r3
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	3304      	adds	r3, #4
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f7fe fd2e 	bl	8003ffe <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80055a8:	4b09      	ldr	r3, [pc, #36]	@ (80055d0 <vTaskPrioritySet+0x138>)
 80055aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80055b8:	f001 fb20 	bl	8006bfc <vPortExitCritical>
	}
 80055bc:	bf00      	nop
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	2000090c 	.word	0x2000090c
 80055c8:	20000910 	.word	0x20000910
 80055cc:	20000de8 	.word	0x20000de8
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	@ 0x28
 80055d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055e2:	463a      	mov	r2, r7
 80055e4:	1d39      	adds	r1, r7, #4
 80055e6:	f107 0308 	add.w	r3, r7, #8
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fca6 	bl	8003f3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	9202      	str	r2, [sp, #8]
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2300      	movs	r3, #0
 8005600:	460a      	mov	r2, r1
 8005602:	4924      	ldr	r1, [pc, #144]	@ (8005694 <vTaskStartScheduler+0xc0>)
 8005604:	4824      	ldr	r0, [pc, #144]	@ (8005698 <vTaskStartScheduler+0xc4>)
 8005606:	f7ff fd53 	bl	80050b0 <xTaskCreateStatic>
 800560a:	4603      	mov	r3, r0
 800560c:	4a23      	ldr	r2, [pc, #140]	@ (800569c <vTaskStartScheduler+0xc8>)
 800560e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005610:	4b22      	ldr	r3, [pc, #136]	@ (800569c <vTaskStartScheduler+0xc8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005618:	2301      	movs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e001      	b.n	8005622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d102      	bne.n	800562e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005628:	f000 fe2a 	bl	8006280 <xTimerCreateTimerTask>
 800562c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d11b      	bne.n	800566c <vTaskStartScheduler+0x98>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
}
 8005646:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005648:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <vTaskStartScheduler+0xcc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3354      	adds	r3, #84	@ 0x54
 800564e:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <vTaskStartScheduler+0xd0>)
 8005650:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005652:	4b15      	ldr	r3, [pc, #84]	@ (80056a8 <vTaskStartScheduler+0xd4>)
 8005654:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800565a:	4b14      	ldr	r3, [pc, #80]	@ (80056ac <vTaskStartScheduler+0xd8>)
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005660:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <vTaskStartScheduler+0xdc>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005666:	f001 f9f3 	bl	8006a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800566a:	e00f      	b.n	800568c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005672:	d10b      	bne.n	800568c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60fb      	str	r3, [r7, #12]
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <vTaskStartScheduler+0xb4>
}
 800568c:	bf00      	nop
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	08007cb8 	.word	0x08007cb8
 8005698:	08005ce5 	.word	0x08005ce5
 800569c:	20000e04 	.word	0x20000e04
 80056a0:	2000090c 	.word	0x2000090c
 80056a4:	2000001c 	.word	0x2000001c
 80056a8:	20000e00 	.word	0x20000e00
 80056ac:	20000dec 	.word	0x20000dec
 80056b0:	20000de4 	.word	0x20000de4

080056b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056b8:	4b04      	ldr	r3, [pc, #16]	@ (80056cc <vTaskSuspendAll+0x18>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	4a03      	ldr	r2, [pc, #12]	@ (80056cc <vTaskSuspendAll+0x18>)
 80056c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20000e08 	.word	0x20000e08

080056d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056de:	4b42      	ldr	r3, [pc, #264]	@ (80057e8 <xTaskResumeAll+0x118>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <xTaskResumeAll+0x2e>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	603b      	str	r3, [r7, #0]
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	e7fd      	b.n	80056fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056fe:	f001 fa4b 	bl	8006b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005702:	4b39      	ldr	r3, [pc, #228]	@ (80057e8 <xTaskResumeAll+0x118>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3b01      	subs	r3, #1
 8005708:	4a37      	ldr	r2, [pc, #220]	@ (80057e8 <xTaskResumeAll+0x118>)
 800570a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800570c:	4b36      	ldr	r3, [pc, #216]	@ (80057e8 <xTaskResumeAll+0x118>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d162      	bne.n	80057da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005714:	4b35      	ldr	r3, [pc, #212]	@ (80057ec <xTaskResumeAll+0x11c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d05e      	beq.n	80057da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800571c:	e02f      	b.n	800577e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571e:	4b34      	ldr	r3, [pc, #208]	@ (80057f0 <xTaskResumeAll+0x120>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3318      	adds	r3, #24
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fcc4 	bl	80040b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3304      	adds	r3, #4
 8005734:	4618      	mov	r0, r3
 8005736:	f7fe fcbf 	bl	80040b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573e:	4b2d      	ldr	r3, [pc, #180]	@ (80057f4 <xTaskResumeAll+0x124>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d903      	bls.n	800574e <xTaskResumeAll+0x7e>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574a:	4a2a      	ldr	r2, [pc, #168]	@ (80057f4 <xTaskResumeAll+0x124>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4a27      	ldr	r2, [pc, #156]	@ (80057f8 <xTaskResumeAll+0x128>)
 800575c:	441a      	add	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7fe fc4a 	bl	8003ffe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576e:	4b23      	ldr	r3, [pc, #140]	@ (80057fc <xTaskResumeAll+0x12c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	429a      	cmp	r2, r3
 8005776:	d302      	bcc.n	800577e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005778:	4b21      	ldr	r3, [pc, #132]	@ (8005800 <xTaskResumeAll+0x130>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800577e:	4b1c      	ldr	r3, [pc, #112]	@ (80057f0 <xTaskResumeAll+0x120>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1cb      	bne.n	800571e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800578c:	f000 fb66 	bl	8005e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005790:	4b1c      	ldr	r3, [pc, #112]	@ (8005804 <xTaskResumeAll+0x134>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d010      	beq.n	80057be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800579c:	f000 f846 	bl	800582c <xTaskIncrementTick>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80057a6:	4b16      	ldr	r3, [pc, #88]	@ (8005800 <xTaskResumeAll+0x130>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f1      	bne.n	800579c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80057b8:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <xTaskResumeAll+0x134>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057be:	4b10      	ldr	r3, [pc, #64]	@ (8005800 <xTaskResumeAll+0x130>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005808 <xTaskResumeAll+0x138>)
 80057cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057da:	f001 fa0f 	bl	8006bfc <vPortExitCritical>

	return xAlreadyYielded;
 80057de:	68bb      	ldr	r3, [r7, #8]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000e08 	.word	0x20000e08
 80057ec:	20000de0 	.word	0x20000de0
 80057f0:	20000da0 	.word	0x20000da0
 80057f4:	20000de8 	.word	0x20000de8
 80057f8:	20000910 	.word	0x20000910
 80057fc:	2000090c 	.word	0x2000090c
 8005800:	20000df4 	.word	0x20000df4
 8005804:	20000df0 	.word	0x20000df0
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005812:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <xTaskGetTickCount+0x1c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005818:	687b      	ldr	r3, [r7, #4]
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000de4 	.word	0x20000de4

0800582c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005836:	4b4f      	ldr	r3, [pc, #316]	@ (8005974 <xTaskIncrementTick+0x148>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 8090 	bne.w	8005960 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005840:	4b4d      	ldr	r3, [pc, #308]	@ (8005978 <xTaskIncrementTick+0x14c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005848:	4a4b      	ldr	r2, [pc, #300]	@ (8005978 <xTaskIncrementTick+0x14c>)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d121      	bne.n	8005898 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005854:	4b49      	ldr	r3, [pc, #292]	@ (800597c <xTaskIncrementTick+0x150>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <xTaskIncrementTick+0x4a>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	603b      	str	r3, [r7, #0]
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	e7fd      	b.n	8005872 <xTaskIncrementTick+0x46>
 8005876:	4b41      	ldr	r3, [pc, #260]	@ (800597c <xTaskIncrementTick+0x150>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	4b40      	ldr	r3, [pc, #256]	@ (8005980 <xTaskIncrementTick+0x154>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a3e      	ldr	r2, [pc, #248]	@ (800597c <xTaskIncrementTick+0x150>)
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	4a3e      	ldr	r2, [pc, #248]	@ (8005980 <xTaskIncrementTick+0x154>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	4b3e      	ldr	r3, [pc, #248]	@ (8005984 <xTaskIncrementTick+0x158>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	4a3c      	ldr	r2, [pc, #240]	@ (8005984 <xTaskIncrementTick+0x158>)
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	f000 fae2 	bl	8005e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005898:	4b3b      	ldr	r3, [pc, #236]	@ (8005988 <xTaskIncrementTick+0x15c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d349      	bcc.n	8005936 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058a2:	4b36      	ldr	r3, [pc, #216]	@ (800597c <xTaskIncrementTick+0x150>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ac:	4b36      	ldr	r3, [pc, #216]	@ (8005988 <xTaskIncrementTick+0x15c>)
 80058ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058b2:	601a      	str	r2, [r3, #0]
					break;
 80058b4:	e03f      	b.n	8005936 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b6:	4b31      	ldr	r3, [pc, #196]	@ (800597c <xTaskIncrementTick+0x150>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d203      	bcs.n	80058d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005988 <xTaskIncrementTick+0x15c>)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058d4:	e02f      	b.n	8005936 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	3304      	adds	r3, #4
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe fbec 	bl	80040b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d004      	beq.n	80058f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	3318      	adds	r3, #24
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe fbe3 	bl	80040b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f6:	4b25      	ldr	r3, [pc, #148]	@ (800598c <xTaskIncrementTick+0x160>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d903      	bls.n	8005906 <xTaskIncrementTick+0xda>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	4a22      	ldr	r2, [pc, #136]	@ (800598c <xTaskIncrementTick+0x160>)
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4a1f      	ldr	r2, [pc, #124]	@ (8005990 <xTaskIncrementTick+0x164>)
 8005914:	441a      	add	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	3304      	adds	r3, #4
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f7fe fb6e 	bl	8003ffe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005926:	4b1b      	ldr	r3, [pc, #108]	@ (8005994 <xTaskIncrementTick+0x168>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	429a      	cmp	r2, r3
 800592e:	d3b8      	bcc.n	80058a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005930:	2301      	movs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005934:	e7b5      	b.n	80058a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005936:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <xTaskIncrementTick+0x168>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593c:	4914      	ldr	r1, [pc, #80]	@ (8005990 <xTaskIncrementTick+0x164>)
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d901      	bls.n	8005952 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005952:	4b11      	ldr	r3, [pc, #68]	@ (8005998 <xTaskIncrementTick+0x16c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800595a:	2301      	movs	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e004      	b.n	800596a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005960:	4b0e      	ldr	r3, [pc, #56]	@ (800599c <xTaskIncrementTick+0x170>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	4a0d      	ldr	r2, [pc, #52]	@ (800599c <xTaskIncrementTick+0x170>)
 8005968:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800596a:	697b      	ldr	r3, [r7, #20]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000e08 	.word	0x20000e08
 8005978:	20000de4 	.word	0x20000de4
 800597c:	20000d98 	.word	0x20000d98
 8005980:	20000d9c 	.word	0x20000d9c
 8005984:	20000df8 	.word	0x20000df8
 8005988:	20000e00 	.word	0x20000e00
 800598c:	20000de8 	.word	0x20000de8
 8005990:	20000910 	.word	0x20000910
 8005994:	2000090c 	.word	0x2000090c
 8005998:	20000df4 	.word	0x20000df4
 800599c:	20000df0 	.word	0x20000df0

080059a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a54 <vTaskSwitchContext+0xb4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005a58 <vTaskSwitchContext+0xb8>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059b4:	e047      	b.n	8005a46 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80059b6:	4b28      	ldr	r3, [pc, #160]	@ (8005a58 <vTaskSwitchContext+0xb8>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059bc:	4b27      	ldr	r3, [pc, #156]	@ (8005a5c <vTaskSwitchContext+0xbc>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e011      	b.n	80059e8 <vTaskSwitchContext+0x48>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <vTaskSwitchContext+0x42>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	607b      	str	r3, [r7, #4]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <vTaskSwitchContext+0x3e>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	491d      	ldr	r1, [pc, #116]	@ (8005a60 <vTaskSwitchContext+0xc0>)
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0e3      	beq.n	80059c4 <vTaskSwitchContext+0x24>
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4a16      	ldr	r2, [pc, #88]	@ (8005a60 <vTaskSwitchContext+0xc0>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d104      	bne.n	8005a2c <vTaskSwitchContext+0x8c>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	605a      	str	r2, [r3, #4]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	4a0c      	ldr	r2, [pc, #48]	@ (8005a64 <vTaskSwitchContext+0xc4>)
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	4a09      	ldr	r2, [pc, #36]	@ (8005a5c <vTaskSwitchContext+0xbc>)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a3c:	4b09      	ldr	r3, [pc, #36]	@ (8005a64 <vTaskSwitchContext+0xc4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3354      	adds	r3, #84	@ 0x54
 8005a42:	4a09      	ldr	r2, [pc, #36]	@ (8005a68 <vTaskSwitchContext+0xc8>)
 8005a44:	6013      	str	r3, [r2, #0]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000e08 	.word	0x20000e08
 8005a58:	20000df4 	.word	0x20000df4
 8005a5c:	20000de8 	.word	0x20000de8
 8005a60:	20000910 	.word	0x20000910
 8005a64:	2000090c 	.word	0x2000090c
 8005a68:	2000001c 	.word	0x2000001c

08005a6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10b      	bne.n	8005a94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60fb      	str	r3, [r7, #12]
}
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	e7fd      	b.n	8005a90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a94:	4b07      	ldr	r3, [pc, #28]	@ (8005ab4 <vTaskPlaceOnEventList+0x48>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3318      	adds	r3, #24
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7fe fad2 	bl	8004046 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	6838      	ldr	r0, [r7, #0]
 8005aa6:	f000 fb97 	bl	80061d8 <prvAddCurrentTaskToDelayedList>
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2000090c 	.word	0x2000090c

08005ab8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	617b      	str	r3, [r7, #20]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b0c <vTaskPlaceOnEventListRestricted+0x54>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	4619      	mov	r1, r3
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7fe fa87 	bl	8003ffe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005af6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005afa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	68b8      	ldr	r0, [r7, #8]
 8005b00:	f000 fb6a 	bl	80061d8 <prvAddCurrentTaskToDelayedList>
	}
 8005b04:	bf00      	nop
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	2000090c 	.word	0x2000090c

08005b10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60fb      	str	r3, [r7, #12]
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	e7fd      	b.n	8005b3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3318      	adds	r3, #24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fab8 	bl	80040b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b48:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc0 <xTaskRemoveFromEventList+0xb0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d11d      	bne.n	8005b8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe faaf 	bl	80040b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5e:	4b19      	ldr	r3, [pc, #100]	@ (8005bc4 <xTaskRemoveFromEventList+0xb4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d903      	bls.n	8005b6e <xTaskRemoveFromEventList+0x5e>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	4a16      	ldr	r2, [pc, #88]	@ (8005bc4 <xTaskRemoveFromEventList+0xb4>)
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4a13      	ldr	r2, [pc, #76]	@ (8005bc8 <xTaskRemoveFromEventList+0xb8>)
 8005b7c:	441a      	add	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f7fe fa3a 	bl	8003ffe <vListInsertEnd>
 8005b8a:	e005      	b.n	8005b98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4619      	mov	r1, r3
 8005b92:	480e      	ldr	r0, [pc, #56]	@ (8005bcc <xTaskRemoveFromEventList+0xbc>)
 8005b94:	f7fe fa33 	bl	8003ffe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <xTaskRemoveFromEventList+0xc0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d905      	bls.n	8005bb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005baa:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <xTaskRemoveFromEventList+0xc4>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e001      	b.n	8005bb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005bb6:	697b      	ldr	r3, [r7, #20]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000e08 	.word	0x20000e08
 8005bc4:	20000de8 	.word	0x20000de8
 8005bc8:	20000910 	.word	0x20000910
 8005bcc:	20000da0 	.word	0x20000da0
 8005bd0:	2000090c 	.word	0x2000090c
 8005bd4:	20000df4 	.word	0x20000df4

08005bd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005be0:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <vTaskInternalSetTimeOutState+0x24>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005be8:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <vTaskInternalSetTimeOutState+0x28>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	605a      	str	r2, [r3, #4]
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	20000df8 	.word	0x20000df8
 8005c00:	20000de4 	.word	0x20000de4

08005c04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	613b      	str	r3, [r7, #16]
}
 8005c26:	bf00      	nop
 8005c28:	bf00      	nop
 8005c2a:	e7fd      	b.n	8005c28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10b      	bne.n	8005c4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	60fb      	str	r3, [r7, #12]
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	e7fd      	b.n	8005c46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c4a:	f000 ffa5 	bl	8006b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <xTaskCheckForTimeOut+0xc0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c66:	d102      	bne.n	8005c6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	e023      	b.n	8005cb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b15      	ldr	r3, [pc, #84]	@ (8005cc8 <xTaskCheckForTimeOut+0xc4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d007      	beq.n	8005c8a <xTaskCheckForTimeOut+0x86>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d302      	bcc.n	8005c8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	e015      	b.n	8005cb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d20b      	bcs.n	8005cac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff99 	bl	8005bd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	e004      	b.n	8005cb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cb6:	f000 ffa1 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005cba:	69fb      	ldr	r3, [r7, #28]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000de4 	.word	0x20000de4
 8005cc8:	20000df8 	.word	0x20000df8

08005ccc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cd0:	4b03      	ldr	r3, [pc, #12]	@ (8005ce0 <vTaskMissedYield+0x14>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000df4 	.word	0x20000df4

08005ce4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cec:	f000 f852 	bl	8005d94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cf0:	4b06      	ldr	r3, [pc, #24]	@ (8005d0c <prvIdleTask+0x28>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d9f9      	bls.n	8005cec <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cf8:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <prvIdleTask+0x2c>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d08:	e7f0      	b.n	8005cec <prvIdleTask+0x8>
 8005d0a:	bf00      	nop
 8005d0c:	20000910 	.word	0x20000910
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	e00c      	b.n	8005d3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4a12      	ldr	r2, [pc, #72]	@ (8005d74 <prvInitialiseTaskLists+0x60>)
 8005d2c:	4413      	add	r3, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe f938 	bl	8003fa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3301      	adds	r3, #1
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b37      	cmp	r3, #55	@ 0x37
 8005d3e:	d9ef      	bls.n	8005d20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d40:	480d      	ldr	r0, [pc, #52]	@ (8005d78 <prvInitialiseTaskLists+0x64>)
 8005d42:	f7fe f92f 	bl	8003fa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d46:	480d      	ldr	r0, [pc, #52]	@ (8005d7c <prvInitialiseTaskLists+0x68>)
 8005d48:	f7fe f92c 	bl	8003fa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d4c:	480c      	ldr	r0, [pc, #48]	@ (8005d80 <prvInitialiseTaskLists+0x6c>)
 8005d4e:	f7fe f929 	bl	8003fa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d52:	480c      	ldr	r0, [pc, #48]	@ (8005d84 <prvInitialiseTaskLists+0x70>)
 8005d54:	f7fe f926 	bl	8003fa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d58:	480b      	ldr	r0, [pc, #44]	@ (8005d88 <prvInitialiseTaskLists+0x74>)
 8005d5a:	f7fe f923 	bl	8003fa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <prvInitialiseTaskLists+0x78>)
 8005d60:	4a05      	ldr	r2, [pc, #20]	@ (8005d78 <prvInitialiseTaskLists+0x64>)
 8005d62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d64:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <prvInitialiseTaskLists+0x7c>)
 8005d66:	4a05      	ldr	r2, [pc, #20]	@ (8005d7c <prvInitialiseTaskLists+0x68>)
 8005d68:	601a      	str	r2, [r3, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000910 	.word	0x20000910
 8005d78:	20000d70 	.word	0x20000d70
 8005d7c:	20000d84 	.word	0x20000d84
 8005d80:	20000da0 	.word	0x20000da0
 8005d84:	20000db4 	.word	0x20000db4
 8005d88:	20000dcc 	.word	0x20000dcc
 8005d8c:	20000d98 	.word	0x20000d98
 8005d90:	20000d9c 	.word	0x20000d9c

08005d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d9a:	e019      	b.n	8005dd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d9c:	f000 fefc 	bl	8006b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da0:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <prvCheckTasksWaitingTermination+0x50>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe f983 	bl	80040b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005db2:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <prvCheckTasksWaitingTermination+0x54>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	4a0b      	ldr	r2, [pc, #44]	@ (8005de8 <prvCheckTasksWaitingTermination+0x54>)
 8005dba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005dec <prvCheckTasksWaitingTermination+0x58>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8005dec <prvCheckTasksWaitingTermination+0x58>)
 8005dc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dc6:	f000 ff19 	bl	8006bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f810 	bl	8005df0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dd0:	4b06      	ldr	r3, [pc, #24]	@ (8005dec <prvCheckTasksWaitingTermination+0x58>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e1      	bne.n	8005d9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000db4 	.word	0x20000db4
 8005de8:	20000de0 	.word	0x20000de0
 8005dec:	20000dc8 	.word	0x20000dc8

08005df0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3354      	adds	r3, #84	@ 0x54
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 fbeb 	bl	80075d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d108      	bne.n	8005e1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 f8b1 	bl	8006f78 <vPortFree>
				vPortFree( pxTCB );
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 f8ae 	bl	8006f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e1c:	e019      	b.n	8005e52 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d103      	bne.n	8005e30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 f8a5 	bl	8006f78 <vPortFree>
	}
 8005e2e:	e010      	b.n	8005e52 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d00b      	beq.n	8005e52 <prvDeleteTCB+0x62>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	60fb      	str	r3, [r7, #12]
}
 8005e4c:	bf00      	nop
 8005e4e:	bf00      	nop
 8005e50:	e7fd      	b.n	8005e4e <prvDeleteTCB+0x5e>
	}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e62:	4b0c      	ldr	r3, [pc, #48]	@ (8005e94 <prvResetNextTaskUnblockTime+0x38>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e98 <prvResetNextTaskUnblockTime+0x3c>)
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e74:	e008      	b.n	8005e88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e76:	4b07      	ldr	r3, [pc, #28]	@ (8005e94 <prvResetNextTaskUnblockTime+0x38>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4a04      	ldr	r2, [pc, #16]	@ (8005e98 <prvResetNextTaskUnblockTime+0x3c>)
 8005e86:	6013      	str	r3, [r2, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	20000d98 	.word	0x20000d98
 8005e98:	20000e00 	.word	0x20000e00

08005e9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005ea2:	4b05      	ldr	r3, [pc, #20]	@ (8005eb8 <xTaskGetCurrentTaskHandle+0x1c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005ea8:	687b      	ldr	r3, [r7, #4]
	}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	2000090c 	.word	0x2000090c

08005ebc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <xTaskGetSchedulerState+0x34>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	607b      	str	r3, [r7, #4]
 8005ece:	e008      	b.n	8005ee2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ed0:	4b08      	ldr	r3, [pc, #32]	@ (8005ef4 <xTaskGetSchedulerState+0x38>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	607b      	str	r3, [r7, #4]
 8005edc:	e001      	b.n	8005ee2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ee2:	687b      	ldr	r3, [r7, #4]
	}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000dec 	.word	0x20000dec
 8005ef4:	20000e08 	.word	0x20000e08

08005ef8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d051      	beq.n	8005fb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f12:	4b2a      	ldr	r3, [pc, #168]	@ (8005fbc <xTaskPriorityInherit+0xc4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d241      	bcs.n	8005fa0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	db06      	blt.n	8005f32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f24:	4b25      	ldr	r3, [pc, #148]	@ (8005fbc <xTaskPriorityInherit+0xc4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6959      	ldr	r1, [r3, #20]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc0 <xTaskPriorityInherit+0xc8>)
 8005f44:	4413      	add	r3, r2
 8005f46:	4299      	cmp	r1, r3
 8005f48:	d122      	bne.n	8005f90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe f8b2 	bl	80040b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f54:	4b19      	ldr	r3, [pc, #100]	@ (8005fbc <xTaskPriorityInherit+0xc4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f62:	4b18      	ldr	r3, [pc, #96]	@ (8005fc4 <xTaskPriorityInherit+0xcc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d903      	bls.n	8005f72 <xTaskPriorityInherit+0x7a>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	4a15      	ldr	r2, [pc, #84]	@ (8005fc4 <xTaskPriorityInherit+0xcc>)
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4a10      	ldr	r2, [pc, #64]	@ (8005fc0 <xTaskPriorityInherit+0xc8>)
 8005f80:	441a      	add	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f7fe f838 	bl	8003ffe <vListInsertEnd>
 8005f8e:	e004      	b.n	8005f9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f90:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <xTaskPriorityInherit+0xc4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	e008      	b.n	8005fb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fa4:	4b05      	ldr	r3, [pc, #20]	@ (8005fbc <xTaskPriorityInherit+0xc4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d201      	bcs.n	8005fb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
	}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	2000090c 	.word	0x2000090c
 8005fc0:	20000910 	.word	0x20000910
 8005fc4:	20000de8 	.word	0x20000de8

08005fc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d058      	beq.n	8006090 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fde:	4b2f      	ldr	r3, [pc, #188]	@ (800609c <xTaskPriorityDisinherit+0xd4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d00b      	beq.n	8006000 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	60fb      	str	r3, [r7, #12]
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	e7fd      	b.n	8005ffc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10b      	bne.n	8006020 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60bb      	str	r3, [r7, #8]
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	e7fd      	b.n	800601c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006024:	1e5a      	subs	r2, r3, #1
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006032:	429a      	cmp	r2, r3
 8006034:	d02c      	beq.n	8006090 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603a:	2b00      	cmp	r3, #0
 800603c:	d128      	bne.n	8006090 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	3304      	adds	r3, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe f838 	bl	80040b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006060:	4b0f      	ldr	r3, [pc, #60]	@ (80060a0 <xTaskPriorityDisinherit+0xd8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d903      	bls.n	8006070 <xTaskPriorityDisinherit+0xa8>
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	4a0c      	ldr	r2, [pc, #48]	@ (80060a0 <xTaskPriorityDisinherit+0xd8>)
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4a09      	ldr	r2, [pc, #36]	@ (80060a4 <xTaskPriorityDisinherit+0xdc>)
 800607e:	441a      	add	r2, r3
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7fd ffb9 	bl	8003ffe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006090:	697b      	ldr	r3, [r7, #20]
	}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	2000090c 	.word	0x2000090c
 80060a0:	20000de8 	.word	0x20000de8
 80060a4:	20000910 	.word	0x20000910

080060a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80060b6:	2301      	movs	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d06c      	beq.n	800619a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	60fb      	str	r3, [r7, #12]
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	e7fd      	b.n	80060dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d902      	bls.n	80060f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	e002      	b.n	80060f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d04c      	beq.n	800619a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	429a      	cmp	r2, r3
 8006108:	d147      	bne.n	800619a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800610a:	4b26      	ldr	r3, [pc, #152]	@ (80061a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	429a      	cmp	r2, r3
 8006112:	d10b      	bne.n	800612c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60bb      	str	r3, [r7, #8]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	db04      	blt.n	800614a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	6959      	ldr	r1, [r3, #20]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4a13      	ldr	r2, [pc, #76]	@ (80061a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800615a:	4413      	add	r3, r2
 800615c:	4299      	cmp	r1, r3
 800615e:	d11c      	bne.n	800619a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	3304      	adds	r3, #4
 8006164:	4618      	mov	r0, r3
 8006166:	f7fd ffa7 	bl	80040b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616e:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d903      	bls.n	800617e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	4a0c      	ldr	r2, [pc, #48]	@ (80061ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4a07      	ldr	r2, [pc, #28]	@ (80061a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800618c:	441a      	add	r2, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	3304      	adds	r3, #4
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f7fd ff32 	bl	8003ffe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800619a:	bf00      	nop
 800619c:	3720      	adds	r7, #32
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	2000090c 	.word	0x2000090c
 80061a8:	20000910 	.word	0x20000910
 80061ac:	20000de8 	.word	0x20000de8

080061b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061b4:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061c2:	3201      	adds	r2, #1
 80061c4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80061c6:	4b03      	ldr	r3, [pc, #12]	@ (80061d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80061c8:	681b      	ldr	r3, [r3, #0]
	}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	2000090c 	.word	0x2000090c

080061d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061e2:	4b21      	ldr	r3, [pc, #132]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x90>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e8:	4b20      	ldr	r3, [pc, #128]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd ff62 	bl	80040b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061fa:	d10a      	bne.n	8006212 <prvAddCurrentTaskToDelayedList+0x3a>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006202:	4b1a      	ldr	r3, [pc, #104]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3304      	adds	r3, #4
 8006208:	4619      	mov	r1, r3
 800620a:	4819      	ldr	r0, [pc, #100]	@ (8006270 <prvAddCurrentTaskToDelayedList+0x98>)
 800620c:	f7fd fef7 	bl	8003ffe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006210:	e026      	b.n	8006260 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4413      	add	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800621a:	4b14      	ldr	r3, [pc, #80]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	429a      	cmp	r2, r3
 8006228:	d209      	bcs.n	800623e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800622a:	4b12      	ldr	r3, [pc, #72]	@ (8006274 <prvAddCurrentTaskToDelayedList+0x9c>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b0f      	ldr	r3, [pc, #60]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fd ff05 	bl	8004046 <vListInsert>
}
 800623c:	e010      	b.n	8006260 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623e:	4b0e      	ldr	r3, [pc, #56]	@ (8006278 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b0a      	ldr	r3, [pc, #40]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3304      	adds	r3, #4
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f7fd fefb 	bl	8004046 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006250:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	429a      	cmp	r2, r3
 8006258:	d202      	bcs.n	8006260 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800625a:	4a08      	ldr	r2, [pc, #32]	@ (800627c <prvAddCurrentTaskToDelayedList+0xa4>)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6013      	str	r3, [r2, #0]
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000de4 	.word	0x20000de4
 800626c:	2000090c 	.word	0x2000090c
 8006270:	20000dcc 	.word	0x20000dcc
 8006274:	20000d9c 	.word	0x20000d9c
 8006278:	20000d98 	.word	0x20000d98
 800627c:	20000e00 	.word	0x20000e00

08006280 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	@ 0x28
 8006284:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800628a:	f000 fb13 	bl	80068b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800628e:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <xTimerCreateTimerTask+0x84>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d021      	beq.n	80062da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800629e:	1d3a      	adds	r2, r7, #4
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	f107 030c 	add.w	r3, r7, #12
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fd fe61 	bl	8003f70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	9202      	str	r2, [sp, #8]
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	2302      	movs	r3, #2
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	2300      	movs	r3, #0
 80062be:	460a      	mov	r2, r1
 80062c0:	4911      	ldr	r1, [pc, #68]	@ (8006308 <xTimerCreateTimerTask+0x88>)
 80062c2:	4812      	ldr	r0, [pc, #72]	@ (800630c <xTimerCreateTimerTask+0x8c>)
 80062c4:	f7fe fef4 	bl	80050b0 <xTaskCreateStatic>
 80062c8:	4603      	mov	r3, r0
 80062ca:	4a11      	ldr	r2, [pc, #68]	@ (8006310 <xTimerCreateTimerTask+0x90>)
 80062cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062ce:	4b10      	ldr	r3, [pc, #64]	@ (8006310 <xTimerCreateTimerTask+0x90>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062d6:	2301      	movs	r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062f8:	697b      	ldr	r3, [r7, #20]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000e3c 	.word	0x20000e3c
 8006308:	08007cc0 	.word	0x08007cc0
 800630c:	0800644d 	.word	0x0800644d
 8006310:	20000e40 	.word	0x20000e40

08006314 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	@ 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006322:	2300      	movs	r3, #0
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <xTimerGenericCommand+0x30>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	623b      	str	r3, [r7, #32]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006344:	4b19      	ldr	r3, [pc, #100]	@ (80063ac <xTimerGenericCommand+0x98>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d02a      	beq.n	80063a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b05      	cmp	r3, #5
 800635c:	dc18      	bgt.n	8006390 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800635e:	f7ff fdad 	bl	8005ebc <xTaskGetSchedulerState>
 8006362:	4603      	mov	r3, r0
 8006364:	2b02      	cmp	r3, #2
 8006366:	d109      	bne.n	800637c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006368:	4b10      	ldr	r3, [pc, #64]	@ (80063ac <xTimerGenericCommand+0x98>)
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	f107 0110 	add.w	r1, r7, #16
 8006370:	2300      	movs	r3, #0
 8006372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006374:	f7fe f936 	bl	80045e4 <xQueueGenericSend>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24
 800637a:	e012      	b.n	80063a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <xTimerGenericCommand+0x98>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	f107 0110 	add.w	r1, r7, #16
 8006384:	2300      	movs	r3, #0
 8006386:	2200      	movs	r2, #0
 8006388:	f7fe f92c 	bl	80045e4 <xQueueGenericSend>
 800638c:	6278      	str	r0, [r7, #36]	@ 0x24
 800638e:	e008      	b.n	80063a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <xTimerGenericCommand+0x98>)
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	f107 0110 	add.w	r1, r7, #16
 8006398:	2300      	movs	r3, #0
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	f7fe fa24 	bl	80047e8 <xQueueGenericSendFromISR>
 80063a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	@ 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000e3c 	.word	0x20000e3c

080063b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ba:	4b23      	ldr	r3, [pc, #140]	@ (8006448 <prvProcessExpiredTimer+0x98>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fd fe75 	bl	80040b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d023      	beq.n	8006424 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	18d1      	adds	r1, r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	6978      	ldr	r0, [r7, #20]
 80063ea:	f000 f8d5 	bl	8006598 <prvInsertTimerInActiveList>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d020      	beq.n	8006436 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063f4:	2300      	movs	r3, #0
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2300      	movs	r3, #0
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	2100      	movs	r1, #0
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	f7ff ff88 	bl	8006314 <xTimerGenericCommand>
 8006404:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d114      	bne.n	8006436 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	6978      	ldr	r0, [r7, #20]
 800643c:	4798      	blx	r3
}
 800643e:	bf00      	nop
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000e34 	.word	0x20000e34

0800644c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f859 	bl	8006510 <prvGetNextExpireTime>
 800645e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4619      	mov	r1, r3
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f805 	bl	8006474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800646a:	f000 f8d7 	bl	800661c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800646e:	bf00      	nop
 8006470:	e7f0      	b.n	8006454 <prvTimerTask+0x8>
	...

08006474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800647e:	f7ff f919 	bl	80056b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f866 	bl	8006558 <prvSampleTimeNow>
 800648c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d130      	bne.n	80064f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <prvProcessTimerOrBlockTask+0x3c>
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d806      	bhi.n	80064b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064a2:	f7ff f915 	bl	80056d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ff81 	bl	80063b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064ae:	e024      	b.n	80064fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d008      	beq.n	80064c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064b6:	4b13      	ldr	r3, [pc, #76]	@ (8006504 <prvProcessTimerOrBlockTask+0x90>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <prvProcessTimerOrBlockTask+0x50>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <prvProcessTimerOrBlockTask+0x52>
 80064c4:	2300      	movs	r3, #0
 80064c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <prvProcessTimerOrBlockTask+0x94>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	f7fe fdb7 	bl	8005048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064da:	f7ff f8f9 	bl	80056d0 <xTaskResumeAll>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064e4:	4b09      	ldr	r3, [pc, #36]	@ (800650c <prvProcessTimerOrBlockTask+0x98>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
}
 80064f4:	e001      	b.n	80064fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064f6:	f7ff f8eb 	bl	80056d0 <xTaskResumeAll>
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000e38 	.word	0x20000e38
 8006508:	20000e3c 	.word	0x20000e3c
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006518:	4b0e      	ldr	r3, [pc, #56]	@ (8006554 <prvGetNextExpireTime+0x44>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <prvGetNextExpireTime+0x16>
 8006522:	2201      	movs	r2, #1
 8006524:	e000      	b.n	8006528 <prvGetNextExpireTime+0x18>
 8006526:	2200      	movs	r2, #0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006534:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <prvGetNextExpireTime+0x44>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	e001      	b.n	8006544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006544:	68fb      	ldr	r3, [r7, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000e34 	.word	0x20000e34

08006558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006560:	f7ff f954 	bl	800580c <xTaskGetTickCount>
 8006564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006566:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <prvSampleTimeNow+0x3c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	429a      	cmp	r2, r3
 800656e:	d205      	bcs.n	800657c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006570:	f000 f93a 	bl	80067e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	e002      	b.n	8006582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006582:	4a04      	ldr	r2, [pc, #16]	@ (8006594 <prvSampleTimeNow+0x3c>)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000e44 	.word	0x20000e44

08006598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d812      	bhi.n	80065e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d302      	bcc.n	80065d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e01b      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065d2:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <prvInsertTimerInActiveList+0x7c>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3304      	adds	r3, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f7fd fd32 	bl	8004046 <vListInsert>
 80065e2:	e012      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d206      	bcs.n	80065fa <prvInsertTimerInActiveList+0x62>
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d302      	bcc.n	80065fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e007      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065fa:	4b07      	ldr	r3, [pc, #28]	@ (8006618 <prvInsertTimerInActiveList+0x80>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7fd fd1e 	bl	8004046 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800660a:	697b      	ldr	r3, [r7, #20]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20000e38 	.word	0x20000e38
 8006618:	20000e34 	.word	0x20000e34

0800661c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08e      	sub	sp, #56	@ 0x38
 8006620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006622:	e0ce      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	da19      	bge.n	800665e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	3304      	adds	r3, #4
 800662e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10b      	bne.n	800664e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	61fb      	str	r3, [r7, #28]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800664e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006654:	6850      	ldr	r0, [r2, #4]
 8006656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006658:	6892      	ldr	r2, [r2, #8]
 800665a:	4611      	mov	r1, r2
 800665c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f2c0 80ae 	blt.w	80067c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fd fd1e 	bl	80040b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800667c:	463b      	mov	r3, r7
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff ff6a 	bl	8006558 <prvSampleTimeNow>
 8006684:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b09      	cmp	r3, #9
 800668a:	f200 8097 	bhi.w	80067bc <prvProcessReceivedCommands+0x1a0>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <prvProcessReceivedCommands+0x78>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066bd 	.word	0x080066bd
 80066a0:	08006733 	.word	0x08006733
 80066a4:	08006747 	.word	0x08006747
 80066a8:	08006793 	.word	0x08006793
 80066ac:	080066bd 	.word	0x080066bd
 80066b0:	080066bd 	.word	0x080066bd
 80066b4:	08006733 	.word	0x08006733
 80066b8:	08006747 	.word	0x08006747
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	18d1      	adds	r1, r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066dc:	f7ff ff5c 	bl	8006598 <prvInsertTimerInActiveList>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06c      	beq.n	80067c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d061      	beq.n	80067c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	441a      	add	r2, r3
 8006704:	2300      	movs	r3, #0
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2300      	movs	r3, #0
 800670a:	2100      	movs	r1, #0
 800670c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800670e:	f7ff fe01 	bl	8006314 <xTimerGenericCommand>
 8006712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d152      	bne.n	80067c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	61bb      	str	r3, [r7, #24]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	b2da      	uxtb	r2, r3
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006744:	e03d      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	b2da      	uxtb	r2, r3
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800675e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	617b      	str	r3, [r7, #20]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	18d1      	adds	r1, r2, r3
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800678c:	f7ff ff04 	bl	8006598 <prvInsertTimerInActiveList>
					break;
 8006790:	e017      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80067a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a2:	f000 fbe9 	bl	8006f78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067a6:	e00c      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067ba:	e002      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80067c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067c2:	4b08      	ldr	r3, [pc, #32]	@ (80067e4 <prvProcessReceivedCommands+0x1c8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	1d39      	adds	r1, r7, #4
 80067c8:	2200      	movs	r2, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe f8aa 	bl	8004924 <xQueueReceive>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f47f af26 	bne.w	8006624 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	3730      	adds	r7, #48	@ 0x30
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000e3c 	.word	0x20000e3c

080067e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ee:	e049      	b.n	8006884 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067f0:	4b2e      	ldr	r3, [pc, #184]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fa:	4b2c      	ldr	r3, [pc, #176]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3304      	adds	r3, #4
 8006808:	4618      	mov	r0, r3
 800680a:	f7fd fc55 	bl	80040b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d02f      	beq.n	8006884 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	429a      	cmp	r2, r3
 8006834:	d90e      	bls.n	8006854 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006842:	4b1a      	ldr	r3, [pc, #104]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3304      	adds	r3, #4
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f7fd fbfa 	bl	8004046 <vListInsert>
 8006852:	e017      	b.n	8006884 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006854:	2300      	movs	r3, #0
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	2300      	movs	r3, #0
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	2100      	movs	r1, #0
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff fd58 	bl	8006314 <xTimerGenericCommand>
 8006864:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	603b      	str	r3, [r7, #0]
}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	e7fd      	b.n	8006880 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006884:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1b0      	bne.n	80067f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800688e:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006894:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <prvSwitchTimerLists+0xc8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a04      	ldr	r2, [pc, #16]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 800689a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800689c:	4a04      	ldr	r2, [pc, #16]	@ (80068b0 <prvSwitchTimerLists+0xc8>)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	6013      	str	r3, [r2, #0]
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000e34 	.word	0x20000e34
 80068b0:	20000e38 	.word	0x20000e38

080068b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068ba:	f000 f96d 	bl	8006b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068be:	4b15      	ldr	r3, [pc, #84]	@ (8006914 <prvCheckForValidListAndQueue+0x60>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d120      	bne.n	8006908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068c6:	4814      	ldr	r0, [pc, #80]	@ (8006918 <prvCheckForValidListAndQueue+0x64>)
 80068c8:	f7fd fb6c 	bl	8003fa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068cc:	4813      	ldr	r0, [pc, #76]	@ (800691c <prvCheckForValidListAndQueue+0x68>)
 80068ce:	f7fd fb69 	bl	8003fa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068d2:	4b13      	ldr	r3, [pc, #76]	@ (8006920 <prvCheckForValidListAndQueue+0x6c>)
 80068d4:	4a10      	ldr	r2, [pc, #64]	@ (8006918 <prvCheckForValidListAndQueue+0x64>)
 80068d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068d8:	4b12      	ldr	r3, [pc, #72]	@ (8006924 <prvCheckForValidListAndQueue+0x70>)
 80068da:	4a10      	ldr	r2, [pc, #64]	@ (800691c <prvCheckForValidListAndQueue+0x68>)
 80068dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068de:	2300      	movs	r3, #0
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	4b11      	ldr	r3, [pc, #68]	@ (8006928 <prvCheckForValidListAndQueue+0x74>)
 80068e4:	4a11      	ldr	r2, [pc, #68]	@ (800692c <prvCheckForValidListAndQueue+0x78>)
 80068e6:	2110      	movs	r1, #16
 80068e8:	200a      	movs	r0, #10
 80068ea:	f7fd fc79 	bl	80041e0 <xQueueGenericCreateStatic>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4a08      	ldr	r2, [pc, #32]	@ (8006914 <prvCheckForValidListAndQueue+0x60>)
 80068f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068f4:	4b07      	ldr	r3, [pc, #28]	@ (8006914 <prvCheckForValidListAndQueue+0x60>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068fc:	4b05      	ldr	r3, [pc, #20]	@ (8006914 <prvCheckForValidListAndQueue+0x60>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	490b      	ldr	r1, [pc, #44]	@ (8006930 <prvCheckForValidListAndQueue+0x7c>)
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fb4c 	bl	8004fa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006908:	f000 f978 	bl	8006bfc <vPortExitCritical>
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000e3c 	.word	0x20000e3c
 8006918:	20000e0c 	.word	0x20000e0c
 800691c:	20000e20 	.word	0x20000e20
 8006920:	20000e34 	.word	0x20000e34
 8006924:	20000e38 	.word	0x20000e38
 8006928:	20000ee8 	.word	0x20000ee8
 800692c:	20000e48 	.word	0x20000e48
 8006930:	08007cc8 	.word	0x08007cc8

08006934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3b04      	subs	r3, #4
 8006944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800694c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b04      	subs	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f023 0201 	bic.w	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3b04      	subs	r3, #4
 8006962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006964:	4a0c      	ldr	r2, [pc, #48]	@ (8006998 <pxPortInitialiseStack+0x64>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3b14      	subs	r3, #20
 800696e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3b04      	subs	r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f06f 0202 	mvn.w	r2, #2
 8006982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3b20      	subs	r3, #32
 8006988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	0800699d 	.word	0x0800699d

0800699c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069a6:	4b13      	ldr	r3, [pc, #76]	@ (80069f4 <prvTaskExitError+0x58>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069ae:	d00b      	beq.n	80069c8 <prvTaskExitError+0x2c>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <prvTaskExitError+0x28>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60bb      	str	r3, [r7, #8]
}
 80069da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069dc:	bf00      	nop
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0fc      	beq.n	80069de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000000c 	.word	0x2000000c
	...

08006a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <pxCurrentTCBConst2>)
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6808      	ldr	r0, [r1, #0]
 8006a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	f380 8809 	msr	PSP, r0
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	4770      	bx	lr
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst2>:
 8006a20:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a28:	4808      	ldr	r0, [pc, #32]	@ (8006a4c <prvPortStartFirstTask+0x24>)
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	6800      	ldr	r0, [r0, #0]
 8006a2e:	f380 8808 	msr	MSP, r0
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8814 	msr	CONTROL, r0
 8006a3a:	b662      	cpsie	i
 8006a3c:	b661      	cpsie	f
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	df00      	svc	0
 8006a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a4a:	bf00      	nop
 8006a4c:	e000ed08 	.word	0xe000ed08

08006a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a56:	4b47      	ldr	r3, [pc, #284]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a47      	ldr	r2, [pc, #284]	@ (8006b78 <xPortStartScheduler+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10b      	bne.n	8006a78 <xPortStartScheduler+0x28>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a78:	4b3e      	ldr	r3, [pc, #248]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b7c <xPortStartScheduler+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d10b      	bne.n	8006a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a9a:	4b39      	ldr	r3, [pc, #228]	@ (8006b80 <xPortStartScheduler+0x130>)
 8006a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	22ff      	movs	r2, #255	@ 0xff
 8006aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <xPortStartScheduler+0x134>)
 8006ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ac2:	4b31      	ldr	r3, [pc, #196]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ac8:	e009      	b.n	8006ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006aca:	4b2f      	ldr	r3, [pc, #188]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae6:	2b80      	cmp	r3, #128	@ 0x80
 8006ae8:	d0ef      	beq.n	8006aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aea:	4b27      	ldr	r3, [pc, #156]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f1c3 0307 	rsb	r3, r3, #7
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d00b      	beq.n	8006b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60bb      	str	r3, [r7, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	4a1c      	ldr	r2, [pc, #112]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b18:	4b1b      	ldr	r3, [pc, #108]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b20:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b2c:	4b17      	ldr	r3, [pc, #92]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b38:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a13      	ldr	r2, [pc, #76]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b44:	f000 f8da 	bl	8006cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b48:	4b11      	ldr	r3, [pc, #68]	@ (8006b90 <xPortStartScheduler+0x140>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b4e:	f000 f8f9 	bl	8006d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a0f      	ldr	r2, [pc, #60]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b5e:	f7ff ff63 	bl	8006a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b62:	f7fe ff1d 	bl	80059a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006b66:	f7ff ff19 	bl	800699c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed00 	.word	0xe000ed00
 8006b78:	410fc271 	.word	0x410fc271
 8006b7c:	410fc270 	.word	0x410fc270
 8006b80:	e000e400 	.word	0xe000e400
 8006b84:	20000f38 	.word	0x20000f38
 8006b88:	20000f3c 	.word	0x20000f3c
 8006b8c:	e000ed20 	.word	0xe000ed20
 8006b90:	2000000c 	.word	0x2000000c
 8006b94:	e000ef34 	.word	0xe000ef34

08006b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bb2:	4b10      	ldr	r3, [pc, #64]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d110      	bne.n	8006be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <vPortEnterCritical+0x60>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <vPortEnterCritical+0x4a>
	}
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000000c 	.word	0x2000000c
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c02:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <vPortExitCritical+0x26>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	607b      	str	r3, [r7, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <vPortExitCritical+0x44>
 8006c34:	2300      	movs	r3, #0
 8006c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f383 8811 	msr	BASEPRI, r3
}
 8006c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	2000000c 	.word	0x2000000c

08006c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	f01e 0f10 	tst.w	lr, #16
 8006c60:	bf08      	it	eq
 8006c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c74:	f380 8811 	msr	BASEPRI, r0
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f7fe fe8e 	bl	80059a0 <vTaskSwitchContext>
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f380 8811 	msr	BASEPRI, r0
 8006c8c:	bc09      	pop	{r0, r3}
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	f01e 0f10 	tst.w	lr, #16
 8006c9a:	bf08      	it	eq
 8006c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ca0:	f380 8809 	msr	PSP, r0
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cd2:	f7fe fdab 	bl	800582c <xTaskIncrementTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <xPortSysTickHandler+0x40>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d06:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <vPortSetupTimerInterrupt+0x38>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <vPortSetupTimerInterrupt+0x3c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <vPortSetupTimerInterrupt+0x40>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	4a09      	ldr	r2, [pc, #36]	@ (8006d40 <vPortSetupTimerInterrupt+0x44>)
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d1e:	4b04      	ldr	r3, [pc, #16]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e010 	.word	0xe000e010
 8006d34:	e000e018 	.word	0xe000e018
 8006d38:	20000000 	.word	0x20000000
 8006d3c:	10624dd3 	.word	0x10624dd3
 8006d40:	e000e014 	.word	0xe000e014

08006d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d54 <vPortEnableVFP+0x10>
 8006d48:	6801      	ldr	r1, [r0, #0]
 8006d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d4e:	6001      	str	r1, [r0, #0]
 8006d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d52:	bf00      	nop
 8006d54:	e000ed88 	.word	0xe000ed88

08006d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d5e:	f3ef 8305 	mrs	r3, IPSR
 8006d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b0f      	cmp	r3, #15
 8006d68:	d915      	bls.n	8006d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d6a:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <vPortValidateInterruptPriority+0x74>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d74:	4b16      	ldr	r3, [pc, #88]	@ (8006dd0 <vPortValidateInterruptPriority+0x78>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	7afa      	ldrb	r2, [r7, #11]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d20b      	bcs.n	8006d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d96:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd4 <vPortValidateInterruptPriority+0x7c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <vPortValidateInterruptPriority+0x80>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d90b      	bls.n	8006dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	603b      	str	r3, [r7, #0]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <vPortValidateInterruptPriority+0x62>
	}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	e000e3f0 	.word	0xe000e3f0
 8006dd0:	20000f38 	.word	0x20000f38
 8006dd4:	e000ed0c 	.word	0xe000ed0c
 8006dd8:	20000f3c 	.word	0x20000f3c

08006ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	@ 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006de8:	f7fe fc64 	bl	80056b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dec:	4b5c      	ldr	r3, [pc, #368]	@ (8006f60 <pvPortMalloc+0x184>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006df4:	f000 f924 	bl	8007040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006df8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f64 <pvPortMalloc+0x188>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 8095 	bne.w	8006f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01e      	beq.n	8006e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d015      	beq.n	8006e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f023 0307 	bic.w	r3, r3, #7
 8006e24:	3308      	adds	r3, #8
 8006e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <pvPortMalloc+0x6e>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	617b      	str	r3, [r7, #20]
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	e7fd      	b.n	8006e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d06f      	beq.n	8006f30 <pvPortMalloc+0x154>
 8006e50:	4b45      	ldr	r3, [pc, #276]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d86a      	bhi.n	8006f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e5a:	4b44      	ldr	r3, [pc, #272]	@ (8006f6c <pvPortMalloc+0x190>)
 8006e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e5e:	4b43      	ldr	r3, [pc, #268]	@ (8006f6c <pvPortMalloc+0x190>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e64:	e004      	b.n	8006e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d903      	bls.n	8006e82 <pvPortMalloc+0xa6>
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f1      	bne.n	8006e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e82:	4b37      	ldr	r3, [pc, #220]	@ (8006f60 <pvPortMalloc+0x184>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d051      	beq.n	8006f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2208      	movs	r2, #8
 8006e92:	4413      	add	r3, r2
 8006e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d920      	bls.n	8006ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	613b      	str	r3, [r7, #16]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eea:	69b8      	ldr	r0, [r7, #24]
 8006eec:	f000 f90a 	bl	8007104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	4a1b      	ldr	r2, [pc, #108]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006efe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <pvPortMalloc+0x194>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d203      	bcs.n	8006f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f0a:	4b17      	ldr	r3, [pc, #92]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a18      	ldr	r2, [pc, #96]	@ (8006f70 <pvPortMalloc+0x194>)
 8006f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <pvPortMalloc+0x188>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f26:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <pvPortMalloc+0x198>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	4a11      	ldr	r2, [pc, #68]	@ (8006f74 <pvPortMalloc+0x198>)
 8006f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f30:	f7fe fbce 	bl	80056d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <pvPortMalloc+0x17a>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60fb      	str	r3, [r7, #12]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <pvPortMalloc+0x176>
	return pvReturn;
 8006f56:	69fb      	ldr	r3, [r7, #28]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3728      	adds	r7, #40	@ 0x28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20001b00 	.word	0x20001b00
 8006f64:	20001b14 	.word	0x20001b14
 8006f68:	20001b04 	.word	0x20001b04
 8006f6c:	20001af8 	.word	0x20001af8
 8006f70:	20001b08 	.word	0x20001b08
 8006f74:	20001b0c 	.word	0x20001b0c

08006f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d04f      	beq.n	800702a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	425b      	negs	r3, r3
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4413      	add	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <vPortFree+0xbc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <vPortFree+0x46>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	60fb      	str	r3, [r7, #12]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <vPortFree+0x66>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	60bb      	str	r3, [r7, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <vPortFree+0xbc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01e      	beq.n	800702a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <vPortFree+0xbc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	401a      	ands	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007004:	f7fe fb56 	bl	80056b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b0a      	ldr	r3, [pc, #40]	@ (8007038 <vPortFree+0xc0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4413      	add	r3, r2
 8007012:	4a09      	ldr	r2, [pc, #36]	@ (8007038 <vPortFree+0xc0>)
 8007014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007016:	6938      	ldr	r0, [r7, #16]
 8007018:	f000 f874 	bl	8007104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800701c:	4b07      	ldr	r3, [pc, #28]	@ (800703c <vPortFree+0xc4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	4a06      	ldr	r2, [pc, #24]	@ (800703c <vPortFree+0xc4>)
 8007024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007026:	f7fe fb53 	bl	80056d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20001b14 	.word	0x20001b14
 8007038:	20001b04 	.word	0x20001b04
 800703c:	20001b10 	.word	0x20001b10

08007040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007046:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800704a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800704c:	4b27      	ldr	r3, [pc, #156]	@ (80070ec <prvHeapInit+0xac>)
 800704e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00c      	beq.n	8007074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3307      	adds	r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0307 	bic.w	r3, r3, #7
 8007066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	4a1f      	ldr	r2, [pc, #124]	@ (80070ec <prvHeapInit+0xac>)
 8007070:	4413      	add	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007078:	4a1d      	ldr	r2, [pc, #116]	@ (80070f0 <prvHeapInit+0xb0>)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800707e:	4b1c      	ldr	r3, [pc, #112]	@ (80070f0 <prvHeapInit+0xb0>)
 8007080:	2200      	movs	r2, #0
 8007082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4413      	add	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800708c:	2208      	movs	r2, #8
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a15      	ldr	r2, [pc, #84]	@ (80070f4 <prvHeapInit+0xb4>)
 80070a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070a2:	4b14      	ldr	r3, [pc, #80]	@ (80070f4 <prvHeapInit+0xb4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070aa:	4b12      	ldr	r3, [pc, #72]	@ (80070f4 <prvHeapInit+0xb4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <prvHeapInit+0xb4>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4a0a      	ldr	r2, [pc, #40]	@ (80070f8 <prvHeapInit+0xb8>)
 80070ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a09      	ldr	r2, [pc, #36]	@ (80070fc <prvHeapInit+0xbc>)
 80070d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070d8:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <prvHeapInit+0xc0>)
 80070da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070de:	601a      	str	r2, [r3, #0]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20000f40 	.word	0x20000f40
 80070f0:	20001af8 	.word	0x20001af8
 80070f4:	20001b00 	.word	0x20001b00
 80070f8:	20001b08 	.word	0x20001b08
 80070fc:	20001b04 	.word	0x20001b04
 8007100:	20001b14 	.word	0x20001b14

08007104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800710c:	4b28      	ldr	r3, [pc, #160]	@ (80071b0 <prvInsertBlockIntoFreeList+0xac>)
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e002      	b.n	8007118 <prvInsertBlockIntoFreeList+0x14>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d8f7      	bhi.n	8007112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4413      	add	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d108      	bne.n	8007146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	441a      	add	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d118      	bne.n	800718c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d00d      	beq.n	8007182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e008      	b.n	8007194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007182:	4b0c      	ldr	r3, [pc, #48]	@ (80071b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e003      	b.n	8007194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	429a      	cmp	r2, r3
 800719a:	d002      	beq.n	80071a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20001af8 	.word	0x20001af8
 80071b4:	20001b00 	.word	0x20001b00

080071b8 <std>:
 80071b8:	2300      	movs	r3, #0
 80071ba:	b510      	push	{r4, lr}
 80071bc:	4604      	mov	r4, r0
 80071be:	e9c0 3300 	strd	r3, r3, [r0]
 80071c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071c6:	6083      	str	r3, [r0, #8]
 80071c8:	8181      	strh	r1, [r0, #12]
 80071ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80071cc:	81c2      	strh	r2, [r0, #14]
 80071ce:	6183      	str	r3, [r0, #24]
 80071d0:	4619      	mov	r1, r3
 80071d2:	2208      	movs	r2, #8
 80071d4:	305c      	adds	r0, #92	@ 0x5c
 80071d6:	f000 f9e7 	bl	80075a8 <memset>
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <std+0x58>)
 80071dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80071de:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <std+0x5c>)
 80071e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <std+0x60>)
 80071e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071e6:	4b0d      	ldr	r3, [pc, #52]	@ (800721c <std+0x64>)
 80071e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80071ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <std+0x68>)
 80071ec:	6224      	str	r4, [r4, #32]
 80071ee:	429c      	cmp	r4, r3
 80071f0:	d006      	beq.n	8007200 <std+0x48>
 80071f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071f6:	4294      	cmp	r4, r2
 80071f8:	d002      	beq.n	8007200 <std+0x48>
 80071fa:	33d0      	adds	r3, #208	@ 0xd0
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d105      	bne.n	800720c <std+0x54>
 8007200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007208:	f000 ba9c 	b.w	8007744 <__retarget_lock_init_recursive>
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	080073f9 	.word	0x080073f9
 8007214:	0800741b 	.word	0x0800741b
 8007218:	08007453 	.word	0x08007453
 800721c:	08007477 	.word	0x08007477
 8007220:	20001b18 	.word	0x20001b18

08007224 <stdio_exit_handler>:
 8007224:	4a02      	ldr	r2, [pc, #8]	@ (8007230 <stdio_exit_handler+0xc>)
 8007226:	4903      	ldr	r1, [pc, #12]	@ (8007234 <stdio_exit_handler+0x10>)
 8007228:	4803      	ldr	r0, [pc, #12]	@ (8007238 <stdio_exit_handler+0x14>)
 800722a:	f000 b869 	b.w	8007300 <_fwalk_sglue>
 800722e:	bf00      	nop
 8007230:	20000010 	.word	0x20000010
 8007234:	08007a61 	.word	0x08007a61
 8007238:	20000020 	.word	0x20000020

0800723c <cleanup_stdio>:
 800723c:	6841      	ldr	r1, [r0, #4]
 800723e:	4b0c      	ldr	r3, [pc, #48]	@ (8007270 <cleanup_stdio+0x34>)
 8007240:	4299      	cmp	r1, r3
 8007242:	b510      	push	{r4, lr}
 8007244:	4604      	mov	r4, r0
 8007246:	d001      	beq.n	800724c <cleanup_stdio+0x10>
 8007248:	f000 fc0a 	bl	8007a60 <_fflush_r>
 800724c:	68a1      	ldr	r1, [r4, #8]
 800724e:	4b09      	ldr	r3, [pc, #36]	@ (8007274 <cleanup_stdio+0x38>)
 8007250:	4299      	cmp	r1, r3
 8007252:	d002      	beq.n	800725a <cleanup_stdio+0x1e>
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fc03 	bl	8007a60 <_fflush_r>
 800725a:	68e1      	ldr	r1, [r4, #12]
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <cleanup_stdio+0x3c>)
 800725e:	4299      	cmp	r1, r3
 8007260:	d004      	beq.n	800726c <cleanup_stdio+0x30>
 8007262:	4620      	mov	r0, r4
 8007264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007268:	f000 bbfa 	b.w	8007a60 <_fflush_r>
 800726c:	bd10      	pop	{r4, pc}
 800726e:	bf00      	nop
 8007270:	20001b18 	.word	0x20001b18
 8007274:	20001b80 	.word	0x20001b80
 8007278:	20001be8 	.word	0x20001be8

0800727c <global_stdio_init.part.0>:
 800727c:	b510      	push	{r4, lr}
 800727e:	4b0b      	ldr	r3, [pc, #44]	@ (80072ac <global_stdio_init.part.0+0x30>)
 8007280:	4c0b      	ldr	r4, [pc, #44]	@ (80072b0 <global_stdio_init.part.0+0x34>)
 8007282:	4a0c      	ldr	r2, [pc, #48]	@ (80072b4 <global_stdio_init.part.0+0x38>)
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	4620      	mov	r0, r4
 8007288:	2200      	movs	r2, #0
 800728a:	2104      	movs	r1, #4
 800728c:	f7ff ff94 	bl	80071b8 <std>
 8007290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007294:	2201      	movs	r2, #1
 8007296:	2109      	movs	r1, #9
 8007298:	f7ff ff8e 	bl	80071b8 <std>
 800729c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072a0:	2202      	movs	r2, #2
 80072a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a6:	2112      	movs	r1, #18
 80072a8:	f7ff bf86 	b.w	80071b8 <std>
 80072ac:	20001c50 	.word	0x20001c50
 80072b0:	20001b18 	.word	0x20001b18
 80072b4:	08007225 	.word	0x08007225

080072b8 <__sfp_lock_acquire>:
 80072b8:	4801      	ldr	r0, [pc, #4]	@ (80072c0 <__sfp_lock_acquire+0x8>)
 80072ba:	f000 ba44 	b.w	8007746 <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	20001c59 	.word	0x20001c59

080072c4 <__sfp_lock_release>:
 80072c4:	4801      	ldr	r0, [pc, #4]	@ (80072cc <__sfp_lock_release+0x8>)
 80072c6:	f000 ba3f 	b.w	8007748 <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	20001c59 	.word	0x20001c59

080072d0 <__sinit>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	4604      	mov	r4, r0
 80072d4:	f7ff fff0 	bl	80072b8 <__sfp_lock_acquire>
 80072d8:	6a23      	ldr	r3, [r4, #32]
 80072da:	b11b      	cbz	r3, 80072e4 <__sinit+0x14>
 80072dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e0:	f7ff bff0 	b.w	80072c4 <__sfp_lock_release>
 80072e4:	4b04      	ldr	r3, [pc, #16]	@ (80072f8 <__sinit+0x28>)
 80072e6:	6223      	str	r3, [r4, #32]
 80072e8:	4b04      	ldr	r3, [pc, #16]	@ (80072fc <__sinit+0x2c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f5      	bne.n	80072dc <__sinit+0xc>
 80072f0:	f7ff ffc4 	bl	800727c <global_stdio_init.part.0>
 80072f4:	e7f2      	b.n	80072dc <__sinit+0xc>
 80072f6:	bf00      	nop
 80072f8:	0800723d 	.word	0x0800723d
 80072fc:	20001c50 	.word	0x20001c50

08007300 <_fwalk_sglue>:
 8007300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007304:	4607      	mov	r7, r0
 8007306:	4688      	mov	r8, r1
 8007308:	4614      	mov	r4, r2
 800730a:	2600      	movs	r6, #0
 800730c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007310:	f1b9 0901 	subs.w	r9, r9, #1
 8007314:	d505      	bpl.n	8007322 <_fwalk_sglue+0x22>
 8007316:	6824      	ldr	r4, [r4, #0]
 8007318:	2c00      	cmp	r4, #0
 800731a:	d1f7      	bne.n	800730c <_fwalk_sglue+0xc>
 800731c:	4630      	mov	r0, r6
 800731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007322:	89ab      	ldrh	r3, [r5, #12]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d907      	bls.n	8007338 <_fwalk_sglue+0x38>
 8007328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800732c:	3301      	adds	r3, #1
 800732e:	d003      	beq.n	8007338 <_fwalk_sglue+0x38>
 8007330:	4629      	mov	r1, r5
 8007332:	4638      	mov	r0, r7
 8007334:	47c0      	blx	r8
 8007336:	4306      	orrs	r6, r0
 8007338:	3568      	adds	r5, #104	@ 0x68
 800733a:	e7e9      	b.n	8007310 <_fwalk_sglue+0x10>

0800733c <_puts_r>:
 800733c:	6a03      	ldr	r3, [r0, #32]
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	6884      	ldr	r4, [r0, #8]
 8007342:	4605      	mov	r5, r0
 8007344:	460e      	mov	r6, r1
 8007346:	b90b      	cbnz	r3, 800734c <_puts_r+0x10>
 8007348:	f7ff ffc2 	bl	80072d0 <__sinit>
 800734c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800734e:	07db      	lsls	r3, r3, #31
 8007350:	d405      	bmi.n	800735e <_puts_r+0x22>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	0598      	lsls	r0, r3, #22
 8007356:	d402      	bmi.n	800735e <_puts_r+0x22>
 8007358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800735a:	f000 f9f4 	bl	8007746 <__retarget_lock_acquire_recursive>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	0719      	lsls	r1, r3, #28
 8007362:	d502      	bpl.n	800736a <_puts_r+0x2e>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d135      	bne.n	80073d6 <_puts_r+0x9a>
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 f8c5 	bl	80074fc <__swsetup_r>
 8007372:	b380      	cbz	r0, 80073d6 <_puts_r+0x9a>
 8007374:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800737a:	07da      	lsls	r2, r3, #31
 800737c:	d405      	bmi.n	800738a <_puts_r+0x4e>
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	059b      	lsls	r3, r3, #22
 8007382:	d402      	bmi.n	800738a <_puts_r+0x4e>
 8007384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007386:	f000 f9df 	bl	8007748 <__retarget_lock_release_recursive>
 800738a:	4628      	mov	r0, r5
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	2b00      	cmp	r3, #0
 8007390:	da04      	bge.n	800739c <_puts_r+0x60>
 8007392:	69a2      	ldr	r2, [r4, #24]
 8007394:	429a      	cmp	r2, r3
 8007396:	dc17      	bgt.n	80073c8 <_puts_r+0x8c>
 8007398:	290a      	cmp	r1, #10
 800739a:	d015      	beq.n	80073c8 <_puts_r+0x8c>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	6022      	str	r2, [r4, #0]
 80073a2:	7019      	strb	r1, [r3, #0]
 80073a4:	68a3      	ldr	r3, [r4, #8]
 80073a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073aa:	3b01      	subs	r3, #1
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	2900      	cmp	r1, #0
 80073b0:	d1ed      	bne.n	800738e <_puts_r+0x52>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da11      	bge.n	80073da <_puts_r+0x9e>
 80073b6:	4622      	mov	r2, r4
 80073b8:	210a      	movs	r1, #10
 80073ba:	4628      	mov	r0, r5
 80073bc:	f000 f85f 	bl	800747e <__swbuf_r>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d0d7      	beq.n	8007374 <_puts_r+0x38>
 80073c4:	250a      	movs	r5, #10
 80073c6:	e7d7      	b.n	8007378 <_puts_r+0x3c>
 80073c8:	4622      	mov	r2, r4
 80073ca:	4628      	mov	r0, r5
 80073cc:	f000 f857 	bl	800747e <__swbuf_r>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d1e7      	bne.n	80073a4 <_puts_r+0x68>
 80073d4:	e7ce      	b.n	8007374 <_puts_r+0x38>
 80073d6:	3e01      	subs	r6, #1
 80073d8:	e7e4      	b.n	80073a4 <_puts_r+0x68>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	6022      	str	r2, [r4, #0]
 80073e0:	220a      	movs	r2, #10
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	e7ee      	b.n	80073c4 <_puts_r+0x88>
	...

080073e8 <puts>:
 80073e8:	4b02      	ldr	r3, [pc, #8]	@ (80073f4 <puts+0xc>)
 80073ea:	4601      	mov	r1, r0
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	f7ff bfa5 	b.w	800733c <_puts_r>
 80073f2:	bf00      	nop
 80073f4:	2000001c 	.word	0x2000001c

080073f8 <__sread>:
 80073f8:	b510      	push	{r4, lr}
 80073fa:	460c      	mov	r4, r1
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	f000 f952 	bl	80076a8 <_read_r>
 8007404:	2800      	cmp	r0, #0
 8007406:	bfab      	itete	ge
 8007408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800740a:	89a3      	ldrhlt	r3, [r4, #12]
 800740c:	181b      	addge	r3, r3, r0
 800740e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007412:	bfac      	ite	ge
 8007414:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007416:	81a3      	strhlt	r3, [r4, #12]
 8007418:	bd10      	pop	{r4, pc}

0800741a <__swrite>:
 800741a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741e:	461f      	mov	r7, r3
 8007420:	898b      	ldrh	r3, [r1, #12]
 8007422:	05db      	lsls	r3, r3, #23
 8007424:	4605      	mov	r5, r0
 8007426:	460c      	mov	r4, r1
 8007428:	4616      	mov	r6, r2
 800742a:	d505      	bpl.n	8007438 <__swrite+0x1e>
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	2302      	movs	r3, #2
 8007432:	2200      	movs	r2, #0
 8007434:	f000 f926 	bl	8007684 <_lseek_r>
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007442:	81a3      	strh	r3, [r4, #12]
 8007444:	4632      	mov	r2, r6
 8007446:	463b      	mov	r3, r7
 8007448:	4628      	mov	r0, r5
 800744a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800744e:	f000 b93d 	b.w	80076cc <_write_r>

08007452 <__sseek>:
 8007452:	b510      	push	{r4, lr}
 8007454:	460c      	mov	r4, r1
 8007456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745a:	f000 f913 	bl	8007684 <_lseek_r>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	bf15      	itete	ne
 8007464:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800746a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800746e:	81a3      	strheq	r3, [r4, #12]
 8007470:	bf18      	it	ne
 8007472:	81a3      	strhne	r3, [r4, #12]
 8007474:	bd10      	pop	{r4, pc}

08007476 <__sclose>:
 8007476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747a:	f000 b89d 	b.w	80075b8 <_close_r>

0800747e <__swbuf_r>:
 800747e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007480:	460e      	mov	r6, r1
 8007482:	4614      	mov	r4, r2
 8007484:	4605      	mov	r5, r0
 8007486:	b118      	cbz	r0, 8007490 <__swbuf_r+0x12>
 8007488:	6a03      	ldr	r3, [r0, #32]
 800748a:	b90b      	cbnz	r3, 8007490 <__swbuf_r+0x12>
 800748c:	f7ff ff20 	bl	80072d0 <__sinit>
 8007490:	69a3      	ldr	r3, [r4, #24]
 8007492:	60a3      	str	r3, [r4, #8]
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	071a      	lsls	r2, r3, #28
 8007498:	d501      	bpl.n	800749e <__swbuf_r+0x20>
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	b943      	cbnz	r3, 80074b0 <__swbuf_r+0x32>
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 f82b 	bl	80074fc <__swsetup_r>
 80074a6:	b118      	cbz	r0, 80074b0 <__swbuf_r+0x32>
 80074a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80074ac:	4638      	mov	r0, r7
 80074ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	6922      	ldr	r2, [r4, #16]
 80074b4:	1a98      	subs	r0, r3, r2
 80074b6:	6963      	ldr	r3, [r4, #20]
 80074b8:	b2f6      	uxtb	r6, r6
 80074ba:	4283      	cmp	r3, r0
 80074bc:	4637      	mov	r7, r6
 80074be:	dc05      	bgt.n	80074cc <__swbuf_r+0x4e>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 facc 	bl	8007a60 <_fflush_r>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d1ed      	bne.n	80074a8 <__swbuf_r+0x2a>
 80074cc:	68a3      	ldr	r3, [r4, #8]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	60a3      	str	r3, [r4, #8]
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	6022      	str	r2, [r4, #0]
 80074d8:	701e      	strb	r6, [r3, #0]
 80074da:	6962      	ldr	r2, [r4, #20]
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	429a      	cmp	r2, r3
 80074e0:	d004      	beq.n	80074ec <__swbuf_r+0x6e>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	07db      	lsls	r3, r3, #31
 80074e6:	d5e1      	bpl.n	80074ac <__swbuf_r+0x2e>
 80074e8:	2e0a      	cmp	r6, #10
 80074ea:	d1df      	bne.n	80074ac <__swbuf_r+0x2e>
 80074ec:	4621      	mov	r1, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 fab6 	bl	8007a60 <_fflush_r>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d0d9      	beq.n	80074ac <__swbuf_r+0x2e>
 80074f8:	e7d6      	b.n	80074a8 <__swbuf_r+0x2a>
	...

080074fc <__swsetup_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	4b29      	ldr	r3, [pc, #164]	@ (80075a4 <__swsetup_r+0xa8>)
 8007500:	4605      	mov	r5, r0
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	460c      	mov	r4, r1
 8007506:	b118      	cbz	r0, 8007510 <__swsetup_r+0x14>
 8007508:	6a03      	ldr	r3, [r0, #32]
 800750a:	b90b      	cbnz	r3, 8007510 <__swsetup_r+0x14>
 800750c:	f7ff fee0 	bl	80072d0 <__sinit>
 8007510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007514:	0719      	lsls	r1, r3, #28
 8007516:	d422      	bmi.n	800755e <__swsetup_r+0x62>
 8007518:	06da      	lsls	r2, r3, #27
 800751a:	d407      	bmi.n	800752c <__swsetup_r+0x30>
 800751c:	2209      	movs	r2, #9
 800751e:	602a      	str	r2, [r5, #0]
 8007520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800752a:	e033      	b.n	8007594 <__swsetup_r+0x98>
 800752c:	0758      	lsls	r0, r3, #29
 800752e:	d512      	bpl.n	8007556 <__swsetup_r+0x5a>
 8007530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007532:	b141      	cbz	r1, 8007546 <__swsetup_r+0x4a>
 8007534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007538:	4299      	cmp	r1, r3
 800753a:	d002      	beq.n	8007542 <__swsetup_r+0x46>
 800753c:	4628      	mov	r0, r5
 800753e:	f000 f913 	bl	8007768 <_free_r>
 8007542:	2300      	movs	r3, #0
 8007544:	6363      	str	r3, [r4, #52]	@ 0x34
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	2300      	movs	r3, #0
 8007550:	6063      	str	r3, [r4, #4]
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	f043 0308 	orr.w	r3, r3, #8
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	b94b      	cbnz	r3, 8007576 <__swsetup_r+0x7a>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800756c:	d003      	beq.n	8007576 <__swsetup_r+0x7a>
 800756e:	4621      	mov	r1, r4
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fac3 	bl	8007afc <__smakebuf_r>
 8007576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800757a:	f013 0201 	ands.w	r2, r3, #1
 800757e:	d00a      	beq.n	8007596 <__swsetup_r+0x9a>
 8007580:	2200      	movs	r2, #0
 8007582:	60a2      	str	r2, [r4, #8]
 8007584:	6962      	ldr	r2, [r4, #20]
 8007586:	4252      	negs	r2, r2
 8007588:	61a2      	str	r2, [r4, #24]
 800758a:	6922      	ldr	r2, [r4, #16]
 800758c:	b942      	cbnz	r2, 80075a0 <__swsetup_r+0xa4>
 800758e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007592:	d1c5      	bne.n	8007520 <__swsetup_r+0x24>
 8007594:	bd38      	pop	{r3, r4, r5, pc}
 8007596:	0799      	lsls	r1, r3, #30
 8007598:	bf58      	it	pl
 800759a:	6962      	ldrpl	r2, [r4, #20]
 800759c:	60a2      	str	r2, [r4, #8]
 800759e:	e7f4      	b.n	800758a <__swsetup_r+0x8e>
 80075a0:	2000      	movs	r0, #0
 80075a2:	e7f7      	b.n	8007594 <__swsetup_r+0x98>
 80075a4:	2000001c 	.word	0x2000001c

080075a8 <memset>:
 80075a8:	4402      	add	r2, r0
 80075aa:	4603      	mov	r3, r0
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d100      	bne.n	80075b2 <memset+0xa>
 80075b0:	4770      	bx	lr
 80075b2:	f803 1b01 	strb.w	r1, [r3], #1
 80075b6:	e7f9      	b.n	80075ac <memset+0x4>

080075b8 <_close_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d06      	ldr	r5, [pc, #24]	@ (80075d4 <_close_r+0x1c>)
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7f9 fa4c 	bl	8000a60 <_close>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_close_r+0x1a>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_close_r+0x1a>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	20001c54 	.word	0x20001c54

080075d8 <_reclaim_reent>:
 80075d8:	4b29      	ldr	r3, [pc, #164]	@ (8007680 <_reclaim_reent+0xa8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4283      	cmp	r3, r0
 80075de:	b570      	push	{r4, r5, r6, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	d04b      	beq.n	800767c <_reclaim_reent+0xa4>
 80075e4:	69c3      	ldr	r3, [r0, #28]
 80075e6:	b1ab      	cbz	r3, 8007614 <_reclaim_reent+0x3c>
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	b16b      	cbz	r3, 8007608 <_reclaim_reent+0x30>
 80075ec:	2500      	movs	r5, #0
 80075ee:	69e3      	ldr	r3, [r4, #28]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	5959      	ldr	r1, [r3, r5]
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d13b      	bne.n	8007670 <_reclaim_reent+0x98>
 80075f8:	3504      	adds	r5, #4
 80075fa:	2d80      	cmp	r5, #128	@ 0x80
 80075fc:	d1f7      	bne.n	80075ee <_reclaim_reent+0x16>
 80075fe:	69e3      	ldr	r3, [r4, #28]
 8007600:	4620      	mov	r0, r4
 8007602:	68d9      	ldr	r1, [r3, #12]
 8007604:	f000 f8b0 	bl	8007768 <_free_r>
 8007608:	69e3      	ldr	r3, [r4, #28]
 800760a:	6819      	ldr	r1, [r3, #0]
 800760c:	b111      	cbz	r1, 8007614 <_reclaim_reent+0x3c>
 800760e:	4620      	mov	r0, r4
 8007610:	f000 f8aa 	bl	8007768 <_free_r>
 8007614:	6961      	ldr	r1, [r4, #20]
 8007616:	b111      	cbz	r1, 800761e <_reclaim_reent+0x46>
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f8a5 	bl	8007768 <_free_r>
 800761e:	69e1      	ldr	r1, [r4, #28]
 8007620:	b111      	cbz	r1, 8007628 <_reclaim_reent+0x50>
 8007622:	4620      	mov	r0, r4
 8007624:	f000 f8a0 	bl	8007768 <_free_r>
 8007628:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800762a:	b111      	cbz	r1, 8007632 <_reclaim_reent+0x5a>
 800762c:	4620      	mov	r0, r4
 800762e:	f000 f89b 	bl	8007768 <_free_r>
 8007632:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007634:	b111      	cbz	r1, 800763c <_reclaim_reent+0x64>
 8007636:	4620      	mov	r0, r4
 8007638:	f000 f896 	bl	8007768 <_free_r>
 800763c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800763e:	b111      	cbz	r1, 8007646 <_reclaim_reent+0x6e>
 8007640:	4620      	mov	r0, r4
 8007642:	f000 f891 	bl	8007768 <_free_r>
 8007646:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007648:	b111      	cbz	r1, 8007650 <_reclaim_reent+0x78>
 800764a:	4620      	mov	r0, r4
 800764c:	f000 f88c 	bl	8007768 <_free_r>
 8007650:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007652:	b111      	cbz	r1, 800765a <_reclaim_reent+0x82>
 8007654:	4620      	mov	r0, r4
 8007656:	f000 f887 	bl	8007768 <_free_r>
 800765a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800765c:	b111      	cbz	r1, 8007664 <_reclaim_reent+0x8c>
 800765e:	4620      	mov	r0, r4
 8007660:	f000 f882 	bl	8007768 <_free_r>
 8007664:	6a23      	ldr	r3, [r4, #32]
 8007666:	b14b      	cbz	r3, 800767c <_reclaim_reent+0xa4>
 8007668:	4620      	mov	r0, r4
 800766a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800766e:	4718      	bx	r3
 8007670:	680e      	ldr	r6, [r1, #0]
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f878 	bl	8007768 <_free_r>
 8007678:	4631      	mov	r1, r6
 800767a:	e7bb      	b.n	80075f4 <_reclaim_reent+0x1c>
 800767c:	bd70      	pop	{r4, r5, r6, pc}
 800767e:	bf00      	nop
 8007680:	2000001c 	.word	0x2000001c

08007684 <_lseek_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d07      	ldr	r5, [pc, #28]	@ (80076a4 <_lseek_r+0x20>)
 8007688:	4604      	mov	r4, r0
 800768a:	4608      	mov	r0, r1
 800768c:	4611      	mov	r1, r2
 800768e:	2200      	movs	r2, #0
 8007690:	602a      	str	r2, [r5, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	f7f9 fa0b 	bl	8000aae <_lseek>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_lseek_r+0x1e>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_lseek_r+0x1e>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20001c54 	.word	0x20001c54

080076a8 <_read_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d07      	ldr	r5, [pc, #28]	@ (80076c8 <_read_r+0x20>)
 80076ac:	4604      	mov	r4, r0
 80076ae:	4608      	mov	r0, r1
 80076b0:	4611      	mov	r1, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7f9 f99e 	bl	80009f8 <_read>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_read_r+0x1e>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_read_r+0x1e>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20001c54 	.word	0x20001c54

080076cc <_write_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	@ (80076ec <_write_r+0x20>)
 80076d0:	4604      	mov	r4, r0
 80076d2:	4608      	mov	r0, r1
 80076d4:	4611      	mov	r1, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	602a      	str	r2, [r5, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f7f9 f9aa 	bl	8000a34 <_write>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_write_r+0x1e>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_write_r+0x1e>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20001c54 	.word	0x20001c54

080076f0 <__errno>:
 80076f0:	4b01      	ldr	r3, [pc, #4]	@ (80076f8 <__errno+0x8>)
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	2000001c 	.word	0x2000001c

080076fc <__libc_init_array>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007734 <__libc_init_array+0x38>)
 8007700:	4c0d      	ldr	r4, [pc, #52]	@ (8007738 <__libc_init_array+0x3c>)
 8007702:	1b64      	subs	r4, r4, r5
 8007704:	10a4      	asrs	r4, r4, #2
 8007706:	2600      	movs	r6, #0
 8007708:	42a6      	cmp	r6, r4
 800770a:	d109      	bne.n	8007720 <__libc_init_array+0x24>
 800770c:	4d0b      	ldr	r5, [pc, #44]	@ (800773c <__libc_init_array+0x40>)
 800770e:	4c0c      	ldr	r4, [pc, #48]	@ (8007740 <__libc_init_array+0x44>)
 8007710:	f000 fa62 	bl	8007bd8 <_init>
 8007714:	1b64      	subs	r4, r4, r5
 8007716:	10a4      	asrs	r4, r4, #2
 8007718:	2600      	movs	r6, #0
 800771a:	42a6      	cmp	r6, r4
 800771c:	d105      	bne.n	800772a <__libc_init_array+0x2e>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	f855 3b04 	ldr.w	r3, [r5], #4
 8007724:	4798      	blx	r3
 8007726:	3601      	adds	r6, #1
 8007728:	e7ee      	b.n	8007708 <__libc_init_array+0xc>
 800772a:	f855 3b04 	ldr.w	r3, [r5], #4
 800772e:	4798      	blx	r3
 8007730:	3601      	adds	r6, #1
 8007732:	e7f2      	b.n	800771a <__libc_init_array+0x1e>
 8007734:	08007dac 	.word	0x08007dac
 8007738:	08007dac 	.word	0x08007dac
 800773c:	08007dac 	.word	0x08007dac
 8007740:	08007db0 	.word	0x08007db0

08007744 <__retarget_lock_init_recursive>:
 8007744:	4770      	bx	lr

08007746 <__retarget_lock_acquire_recursive>:
 8007746:	4770      	bx	lr

08007748 <__retarget_lock_release_recursive>:
 8007748:	4770      	bx	lr

0800774a <memcpy>:
 800774a:	440a      	add	r2, r1
 800774c:	4291      	cmp	r1, r2
 800774e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007752:	d100      	bne.n	8007756 <memcpy+0xc>
 8007754:	4770      	bx	lr
 8007756:	b510      	push	{r4, lr}
 8007758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007760:	4291      	cmp	r1, r2
 8007762:	d1f9      	bne.n	8007758 <memcpy+0xe>
 8007764:	bd10      	pop	{r4, pc}
	...

08007768 <_free_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4605      	mov	r5, r0
 800776c:	2900      	cmp	r1, #0
 800776e:	d041      	beq.n	80077f4 <_free_r+0x8c>
 8007770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007774:	1f0c      	subs	r4, r1, #4
 8007776:	2b00      	cmp	r3, #0
 8007778:	bfb8      	it	lt
 800777a:	18e4      	addlt	r4, r4, r3
 800777c:	f000 f8e0 	bl	8007940 <__malloc_lock>
 8007780:	4a1d      	ldr	r2, [pc, #116]	@ (80077f8 <_free_r+0x90>)
 8007782:	6813      	ldr	r3, [r2, #0]
 8007784:	b933      	cbnz	r3, 8007794 <_free_r+0x2c>
 8007786:	6063      	str	r3, [r4, #4]
 8007788:	6014      	str	r4, [r2, #0]
 800778a:	4628      	mov	r0, r5
 800778c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007790:	f000 b8dc 	b.w	800794c <__malloc_unlock>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d908      	bls.n	80077aa <_free_r+0x42>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	1821      	adds	r1, r4, r0
 800779c:	428b      	cmp	r3, r1
 800779e:	bf01      	itttt	eq
 80077a0:	6819      	ldreq	r1, [r3, #0]
 80077a2:	685b      	ldreq	r3, [r3, #4]
 80077a4:	1809      	addeq	r1, r1, r0
 80077a6:	6021      	streq	r1, [r4, #0]
 80077a8:	e7ed      	b.n	8007786 <_free_r+0x1e>
 80077aa:	461a      	mov	r2, r3
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	b10b      	cbz	r3, 80077b4 <_free_r+0x4c>
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d9fa      	bls.n	80077aa <_free_r+0x42>
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	1850      	adds	r0, r2, r1
 80077b8:	42a0      	cmp	r0, r4
 80077ba:	d10b      	bne.n	80077d4 <_free_r+0x6c>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	4401      	add	r1, r0
 80077c0:	1850      	adds	r0, r2, r1
 80077c2:	4283      	cmp	r3, r0
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	d1e0      	bne.n	800778a <_free_r+0x22>
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	6053      	str	r3, [r2, #4]
 80077ce:	4408      	add	r0, r1
 80077d0:	6010      	str	r0, [r2, #0]
 80077d2:	e7da      	b.n	800778a <_free_r+0x22>
 80077d4:	d902      	bls.n	80077dc <_free_r+0x74>
 80077d6:	230c      	movs	r3, #12
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	e7d6      	b.n	800778a <_free_r+0x22>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	1821      	adds	r1, r4, r0
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf04      	itt	eq
 80077e4:	6819      	ldreq	r1, [r3, #0]
 80077e6:	685b      	ldreq	r3, [r3, #4]
 80077e8:	6063      	str	r3, [r4, #4]
 80077ea:	bf04      	itt	eq
 80077ec:	1809      	addeq	r1, r1, r0
 80077ee:	6021      	streq	r1, [r4, #0]
 80077f0:	6054      	str	r4, [r2, #4]
 80077f2:	e7ca      	b.n	800778a <_free_r+0x22>
 80077f4:	bd38      	pop	{r3, r4, r5, pc}
 80077f6:	bf00      	nop
 80077f8:	20001c60 	.word	0x20001c60

080077fc <sbrk_aligned>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	4e0f      	ldr	r6, [pc, #60]	@ (800783c <sbrk_aligned+0x40>)
 8007800:	460c      	mov	r4, r1
 8007802:	6831      	ldr	r1, [r6, #0]
 8007804:	4605      	mov	r5, r0
 8007806:	b911      	cbnz	r1, 800780e <sbrk_aligned+0x12>
 8007808:	f000 f9d6 	bl	8007bb8 <_sbrk_r>
 800780c:	6030      	str	r0, [r6, #0]
 800780e:	4621      	mov	r1, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f000 f9d1 	bl	8007bb8 <_sbrk_r>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	d103      	bne.n	8007822 <sbrk_aligned+0x26>
 800781a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800781e:	4620      	mov	r0, r4
 8007820:	bd70      	pop	{r4, r5, r6, pc}
 8007822:	1cc4      	adds	r4, r0, #3
 8007824:	f024 0403 	bic.w	r4, r4, #3
 8007828:	42a0      	cmp	r0, r4
 800782a:	d0f8      	beq.n	800781e <sbrk_aligned+0x22>
 800782c:	1a21      	subs	r1, r4, r0
 800782e:	4628      	mov	r0, r5
 8007830:	f000 f9c2 	bl	8007bb8 <_sbrk_r>
 8007834:	3001      	adds	r0, #1
 8007836:	d1f2      	bne.n	800781e <sbrk_aligned+0x22>
 8007838:	e7ef      	b.n	800781a <sbrk_aligned+0x1e>
 800783a:	bf00      	nop
 800783c:	20001c5c 	.word	0x20001c5c

08007840 <_malloc_r>:
 8007840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007844:	1ccd      	adds	r5, r1, #3
 8007846:	f025 0503 	bic.w	r5, r5, #3
 800784a:	3508      	adds	r5, #8
 800784c:	2d0c      	cmp	r5, #12
 800784e:	bf38      	it	cc
 8007850:	250c      	movcc	r5, #12
 8007852:	2d00      	cmp	r5, #0
 8007854:	4606      	mov	r6, r0
 8007856:	db01      	blt.n	800785c <_malloc_r+0x1c>
 8007858:	42a9      	cmp	r1, r5
 800785a:	d904      	bls.n	8007866 <_malloc_r+0x26>
 800785c:	230c      	movs	r3, #12
 800785e:	6033      	str	r3, [r6, #0]
 8007860:	2000      	movs	r0, #0
 8007862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800793c <_malloc_r+0xfc>
 800786a:	f000 f869 	bl	8007940 <__malloc_lock>
 800786e:	f8d8 3000 	ldr.w	r3, [r8]
 8007872:	461c      	mov	r4, r3
 8007874:	bb44      	cbnz	r4, 80078c8 <_malloc_r+0x88>
 8007876:	4629      	mov	r1, r5
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff ffbf 	bl	80077fc <sbrk_aligned>
 800787e:	1c43      	adds	r3, r0, #1
 8007880:	4604      	mov	r4, r0
 8007882:	d158      	bne.n	8007936 <_malloc_r+0xf6>
 8007884:	f8d8 4000 	ldr.w	r4, [r8]
 8007888:	4627      	mov	r7, r4
 800788a:	2f00      	cmp	r7, #0
 800788c:	d143      	bne.n	8007916 <_malloc_r+0xd6>
 800788e:	2c00      	cmp	r4, #0
 8007890:	d04b      	beq.n	800792a <_malloc_r+0xea>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	4639      	mov	r1, r7
 8007896:	4630      	mov	r0, r6
 8007898:	eb04 0903 	add.w	r9, r4, r3
 800789c:	f000 f98c 	bl	8007bb8 <_sbrk_r>
 80078a0:	4581      	cmp	r9, r0
 80078a2:	d142      	bne.n	800792a <_malloc_r+0xea>
 80078a4:	6821      	ldr	r1, [r4, #0]
 80078a6:	1a6d      	subs	r5, r5, r1
 80078a8:	4629      	mov	r1, r5
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7ff ffa6 	bl	80077fc <sbrk_aligned>
 80078b0:	3001      	adds	r0, #1
 80078b2:	d03a      	beq.n	800792a <_malloc_r+0xea>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	442b      	add	r3, r5
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	f8d8 3000 	ldr.w	r3, [r8]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	bb62      	cbnz	r2, 800791c <_malloc_r+0xdc>
 80078c2:	f8c8 7000 	str.w	r7, [r8]
 80078c6:	e00f      	b.n	80078e8 <_malloc_r+0xa8>
 80078c8:	6822      	ldr	r2, [r4, #0]
 80078ca:	1b52      	subs	r2, r2, r5
 80078cc:	d420      	bmi.n	8007910 <_malloc_r+0xd0>
 80078ce:	2a0b      	cmp	r2, #11
 80078d0:	d917      	bls.n	8007902 <_malloc_r+0xc2>
 80078d2:	1961      	adds	r1, r4, r5
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	6025      	str	r5, [r4, #0]
 80078d8:	bf18      	it	ne
 80078da:	6059      	strne	r1, [r3, #4]
 80078dc:	6863      	ldr	r3, [r4, #4]
 80078de:	bf08      	it	eq
 80078e0:	f8c8 1000 	streq.w	r1, [r8]
 80078e4:	5162      	str	r2, [r4, r5]
 80078e6:	604b      	str	r3, [r1, #4]
 80078e8:	4630      	mov	r0, r6
 80078ea:	f000 f82f 	bl	800794c <__malloc_unlock>
 80078ee:	f104 000b 	add.w	r0, r4, #11
 80078f2:	1d23      	adds	r3, r4, #4
 80078f4:	f020 0007 	bic.w	r0, r0, #7
 80078f8:	1ac2      	subs	r2, r0, r3
 80078fa:	bf1c      	itt	ne
 80078fc:	1a1b      	subne	r3, r3, r0
 80078fe:	50a3      	strne	r3, [r4, r2]
 8007900:	e7af      	b.n	8007862 <_malloc_r+0x22>
 8007902:	6862      	ldr	r2, [r4, #4]
 8007904:	42a3      	cmp	r3, r4
 8007906:	bf0c      	ite	eq
 8007908:	f8c8 2000 	streq.w	r2, [r8]
 800790c:	605a      	strne	r2, [r3, #4]
 800790e:	e7eb      	b.n	80078e8 <_malloc_r+0xa8>
 8007910:	4623      	mov	r3, r4
 8007912:	6864      	ldr	r4, [r4, #4]
 8007914:	e7ae      	b.n	8007874 <_malloc_r+0x34>
 8007916:	463c      	mov	r4, r7
 8007918:	687f      	ldr	r7, [r7, #4]
 800791a:	e7b6      	b.n	800788a <_malloc_r+0x4a>
 800791c:	461a      	mov	r2, r3
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	42a3      	cmp	r3, r4
 8007922:	d1fb      	bne.n	800791c <_malloc_r+0xdc>
 8007924:	2300      	movs	r3, #0
 8007926:	6053      	str	r3, [r2, #4]
 8007928:	e7de      	b.n	80078e8 <_malloc_r+0xa8>
 800792a:	230c      	movs	r3, #12
 800792c:	6033      	str	r3, [r6, #0]
 800792e:	4630      	mov	r0, r6
 8007930:	f000 f80c 	bl	800794c <__malloc_unlock>
 8007934:	e794      	b.n	8007860 <_malloc_r+0x20>
 8007936:	6005      	str	r5, [r0, #0]
 8007938:	e7d6      	b.n	80078e8 <_malloc_r+0xa8>
 800793a:	bf00      	nop
 800793c:	20001c60 	.word	0x20001c60

08007940 <__malloc_lock>:
 8007940:	4801      	ldr	r0, [pc, #4]	@ (8007948 <__malloc_lock+0x8>)
 8007942:	f7ff bf00 	b.w	8007746 <__retarget_lock_acquire_recursive>
 8007946:	bf00      	nop
 8007948:	20001c58 	.word	0x20001c58

0800794c <__malloc_unlock>:
 800794c:	4801      	ldr	r0, [pc, #4]	@ (8007954 <__malloc_unlock+0x8>)
 800794e:	f7ff befb 	b.w	8007748 <__retarget_lock_release_recursive>
 8007952:	bf00      	nop
 8007954:	20001c58 	.word	0x20001c58

08007958 <__sflush_r>:
 8007958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007960:	0716      	lsls	r6, r2, #28
 8007962:	4605      	mov	r5, r0
 8007964:	460c      	mov	r4, r1
 8007966:	d454      	bmi.n	8007a12 <__sflush_r+0xba>
 8007968:	684b      	ldr	r3, [r1, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	dc02      	bgt.n	8007974 <__sflush_r+0x1c>
 800796e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	dd48      	ble.n	8007a06 <__sflush_r+0xae>
 8007974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007976:	2e00      	cmp	r6, #0
 8007978:	d045      	beq.n	8007a06 <__sflush_r+0xae>
 800797a:	2300      	movs	r3, #0
 800797c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007980:	682f      	ldr	r7, [r5, #0]
 8007982:	6a21      	ldr	r1, [r4, #32]
 8007984:	602b      	str	r3, [r5, #0]
 8007986:	d030      	beq.n	80079ea <__sflush_r+0x92>
 8007988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	0759      	lsls	r1, r3, #29
 800798e:	d505      	bpl.n	800799c <__sflush_r+0x44>
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007996:	b10b      	cbz	r3, 800799c <__sflush_r+0x44>
 8007998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800799a:	1ad2      	subs	r2, r2, r3
 800799c:	2300      	movs	r3, #0
 800799e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079a0:	6a21      	ldr	r1, [r4, #32]
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b0      	blx	r6
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	d106      	bne.n	80079ba <__sflush_r+0x62>
 80079ac:	6829      	ldr	r1, [r5, #0]
 80079ae:	291d      	cmp	r1, #29
 80079b0:	d82b      	bhi.n	8007a0a <__sflush_r+0xb2>
 80079b2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a5c <__sflush_r+0x104>)
 80079b4:	410a      	asrs	r2, r1
 80079b6:	07d6      	lsls	r6, r2, #31
 80079b8:	d427      	bmi.n	8007a0a <__sflush_r+0xb2>
 80079ba:	2200      	movs	r2, #0
 80079bc:	6062      	str	r2, [r4, #4]
 80079be:	04d9      	lsls	r1, r3, #19
 80079c0:	6922      	ldr	r2, [r4, #16]
 80079c2:	6022      	str	r2, [r4, #0]
 80079c4:	d504      	bpl.n	80079d0 <__sflush_r+0x78>
 80079c6:	1c42      	adds	r2, r0, #1
 80079c8:	d101      	bne.n	80079ce <__sflush_r+0x76>
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	b903      	cbnz	r3, 80079d0 <__sflush_r+0x78>
 80079ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80079d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079d2:	602f      	str	r7, [r5, #0]
 80079d4:	b1b9      	cbz	r1, 8007a06 <__sflush_r+0xae>
 80079d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079da:	4299      	cmp	r1, r3
 80079dc:	d002      	beq.n	80079e4 <__sflush_r+0x8c>
 80079de:	4628      	mov	r0, r5
 80079e0:	f7ff fec2 	bl	8007768 <_free_r>
 80079e4:	2300      	movs	r3, #0
 80079e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80079e8:	e00d      	b.n	8007a06 <__sflush_r+0xae>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b0      	blx	r6
 80079f0:	4602      	mov	r2, r0
 80079f2:	1c50      	adds	r0, r2, #1
 80079f4:	d1c9      	bne.n	800798a <__sflush_r+0x32>
 80079f6:	682b      	ldr	r3, [r5, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0c6      	beq.n	800798a <__sflush_r+0x32>
 80079fc:	2b1d      	cmp	r3, #29
 80079fe:	d001      	beq.n	8007a04 <__sflush_r+0xac>
 8007a00:	2b16      	cmp	r3, #22
 8007a02:	d11e      	bne.n	8007a42 <__sflush_r+0xea>
 8007a04:	602f      	str	r7, [r5, #0]
 8007a06:	2000      	movs	r0, #0
 8007a08:	e022      	b.n	8007a50 <__sflush_r+0xf8>
 8007a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a0e:	b21b      	sxth	r3, r3
 8007a10:	e01b      	b.n	8007a4a <__sflush_r+0xf2>
 8007a12:	690f      	ldr	r7, [r1, #16]
 8007a14:	2f00      	cmp	r7, #0
 8007a16:	d0f6      	beq.n	8007a06 <__sflush_r+0xae>
 8007a18:	0793      	lsls	r3, r2, #30
 8007a1a:	680e      	ldr	r6, [r1, #0]
 8007a1c:	bf08      	it	eq
 8007a1e:	694b      	ldreq	r3, [r1, #20]
 8007a20:	600f      	str	r7, [r1, #0]
 8007a22:	bf18      	it	ne
 8007a24:	2300      	movne	r3, #0
 8007a26:	eba6 0807 	sub.w	r8, r6, r7
 8007a2a:	608b      	str	r3, [r1, #8]
 8007a2c:	f1b8 0f00 	cmp.w	r8, #0
 8007a30:	dde9      	ble.n	8007a06 <__sflush_r+0xae>
 8007a32:	6a21      	ldr	r1, [r4, #32]
 8007a34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a36:	4643      	mov	r3, r8
 8007a38:	463a      	mov	r2, r7
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b0      	blx	r6
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	dc08      	bgt.n	8007a54 <__sflush_r+0xfc>
 8007a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a54:	4407      	add	r7, r0
 8007a56:	eba8 0800 	sub.w	r8, r8, r0
 8007a5a:	e7e7      	b.n	8007a2c <__sflush_r+0xd4>
 8007a5c:	dfbffffe 	.word	0xdfbffffe

08007a60 <_fflush_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	690b      	ldr	r3, [r1, #16]
 8007a64:	4605      	mov	r5, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	b913      	cbnz	r3, 8007a70 <_fflush_r+0x10>
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	b118      	cbz	r0, 8007a7a <_fflush_r+0x1a>
 8007a72:	6a03      	ldr	r3, [r0, #32]
 8007a74:	b90b      	cbnz	r3, 8007a7a <_fflush_r+0x1a>
 8007a76:	f7ff fc2b 	bl	80072d0 <__sinit>
 8007a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0f3      	beq.n	8007a6a <_fflush_r+0xa>
 8007a82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a84:	07d0      	lsls	r0, r2, #31
 8007a86:	d404      	bmi.n	8007a92 <_fflush_r+0x32>
 8007a88:	0599      	lsls	r1, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_fflush_r+0x32>
 8007a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a8e:	f7ff fe5a 	bl	8007746 <__retarget_lock_acquire_recursive>
 8007a92:	4628      	mov	r0, r5
 8007a94:	4621      	mov	r1, r4
 8007a96:	f7ff ff5f 	bl	8007958 <__sflush_r>
 8007a9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a9c:	07da      	lsls	r2, r3, #31
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	d4e4      	bmi.n	8007a6c <_fflush_r+0xc>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	059b      	lsls	r3, r3, #22
 8007aa6:	d4e1      	bmi.n	8007a6c <_fflush_r+0xc>
 8007aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aaa:	f7ff fe4d 	bl	8007748 <__retarget_lock_release_recursive>
 8007aae:	e7dd      	b.n	8007a6c <_fflush_r+0xc>

08007ab0 <__swhatbuf_r>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab8:	2900      	cmp	r1, #0
 8007aba:	b096      	sub	sp, #88	@ 0x58
 8007abc:	4615      	mov	r5, r2
 8007abe:	461e      	mov	r6, r3
 8007ac0:	da0d      	bge.n	8007ade <__swhatbuf_r+0x2e>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ac8:	f04f 0100 	mov.w	r1, #0
 8007acc:	bf14      	ite	ne
 8007ace:	2340      	movne	r3, #64	@ 0x40
 8007ad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	6031      	str	r1, [r6, #0]
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	b016      	add	sp, #88	@ 0x58
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	466a      	mov	r2, sp
 8007ae0:	f000 f848 	bl	8007b74 <_fstat_r>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	dbec      	blt.n	8007ac2 <__swhatbuf_r+0x12>
 8007ae8:	9901      	ldr	r1, [sp, #4]
 8007aea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007af2:	4259      	negs	r1, r3
 8007af4:	4159      	adcs	r1, r3
 8007af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007afa:	e7eb      	b.n	8007ad4 <__swhatbuf_r+0x24>

08007afc <__smakebuf_r>:
 8007afc:	898b      	ldrh	r3, [r1, #12]
 8007afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b00:	079d      	lsls	r5, r3, #30
 8007b02:	4606      	mov	r6, r0
 8007b04:	460c      	mov	r4, r1
 8007b06:	d507      	bpl.n	8007b18 <__smakebuf_r+0x1c>
 8007b08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	2301      	movs	r3, #1
 8007b12:	6163      	str	r3, [r4, #20]
 8007b14:	b003      	add	sp, #12
 8007b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b18:	ab01      	add	r3, sp, #4
 8007b1a:	466a      	mov	r2, sp
 8007b1c:	f7ff ffc8 	bl	8007ab0 <__swhatbuf_r>
 8007b20:	9f00      	ldr	r7, [sp, #0]
 8007b22:	4605      	mov	r5, r0
 8007b24:	4639      	mov	r1, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff fe8a 	bl	8007840 <_malloc_r>
 8007b2c:	b948      	cbnz	r0, 8007b42 <__smakebuf_r+0x46>
 8007b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b32:	059a      	lsls	r2, r3, #22
 8007b34:	d4ee      	bmi.n	8007b14 <__smakebuf_r+0x18>
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	f043 0302 	orr.w	r3, r3, #2
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	e7e2      	b.n	8007b08 <__smakebuf_r+0xc>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	6020      	str	r0, [r4, #0]
 8007b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b52:	b15b      	cbz	r3, 8007b6c <__smakebuf_r+0x70>
 8007b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 f81d 	bl	8007b98 <_isatty_r>
 8007b5e:	b128      	cbz	r0, 8007b6c <__smakebuf_r+0x70>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f023 0303 	bic.w	r3, r3, #3
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	431d      	orrs	r5, r3
 8007b70:	81a5      	strh	r5, [r4, #12]
 8007b72:	e7cf      	b.n	8007b14 <__smakebuf_r+0x18>

08007b74 <_fstat_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d07      	ldr	r5, [pc, #28]	@ (8007b94 <_fstat_r+0x20>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	f7f8 ff79 	bl	8000a78 <_fstat>
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	d102      	bne.n	8007b90 <_fstat_r+0x1c>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	b103      	cbz	r3, 8007b90 <_fstat_r+0x1c>
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	bd38      	pop	{r3, r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	20001c54 	.word	0x20001c54

08007b98 <_isatty_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4d06      	ldr	r5, [pc, #24]	@ (8007bb4 <_isatty_r+0x1c>)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	f7f8 ff78 	bl	8000a98 <_isatty>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_isatty_r+0x1a>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_isatty_r+0x1a>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	20001c54 	.word	0x20001c54

08007bb8 <_sbrk_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d06      	ldr	r5, [pc, #24]	@ (8007bd4 <_sbrk_r+0x1c>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	f7f8 ff80 	bl	8000ac8 <_sbrk>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_sbrk_r+0x1a>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_sbrk_r+0x1a>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20001c54 	.word	0x20001c54

08007bd8 <_init>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr

08007be4 <_fini>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr
