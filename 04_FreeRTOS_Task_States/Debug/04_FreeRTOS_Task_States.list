
04_FreeRTOS_Task_States.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08007b64  08007b64  00008b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007da8  08007da8  00008da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007db8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  2000006c  08007e24  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08007e24  00009c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdd8  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038dd  00000000  00000000  00024e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00028758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001226  00000000  00000000  00029eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004978  00000000  00000000  0002b0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001936b  00000000  00000000  0002fa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f329  00000000  00000000  00048dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001580ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a48  00000000  00000000  00158130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b4c 	.word	0x08007b4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007b4c 	.word	0x08007b4c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fbab 	bl	8000cde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f850 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8cc 	bl	8000728 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000590:	f000 f89e 	bl	80006d0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000594:	f003 fae6 	bl	8003b64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Default_Task */
  Default_TaskHandle = osThreadNew(Start_Default_Task, NULL, &Default_Task_attributes);
 8000598:	4a18      	ldr	r2, [pc, #96]	@ (80005fc <main+0x7c>)
 800059a:	2100      	movs	r1, #0
 800059c:	4818      	ldr	r0, [pc, #96]	@ (8000600 <main+0x80>)
 800059e:	f003 fb2b 	bl	8003bf8 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a17      	ldr	r2, [pc, #92]	@ (8000604 <main+0x84>)
 80005a6:	6013      	str	r3, [r2, #0]
  if(Default_TaskHandle == NULL)
 80005a8:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <main+0x84>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <main+0x36>
  {
	  printf("Failed to create Default Task\r\n");
 80005b0:	4815      	ldr	r0, [pc, #84]	@ (8000608 <main+0x88>)
 80005b2:	f006 fc03 	bl	8006dbc <puts>
  }

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Start_Task_2, NULL, &Task_2_attributes);
 80005b6:	4a15      	ldr	r2, [pc, #84]	@ (800060c <main+0x8c>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	4815      	ldr	r0, [pc, #84]	@ (8000610 <main+0x90>)
 80005bc:	f003 fb1c 	bl	8003bf8 <osThreadNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <main+0x94>)
 80005c4:	6013      	str	r3, [r2, #0]
  if(Task_2Handle == NULL)
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <main+0x94>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <main+0x54>
  {
	  printf("Failed to create Task- 2\r\n");
 80005ce:	4812      	ldr	r0, [pc, #72]	@ (8000618 <main+0x98>)
 80005d0:	f006 fbf4 	bl	8006dbc <puts>
  }
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* creation of Idle Task */
  Idle_TaskHandle = osThreadNew(Start_Idle_Task, NULL, &Idle_Task_attributes);
 80005d4:	4a11      	ldr	r2, [pc, #68]	@ (800061c <main+0x9c>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4811      	ldr	r0, [pc, #68]	@ (8000620 <main+0xa0>)
 80005da:	f003 fb0d 	bl	8003bf8 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a10      	ldr	r2, [pc, #64]	@ (8000624 <main+0xa4>)
 80005e2:	6013      	str	r3, [r2, #0]
  if(Idle_TaskHandle == NULL)
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <main+0xa4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <main+0x72>
  {
	  printf("Failed to create Idle Task\r\n");
 80005ec:	480e      	ldr	r0, [pc, #56]	@ (8000628 <main+0xa8>)
 80005ee:	f006 fbe5 	bl	8006dbc <puts>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f2:	f003 fadb 	bl	8003bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x76>
 80005fa:	bf00      	nop
 80005fc:	08007cc0 	.word	0x08007cc0
 8000600:	080007c1 	.word	0x080007c1
 8000604:	20000110 	.word	0x20000110
 8000608:	08007b88 	.word	0x08007b88
 800060c:	08007ce4 	.word	0x08007ce4
 8000610:	080007e1 	.word	0x080007e1
 8000614:	20000114 	.word	0x20000114
 8000618:	08007ba8 	.word	0x08007ba8
 800061c:	08007d08 	.word	0x08007d08
 8000620:	0800088d 	.word	0x0800088d
 8000624:	20000118 	.word	0x20000118
 8000628:	08007bc4 	.word	0x08007bc4

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	@ 0x58
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2244      	movs	r2, #68	@ 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fc9e 	bl	8006f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000652:	f000 fe31 	bl	80012b8 <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800065c:	f000 f938 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2340      	movs	r3, #64	@ 0x40
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800067a:	230a      	movs	r3, #10
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fe78 	bl	8001384 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800069a:	f000 f919 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	2104      	movs	r1, #4
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fa7d 	bl	8001bb8 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c4:	f000 f904 	bl	80008d0 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3758      	adds	r7, #88	@ 0x58
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_LPUART1_UART_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 800070e:	f002 fc39 	bl	8002f84 <HAL_UART_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f8da 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000088 	.word	0x20000088
 8000724:	40008000 	.word	0x40008000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_GPIO_Init+0x90>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a1d      	ldr	r2, [pc, #116]	@ (80007b8 <MX_GPIO_Init+0x90>)
 8000744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_GPIO_Init+0x90>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000756:	f000 fe05 	bl	8001364 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_GPIO_Init+0x90>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a16      	ldr	r2, [pc, #88]	@ (80007b8 <MX_GPIO_Init+0x90>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_GPIO_Init+0x90>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_GPIO_Init+0x90>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a10      	ldr	r2, [pc, #64]	@ (80007b8 <MX_GPIO_Init+0x90>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_GPIO_Init+0x90>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	480b      	ldr	r0, [pc, #44]	@ (80007bc <MX_GPIO_Init+0x94>)
 8000790:	f000 fd52 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000794:	2380      	movs	r3, #128	@ 0x80
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_GPIO_Init+0x94>)
 80007ac:	f000 fbb2 	bl	8000f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400

080007c0 <Start_Default_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Default_Task */
void Start_Default_Task(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Hello from Default Task\r\n");
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <Start_Default_Task+0x1c>)
 80007ca:	f006 faf7 	bl	8006dbc <puts>

	/* Block Task for 1 seconds */
	osDelay(1000);
 80007ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d2:	f003 fb12 	bl	8003dfa <osDelay>
	printf("Hello from Default Task\r\n");
 80007d6:	bf00      	nop
 80007d8:	e7f6      	b.n	80007c8 <Start_Default_Task+0x8>
 80007da:	bf00      	nop
 80007dc:	08007be0 	.word	0x08007be0

080007e0 <Start_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_2 */
void Start_Task_2(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_2 */
  /* Infinite loop */
  for(;;)
  {

		printf("Hello from Task-2\r\r ------> count = %d\r\n", ++count);
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <Start_Task_2+0x8c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <Start_Task_2+0x8c>)
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <Start_Task_2+0x8c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	481d      	ldr	r0, [pc, #116]	@ (8000870 <Start_Task_2+0x90>)
 80007fc:	f006 fa76 	bl	8006cec <iprintf>
		/* Block Task for 1 seconds */
	    osDelay(1000);
 8000800:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000804:	f003 faf9 	bl	8003dfa <osDelay>

	    if(count == 5)
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <Start_Task_2+0x8c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b05      	cmp	r3, #5
 800080e:	d107      	bne.n	8000820 <Start_Task_2+0x40>
	    {
	    	printf("\r\nSuspend Default Task\r\n");
 8000810:	4818      	ldr	r0, [pc, #96]	@ (8000874 <Start_Task_2+0x94>)
 8000812:	f006 fad3 	bl	8006dbc <puts>
	    	osThreadSuspend(Default_TaskHandle);
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <Start_Task_2+0x98>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fa7e 	bl	8003d1c <osThreadSuspend>
	    }

	    if(count == 10)
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <Start_Task_2+0x8c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b0a      	cmp	r3, #10
 8000826:	d107      	bne.n	8000838 <Start_Task_2+0x58>
	    {
	    	printf("\r\nResume Default Task\r\n");
 8000828:	4814      	ldr	r0, [pc, #80]	@ (800087c <Start_Task_2+0x9c>)
 800082a:	f006 fac7 	bl	8006dbc <puts>
	    	osThreadResume(Default_TaskHandle);
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <Start_Task_2+0x98>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fa93 	bl	8003d5e <osThreadResume>
	    }

	    if(count == 15)
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <Start_Task_2+0x8c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d107      	bne.n	8000850 <Start_Task_2+0x70>
	    {
	    	printf("\r\nTerminate Default Task\r\n");
 8000840:	480f      	ldr	r0, [pc, #60]	@ (8000880 <Start_Task_2+0xa0>)
 8000842:	f006 fabb 	bl	8006dbc <puts>
	    	osThreadTerminate(Default_TaskHandle);
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <Start_Task_2+0x98>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 faa8 	bl	8003da0 <osThreadTerminate>

	    }

	    if(count == 20)
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <Start_Task_2+0x8c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b14      	cmp	r3, #20
 8000856:	d1c7      	bne.n	80007e8 <Start_Task_2+0x8>
	    {
	    	printf("\r\nTerminate Task-2 & Continue to execute Idle Task\r\n");
 8000858:	480a      	ldr	r0, [pc, #40]	@ (8000884 <Start_Task_2+0xa4>)
 800085a:	f006 faaf 	bl	8006dbc <puts>
	    	osThreadTerminate(Task_2Handle);
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <Start_Task_2+0xa8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fa9c 	bl	8003da0 <osThreadTerminate>
		printf("Hello from Task-2\r\r ------> count = %d\r\n", ++count);
 8000868:	e7be      	b.n	80007e8 <Start_Task_2+0x8>
 800086a:	bf00      	nop
 800086c:	2000011c 	.word	0x2000011c
 8000870:	08007bfc 	.word	0x08007bfc
 8000874:	08007c28 	.word	0x08007c28
 8000878:	20000110 	.word	0x20000110
 800087c:	08007c40 	.word	0x08007c40
 8000880:	08007c58 	.word	0x08007c58
 8000884:	08007c74 	.word	0x08007c74
 8000888:	20000114 	.word	0x20000114

0800088c <Start_Idle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_2 */
void Start_Idle_Task(void *argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Idle_Task */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <Start_Idle_Task+0x1c>)
 8000898:	f000 fce6 	bl	8001268 <HAL_GPIO_TogglePin>
	/* Block Task for 500 ms */
    osDelay(500);
 800089c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008a0:	f003 faab 	bl	8003dfa <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008a4:	bf00      	nop
 80008a6:	e7f5      	b.n	8000894 <Start_Idle_Task+0x8>
 80008a8:	48000400 	.word	0x48000400

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008be:	f000 fa27 	bl	8000d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40001000 	.word	0x40001000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_MspInit+0x4c>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	f06f 0001 	mvn.w	r0, #1
 800091a:	f000 fad1 	bl	8000ec0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0ac      	sub	sp, #176	@ 0xb0
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	228c      	movs	r2, #140	@ 0x8c
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f006 fb15 	bl	8006f7c <memset>
  if(huart->Instance==LPUART1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a22      	ldr	r2, [pc, #136]	@ (80009e0 <HAL_UART_MspInit+0xb4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d13d      	bne.n	80009d8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800095c:	2320      	movs	r3, #32
 800095e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000960:	2300      	movs	r3, #0
 8000962:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fb7b 	bl	8002064 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000974:	f7ff ffac 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_UART_MspInit+0xb8>)
 800097a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800097c:	4a19      	ldr	r2, [pc, #100]	@ (80009e4 <HAL_UART_MspInit+0xb8>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_UART_MspInit+0xb8>)
 8000986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_UART_MspInit+0xb8>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000994:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <HAL_UART_MspInit+0xb8>)
 8000996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <HAL_UART_MspInit+0xb8>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80009a8:	f000 fcdc 	bl	8001364 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009ac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80009b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009c6:	2308      	movs	r3, #8
 80009c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009d0:	4619      	mov	r1, r3
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <HAL_UART_MspInit+0xbc>)
 80009d4:	f000 fa9e 	bl	8000f14 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80009d8:	bf00      	nop
 80009da:	37b0      	adds	r7, #176	@ 0xb0
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40008000 	.word	0x40008000
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48001800 	.word	0x48001800

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	@ 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009fa:	4b34      	ldr	r3, [pc, #208]	@ (8000acc <HAL_InitTick+0xe0>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	4a33      	ldr	r2, [pc, #204]	@ (8000acc <HAL_InitTick+0xe0>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <HAL_InitTick+0xe0>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a12:	f107 0210 	add.w	r2, r7, #16
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fa8f 	bl	8001f40 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d103      	bne.n	8000a34 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a2c:	f001 fa5c 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8000a30:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a32:	e004      	b.n	8000a3e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a34:	f001 fa58 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a40:	4a23      	ldr	r2, [pc, #140]	@ (8000ad0 <HAL_InitTick+0xe4>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	0c9b      	lsrs	r3, r3, #18
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a4e:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a52:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a72:	4818      	ldr	r0, [pc, #96]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a74:	f001 ffc0 	bl	80029f8 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d11b      	bne.n	8000abe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a86:	4813      	ldr	r0, [pc, #76]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a88:	f002 f818 	bl	8002abc <HAL_TIM_Base_Start_IT>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d111      	bne.n	8000abe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a9a:	2036      	movs	r0, #54	@ 0x36
 8000a9c:	f000 fa2c 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	d808      	bhi.n	8000ab8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	2036      	movs	r0, #54	@ 0x36
 8000aac:	f000 fa08 	bl	8000ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_InitTick+0xf0>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e002      	b.n	8000abe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000abe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3738      	adds	r7, #56	@ 0x38
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	431bde83 	.word	0x431bde83
 8000ad4:	20000120 	.word	0x20000120
 8000ad8:	40001000 	.word	0x40001000
 8000adc:	20000004 	.word	0x20000004

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <MemManage_Handler+0x4>

08000af8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <TIM6_DAC_IRQHandler+0x10>)
 8000b1e:	f002 f83d 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000120 	.word	0x20000120

08000b2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e00a      	b.n	8000b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4601      	mov	r1, r0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <_read+0x12>
  }

  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *) ptr, len, HAL_MAX_DELAY);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <_write+0x28>)
 8000b80:	f002 fa4e 	bl	8003020 <HAL_UART_Transmit>
  return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000088 	.word	0x20000088

08000b94 <_close>:

int _close(int file)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_isatty>:

int _isatty(int file)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f006 fa4a 	bl	80070c4 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20050000 	.word	0x20050000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	2000016c 	.word	0x2000016c
 8000c64:	20001c60 	.word	0x20001c60

08000c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c90:	f7ff ffea 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cba:	f006 fa09 	bl	80070d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cbe:	f7ff fc5f 	bl	8000580 <main>

08000cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cd0:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 8000cd4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cd8:	20001c60 	.word	0x20001c60

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>

08000cde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f8de 	bl	8000eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f7ff fe7c 	bl	80009ec <HAL_InitTick>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e001      	b.n	8000d04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d00:	f7ff fdec 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000170 	.word	0x20000170

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000170 	.word	0x20000170

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	@ (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff4c 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed2:	f7ff ff61 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ed6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	6978      	ldr	r0, [r7, #20]
 8000ede:	f7ff ffb1 	bl	8000e44 <NVIC_EncodePriority>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff80 	bl	8000df0 <__NVIC_SetPriority>
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff54 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f22:	e166      	b.n	80011f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8158 	beq.w	80011ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d005      	beq.n	8000f54 <HAL_GPIO_Init+0x40>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d130      	bne.n	8000fb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	f003 0201 	and.w	r2, r3, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d017      	beq.n	8000ff2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d123      	bne.n	8001046 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	6939      	ldr	r1, [r7, #16]
 8001042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0203 	and.w	r2, r3, #3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80b2 	beq.w	80011ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001088:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <HAL_GPIO_Init+0x2fc>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108c:	4a60      	ldr	r2, [pc, #384]	@ (8001210 <HAL_GPIO_Init+0x2fc>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6613      	str	r3, [r2, #96]	@ 0x60
 8001094:	4b5e      	ldr	r3, [pc, #376]	@ (8001210 <HAL_GPIO_Init+0x2fc>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a0:	4a5c      	ldr	r2, [pc, #368]	@ (8001214 <HAL_GPIO_Init+0x300>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010ca:	d02b      	beq.n	8001124 <HAL_GPIO_Init+0x210>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a52      	ldr	r2, [pc, #328]	@ (8001218 <HAL_GPIO_Init+0x304>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d025      	beq.n	8001120 <HAL_GPIO_Init+0x20c>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a51      	ldr	r2, [pc, #324]	@ (800121c <HAL_GPIO_Init+0x308>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d01f      	beq.n	800111c <HAL_GPIO_Init+0x208>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a50      	ldr	r2, [pc, #320]	@ (8001220 <HAL_GPIO_Init+0x30c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d019      	beq.n	8001118 <HAL_GPIO_Init+0x204>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001224 <HAL_GPIO_Init+0x310>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d013      	beq.n	8001114 <HAL_GPIO_Init+0x200>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001228 <HAL_GPIO_Init+0x314>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d00d      	beq.n	8001110 <HAL_GPIO_Init+0x1fc>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4d      	ldr	r2, [pc, #308]	@ (800122c <HAL_GPIO_Init+0x318>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1f8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001230 <HAL_GPIO_Init+0x31c>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d101      	bne.n	8001108 <HAL_GPIO_Init+0x1f4>
 8001104:	2307      	movs	r3, #7
 8001106:	e00e      	b.n	8001126 <HAL_GPIO_Init+0x212>
 8001108:	2308      	movs	r3, #8
 800110a:	e00c      	b.n	8001126 <HAL_GPIO_Init+0x212>
 800110c:	2306      	movs	r3, #6
 800110e:	e00a      	b.n	8001126 <HAL_GPIO_Init+0x212>
 8001110:	2305      	movs	r3, #5
 8001112:	e008      	b.n	8001126 <HAL_GPIO_Init+0x212>
 8001114:	2304      	movs	r3, #4
 8001116:	e006      	b.n	8001126 <HAL_GPIO_Init+0x212>
 8001118:	2303      	movs	r3, #3
 800111a:	e004      	b.n	8001126 <HAL_GPIO_Init+0x212>
 800111c:	2302      	movs	r3, #2
 800111e:	e002      	b.n	8001126 <HAL_GPIO_Init+0x212>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <HAL_GPIO_Init+0x212>
 8001124:	2300      	movs	r3, #0
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	f002 0203 	and.w	r2, r2, #3
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	4093      	lsls	r3, r2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001136:	4937      	ldr	r1, [pc, #220]	@ (8001214 <HAL_GPIO_Init+0x300>)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001144:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <HAL_GPIO_Init+0x320>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001168:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <HAL_GPIO_Init+0x320>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800116e:	4b31      	ldr	r3, [pc, #196]	@ (8001234 <HAL_GPIO_Init+0x320>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001192:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <HAL_GPIO_Init+0x320>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x320>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_GPIO_Init+0x320>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <HAL_GPIO_Init+0x320>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <HAL_GPIO_Init+0x320>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3301      	adds	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f47f ae91 	bne.w	8000f24 <HAL_GPIO_Init+0x10>
  }
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000
 8001214:	40010000 	.word	0x40010000
 8001218:	48000400 	.word	0x48000400
 800121c:	48000800 	.word	0x48000800
 8001220:	48000c00 	.word	0x48000c00
 8001224:	48001000 	.word	0x48001000
 8001228:	48001400 	.word	0x48001400
 800122c:	48001800 	.word	0x48001800
 8001230:	48001c00 	.word	0x48001c00
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001254:	e002      	b.n	800125c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43d9      	mvns	r1, r3
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	400b      	ands	r3, r1
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000

080012b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c6:	d130      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d4:	d038      	beq.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2232      	movs	r2, #50	@ 0x32
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	0c9b      	lsrs	r3, r3, #18
 80012f8:	3301      	adds	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fc:	e002      	b.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3b01      	subs	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001310:	d102      	bne.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f2      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001324:	d110      	bne.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e00f      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001336:	d007      	beq.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001340:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001346:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40007000 	.word	0x40007000
 800135c:	20000000 	.word	0x20000000
 8001360:	431bde83 	.word	0x431bde83

08001364 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_PWREx_EnableVddIO2+0x1c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <HAL_PWREx_EnableVddIO2+0x1c>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001372:	6053      	str	r3, [r2, #4]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40007000 	.word	0x40007000

08001384 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	f000 bc08 	b.w	8001ba8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001398:	4b96      	ldr	r3, [pc, #600]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a2:	4b94      	ldr	r3, [pc, #592]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80e4 	beq.w	8001582 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4c>
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	f040 808b 	bne.w	80014de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	f040 8087 	bne.w	80014de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d0:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_OscConfig+0x64>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e3df      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1a      	ldr	r2, [r3, #32]
 80013ec:	4b81      	ldr	r3, [pc, #516]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_RCC_OscConfig+0x7e>
 80013f8:	4b7e      	ldr	r3, [pc, #504]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001400:	e005      	b.n	800140e <HAL_RCC_OscConfig+0x8a>
 8001402:	4b7c      	ldr	r3, [pc, #496]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800140e:	4293      	cmp	r3, r2
 8001410:	d223      	bcs.n	800145a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fdc4 	bl	8001fa4 <RCC_SetFlashLatencyFromMSIRange>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e3c0      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001426:	4b73      	ldr	r3, [pc, #460]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a72      	ldr	r2, [pc, #456]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b70      	ldr	r3, [pc, #448]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	496d      	ldr	r1, [pc, #436]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001444:	4b6b      	ldr	r3, [pc, #428]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	4968      	ldr	r1, [pc, #416]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e025      	b.n	80014a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145a:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a65      	ldr	r2, [pc, #404]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b63      	ldr	r3, [pc, #396]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4960      	ldr	r1, [pc, #384]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001478:	4b5e      	ldr	r3, [pc, #376]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	495b      	ldr	r1, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fd84 	bl	8001fa4 <RCC_SetFlashLatencyFromMSIRange>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e380      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a6:	f000 fc87 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b51      	ldr	r3, [pc, #324]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	4950      	ldr	r1, [pc, #320]	@ (80015f8 <HAL_RCC_OscConfig+0x274>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	4a4e      	ldr	r2, [pc, #312]	@ (80015fc <HAL_RCC_OscConfig+0x278>)
 80014c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001600 <HAL_RCC_OscConfig+0x27c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fa8e 	bl	80009ec <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d052      	beq.n	8001580 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	e364      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d032      	beq.n	800154c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e6:	4b43      	ldr	r3, [pc, #268]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a42      	ldr	r2, [pc, #264]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fc21 	bl	8000d38 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc1d 	bl	8000d38 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e34d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150c:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001518:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a35      	ldr	r2, [pc, #212]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4930      	ldr	r1, [pc, #192]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001536:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	492b      	ldr	r1, [pc, #172]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
 800154a:	e01a      	b.n	8001582 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a28      	ldr	r2, [pc, #160]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001558:	f7ff fbee 	bl	8000d38 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001560:	f7ff fbea 	bl	8000d38 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e31a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1dc>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d073      	beq.n	8001676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b08      	cmp	r3, #8
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x21c>
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d10e      	bne.n	80015b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d10b      	bne.n	80015b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d063      	beq.n	8001674 <HAL_RCC_OscConfig+0x2f0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d15f      	bne.n	8001674 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e2f7      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x24c>
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e025      	b.n	800161c <HAL_RCC_OscConfig+0x298>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015d8:	d114      	bne.n	8001604 <HAL_RCC_OscConfig+0x280>
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a02      	ldr	r2, [pc, #8]	@ (80015f4 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e013      	b.n	800161c <HAL_RCC_OscConfig+0x298>
 80015f4:	40021000 	.word	0x40021000
 80015f8:	08007d2c 	.word	0x08007d2c
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004
 8001604:	4ba0      	ldr	r3, [pc, #640]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a9f      	ldr	r2, [pc, #636]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b9d      	ldr	r3, [pc, #628]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a9c      	ldr	r2, [pc, #624]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fb88 	bl	8000d38 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fb84 	bl	8000d38 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e2b4      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	4b92      	ldr	r3, [pc, #584]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x2a8>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb74 	bl	8000d38 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb70 	bl	8000d38 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e2a0      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	4b88      	ldr	r3, [pc, #544]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x2d0>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d060      	beq.n	8001744 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2b04      	cmp	r3, #4
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x310>
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d116      	bne.n	80016c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001694:	4b7c      	ldr	r3, [pc, #496]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_OscConfig+0x328>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e27d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	4b76      	ldr	r3, [pc, #472]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	4973      	ldr	r1, [pc, #460]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c0:	e040      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d023      	beq.n	8001712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb2f 	bl	8000d38 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fb2b 	bl	8000d38 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e25b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f0:	4b65      	ldr	r3, [pc, #404]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b62      	ldr	r3, [pc, #392]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	495f      	ldr	r1, [pc, #380]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e018      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b5d      	ldr	r3, [pc, #372]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a5c      	ldr	r2, [pc, #368]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800171c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fb0b 	bl	8000d38 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fb07 	bl	8000d38 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e237      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001738:	4b53      	ldr	r3, [pc, #332]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d03c      	beq.n	80017ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01c      	beq.n	8001792 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001758:	4b4b      	ldr	r3, [pc, #300]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175e:	4a4a      	ldr	r2, [pc, #296]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fae6 	bl	8000d38 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fae2 	bl	8000d38 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e212      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001782:	4b41      	ldr	r3, [pc, #260]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ef      	beq.n	8001770 <HAL_RCC_OscConfig+0x3ec>
 8001790:	e01b      	b.n	80017ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001792:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001798:	4a3b      	ldr	r2, [pc, #236]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff fac9 	bl	8000d38 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff fac5 	bl	8000d38 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1f5      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017bc:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ef      	bne.n	80017aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80a6 	beq.w	8001924 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10d      	bne.n	8001804 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	4a26      	ldr	r2, [pc, #152]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f4:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001800:	2301      	movs	r3, #1
 8001802:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001804:	4b21      	ldr	r3, [pc, #132]	@ (800188c <HAL_RCC_OscConfig+0x508>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d118      	bne.n	8001842 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <HAL_RCC_OscConfig+0x508>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <HAL_RCC_OscConfig+0x508>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181c:	f7ff fa8c 	bl	8000d38 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7ff fa88 	bl	8000d38 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1b8      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_RCC_OscConfig+0x508>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d108      	bne.n	800185c <HAL_RCC_OscConfig+0x4d8>
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800185a:	e029      	b.n	80018b0 <HAL_RCC_OscConfig+0x52c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d115      	bne.n	8001890 <HAL_RCC_OscConfig+0x50c>
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	4a07      	ldr	r2, [pc, #28]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187a:	4a03      	ldr	r2, [pc, #12]	@ (8001888 <HAL_RCC_OscConfig+0x504>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001884:	e014      	b.n	80018b0 <HAL_RCC_OscConfig+0x52c>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	4b9d      	ldr	r3, [pc, #628]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	4a9c      	ldr	r2, [pc, #624]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a0:	4b99      	ldr	r3, [pc, #612]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a6:	4a98      	ldr	r2, [pc, #608]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d016      	beq.n	80018e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa3e 	bl	8000d38 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff fa3a 	bl	8000d38 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e168      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ed      	beq.n	80018c0 <HAL_RCC_OscConfig+0x53c>
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff fa27 	bl	8000d38 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fa23 	bl	8000d38 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e151      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001904:	4b80      	ldr	r3, [pc, #512]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ed      	bne.n	80018ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b7b      	ldr	r3, [pc, #492]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	4a7a      	ldr	r2, [pc, #488]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 800191e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d03c      	beq.n	80019aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01c      	beq.n	8001972 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001938:	4b73      	ldr	r3, [pc, #460]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 800193a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800193e:	4a72      	ldr	r2, [pc, #456]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff f9f6 	bl	8000d38 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001950:	f7ff f9f2 	bl	8000d38 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e122      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001962:	4b69      	ldr	r3, [pc, #420]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001964:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ef      	beq.n	8001950 <HAL_RCC_OscConfig+0x5cc>
 8001970:	e01b      	b.n	80019aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001972:	4b65      	ldr	r3, [pc, #404]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001974:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001978:	4a63      	ldr	r2, [pc, #396]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff f9d9 	bl	8000d38 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800198a:	f7ff f9d5 	bl	8000d38 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e105      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800199c:	4b5a      	ldr	r3, [pc, #360]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 800199e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ef      	bne.n	800198a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80f9 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	f040 80cf 	bne.w	8001b5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019be:	4b52      	ldr	r3, [pc, #328]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0203 	and.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d12c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	3b01      	subs	r3, #1
 80019de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d123      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d11b      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d113      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	3b01      	subs	r3, #1
 8001a12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d109      	bne.n	8001a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	3b01      	subs	r3, #1
 8001a26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d071      	beq.n	8001b10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d068      	beq.n	8001b04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a32:	4b35      	ldr	r3, [pc, #212]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a3e:	4b32      	ldr	r3, [pc, #200]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0ac      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a2d      	ldr	r2, [pc, #180]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001a54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a5a:	f7ff f96d 	bl	8000d38 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f969 	bl	8000d38 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e099      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a80:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <HAL_RCC_OscConfig+0x788>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a90:	3a01      	subs	r2, #1
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	4311      	orrs	r1, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a9a:	0212      	lsls	r2, r2, #8
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001aa2:	0852      	lsrs	r2, r2, #1
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	0552      	lsls	r2, r2, #21
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001aae:	0852      	lsrs	r2, r2, #1
 8001ab0:	3a01      	subs	r2, #1
 8001ab2:	0652      	lsls	r2, r2, #25
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aba:	06d2      	lsls	r2, r2, #27
 8001abc:	430a      	orrs	r2, r1
 8001abe:	4912      	ldr	r1, [pc, #72]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001adc:	f7ff f92c 	bl	8000d38 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f928 	bl	8000d38 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e058      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <HAL_RCC_OscConfig+0x784>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b02:	e050      	b.n	8001ba6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e04f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d144      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a23      	ldr	r2, [pc, #140]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b28:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a20      	ldr	r2, [pc, #128]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b34:	f7ff f900 	bl	8000d38 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f8fc 	bl	8000d38 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e02c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x7b8>
 8001b5a:	e024      	b.n	8001ba6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d01f      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6e:	f7ff f8e3 	bl	8000d38 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b76:	f7ff f8df 	bl	8000d38 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e00f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f0      	bne.n	8001b76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4905      	ldr	r1, [pc, #20]	@ (8001bb0 <HAL_RCC_OscConfig+0x82c>)
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_RCC_OscConfig+0x830>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
 8001ba0:	e001      	b.n	8001ba6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	feeefffc 	.word	0xfeeefffc

08001bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0e7      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b75      	ldr	r3, [pc, #468]	@ (8001da4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b72      	ldr	r3, [pc, #456]	@ (8001da4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4970      	ldr	r1, [pc, #448]	@ (8001da4 <HAL_RCC_ClockConfig+0x1ec>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b6e      	ldr	r3, [pc, #440]	@ (8001da4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0cf      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d908      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b63      	ldr	r3, [pc, #396]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4960      	ldr	r1, [pc, #384]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d04c      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d121      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0a6      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c56:	4b54      	ldr	r3, [pc, #336]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d115      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e09a      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e08e      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e086      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b46      	ldr	r3, [pc, #280]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4943      	ldr	r1, [pc, #268]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f84a 	bl	8000d38 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff f846 	bl	8000d38 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e06e      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d010      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d208      	bcs.n	8001cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	492b      	ldr	r1, [pc, #172]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfe:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d210      	bcs.n	8001d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0c:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 0207 	bic.w	r2, r3, #7
 8001d14:	4923      	ldr	r1, [pc, #140]	@ (8001da4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1c:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e036      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4918      	ldr	r1, [pc, #96]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4910      	ldr	r1, [pc, #64]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d6c:	f000 f824 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	490b      	ldr	r1, [pc, #44]	@ (8001dac <HAL_RCC_ClockConfig+0x1f4>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fe2b 	bl	80009ec <HAL_InitTick>
 8001d96:	4603      	mov	r3, r0
 8001d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08007d2c 	.word	0x08007d2c
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x34>
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d121      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d11e      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dec:	4b34      	ldr	r3, [pc, #208]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001df8:	4b31      	ldr	r3, [pc, #196]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e005      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e08:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10d      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d102      	bne.n	8001e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e30:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	e004      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d134      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d003      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0xac>
 8001e5c:	e005      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e60:	617b      	str	r3, [r7, #20]
      break;
 8001e62:	e005      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e66:	617b      	str	r3, [r7, #20]
      break;
 8001e68:	e002      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	617b      	str	r3, [r7, #20]
      break;
 8001e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	fb03 f202 	mul.w	r2, r3, r2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	0e5b      	lsrs	r3, r3, #25
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08007d44 	.word	0x08007d44
 8001ec8:	00f42400 	.word	0x00f42400
 8001ecc:	007a1200 	.word	0x007a1200

08001ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eec:	f7ff fff0 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4904      	ldr	r1, [pc, #16]	@ (8001f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08007d3c 	.word	0x08007d3c

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f18:	f7ff ffda 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0adb      	lsrs	r3, r3, #11
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4904      	ldr	r1, [pc, #16]	@ (8001f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08007d3c 	.word	0x08007d3c

08001f40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <HAL_RCC_GetClockConfig+0x5c>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <HAL_RCC_GetClockConfig+0x5c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_GetClockConfig+0x5c>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f82:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <HAL_RCC_GetClockConfig+0x60>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0207 	and.w	r2, r3, #7
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	601a      	str	r2, [r3, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fbc:	f7ff f96e 	bl	800129c <HAL_PWREx_GetVoltageRange>
 8001fc0:	6178      	str	r0, [r7, #20]
 8001fc2:	e014      	b.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	4b25      	ldr	r3, [pc, #148]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	4a24      	ldr	r2, [pc, #144]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fdc:	f7ff f95e 	bl	800129c <HAL_PWREx_GetVoltageRange>
 8001fe0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800205c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff4:	d10b      	bne.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b80      	cmp	r3, #128	@ 0x80
 8001ffa:	d919      	bls.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2ba0      	cmp	r3, #160	@ 0xa0
 8002000:	d902      	bls.n	8002008 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002002:	2302      	movs	r3, #2
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	e013      	b.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002008:	2301      	movs	r3, #1
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e010      	b.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b80      	cmp	r3, #128	@ 0x80
 8002012:	d902      	bls.n	800201a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002014:	2303      	movs	r3, #3
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e00a      	b.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b80      	cmp	r3, #128	@ 0x80
 800201e:	d102      	bne.n	8002026 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002020:	2302      	movs	r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	e004      	b.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b70      	cmp	r3, #112	@ 0x70
 800202a:	d101      	bne.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800202c:	2301      	movs	r3, #1
 800202e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 0207 	bic.w	r2, r3, #7
 8002038:	4909      	ldr	r1, [pc, #36]	@ (8002060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	40022000 	.word	0x40022000

08002064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800206c:	2300      	movs	r3, #0
 800206e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002070:	2300      	movs	r3, #0
 8002072:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800207c:	2b00      	cmp	r3, #0
 800207e:	d041      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002084:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002088:	d02a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800208a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800208e:	d824      	bhi.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002090:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002094:	d008      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002096:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800209a:	d81e      	bhi.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020a4:	d010      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020a6:	e018      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020a8:	4b86      	ldr	r3, [pc, #536]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a85      	ldr	r2, [pc, #532]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020b4:	e015      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 facd 	bl	800265c <RCCEx_PLLSAI1_Config>
 80020c2:	4603      	mov	r3, r0
 80020c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020c6:	e00c      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3320      	adds	r3, #32
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fbb6 	bl	8002840 <RCCEx_PLLSAI2_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020d8:	e003      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	74fb      	strb	r3, [r7, #19]
      break;
 80020de:	e000      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020e2:	7cfb      	ldrb	r3, [r7, #19]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10b      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020e8:	4b76      	ldr	r3, [pc, #472]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020f6:	4973      	ldr	r1, [pc, #460]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020fe:	e001      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d041      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002114:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002118:	d02a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800211a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800211e:	d824      	bhi.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002120:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002124:	d008      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800212a:	d81e      	bhi.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002134:	d010      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002136:	e018      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002138:	4b62      	ldr	r3, [pc, #392]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a61      	ldr	r2, [pc, #388]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002144:	e015      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3304      	adds	r3, #4
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fa85 	bl	800265c <RCCEx_PLLSAI1_Config>
 8002152:	4603      	mov	r3, r0
 8002154:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002156:	e00c      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3320      	adds	r3, #32
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fb6e 	bl	8002840 <RCCEx_PLLSAI2_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002168:	e003      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	74fb      	strb	r3, [r7, #19]
      break;
 800216e:	e000      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002178:	4b52      	ldr	r3, [pc, #328]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002186:	494f      	ldr	r1, [pc, #316]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800218e:	e001      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a0 	beq.w	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021a6:	4b47      	ldr	r3, [pc, #284]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021b6:	2300      	movs	r3, #0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	4a40      	ldr	r2, [pc, #256]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c8:	4b3e      	ldr	r3, [pc, #248]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d8:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a3a      	ldr	r2, [pc, #232]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021e4:	f7fe fda8 	bl	8000d38 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ea:	e009      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe fda4 	bl	8000d38 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d902      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	74fb      	strb	r3, [r7, #19]
        break;
 80021fe:	e005      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002200:	4b31      	ldr	r3, [pc, #196]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ef      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d15c      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002212:	4b2c      	ldr	r3, [pc, #176]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800221c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01f      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d019      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002230:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800223a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800223c:	4b21      	ldr	r3, [pc, #132]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002242:	4a20      	ldr	r2, [pc, #128]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800224c:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002252:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800225c:	4a19      	ldr	r2, [pc, #100]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe fd63 	bl	8000d38 <HAL_GetTick>
 8002272:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002274:	e00b      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fd5f 	bl	8000d38 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d902      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	74fb      	strb	r3, [r7, #19]
            break;
 800228c:	e006      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ec      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a2:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	4904      	ldr	r1, [pc, #16]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022ba:	e009      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
 80022c0:	e006      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d0:	7c7b      	ldrb	r3, [r7, #17]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d105      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	4aa5      	ldr	r2, [pc, #660]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	f023 0203 	bic.w	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fc:	499c      	ldr	r1, [pc, #624]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002310:	4b97      	ldr	r3, [pc, #604]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f023 020c 	bic.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231e:	4994      	ldr	r1, [pc, #592]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002332:	4b8f      	ldr	r3, [pc, #572]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	498b      	ldr	r1, [pc, #556]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002354:	4b86      	ldr	r3, [pc, #536]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4983      	ldr	r1, [pc, #524]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002376:	4b7e      	ldr	r3, [pc, #504]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002384:	497a      	ldr	r1, [pc, #488]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002398:	4b75      	ldr	r3, [pc, #468]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a6:	4972      	ldr	r1, [pc, #456]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c8:	4969      	ldr	r1, [pc, #420]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023dc:	4b64      	ldr	r3, [pc, #400]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023ea:	4961      	ldr	r1, [pc, #388]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002404:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240c:	4958      	ldr	r1, [pc, #352]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002420:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242e:	4950      	ldr	r1, [pc, #320]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002442:	4b4b      	ldr	r3, [pc, #300]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002448:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	4947      	ldr	r1, [pc, #284]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002464:	4b42      	ldr	r3, [pc, #264]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002466:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002472:	493f      	ldr	r1, [pc, #252]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d028      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002486:	4b3a      	ldr	r3, [pc, #232]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002494:	4936      	ldr	r1, [pc, #216]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a6:	4b32      	ldr	r3, [pc, #200]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4a31      	ldr	r2, [pc, #196]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024b0:	60d3      	str	r3, [r2, #12]
 80024b2:	e011      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f8c9 	bl	800265c <RCCEx_PLLSAI1_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d028      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024e4:	4b22      	ldr	r3, [pc, #136]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f2:	491f      	ldr	r1, [pc, #124]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002502:	d106      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a19      	ldr	r2, [pc, #100]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
 8002510:	e011      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002516:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800251a:	d10c      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	2101      	movs	r1, #1
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f89a 	bl	800265c <RCCEx_PLLSAI1_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002548:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002550:	4907      	ldr	r1, [pc, #28]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800255c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002560:	d108      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002562:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4a02      	ldr	r2, [pc, #8]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002568:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800256c:	60d3      	str	r3, [r2, #12]
 800256e:	e013      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002570:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800257c:	d10c      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f869 	bl	800265c <RCCEx_PLLSAI1_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02f      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025b2:	4929      	ldr	r1, [pc, #164]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025c2:	d10d      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	2102      	movs	r1, #2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f846 	bl	800265c <RCCEx_PLLSAI1_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d014      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	74bb      	strb	r3, [r7, #18]
 80025de:	e011      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3320      	adds	r3, #32
 80025ee:	2102      	movs	r1, #2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 f925 	bl	8002840 <RCCEx_PLLSAI2_Config>
 80025f6:	4603      	mov	r3, r0
 80025f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002620:	490d      	ldr	r1, [pc, #52]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002634:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002644:	4904      	ldr	r1, [pc, #16]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800264c:	7cbb      	ldrb	r3, [r7, #18]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000

0800265c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800266a:	4b74      	ldr	r3, [pc, #464]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d018      	beq.n	80026a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002676:	4b71      	ldr	r3, [pc, #452]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0203 	and.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d10d      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
       ||
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800268e:	4b6b      	ldr	r3, [pc, #428]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
       ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d047      	beq.n	8002732 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	e044      	b.n	8002732 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d018      	beq.n	80026e2 <RCCEx_PLLSAI1_Config+0x86>
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d825      	bhi.n	8002700 <RCCEx_PLLSAI1_Config+0xa4>
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d002      	beq.n	80026be <RCCEx_PLLSAI1_Config+0x62>
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d009      	beq.n	80026d0 <RCCEx_PLLSAI1_Config+0x74>
 80026bc:	e020      	b.n	8002700 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026be:	4b5f      	ldr	r3, [pc, #380]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11d      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ce:	e01a      	b.n	8002706 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026d0:	4b5a      	ldr	r3, [pc, #360]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d116      	bne.n	800270a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e0:	e013      	b.n	800270a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026e2:	4b56      	ldr	r3, [pc, #344]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ee:	4b53      	ldr	r3, [pc, #332]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026fe:	e006      	b.n	800270e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      break;
 8002704:	e004      	b.n	8002710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002706:	bf00      	nop
 8002708:	e002      	b.n	8002710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800270a:	bf00      	nop
 800270c:	e000      	b.n	8002710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800270e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10d      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002716:	4b49      	ldr	r3, [pc, #292]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	430b      	orrs	r3, r1
 800272c:	4943      	ldr	r1, [pc, #268]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 800272e:	4313      	orrs	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d17c      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002738:	4b40      	ldr	r3, [pc, #256]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a3f      	ldr	r2, [pc, #252]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002744:	f7fe faf8 	bl	8000d38 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800274a:	e009      	b.n	8002760 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800274c:	f7fe faf4 	bl	8000d38 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	73fb      	strb	r3, [r7, #15]
        break;
 800275e:	e005      	b.n	800276c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002760:	4b36      	ldr	r3, [pc, #216]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ef      	bne.n	800274c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d15f      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d110      	bne.n	800279a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002778:	4b30      	ldr	r3, [pc, #192]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002780:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6892      	ldr	r2, [r2, #8]
 8002788:	0211      	lsls	r1, r2, #8
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68d2      	ldr	r2, [r2, #12]
 800278e:	06d2      	lsls	r2, r2, #27
 8002790:	430a      	orrs	r2, r1
 8002792:	492a      	ldr	r1, [pc, #168]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	610b      	str	r3, [r1, #16]
 8002798:	e027      	b.n	80027ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d112      	bne.n	80027c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027a0:	4b26      	ldr	r3, [pc, #152]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80027a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6892      	ldr	r2, [r2, #8]
 80027b0:	0211      	lsls	r1, r2, #8
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6912      	ldr	r2, [r2, #16]
 80027b6:	0852      	lsrs	r2, r2, #1
 80027b8:	3a01      	subs	r2, #1
 80027ba:	0552      	lsls	r2, r2, #21
 80027bc:	430a      	orrs	r2, r1
 80027be:	491f      	ldr	r1, [pc, #124]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	610b      	str	r3, [r1, #16]
 80027c4:	e011      	b.n	80027ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c6:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6892      	ldr	r2, [r2, #8]
 80027d6:	0211      	lsls	r1, r2, #8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6952      	ldr	r2, [r2, #20]
 80027dc:	0852      	lsrs	r2, r2, #1
 80027de:	3a01      	subs	r2, #1
 80027e0:	0652      	lsls	r2, r2, #25
 80027e2:	430a      	orrs	r2, r1
 80027e4:	4915      	ldr	r1, [pc, #84]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027ea:	4b14      	ldr	r3, [pc, #80]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a13      	ldr	r2, [pc, #76]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe fa9f 	bl	8000d38 <HAL_GetTick>
 80027fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027fc:	e009      	b.n	8002812 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027fe:	f7fe fa9b 	bl	8000d38 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d902      	bls.n	8002812 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	73fb      	strb	r3, [r7, #15]
          break;
 8002810:	e005      	b.n	800281e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002812:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ef      	beq.n	80027fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4903      	ldr	r1, [pc, #12]	@ (800283c <RCCEx_PLLSAI1_Config+0x1e0>)
 800282e:	4313      	orrs	r3, r2
 8002830:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800284e:	4b69      	ldr	r3, [pc, #420]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d018      	beq.n	800288c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800285a:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0203 	and.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d10d      	bne.n	8002886 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
       ||
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002872:	4b60      	ldr	r3, [pc, #384]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
       ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d047      	beq.n	8002916 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	e044      	b.n	8002916 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d018      	beq.n	80028c6 <RCCEx_PLLSAI2_Config+0x86>
 8002894:	2b03      	cmp	r3, #3
 8002896:	d825      	bhi.n	80028e4 <RCCEx_PLLSAI2_Config+0xa4>
 8002898:	2b01      	cmp	r3, #1
 800289a:	d002      	beq.n	80028a2 <RCCEx_PLLSAI2_Config+0x62>
 800289c:	2b02      	cmp	r3, #2
 800289e:	d009      	beq.n	80028b4 <RCCEx_PLLSAI2_Config+0x74>
 80028a0:	e020      	b.n	80028e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028a2:	4b54      	ldr	r3, [pc, #336]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11d      	bne.n	80028ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b2:	e01a      	b.n	80028ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028b4:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d116      	bne.n	80028ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c4:	e013      	b.n	80028ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028c6:	4b4b      	ldr	r3, [pc, #300]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028d2:	4b48      	ldr	r3, [pc, #288]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028e2:	e006      	b.n	80028f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e004      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ea:	bf00      	nop
 80028ec:	e002      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028fa:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	430b      	orrs	r3, r1
 8002910:	4938      	ldr	r1, [pc, #224]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d166      	bne.n	80029ea <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800291c:	4b35      	ldr	r3, [pc, #212]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a34      	ldr	r2, [pc, #208]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002928:	f7fe fa06 	bl	8000d38 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800292e:	e009      	b.n	8002944 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002930:	f7fe fa02 	bl	8000d38 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	73fb      	strb	r3, [r7, #15]
        break;
 8002942:	e005      	b.n	8002950 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ef      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d149      	bne.n	80029ea <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d110      	bne.n	800297e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800295c:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002964:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6892      	ldr	r2, [r2, #8]
 800296c:	0211      	lsls	r1, r2, #8
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	06d2      	lsls	r2, r2, #27
 8002974:	430a      	orrs	r2, r1
 8002976:	491f      	ldr	r1, [pc, #124]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002978:	4313      	orrs	r3, r2
 800297a:	614b      	str	r3, [r1, #20]
 800297c:	e011      	b.n	80029a2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002986:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6892      	ldr	r2, [r2, #8]
 800298e:	0211      	lsls	r1, r2, #8
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6912      	ldr	r2, [r2, #16]
 8002994:	0852      	lsrs	r2, r2, #1
 8002996:	3a01      	subs	r2, #1
 8002998:	0652      	lsls	r2, r2, #25
 800299a:	430a      	orrs	r2, r1
 800299c:	4915      	ldr	r1, [pc, #84]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a13      	ldr	r2, [pc, #76]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe f9c3 	bl	8000d38 <HAL_GetTick>
 80029b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029b4:	e009      	b.n	80029ca <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029b6:	f7fe f9bf 	bl	8000d38 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d902      	bls.n	80029ca <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	73fb      	strb	r3, [r7, #15]
          break;
 80029c8:	e005      	b.n	80029d6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029ca:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ef      	beq.n	80029b6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029dc:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4903      	ldr	r1, [pc, #12]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000

080029f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e049      	b.n	8002a9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f841 	bl	8002aa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3304      	adds	r3, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f000 f9e0 	bl	8002dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e04f      	b.n	8002b74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a23      	ldr	r2, [pc, #140]	@ (8002b80 <HAL_TIM_Base_Start_IT+0xc4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01d      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x76>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afe:	d018      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x76>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1f      	ldr	r2, [pc, #124]	@ (8002b84 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x76>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b88 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00e      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x76>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1c      	ldr	r2, [pc, #112]	@ (8002b8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x76>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1b      	ldr	r2, [pc, #108]	@ (8002b90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x76>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d115      	bne.n	8002b5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	d015      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0xb4>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4a:	d011      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5c:	e008      	b.n	8002b70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e000      	b.n	8002b72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40000800 	.word	0x40000800
 8002b8c:	40000c00 	.word	0x40000c00
 8002b90:	40013400 	.word	0x40013400
 8002b94:	40014000 	.word	0x40014000
 8002b98:	00010007 	.word	0x00010007

08002b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0202 	mvn.w	r2, #2
 8002bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8e9 	bl	8002dbe <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8db 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8ec 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d020      	beq.n	8002c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0204 	mvn.w	r2, #4
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8c3 	bl	8002dbe <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8b5 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8c6 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0208 	mvn.w	r2, #8
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f89d 	bl	8002dbe <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f88f 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8a0 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0210 	mvn.w	r2, #16
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f877 	bl	8002dbe <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f869 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f87a 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0201 	mvn.w	r2, #1
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fdd2 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00c      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f913 	bl	8002f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00c      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f90b 	bl	8002f70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00c      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f834 	bl	8002de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00c      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f06f 0220 	mvn.w	r2, #32
 8002d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f8d3 	bl	8002f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a46      	ldr	r2, [pc, #280]	@ (8002f28 <TIM_Base_SetConfig+0x12c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1a:	d00f      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a43      	ldr	r2, [pc, #268]	@ (8002f2c <TIM_Base_SetConfig+0x130>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a42      	ldr	r2, [pc, #264]	@ (8002f30 <TIM_Base_SetConfig+0x134>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a41      	ldr	r2, [pc, #260]	@ (8002f34 <TIM_Base_SetConfig+0x138>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a40      	ldr	r2, [pc, #256]	@ (8002f38 <TIM_Base_SetConfig+0x13c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d108      	bne.n	8002e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a35      	ldr	r2, [pc, #212]	@ (8002f28 <TIM_Base_SetConfig+0x12c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5c:	d01b      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a32      	ldr	r2, [pc, #200]	@ (8002f2c <TIM_Base_SetConfig+0x130>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d017      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a31      	ldr	r2, [pc, #196]	@ (8002f30 <TIM_Base_SetConfig+0x134>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a30      	ldr	r2, [pc, #192]	@ (8002f34 <TIM_Base_SetConfig+0x138>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00f      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a2f      	ldr	r2, [pc, #188]	@ (8002f38 <TIM_Base_SetConfig+0x13c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a2e      	ldr	r2, [pc, #184]	@ (8002f3c <TIM_Base_SetConfig+0x140>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2d      	ldr	r2, [pc, #180]	@ (8002f40 <TIM_Base_SetConfig+0x144>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a2c      	ldr	r2, [pc, #176]	@ (8002f44 <TIM_Base_SetConfig+0x148>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a16      	ldr	r2, [pc, #88]	@ (8002f28 <TIM_Base_SetConfig+0x12c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00f      	beq.n	8002ef4 <TIM_Base_SetConfig+0xf8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a18      	ldr	r2, [pc, #96]	@ (8002f38 <TIM_Base_SetConfig+0x13c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_Base_SetConfig+0xf8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a17      	ldr	r2, [pc, #92]	@ (8002f3c <TIM_Base_SetConfig+0x140>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_Base_SetConfig+0xf8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <TIM_Base_SetConfig+0x144>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0xf8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <TIM_Base_SetConfig+0x148>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d103      	bne.n	8002efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f023 0201 	bic.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40013400 	.word	0x40013400
 8002f3c:	40014000 	.word	0x40014000
 8002f40:	40014400 	.word	0x40014400
 8002f44:	40014800 	.word	0x40014800

08002f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e040      	b.n	8003018 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fd fcc0 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	@ 0x24
 8002fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fb6a 	bl	80036a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f8af 	bl	8003134 <UART_SetConfig>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e01b      	b.n	8003018 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ffe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fbe9 	bl	80037e8 <UART_CheckIdleState>
 8003016:	4603      	mov	r3, r0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	@ 0x28
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003034:	2b20      	cmp	r3, #32
 8003036:	d177      	bne.n	8003128 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_UART_Transmit+0x24>
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e070      	b.n	800312a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2221      	movs	r2, #33	@ 0x21
 8003054:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003056:	f7fd fe6f 	bl	8000d38 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003074:	d108      	bne.n	8003088 <HAL_UART_Transmit+0x68>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e003      	b.n	8003090 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003090:	e02f      	b.n	80030f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2180      	movs	r1, #128	@ 0x80
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fc4b 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e03b      	b.n	800312a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10b      	bne.n	80030d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	881a      	ldrh	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c4:	b292      	uxth	r2, r2
 80030c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	3302      	adds	r3, #2
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	e007      	b.n	80030e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3301      	adds	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1c9      	bne.n	8003092 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2140      	movs	r1, #64	@ 0x40
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fc15 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e005      	b.n	800312a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b08a      	sub	sp, #40	@ 0x28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	431a      	orrs	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	4313      	orrs	r3, r2
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4ba4      	ldr	r3, [pc, #656]	@ (80033f4 <UART_SetConfig+0x2c0>)
 8003164:	4013      	ands	r3, r2
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800316c:	430b      	orrs	r3, r1
 800316e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a99      	ldr	r2, [pc, #612]	@ (80033f8 <UART_SetConfig+0x2c4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319c:	4313      	orrs	r3, r2
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a90      	ldr	r2, [pc, #576]	@ (80033fc <UART_SetConfig+0x2c8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d126      	bne.n	800320c <UART_SetConfig+0xd8>
 80031be:	4b90      	ldr	r3, [pc, #576]	@ (8003400 <UART_SetConfig+0x2cc>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d81b      	bhi.n	8003204 <UART_SetConfig+0xd0>
 80031cc:	a201      	add	r2, pc, #4	@ (adr r2, 80031d4 <UART_SetConfig+0xa0>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031e5 	.word	0x080031e5
 80031d8:	080031f5 	.word	0x080031f5
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	080031fd 	.word	0x080031fd
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ea:	e116      	b.n	800341a <UART_SetConfig+0x2e6>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f2:	e112      	b.n	800341a <UART_SetConfig+0x2e6>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fa:	e10e      	b.n	800341a <UART_SetConfig+0x2e6>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003202:	e10a      	b.n	800341a <UART_SetConfig+0x2e6>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320a:	e106      	b.n	800341a <UART_SetConfig+0x2e6>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7c      	ldr	r2, [pc, #496]	@ (8003404 <UART_SetConfig+0x2d0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d138      	bne.n	8003288 <UART_SetConfig+0x154>
 8003216:	4b7a      	ldr	r3, [pc, #488]	@ (8003400 <UART_SetConfig+0x2cc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d82d      	bhi.n	8003280 <UART_SetConfig+0x14c>
 8003224:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <UART_SetConfig+0xf8>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003261 	.word	0x08003261
 8003230:	08003281 	.word	0x08003281
 8003234:	08003281 	.word	0x08003281
 8003238:	08003281 	.word	0x08003281
 800323c:	08003271 	.word	0x08003271
 8003240:	08003281 	.word	0x08003281
 8003244:	08003281 	.word	0x08003281
 8003248:	08003281 	.word	0x08003281
 800324c:	08003269 	.word	0x08003269
 8003250:	08003281 	.word	0x08003281
 8003254:	08003281 	.word	0x08003281
 8003258:	08003281 	.word	0x08003281
 800325c:	08003279 	.word	0x08003279
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003266:	e0d8      	b.n	800341a <UART_SetConfig+0x2e6>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326e:	e0d4      	b.n	800341a <UART_SetConfig+0x2e6>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003276:	e0d0      	b.n	800341a <UART_SetConfig+0x2e6>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327e:	e0cc      	b.n	800341a <UART_SetConfig+0x2e6>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003286:	e0c8      	b.n	800341a <UART_SetConfig+0x2e6>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5e      	ldr	r2, [pc, #376]	@ (8003408 <UART_SetConfig+0x2d4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d125      	bne.n	80032de <UART_SetConfig+0x1aa>
 8003292:	4b5b      	ldr	r3, [pc, #364]	@ (8003400 <UART_SetConfig+0x2cc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003298:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800329c:	2b30      	cmp	r3, #48	@ 0x30
 800329e:	d016      	beq.n	80032ce <UART_SetConfig+0x19a>
 80032a0:	2b30      	cmp	r3, #48	@ 0x30
 80032a2:	d818      	bhi.n	80032d6 <UART_SetConfig+0x1a2>
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d00a      	beq.n	80032be <UART_SetConfig+0x18a>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d814      	bhi.n	80032d6 <UART_SetConfig+0x1a2>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <UART_SetConfig+0x182>
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d008      	beq.n	80032c6 <UART_SetConfig+0x192>
 80032b4:	e00f      	b.n	80032d6 <UART_SetConfig+0x1a2>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032bc:	e0ad      	b.n	800341a <UART_SetConfig+0x2e6>
 80032be:	2302      	movs	r3, #2
 80032c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c4:	e0a9      	b.n	800341a <UART_SetConfig+0x2e6>
 80032c6:	2304      	movs	r3, #4
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032cc:	e0a5      	b.n	800341a <UART_SetConfig+0x2e6>
 80032ce:	2308      	movs	r3, #8
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d4:	e0a1      	b.n	800341a <UART_SetConfig+0x2e6>
 80032d6:	2310      	movs	r3, #16
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032dc:	e09d      	b.n	800341a <UART_SetConfig+0x2e6>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a4a      	ldr	r2, [pc, #296]	@ (800340c <UART_SetConfig+0x2d8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d125      	bne.n	8003334 <UART_SetConfig+0x200>
 80032e8:	4b45      	ldr	r3, [pc, #276]	@ (8003400 <UART_SetConfig+0x2cc>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032f4:	d016      	beq.n	8003324 <UART_SetConfig+0x1f0>
 80032f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80032f8:	d818      	bhi.n	800332c <UART_SetConfig+0x1f8>
 80032fa:	2b80      	cmp	r3, #128	@ 0x80
 80032fc:	d00a      	beq.n	8003314 <UART_SetConfig+0x1e0>
 80032fe:	2b80      	cmp	r3, #128	@ 0x80
 8003300:	d814      	bhi.n	800332c <UART_SetConfig+0x1f8>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <UART_SetConfig+0x1d8>
 8003306:	2b40      	cmp	r3, #64	@ 0x40
 8003308:	d008      	beq.n	800331c <UART_SetConfig+0x1e8>
 800330a:	e00f      	b.n	800332c <UART_SetConfig+0x1f8>
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003312:	e082      	b.n	800341a <UART_SetConfig+0x2e6>
 8003314:	2302      	movs	r3, #2
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800331a:	e07e      	b.n	800341a <UART_SetConfig+0x2e6>
 800331c:	2304      	movs	r3, #4
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003322:	e07a      	b.n	800341a <UART_SetConfig+0x2e6>
 8003324:	2308      	movs	r3, #8
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800332a:	e076      	b.n	800341a <UART_SetConfig+0x2e6>
 800332c:	2310      	movs	r3, #16
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003332:	e072      	b.n	800341a <UART_SetConfig+0x2e6>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a35      	ldr	r2, [pc, #212]	@ (8003410 <UART_SetConfig+0x2dc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d12a      	bne.n	8003394 <UART_SetConfig+0x260>
 800333e:	4b30      	ldr	r3, [pc, #192]	@ (8003400 <UART_SetConfig+0x2cc>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003348:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800334c:	d01a      	beq.n	8003384 <UART_SetConfig+0x250>
 800334e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003352:	d81b      	bhi.n	800338c <UART_SetConfig+0x258>
 8003354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003358:	d00c      	beq.n	8003374 <UART_SetConfig+0x240>
 800335a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800335e:	d815      	bhi.n	800338c <UART_SetConfig+0x258>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <UART_SetConfig+0x238>
 8003364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003368:	d008      	beq.n	800337c <UART_SetConfig+0x248>
 800336a:	e00f      	b.n	800338c <UART_SetConfig+0x258>
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003372:	e052      	b.n	800341a <UART_SetConfig+0x2e6>
 8003374:	2302      	movs	r3, #2
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337a:	e04e      	b.n	800341a <UART_SetConfig+0x2e6>
 800337c:	2304      	movs	r3, #4
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003382:	e04a      	b.n	800341a <UART_SetConfig+0x2e6>
 8003384:	2308      	movs	r3, #8
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338a:	e046      	b.n	800341a <UART_SetConfig+0x2e6>
 800338c:	2310      	movs	r3, #16
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003392:	e042      	b.n	800341a <UART_SetConfig+0x2e6>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <UART_SetConfig+0x2c4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d13a      	bne.n	8003414 <UART_SetConfig+0x2e0>
 800339e:	4b18      	ldr	r3, [pc, #96]	@ (8003400 <UART_SetConfig+0x2cc>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033ac:	d01a      	beq.n	80033e4 <UART_SetConfig+0x2b0>
 80033ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033b2:	d81b      	bhi.n	80033ec <UART_SetConfig+0x2b8>
 80033b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b8:	d00c      	beq.n	80033d4 <UART_SetConfig+0x2a0>
 80033ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033be:	d815      	bhi.n	80033ec <UART_SetConfig+0x2b8>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <UART_SetConfig+0x298>
 80033c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c8:	d008      	beq.n	80033dc <UART_SetConfig+0x2a8>
 80033ca:	e00f      	b.n	80033ec <UART_SetConfig+0x2b8>
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d2:	e022      	b.n	800341a <UART_SetConfig+0x2e6>
 80033d4:	2302      	movs	r3, #2
 80033d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033da:	e01e      	b.n	800341a <UART_SetConfig+0x2e6>
 80033dc:	2304      	movs	r3, #4
 80033de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e2:	e01a      	b.n	800341a <UART_SetConfig+0x2e6>
 80033e4:	2308      	movs	r3, #8
 80033e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ea:	e016      	b.n	800341a <UART_SetConfig+0x2e6>
 80033ec:	2310      	movs	r3, #16
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f2:	e012      	b.n	800341a <UART_SetConfig+0x2e6>
 80033f4:	efff69f3 	.word	0xefff69f3
 80033f8:	40008000 	.word	0x40008000
 80033fc:	40013800 	.word	0x40013800
 8003400:	40021000 	.word	0x40021000
 8003404:	40004400 	.word	0x40004400
 8003408:	40004800 	.word	0x40004800
 800340c:	40004c00 	.word	0x40004c00
 8003410:	40005000 	.word	0x40005000
 8003414:	2310      	movs	r3, #16
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a9f      	ldr	r2, [pc, #636]	@ (800369c <UART_SetConfig+0x568>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d17a      	bne.n	800351a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003424:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003428:	2b08      	cmp	r3, #8
 800342a:	d824      	bhi.n	8003476 <UART_SetConfig+0x342>
 800342c:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <UART_SetConfig+0x300>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003459 	.word	0x08003459
 8003438:	08003477 	.word	0x08003477
 800343c:	08003461 	.word	0x08003461
 8003440:	08003477 	.word	0x08003477
 8003444:	08003467 	.word	0x08003467
 8003448:	08003477 	.word	0x08003477
 800344c:	08003477 	.word	0x08003477
 8003450:	08003477 	.word	0x08003477
 8003454:	0800346f 	.word	0x0800346f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7fe fd46 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 800345c:	61f8      	str	r0, [r7, #28]
        break;
 800345e:	e010      	b.n	8003482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003460:	4b8f      	ldr	r3, [pc, #572]	@ (80036a0 <UART_SetConfig+0x56c>)
 8003462:	61fb      	str	r3, [r7, #28]
        break;
 8003464:	e00d      	b.n	8003482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003466:	f7fe fca7 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 800346a:	61f8      	str	r0, [r7, #28]
        break;
 800346c:	e009      	b.n	8003482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003472:	61fb      	str	r3, [r7, #28]
        break;
 8003474:	e005      	b.n	8003482 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80fb 	beq.w	8003680 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	429a      	cmp	r2, r3
 8003498:	d305      	bcc.n	80034a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d903      	bls.n	80034ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034ac:	e0e8      	b.n	8003680 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2200      	movs	r2, #0
 80034b2:	461c      	mov	r4, r3
 80034b4:	4615      	mov	r5, r2
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	022b      	lsls	r3, r5, #8
 80034c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034c4:	0222      	lsls	r2, r4, #8
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	6849      	ldr	r1, [r1, #4]
 80034ca:	0849      	lsrs	r1, r1, #1
 80034cc:	2000      	movs	r0, #0
 80034ce:	4688      	mov	r8, r1
 80034d0:	4681      	mov	r9, r0
 80034d2:	eb12 0a08 	adds.w	sl, r2, r8
 80034d6:	eb43 0b09 	adc.w	fp, r3, r9
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e8:	4650      	mov	r0, sl
 80034ea:	4659      	mov	r1, fp
 80034ec:	f7fc fed0 	bl	8000290 <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4613      	mov	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034fe:	d308      	bcc.n	8003512 <UART_SetConfig+0x3de>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003506:	d204      	bcs.n	8003512 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	e0b6      	b.n	8003680 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003518:	e0b2      	b.n	8003680 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003522:	d15e      	bne.n	80035e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003524:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003528:	2b08      	cmp	r3, #8
 800352a:	d828      	bhi.n	800357e <UART_SetConfig+0x44a>
 800352c:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <UART_SetConfig+0x400>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003559 	.word	0x08003559
 8003538:	08003561 	.word	0x08003561
 800353c:	08003569 	.word	0x08003569
 8003540:	0800357f 	.word	0x0800357f
 8003544:	0800356f 	.word	0x0800356f
 8003548:	0800357f 	.word	0x0800357f
 800354c:	0800357f 	.word	0x0800357f
 8003550:	0800357f 	.word	0x0800357f
 8003554:	08003577 	.word	0x08003577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7fe fcc6 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 800355c:	61f8      	str	r0, [r7, #28]
        break;
 800355e:	e014      	b.n	800358a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7fe fcd8 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8003564:	61f8      	str	r0, [r7, #28]
        break;
 8003566:	e010      	b.n	800358a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003568:	4b4d      	ldr	r3, [pc, #308]	@ (80036a0 <UART_SetConfig+0x56c>)
 800356a:	61fb      	str	r3, [r7, #28]
        break;
 800356c:	e00d      	b.n	800358a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356e:	f7fe fc23 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8003572:	61f8      	str	r0, [r7, #28]
        break;
 8003574:	e009      	b.n	800358a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800357a:	61fb      	str	r3, [r7, #28]
        break;
 800357c:	e005      	b.n	800358a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d077      	beq.n	8003680 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005a      	lsls	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	441a      	add	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b0f      	cmp	r3, #15
 80035aa:	d916      	bls.n	80035da <UART_SetConfig+0x4a6>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b2:	d212      	bcs.n	80035da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f023 030f 	bic.w	r3, r3, #15
 80035bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	8afb      	ldrh	r3, [r7, #22]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	8afa      	ldrh	r2, [r7, #22]
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	e052      	b.n	8003680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035e0:	e04e      	b.n	8003680 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d827      	bhi.n	800363a <UART_SetConfig+0x506>
 80035ea:	a201      	add	r2, pc, #4	@ (adr r2, 80035f0 <UART_SetConfig+0x4bc>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003615 	.word	0x08003615
 80035f4:	0800361d 	.word	0x0800361d
 80035f8:	08003625 	.word	0x08003625
 80035fc:	0800363b 	.word	0x0800363b
 8003600:	0800362b 	.word	0x0800362b
 8003604:	0800363b 	.word	0x0800363b
 8003608:	0800363b 	.word	0x0800363b
 800360c:	0800363b 	.word	0x0800363b
 8003610:	08003633 	.word	0x08003633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003614:	f7fe fc68 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8003618:	61f8      	str	r0, [r7, #28]
        break;
 800361a:	e014      	b.n	8003646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800361c:	f7fe fc7a 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8003620:	61f8      	str	r0, [r7, #28]
        break;
 8003622:	e010      	b.n	8003646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003624:	4b1e      	ldr	r3, [pc, #120]	@ (80036a0 <UART_SetConfig+0x56c>)
 8003626:	61fb      	str	r3, [r7, #28]
        break;
 8003628:	e00d      	b.n	8003646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800362a:	f7fe fbc5 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 800362e:	61f8      	str	r0, [r7, #28]
        break;
 8003630:	e009      	b.n	8003646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003636:	61fb      	str	r3, [r7, #28]
        break;
 8003638:	e005      	b.n	8003646 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003644:	bf00      	nop
    }

    if (pclk != 0U)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d019      	beq.n	8003680 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	085a      	lsrs	r2, r3, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	441a      	add	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	d909      	bls.n	800367a <UART_SetConfig+0x546>
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366c:	d205      	bcs.n	800367a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60da      	str	r2, [r3, #12]
 8003678:	e002      	b.n	8003680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800368c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003690:	4618      	mov	r0, r3
 8003692:	3728      	adds	r7, #40	@ 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	40008000 	.word	0x40008000
 80036a0:	00f42400 	.word	0x00f42400

080036a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01a      	beq.n	80037ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037a2:	d10a      	bne.n	80037ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  }
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b098      	sub	sp, #96	@ 0x60
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037f8:	f7fd fa9e 	bl	8000d38 <HAL_GetTick>
 80037fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b08      	cmp	r3, #8
 800380a:	d12e      	bne.n	800386a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003814:	2200      	movs	r2, #0
 8003816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f88c 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d021      	beq.n	800386a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800383a:	653b      	str	r3, [r7, #80]	@ 0x50
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003844:	647b      	str	r3, [r7, #68]	@ 0x44
 8003846:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800384a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e6      	bne.n	8003826 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e062      	b.n	8003930 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d149      	bne.n	800390c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003878:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003880:	2200      	movs	r2, #0
 8003882:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f856 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03c      	beq.n	800390c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	623b      	str	r3, [r7, #32]
   return(result);
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e6      	bne.n	8003892 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038e4:	61fa      	str	r2, [r7, #28]
 80038e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	69b9      	ldr	r1, [r7, #24]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	617b      	str	r3, [r7, #20]
   return(result);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e011      	b.n	8003930 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3758      	adds	r7, #88	@ 0x58
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003948:	e04f      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003950:	d04b      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fd f9f1 	bl	8000d38 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <UART_WaitOnFlagUntilTimeout+0x30>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e04e      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d037      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b80      	cmp	r3, #128	@ 0x80
 800397e:	d034      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b40      	cmp	r3, #64	@ 0x40
 8003984:	d031      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b08      	cmp	r3, #8
 8003992:	d110      	bne.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2208      	movs	r2, #8
 800399a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f838 	bl	8003a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2208      	movs	r2, #8
 80039a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e029      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c4:	d111      	bne.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f81e 	bl	8003a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e00f      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4013      	ands	r3, r2
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d0a0      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b095      	sub	sp, #84	@ 0x54
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e6      	bne.n	8003a1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3308      	adds	r3, #8
 8003a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e5      	bne.n	8003a4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d118      	bne.n	8003aba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f023 0310 	bic.w	r3, r3, #16
 8003a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6979      	ldr	r1, [r7, #20]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e6      	bne.n	8003a88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ace:	bf00      	nop
 8003ad0:	3754      	adds	r7, #84	@ 0x54
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <__NVIC_SetPriority>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	db0a      	blt.n	8003b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	490c      	ldr	r1, [pc, #48]	@ (8003b28 <__NVIC_SetPriority+0x4c>)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	440b      	add	r3, r1
 8003b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003b04:	e00a      	b.n	8003b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4908      	ldr	r1, [pc, #32]	@ (8003b2c <__NVIC_SetPriority+0x50>)
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	3b04      	subs	r3, #4
 8003b14:	0112      	lsls	r2, r2, #4
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	440b      	add	r3, r1
 8003b1a:	761a      	strb	r2, [r3, #24]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000e100 	.word	0xe000e100
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b34:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <SysTick_Handler+0x1c>)
 8003b36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b38:	f001 ff98 	bl	8005a6c <xTaskGetSchedulerState>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d001      	beq.n	8003b46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b42:	f002 fd91 	bl	8006668 <xPortSysTickHandler>
  }
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000e010 	.word	0xe000e010

08003b50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b54:	2100      	movs	r1, #0
 8003b56:	f06f 0004 	mvn.w	r0, #4
 8003b5a:	f7ff ffbf 	bl	8003adc <__NVIC_SetPriority>
#endif
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b6a:	f3ef 8305 	mrs	r3, IPSR
 8003b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b76:	f06f 0305 	mvn.w	r3, #5
 8003b7a:	607b      	str	r3, [r7, #4]
 8003b7c:	e00c      	b.n	8003b98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <osKernelInitialize+0x44>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b86:	4b08      	ldr	r3, [pc, #32]	@ (8003ba8 <osKernelInitialize+0x44>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	e002      	b.n	8003b98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b98:	687b      	ldr	r3, [r7, #4]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000174 	.word	0x20000174

08003bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bb2:	f3ef 8305 	mrs	r3, IPSR
 8003bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8003bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bbe:	f06f 0305 	mvn.w	r3, #5
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	e010      	b.n	8003be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <osKernelStart+0x48>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d109      	bne.n	8003be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bce:	f7ff ffbf 	bl	8003b50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bd2:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <osKernelStart+0x48>)
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003bd8:	f001 fae4 	bl	80051a4 <vTaskStartScheduler>
      stat = osOK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e002      	b.n	8003be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003be8:	687b      	ldr	r3, [r7, #4]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000174 	.word	0x20000174

08003bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08e      	sub	sp, #56	@ 0x38
 8003bfc:	af04      	add	r7, sp, #16
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c08:	f3ef 8305 	mrs	r3, IPSR
 8003c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d17e      	bne.n	8003d12 <osThreadNew+0x11a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d07b      	beq.n	8003d12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c1a:	2380      	movs	r3, #128	@ 0x80
 8003c1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c1e:	2318      	movs	r3, #24
 8003c20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d045      	beq.n	8003cbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <osThreadNew+0x48>
        name = attr->name;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <osThreadNew+0x6e>
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b38      	cmp	r3, #56	@ 0x38
 8003c58:	d805      	bhi.n	8003c66 <osThreadNew+0x6e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <osThreadNew+0x72>
        return (NULL);
 8003c66:	2300      	movs	r3, #0
 8003c68:	e054      	b.n	8003d14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00e      	beq.n	8003ca0 <osThreadNew+0xa8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2ba7      	cmp	r3, #167	@ 0xa7
 8003c88:	d90a      	bls.n	8003ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <osThreadNew+0xa8>
        mem = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	e010      	b.n	8003cc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10c      	bne.n	8003cc2 <osThreadNew+0xca>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d108      	bne.n	8003cc2 <osThreadNew+0xca>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <osThreadNew+0xca>
          mem = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	e001      	b.n	8003cc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d110      	bne.n	8003cea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd0:	9202      	str	r2, [sp, #8]
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6a3a      	ldr	r2, [r7, #32]
 8003cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fe88 	bl	80049f4 <xTaskCreateStatic>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	e013      	b.n	8003d12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d110      	bne.n	8003d12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	f107 0310 	add.w	r3, r7, #16
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fed6 	bl	8004ab4 <xTaskCreate>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <osThreadNew+0x11a>
            hTask = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d12:	693b      	ldr	r3, [r7, #16]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	@ 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d28:	f3ef 8305 	mrs	r3, IPSR
 8003d2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8003d34:	f06f 0305 	mvn.w	r3, #5
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e00b      	b.n	8003d54 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8003d42:	f06f 0303 	mvn.w	r3, #3
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e004      	b.n	8003d54 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8003d4e:	6938      	ldr	r0, [r7, #16]
 8003d50:	f001 f920 	bl	8004f94 <vTaskSuspend>
  }

  return (stat);
 8003d54:	697b      	ldr	r3, [r7, #20]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d6a:	f3ef 8305 	mrs	r3, IPSR
 8003d6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d70:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <osThreadResume+0x20>
    stat = osErrorISR;
 8003d76:	f06f 0305 	mvn.w	r3, #5
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e00b      	b.n	8003d96 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <osThreadResume+0x2e>
    stat = osErrorParameter;
 8003d84:	f06f 0303 	mvn.w	r3, #3
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e004      	b.n	8003d96 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8003d90:	6938      	ldr	r0, [r7, #16]
 8003d92:	f001 f9a7 	bl	80050e4 <vTaskResume>
  }

  return (stat);
 8003d96:	697b      	ldr	r3, [r7, #20]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dac:	f3ef 8305 	mrs	r3, IPSR
 8003db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003db2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8003db8:	f06f 0305 	mvn.w	r3, #5
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e017      	b.n	8003df0 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8003dc6:	f06f 0303 	mvn.w	r3, #3
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e010      	b.n	8003df0 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8003dce:	6938      	ldr	r0, [r7, #16]
 8003dd0:	f001 f878 	bl	8004ec4 <eTaskGetState>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d005      	beq.n	8003dea <osThreadTerminate+0x4a>
      stat = osOK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8003de2:	6938      	ldr	r0, [r7, #16]
 8003de4:	f000 ffc4 	bl	8004d70 <vTaskDelete>
 8003de8:	e002      	b.n	8003df0 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8003dea:	f06f 0302 	mvn.w	r3, #2
 8003dee:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8003df0:	697b      	ldr	r3, [r7, #20]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e02:	f3ef 8305 	mrs	r3, IPSR
 8003e06:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <osDelay+0x1c>
    stat = osErrorISR;
 8003e0e:	f06f 0305 	mvn.w	r3, #5
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e007      	b.n	8003e26 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f001 f819 	bl	8004e58 <vTaskDelay>
    }
  }

  return (stat);
 8003e26:	68fb      	ldr	r3, [r7, #12]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a07      	ldr	r2, [pc, #28]	@ (8003e5c <vApplicationGetIdleTaskMemory+0x2c>)
 8003e40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4a06      	ldr	r2, [pc, #24]	@ (8003e60 <vApplicationGetIdleTaskMemory+0x30>)
 8003e46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2280      	movs	r2, #128	@ 0x80
 8003e4c:	601a      	str	r2, [r3, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000178 	.word	0x20000178
 8003e60:	20000220 	.word	0x20000220

08003e64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a07      	ldr	r2, [pc, #28]	@ (8003e90 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4a06      	ldr	r2, [pc, #24]	@ (8003e94 <vApplicationGetTimerTaskMemory+0x30>)
 8003e7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	20000420 	.word	0x20000420
 8003e94:	200004c8 	.word	0x200004c8

08003e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f103 0208 	add.w	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f103 0208 	add.w	r2, r3, #8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f103 0208 	add.w	r2, r3, #8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f50:	d103      	bne.n	8003f5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e00c      	b.n	8003f74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e002      	b.n	8003f68 <vListInsert+0x2e>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d2f6      	bcs.n	8003f62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6852      	ldr	r2, [r2, #4]
 8003fcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d103      	bne.n	8003fe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	1e5a      	subs	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800402c:	f002 fa8c 	bl	8006548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	68f9      	ldr	r1, [r7, #12]
 800403a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	441a      	add	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	3b01      	subs	r3, #1
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	441a      	add	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	22ff      	movs	r2, #255	@ 0xff
 8004070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	22ff      	movs	r2, #255	@ 0xff
 8004078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d114      	bne.n	80040ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01a      	beq.n	80040c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3310      	adds	r3, #16
 800408e:	4618      	mov	r0, r3
 8004090:	f001 fb26 	bl	80056e0 <xTaskRemoveFromEventList>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d012      	beq.n	80040c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800409a:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <xQueueGenericReset+0xd0>)
 800409c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	e009      	b.n	80040c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3310      	adds	r3, #16
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fef1 	bl	8003e98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3324      	adds	r3, #36	@ 0x24
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff feec 	bl	8003e98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040c0:	f002 fa74 	bl	80065ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040c4:	2301      	movs	r3, #1
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08e      	sub	sp, #56	@ 0x38
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <xQueueGenericCreateStatic+0x56>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <xQueueGenericCreateStatic+0x5a>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <xQueueGenericCreateStatic+0x5c>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	623b      	str	r3, [r7, #32]
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	e7fd      	b.n	8004148 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <xQueueGenericCreateStatic+0x84>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <xQueueGenericCreateStatic+0x88>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <xQueueGenericCreateStatic+0x8a>
 800415c:	2300      	movs	r3, #0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	61fb      	str	r3, [r7, #28]
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	e7fd      	b.n	8004176 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800417a:	2350      	movs	r3, #80	@ 0x50
 800417c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b50      	cmp	r3, #80	@ 0x50
 8004182:	d00b      	beq.n	800419c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	61bb      	str	r3, [r7, #24]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800419c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80041a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00d      	beq.n	80041c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80041b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f805 	bl	80041ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3730      	adds	r7, #48	@ 0x30
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
 80041da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e002      	b.n	80041f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041fc:	2101      	movs	r1, #1
 80041fe:	69b8      	ldr	r0, [r7, #24]
 8004200:	f7ff fefe 	bl	8004000 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08e      	sub	sp, #56	@ 0x38
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004222:	2300      	movs	r3, #0
 8004224:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <xQueueGenericSend+0x34>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <xQueueGenericSend+0x42>
 800424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <xQueueGenericSend+0x46>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <xQueueGenericSend+0x48>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10b      	bne.n	8004278 <xQueueGenericSend+0x64>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d103      	bne.n	8004286 <xQueueGenericSend+0x72>
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <xQueueGenericSend+0x76>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <xQueueGenericSend+0x78>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <xQueueGenericSend+0x94>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	623b      	str	r3, [r7, #32]
}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	e7fd      	b.n	80042a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042a8:	f001 fbe0 	bl	8005a6c <xTaskGetSchedulerState>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <xQueueGenericSend+0xa4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <xQueueGenericSend+0xa8>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <xQueueGenericSend+0xaa>
 80042bc:	2300      	movs	r3, #0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <xQueueGenericSend+0xc6>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	61fb      	str	r3, [r7, #28]
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	e7fd      	b.n	80042d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042da:	f002 f935 	bl	8006548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <xQueueGenericSend+0xdc>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d129      	bne.n	8004344 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042f6:	f000 fa0f 	bl	8004718 <prvCopyDataToQueue>
 80042fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	3324      	adds	r3, #36	@ 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f9e9 	bl	80056e0 <xTaskRemoveFromEventList>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004314:	4b3f      	ldr	r3, [pc, #252]	@ (8004414 <xQueueGenericSend+0x200>)
 8004316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	e00a      	b.n	800433c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800432c:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <xQueueGenericSend+0x200>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800433c:	f002 f936 	bl	80065ac <vPortExitCritical>
				return pdPASS;
 8004340:	2301      	movs	r3, #1
 8004342:	e063      	b.n	800440c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800434a:	f002 f92f 	bl	80065ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800434e:	2300      	movs	r3, #0
 8004350:	e05c      	b.n	800440c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	4618      	mov	r0, r3
 800435e:	f001 fa23 	bl	80057a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004362:	2301      	movs	r3, #1
 8004364:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004366:	f002 f921 	bl	80065ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800436a:	f000 ff8b 	bl	8005284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800436e:	f002 f8eb 	bl	8006548 <vPortEnterCritical>
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004378:	b25b      	sxtb	r3, r3
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800437e:	d103      	bne.n	8004388 <xQueueGenericSend+0x174>
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800438e:	b25b      	sxtb	r3, r3
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004394:	d103      	bne.n	800439e <xQueueGenericSend+0x18a>
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800439e:	f002 f905 	bl	80065ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043a2:	1d3a      	adds	r2, r7, #4
 80043a4:	f107 0314 	add.w	r3, r7, #20
 80043a8:	4611      	mov	r1, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 fa12 	bl	80057d4 <xTaskCheckForTimeOut>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d124      	bne.n	8004400 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043b8:	f000 faa6 	bl	8004908 <prvIsQueueFull>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d018      	beq.n	80043f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	3310      	adds	r3, #16
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 f936 	bl	800563c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043d2:	f000 fa31 	bl	8004838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043d6:	f000 ff63 	bl	80052a0 <xTaskResumeAll>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f47f af7c 	bne.w	80042da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80043e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004414 <xQueueGenericSend+0x200>)
 80043e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	e772      	b.n	80042da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043f6:	f000 fa1f 	bl	8004838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043fa:	f000 ff51 	bl	80052a0 <xTaskResumeAll>
 80043fe:	e76c      	b.n	80042da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004402:	f000 fa19 	bl	8004838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004406:	f000 ff4b 	bl	80052a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800440a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800440c:	4618      	mov	r0, r3
 800440e:	3738      	adds	r7, #56	@ 0x38
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b090      	sub	sp, #64	@ 0x40
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800442a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <xQueueGenericSendFromISR+0x3e>
 800444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <xQueueGenericSendFromISR+0x42>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueGenericSendFromISR+0x44>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d103      	bne.n	8004486 <xQueueGenericSendFromISR+0x6e>
 800447e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <xQueueGenericSendFromISR+0x72>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xQueueGenericSendFromISR+0x74>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	623b      	str	r3, [r7, #32]
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044a8:	f002 f92e 	bl	8006708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044ac:	f3ef 8211 	mrs	r2, BASEPRI
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	61fa      	str	r2, [r7, #28]
 80044c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <xQueueGenericSendFromISR+0xc2>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d12f      	bne.n	800453a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80044f0:	f000 f912 	bl	8004718 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044fc:	d112      	bne.n	8004524 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004508:	3324      	adds	r3, #36	@ 0x24
 800450a:	4618      	mov	r0, r3
 800450c:	f001 f8e8 	bl	80056e0 <xTaskRemoveFromEventList>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00b      	beq.n	8004534 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e007      	b.n	8004534 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004524:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004528:	3301      	adds	r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	b25a      	sxtb	r2, r3
 800452e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004534:	2301      	movs	r3, #1
 8004536:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004538:	e001      	b.n	800453e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800453a:	2300      	movs	r3, #0
 800453c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800453e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004540:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004548:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800454a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800454c:	4618      	mov	r0, r3
 800454e:	3740      	adds	r7, #64	@ 0x40
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08c      	sub	sp, #48	@ 0x30
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <xQueueReceive+0x32>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	623b      	str	r3, [r7, #32]
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	e7fd      	b.n	8004582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <xQueueReceive+0x40>
 800458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <xQueueReceive+0x44>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <xQueueReceive+0x46>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <xQueueReceive+0x62>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	61fb      	str	r3, [r7, #28]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045b6:	f001 fa59 	bl	8005a6c <xTaskGetSchedulerState>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <xQueueReceive+0x72>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <xQueueReceive+0x76>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <xQueueReceive+0x78>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <xQueueReceive+0x94>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	61bb      	str	r3, [r7, #24]
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045e8:	f001 ffae 	bl	8006548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01f      	beq.n	8004638 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045fc:	f000 f8f6 	bl	80047ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	1e5a      	subs	r2, r3, #1
 8004604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00f      	beq.n	8004630 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	3310      	adds	r3, #16
 8004614:	4618      	mov	r0, r3
 8004616:	f001 f863 	bl	80056e0 <xTaskRemoveFromEventList>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004620:	4b3c      	ldr	r3, [pc, #240]	@ (8004714 <xQueueReceive+0x1c0>)
 8004622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004630:	f001 ffbc 	bl	80065ac <vPortExitCritical>
				return pdPASS;
 8004634:	2301      	movs	r3, #1
 8004636:	e069      	b.n	800470c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800463e:	f001 ffb5 	bl	80065ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004642:	2300      	movs	r3, #0
 8004644:	e062      	b.n	800470c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800464c:	f107 0310 	add.w	r3, r7, #16
 8004650:	4618      	mov	r0, r3
 8004652:	f001 f8a9 	bl	80057a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800465a:	f001 ffa7 	bl	80065ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800465e:	f000 fe11 	bl	8005284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004662:	f001 ff71 	bl	8006548 <vPortEnterCritical>
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800466c:	b25b      	sxtb	r3, r3
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004672:	d103      	bne.n	800467c <xQueueReceive+0x128>
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004682:	b25b      	sxtb	r3, r3
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004688:	d103      	bne.n	8004692 <xQueueReceive+0x13e>
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004692:	f001 ff8b 	bl	80065ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004696:	1d3a      	adds	r2, r7, #4
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 f898 	bl	80057d4 <xTaskCheckForTimeOut>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d123      	bne.n	80046f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046ac:	f000 f916 	bl	80048dc <prvIsQueueEmpty>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d017      	beq.n	80046e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	3324      	adds	r3, #36	@ 0x24
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 ffbc 	bl	800563c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046c6:	f000 f8b7 	bl	8004838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046ca:	f000 fde9 	bl	80052a0 <xTaskResumeAll>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d189      	bne.n	80045e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80046d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004714 <xQueueReceive+0x1c0>)
 80046d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	e780      	b.n	80045e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046e8:	f000 f8a6 	bl	8004838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ec:	f000 fdd8 	bl	80052a0 <xTaskResumeAll>
 80046f0:	e77a      	b.n	80045e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046f4:	f000 f8a0 	bl	8004838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046f8:	f000 fdd2 	bl	80052a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046fe:	f000 f8ed 	bl	80048dc <prvIsQueueEmpty>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	f43f af6f 	beq.w	80045e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800470a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800470c:	4618      	mov	r0, r3
 800470e:	3730      	adds	r7, #48	@ 0x30
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d14d      	bne.n	80047da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f001 f9b0 	bl	8005aa8 <xTaskPriorityDisinherit>
 8004748:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	e043      	b.n	80047da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d119      	bne.n	800478c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6858      	ldr	r0, [r3, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	461a      	mov	r2, r3
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	f002 fcdb 	bl	800711e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	441a      	add	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	429a      	cmp	r2, r3
 8004780:	d32b      	bcc.n	80047da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	e026      	b.n	80047da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68d8      	ldr	r0, [r3, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	461a      	mov	r2, r3
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	f002 fcc1 	bl	800711e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	425b      	negs	r3, r3
 80047a6:	441a      	add	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d207      	bcs.n	80047c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	425b      	negs	r3, r3
 80047c2:	441a      	add	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d105      	bne.n	80047da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80047e2:	697b      	ldr	r3, [r7, #20]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	441a      	add	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	d303      	bcc.n	8004820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68d9      	ldr	r1, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	461a      	mov	r2, r3
 800482a:	6838      	ldr	r0, [r7, #0]
 800482c:	f002 fc77 	bl	800711e <memcpy>
	}
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004840:	f001 fe82 	bl	8006548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800484a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800484c:	e011      	b.n	8004872 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	d012      	beq.n	800487c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3324      	adds	r3, #36	@ 0x24
 800485a:	4618      	mov	r0, r3
 800485c:	f000 ff40 	bl	80056e0 <xTaskRemoveFromEventList>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004866:	f001 f819 	bl	800589c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	3b01      	subs	r3, #1
 800486e:	b2db      	uxtb	r3, r3
 8004870:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004876:	2b00      	cmp	r3, #0
 8004878:	dce9      	bgt.n	800484e <prvUnlockQueue+0x16>
 800487a:	e000      	b.n	800487e <prvUnlockQueue+0x46>
					break;
 800487c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	22ff      	movs	r2, #255	@ 0xff
 8004882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004886:	f001 fe91 	bl	80065ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800488a:	f001 fe5d 	bl	8006548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004894:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004896:	e011      	b.n	80048bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d012      	beq.n	80048c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3310      	adds	r3, #16
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 ff1b 	bl	80056e0 <xTaskRemoveFromEventList>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048b0:	f000 fff4 	bl	800589c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048b4:	7bbb      	ldrb	r3, [r7, #14]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	dce9      	bgt.n	8004898 <prvUnlockQueue+0x60>
 80048c4:	e000      	b.n	80048c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	22ff      	movs	r2, #255	@ 0xff
 80048cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80048d0:	f001 fe6c 	bl	80065ac <vPortExitCritical>
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048e4:	f001 fe30 	bl	8006548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e001      	b.n	80048fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048fa:	f001 fe57 	bl	80065ac <vPortExitCritical>

	return xReturn;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004910:	f001 fe1a 	bl	8006548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	429a      	cmp	r2, r3
 800491e:	d102      	bne.n	8004926 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e001      	b.n	800492a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800492a:	f001 fe3f 	bl	80065ac <vPortExitCritical>

	return xReturn;
 800492e:	68fb      	ldr	r3, [r7, #12]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	e014      	b.n	8004972 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004948:	4a0f      	ldr	r2, [pc, #60]	@ (8004988 <vQueueAddToRegistry+0x50>)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004954:	490c      	ldr	r1, [pc, #48]	@ (8004988 <vQueueAddToRegistry+0x50>)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800495e:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <vQueueAddToRegistry+0x50>)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4413      	add	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800496a:	e006      	b.n	800497a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b07      	cmp	r3, #7
 8004976:	d9e7      	bls.n	8004948 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	200008c8 	.word	0x200008c8

0800498c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800499c:	f001 fdd4 	bl	8006548 <vPortEnterCritical>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049a6:	b25b      	sxtb	r3, r3
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ac:	d103      	bne.n	80049b6 <vQueueWaitForMessageRestricted+0x2a>
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049bc:	b25b      	sxtb	r3, r3
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049c2:	d103      	bne.n	80049cc <vQueueWaitForMessageRestricted+0x40>
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049cc:	f001 fdee 	bl	80065ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	3324      	adds	r3, #36	@ 0x24
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fe51 	bl	8005688 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f7ff ff26 	bl	8004838 <prvUnlockQueue>
	}
 80049ec:	bf00      	nop
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08e      	sub	sp, #56	@ 0x38
 80049f8:	af04      	add	r7, sp, #16
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	623b      	str	r3, [r7, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	61fb      	str	r3, [r7, #28]
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	e7fd      	b.n	8004a3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a3e:	23a8      	movs	r3, #168	@ 0xa8
 8004a40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2ba8      	cmp	r3, #168	@ 0xa8
 8004a46:	d00b      	beq.n	8004a60 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	61bb      	str	r3, [r7, #24]
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01e      	beq.n	8004aa6 <xTaskCreateStatic+0xb2>
 8004a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01b      	beq.n	8004aa6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a80:	2300      	movs	r3, #0
 8004a82:	9303      	str	r3, [sp, #12]
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	9302      	str	r3, [sp, #8]
 8004a88:	f107 0314 	add.w	r3, r7, #20
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f851 	bl	8004b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004aa0:	f000 f8f6 	bl	8004c90 <prvAddNewTaskToReadyList>
 8004aa4:	e001      	b.n	8004aaa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004aaa:	697b      	ldr	r3, [r7, #20]
	}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	@ 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	@ 0x30
 8004ab8:	af04      	add	r7, sp, #16
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fe5f 	bl	800678c <pvPortMalloc>
 8004ace:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00e      	beq.n	8004af4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ad6:	20a8      	movs	r0, #168	@ 0xa8
 8004ad8:	f001 fe58 	bl	800678c <pvPortMalloc>
 8004adc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004aea:	e005      	b.n	8004af8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004aec:	6978      	ldr	r0, [r7, #20]
 8004aee:	f001 ff1b 	bl	8006928 <vPortFree>
 8004af2:	e001      	b.n	8004af8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d017      	beq.n	8004b2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b06:	88fa      	ldrh	r2, [r7, #6]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9303      	str	r3, [sp, #12]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	9302      	str	r3, [sp, #8]
 8004b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f80f 	bl	8004b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b22:	69f8      	ldr	r0, [r7, #28]
 8004b24:	f000 f8b4 	bl	8004c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	e002      	b.n	8004b34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b34:	69bb      	ldr	r3, [r7, #24]
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	461a      	mov	r2, r3
 8004b58:	21a5      	movs	r1, #165	@ 0xa5
 8004b5a:	f002 fa0f 	bl	8006f7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	617b      	str	r3, [r7, #20]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01f      	beq.n	8004be0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e012      	b.n	8004bcc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	7819      	ldrb	r1, [r3, #0]
 8004bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3334      	adds	r3, #52	@ 0x34
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b0f      	cmp	r3, #15
 8004bd0:	d9e9      	bls.n	8004ba6 <prvInitialiseNewTask+0x66>
 8004bd2:	e000      	b.n	8004bd6 <prvInitialiseNewTask+0x96>
			{
				break;
 8004bd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bde:	e003      	b.n	8004be8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bea:	2b37      	cmp	r3, #55	@ 0x37
 8004bec:	d901      	bls.n	8004bf2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bee:	2337      	movs	r3, #55	@ 0x37
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	2200      	movs	r2, #0
 8004c02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f965 	bl	8003ed8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	3318      	adds	r3, #24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff f960 	bl	8003ed8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	3354      	adds	r3, #84	@ 0x54
 8004c42:	224c      	movs	r2, #76	@ 0x4c
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 f998 	bl	8006f7c <memset>
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c84 <prvInitialiseNewTask+0x144>)
 8004c50:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	4a0c      	ldr	r2, [pc, #48]	@ (8004c88 <prvInitialiseNewTask+0x148>)
 8004c56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c8c <prvInitialiseNewTask+0x14c>)
 8004c5c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	68f9      	ldr	r1, [r7, #12]
 8004c62:	69b8      	ldr	r0, [r7, #24]
 8004c64:	f001 fb3e 	bl	80062e4 <pxPortInitialiseStack>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c7a:	bf00      	nop
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20001b14 	.word	0x20001b14
 8004c88:	20001b7c 	.word	0x20001b7c
 8004c8c:	20001be4 	.word	0x20001be4

08004c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c98:	f001 fc56 	bl	8006548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d54 <prvAddNewTaskToReadyList+0xc4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d54 <prvAddNewTaskToReadyList+0xc4>)
 8004ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cae:	4a2a      	ldr	r2, [pc, #168]	@ (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cb4:	4b27      	ldr	r3, [pc, #156]	@ (8004d54 <prvAddNewTaskToReadyList+0xc4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d110      	bne.n	8004cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cbc:	f000 fe12 	bl	80058e4 <prvInitialiseTaskLists>
 8004cc0:	e00d      	b.n	8004cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cc2:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <prvAddNewTaskToReadyList+0xcc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cca:	4b23      	ldr	r3, [pc, #140]	@ (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d802      	bhi.n	8004cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <prvAddNewTaskToReadyList+0xd0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d60 <prvAddNewTaskToReadyList+0xd0>)
 8004ce6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <prvAddNewTaskToReadyList+0xd0>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <prvAddNewTaskToReadyList+0xd4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d903      	bls.n	8004d04 <prvAddNewTaskToReadyList+0x74>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <prvAddNewTaskToReadyList+0xd4>)
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4a15      	ldr	r2, [pc, #84]	@ (8004d68 <prvAddNewTaskToReadyList+0xd8>)
 8004d12:	441a      	add	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f7ff f8e9 	bl	8003ef2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d20:	f001 fc44 	bl	80065ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d24:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <prvAddNewTaskToReadyList+0xcc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00e      	beq.n	8004d4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d207      	bcs.n	8004d4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <prvAddNewTaskToReadyList+0xdc>)
 8004d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000ddc 	.word	0x20000ddc
 8004d58:	20000908 	.word	0x20000908
 8004d5c:	20000de8 	.word	0x20000de8
 8004d60:	20000df8 	.word	0x20000df8
 8004d64:	20000de4 	.word	0x20000de4
 8004d68:	2000090c 	.word	0x2000090c
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004d78:	f001 fbe6 	bl	8006548 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <vTaskDelete+0x18>
 8004d82:	4b2d      	ldr	r3, [pc, #180]	@ (8004e38 <vTaskDelete+0xc8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	e000      	b.n	8004d8a <vTaskDelete+0x1a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff f90b 	bl	8003fac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3318      	adds	r3, #24
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff f902 	bl	8003fac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004da8:	4b24      	ldr	r3, [pc, #144]	@ (8004e3c <vTaskDelete+0xcc>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	4a23      	ldr	r2, [pc, #140]	@ (8004e3c <vTaskDelete+0xcc>)
 8004db0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004db2:	4b21      	ldr	r3, [pc, #132]	@ (8004e38 <vTaskDelete+0xc8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d10b      	bne.n	8004dd4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	481f      	ldr	r0, [pc, #124]	@ (8004e40 <vTaskDelete+0xd0>)
 8004dc4:	f7ff f895 	bl	8003ef2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <vTaskDelete+0xd4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <vTaskDelete+0xd4>)
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e009      	b.n	8004de8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e48 <vTaskDelete+0xd8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	4a1b      	ldr	r2, [pc, #108]	@ (8004e48 <vTaskDelete+0xd8>)
 8004ddc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fdee 	bl	80059c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004de4:	f000 fe22 	bl	8005a2c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004de8:	f001 fbe0 	bl	80065ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004dec:	4b17      	ldr	r3, [pc, #92]	@ (8004e4c <vTaskDelete+0xdc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01c      	beq.n	8004e2e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8004df4:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <vTaskDelete+0xc8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d117      	bne.n	8004e2e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004dfe:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <vTaskDelete+0xe0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <vTaskDelete+0xae>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60bb      	str	r3, [r7, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <vTaskDelete+0xe4>)
 8004e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000908 	.word	0x20000908
 8004e3c:	20000df8 	.word	0x20000df8
 8004e40:	20000db0 	.word	0x20000db0
 8004e44:	20000dc4 	.word	0x20000dc4
 8004e48:	20000ddc 	.word	0x20000ddc
 8004e4c:	20000de8 	.word	0x20000de8
 8004e50:	20000e04 	.word	0x20000e04
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d018      	beq.n	8004e9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e6a:	4b14      	ldr	r3, [pc, #80]	@ (8004ebc <vTaskDelay+0x64>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00b      	beq.n	8004e8a <vTaskDelay+0x32>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	60bb      	str	r3, [r7, #8]
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	e7fd      	b.n	8004e86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e8a:	f000 f9fb 	bl	8005284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e8e:	2100      	movs	r1, #0
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fe79 	bl	8005b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e96:	f000 fa03 	bl	80052a0 <xTaskResumeAll>
 8004e9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d107      	bne.n	8004eb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ea2:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <vTaskDelay+0x68>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000e04 	.word	0x20000e04
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <eTaskGetState+0x2a>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60bb      	str	r3, [r7, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004eee:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <eTaskGetState+0xbc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d102      	bne.n	8004efe <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e03a      	b.n	8004f74 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8004efe:	f001 fb23 	bl	8006548 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004f08:	4b1e      	ldr	r3, [pc, #120]	@ (8004f84 <eTaskGetState+0xc0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <eTaskGetState+0xc4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004f14:	f001 fb4a 	bl	80065ac <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d003      	beq.n	8004f28 <eTaskGetState+0x64>
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d102      	bne.n	8004f2e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e022      	b.n	8004f74 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	4a16      	ldr	r2, [pc, #88]	@ (8004f8c <eTaskGetState+0xc8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d112      	bne.n	8004f5c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d102      	bne.n	8004f50 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e011      	b.n	8004f74 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8004f50:	2303      	movs	r3, #3
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e00e      	b.n	8004f74 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004f56:	2302      	movs	r3, #2
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e00b      	b.n	8004f74 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f90 <eTaskGetState+0xcc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d002      	beq.n	8004f6a <eTaskGetState+0xa6>
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004f6a:	2304      	movs	r3, #4
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e001      	b.n	8004f74 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004f70:	2301      	movs	r3, #1
 8004f72:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004f74:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000908 	.word	0x20000908
 8004f84:	20000d94 	.word	0x20000d94
 8004f88:	20000d98 	.word	0x20000d98
 8004f8c:	20000dc8 	.word	0x20000dc8
 8004f90:	20000db0 	.word	0x20000db0

08004f94 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004f9c:	f001 fad4 	bl	8006548 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <vTaskSuspend+0x18>
 8004fa6:	4b30      	ldr	r3, [pc, #192]	@ (8005068 <vTaskSuspend+0xd4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	e000      	b.n	8004fae <vTaskSuspend+0x1a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe fff9 	bl	8003fac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d004      	beq.n	8004fcc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fff0 	bl	8003fac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4826      	ldr	r0, [pc, #152]	@ (800506c <vTaskSuspend+0xd8>)
 8004fd4:	f7fe ff8d 	bl	8003ef2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d103      	bne.n	8004fec <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004fec:	f001 fade 	bl	80065ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8005070 <vTaskSuspend+0xdc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004ff8:	f001 faa6 	bl	8006548 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004ffc:	f000 fd16 	bl	8005a2c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005000:	f001 fad4 	bl	80065ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005004:	4b18      	ldr	r3, [pc, #96]	@ (8005068 <vTaskSuspend+0xd4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	429a      	cmp	r2, r3
 800500c:	d128      	bne.n	8005060 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800500e:	4b18      	ldr	r3, [pc, #96]	@ (8005070 <vTaskSuspend+0xdc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d018      	beq.n	8005048 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005016:	4b17      	ldr	r3, [pc, #92]	@ (8005074 <vTaskSuspend+0xe0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <vTaskSuspend+0xa2>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60bb      	str	r3, [r7, #8]
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	e7fd      	b.n	8005032 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005036:	4b10      	ldr	r3, [pc, #64]	@ (8005078 <vTaskSuspend+0xe4>)
 8005038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005046:	e00b      	b.n	8005060 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005048:	4b08      	ldr	r3, [pc, #32]	@ (800506c <vTaskSuspend+0xd8>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <vTaskSuspend+0xe8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d103      	bne.n	800505c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8005054:	4b04      	ldr	r3, [pc, #16]	@ (8005068 <vTaskSuspend+0xd4>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
	}
 800505a:	e001      	b.n	8005060 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800505c:	f000 fa88 	bl	8005570 <vTaskSwitchContext>
	}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000908 	.word	0x20000908
 800506c:	20000dc8 	.word	0x20000dc8
 8005070:	20000de8 	.word	0x20000de8
 8005074:	20000e04 	.word	0x20000e04
 8005078:	e000ed04 	.word	0xe000ed04
 800507c:	20000ddc 	.word	0x20000ddc

08005080 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60fb      	str	r3, [r7, #12]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	4a0a      	ldr	r2, [pc, #40]	@ (80050dc <prvTaskIsTaskSuspended+0x5c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10a      	bne.n	80050ce <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	4a08      	ldr	r2, [pc, #32]	@ (80050e0 <prvTaskIsTaskSuspended+0x60>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d005      	beq.n	80050ce <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050ce:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80050d0:	4618      	mov	r0, r3
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000dc8 	.word	0x20000dc8
 80050e0:	20000d9c 	.word	0x20000d9c

080050e4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <vTaskResume+0x2a>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60bb      	str	r3, [r7, #8]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800510e:	4b21      	ldr	r3, [pc, #132]	@ (8005194 <vTaskResume+0xb0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	429a      	cmp	r2, r3
 8005116:	d038      	beq.n	800518a <vTaskResume+0xa6>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d035      	beq.n	800518a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800511e:	f001 fa13 	bl	8006548 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff ffac 	bl	8005080 <prvTaskIsTaskSuspended>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d02b      	beq.n	8005186 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe ff3a 	bl	8003fac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513c:	4b16      	ldr	r3, [pc, #88]	@ (8005198 <vTaskResume+0xb4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d903      	bls.n	800514c <vTaskResume+0x68>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005148:	4a13      	ldr	r2, [pc, #76]	@ (8005198 <vTaskResume+0xb4>)
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4a10      	ldr	r2, [pc, #64]	@ (800519c <vTaskResume+0xb8>)
 800515a:	441a      	add	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7fe fec5 	bl	8003ef2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516c:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <vTaskResume+0xb0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	429a      	cmp	r2, r3
 8005174:	d307      	bcc.n	8005186 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005176:	4b0a      	ldr	r3, [pc, #40]	@ (80051a0 <vTaskResume+0xbc>)
 8005178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005186:	f001 fa11 	bl	80065ac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800518a:	bf00      	nop
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000908 	.word	0x20000908
 8005198:	20000de4 	.word	0x20000de4
 800519c:	2000090c 	.word	0x2000090c
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	@ 0x28
 80051a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051b2:	463a      	mov	r2, r7
 80051b4:	1d39      	adds	r1, r7, #4
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fe38 	bl	8003e30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	9202      	str	r2, [sp, #8]
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	2300      	movs	r3, #0
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	2300      	movs	r3, #0
 80051d0:	460a      	mov	r2, r1
 80051d2:	4924      	ldr	r1, [pc, #144]	@ (8005264 <vTaskStartScheduler+0xc0>)
 80051d4:	4824      	ldr	r0, [pc, #144]	@ (8005268 <vTaskStartScheduler+0xc4>)
 80051d6:	f7ff fc0d 	bl	80049f4 <xTaskCreateStatic>
 80051da:	4603      	mov	r3, r0
 80051dc:	4a23      	ldr	r2, [pc, #140]	@ (800526c <vTaskStartScheduler+0xc8>)
 80051de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051e0:	4b22      	ldr	r3, [pc, #136]	@ (800526c <vTaskStartScheduler+0xc8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e001      	b.n	80051f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d102      	bne.n	80051fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051f8:	f000 fd1a 	bl	8005c30 <xTimerCreateTimerTask>
 80051fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d11b      	bne.n	800523c <vTaskStartScheduler+0x98>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	613b      	str	r3, [r7, #16]
}
 8005216:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005218:	4b15      	ldr	r3, [pc, #84]	@ (8005270 <vTaskStartScheduler+0xcc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3354      	adds	r3, #84	@ 0x54
 800521e:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <vTaskStartScheduler+0xd0>)
 8005220:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005222:	4b15      	ldr	r3, [pc, #84]	@ (8005278 <vTaskStartScheduler+0xd4>)
 8005224:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800522a:	4b14      	ldr	r3, [pc, #80]	@ (800527c <vTaskStartScheduler+0xd8>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005230:	4b13      	ldr	r3, [pc, #76]	@ (8005280 <vTaskStartScheduler+0xdc>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005236:	f001 f8e3 	bl	8006400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800523a:	e00f      	b.n	800525c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005242:	d10b      	bne.n	800525c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <vTaskStartScheduler+0xb4>
}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	08007ca8 	.word	0x08007ca8
 8005268:	080058b5 	.word	0x080058b5
 800526c:	20000e00 	.word	0x20000e00
 8005270:	20000908 	.word	0x20000908
 8005274:	2000001c 	.word	0x2000001c
 8005278:	20000dfc 	.word	0x20000dfc
 800527c:	20000de8 	.word	0x20000de8
 8005280:	20000de0 	.word	0x20000de0

08005284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005288:	4b04      	ldr	r3, [pc, #16]	@ (800529c <vTaskSuspendAll+0x18>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	4a03      	ldr	r2, [pc, #12]	@ (800529c <vTaskSuspendAll+0x18>)
 8005290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	20000e04 	.word	0x20000e04

080052a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052ae:	4b42      	ldr	r3, [pc, #264]	@ (80053b8 <xTaskResumeAll+0x118>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <xTaskResumeAll+0x2e>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	603b      	str	r3, [r7, #0]
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052ce:	f001 f93b 	bl	8006548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052d2:	4b39      	ldr	r3, [pc, #228]	@ (80053b8 <xTaskResumeAll+0x118>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	4a37      	ldr	r2, [pc, #220]	@ (80053b8 <xTaskResumeAll+0x118>)
 80052da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052dc:	4b36      	ldr	r3, [pc, #216]	@ (80053b8 <xTaskResumeAll+0x118>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d162      	bne.n	80053aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052e4:	4b35      	ldr	r3, [pc, #212]	@ (80053bc <xTaskResumeAll+0x11c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d05e      	beq.n	80053aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ec:	e02f      	b.n	800534e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ee:	4b34      	ldr	r3, [pc, #208]	@ (80053c0 <xTaskResumeAll+0x120>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3318      	adds	r3, #24
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fe56 	bl	8003fac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3304      	adds	r3, #4
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe fe51 	bl	8003fac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530e:	4b2d      	ldr	r3, [pc, #180]	@ (80053c4 <xTaskResumeAll+0x124>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d903      	bls.n	800531e <xTaskResumeAll+0x7e>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531a:	4a2a      	ldr	r2, [pc, #168]	@ (80053c4 <xTaskResumeAll+0x124>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <xTaskResumeAll+0x128>)
 800532c:	441a      	add	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7fe fddc 	bl	8003ef2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533e:	4b23      	ldr	r3, [pc, #140]	@ (80053cc <xTaskResumeAll+0x12c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	429a      	cmp	r2, r3
 8005346:	d302      	bcc.n	800534e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005348:	4b21      	ldr	r3, [pc, #132]	@ (80053d0 <xTaskResumeAll+0x130>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800534e:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <xTaskResumeAll+0x120>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1cb      	bne.n	80052ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800535c:	f000 fb66 	bl	8005a2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005360:	4b1c      	ldr	r3, [pc, #112]	@ (80053d4 <xTaskResumeAll+0x134>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800536c:	f000 f846 	bl	80053fc <xTaskIncrementTick>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005376:	4b16      	ldr	r3, [pc, #88]	@ (80053d0 <xTaskResumeAll+0x130>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f1      	bne.n	800536c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005388:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <xTaskResumeAll+0x134>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800538e:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <xTaskResumeAll+0x130>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005396:	2301      	movs	r3, #1
 8005398:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800539a:	4b0f      	ldr	r3, [pc, #60]	@ (80053d8 <xTaskResumeAll+0x138>)
 800539c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053aa:	f001 f8ff 	bl	80065ac <vPortExitCritical>

	return xAlreadyYielded;
 80053ae:	68bb      	ldr	r3, [r7, #8]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000e04 	.word	0x20000e04
 80053bc:	20000ddc 	.word	0x20000ddc
 80053c0:	20000d9c 	.word	0x20000d9c
 80053c4:	20000de4 	.word	0x20000de4
 80053c8:	2000090c 	.word	0x2000090c
 80053cc:	20000908 	.word	0x20000908
 80053d0:	20000df0 	.word	0x20000df0
 80053d4:	20000dec 	.word	0x20000dec
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053e2:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <xTaskGetTickCount+0x1c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053e8:	687b      	ldr	r3, [r7, #4]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000de0 	.word	0x20000de0

080053fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005406:	4b4f      	ldr	r3, [pc, #316]	@ (8005544 <xTaskIncrementTick+0x148>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 8090 	bne.w	8005530 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005410:	4b4d      	ldr	r3, [pc, #308]	@ (8005548 <xTaskIncrementTick+0x14c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005418:	4a4b      	ldr	r2, [pc, #300]	@ (8005548 <xTaskIncrementTick+0x14c>)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d121      	bne.n	8005468 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005424:	4b49      	ldr	r3, [pc, #292]	@ (800554c <xTaskIncrementTick+0x150>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <xTaskIncrementTick+0x4a>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	603b      	str	r3, [r7, #0]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <xTaskIncrementTick+0x46>
 8005446:	4b41      	ldr	r3, [pc, #260]	@ (800554c <xTaskIncrementTick+0x150>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	4b40      	ldr	r3, [pc, #256]	@ (8005550 <xTaskIncrementTick+0x154>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3e      	ldr	r2, [pc, #248]	@ (800554c <xTaskIncrementTick+0x150>)
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	4a3e      	ldr	r2, [pc, #248]	@ (8005550 <xTaskIncrementTick+0x154>)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	4b3e      	ldr	r3, [pc, #248]	@ (8005554 <xTaskIncrementTick+0x158>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	4a3c      	ldr	r2, [pc, #240]	@ (8005554 <xTaskIncrementTick+0x158>)
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	f000 fae2 	bl	8005a2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005468:	4b3b      	ldr	r3, [pc, #236]	@ (8005558 <xTaskIncrementTick+0x15c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	429a      	cmp	r2, r3
 8005470:	d349      	bcc.n	8005506 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005472:	4b36      	ldr	r3, [pc, #216]	@ (800554c <xTaskIncrementTick+0x150>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d104      	bne.n	8005486 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547c:	4b36      	ldr	r3, [pc, #216]	@ (8005558 <xTaskIncrementTick+0x15c>)
 800547e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005482:	601a      	str	r2, [r3, #0]
					break;
 8005484:	e03f      	b.n	8005506 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005486:	4b31      	ldr	r3, [pc, #196]	@ (800554c <xTaskIncrementTick+0x150>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d203      	bcs.n	80054a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800549e:	4a2e      	ldr	r2, [pc, #184]	@ (8005558 <xTaskIncrementTick+0x15c>)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054a4:	e02f      	b.n	8005506 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	3304      	adds	r3, #4
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fd7e 	bl	8003fac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d004      	beq.n	80054c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	3318      	adds	r3, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe fd75 	bl	8003fac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	4b25      	ldr	r3, [pc, #148]	@ (800555c <xTaskIncrementTick+0x160>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d903      	bls.n	80054d6 <xTaskIncrementTick+0xda>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	4a22      	ldr	r2, [pc, #136]	@ (800555c <xTaskIncrementTick+0x160>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005560 <xTaskIncrementTick+0x164>)
 80054e4:	441a      	add	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7fe fd00 	bl	8003ef2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <xTaskIncrementTick+0x168>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3b8      	bcc.n	8005472 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005504:	e7b5      	b.n	8005472 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005506:	4b17      	ldr	r3, [pc, #92]	@ (8005564 <xTaskIncrementTick+0x168>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550c:	4914      	ldr	r1, [pc, #80]	@ (8005560 <xTaskIncrementTick+0x164>)
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d901      	bls.n	8005522 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005522:	4b11      	ldr	r3, [pc, #68]	@ (8005568 <xTaskIncrementTick+0x16c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e004      	b.n	800553a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005530:	4b0e      	ldr	r3, [pc, #56]	@ (800556c <xTaskIncrementTick+0x170>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	4a0d      	ldr	r2, [pc, #52]	@ (800556c <xTaskIncrementTick+0x170>)
 8005538:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800553a:	697b      	ldr	r3, [r7, #20]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000e04 	.word	0x20000e04
 8005548:	20000de0 	.word	0x20000de0
 800554c:	20000d94 	.word	0x20000d94
 8005550:	20000d98 	.word	0x20000d98
 8005554:	20000df4 	.word	0x20000df4
 8005558:	20000dfc 	.word	0x20000dfc
 800555c:	20000de4 	.word	0x20000de4
 8005560:	2000090c 	.word	0x2000090c
 8005564:	20000908 	.word	0x20000908
 8005568:	20000df0 	.word	0x20000df0
 800556c:	20000dec 	.word	0x20000dec

08005570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005576:	4b2b      	ldr	r3, [pc, #172]	@ (8005624 <vTaskSwitchContext+0xb4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800557e:	4b2a      	ldr	r3, [pc, #168]	@ (8005628 <vTaskSwitchContext+0xb8>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005584:	e047      	b.n	8005616 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005586:	4b28      	ldr	r3, [pc, #160]	@ (8005628 <vTaskSwitchContext+0xb8>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558c:	4b27      	ldr	r3, [pc, #156]	@ (800562c <vTaskSwitchContext+0xbc>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e011      	b.n	80055b8 <vTaskSwitchContext+0x48>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	607b      	str	r3, [r7, #4]
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <vTaskSwitchContext+0x3e>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	491d      	ldr	r1, [pc, #116]	@ (8005630 <vTaskSwitchContext+0xc0>)
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0e3      	beq.n	8005594 <vTaskSwitchContext+0x24>
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <vTaskSwitchContext+0xc0>)
 80055d8:	4413      	add	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	3308      	adds	r3, #8
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d104      	bne.n	80055fc <vTaskSwitchContext+0x8c>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	4a0c      	ldr	r2, [pc, #48]	@ (8005634 <vTaskSwitchContext+0xc4>)
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4a09      	ldr	r2, [pc, #36]	@ (800562c <vTaskSwitchContext+0xbc>)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800560c:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <vTaskSwitchContext+0xc4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3354      	adds	r3, #84	@ 0x54
 8005612:	4a09      	ldr	r2, [pc, #36]	@ (8005638 <vTaskSwitchContext+0xc8>)
 8005614:	6013      	str	r3, [r2, #0]
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000e04 	.word	0x20000e04
 8005628:	20000df0 	.word	0x20000df0
 800562c:	20000de4 	.word	0x20000de4
 8005630:	2000090c 	.word	0x2000090c
 8005634:	20000908 	.word	0x20000908
 8005638:	2000001c 	.word	0x2000001c

0800563c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60fb      	str	r3, [r7, #12]
}
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005664:	4b07      	ldr	r3, [pc, #28]	@ (8005684 <vTaskPlaceOnEventList+0x48>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3318      	adds	r3, #24
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7fe fc64 	bl	8003f3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005672:	2101      	movs	r1, #1
 8005674:	6838      	ldr	r0, [r7, #0]
 8005676:	f000 fa87 	bl	8005b88 <prvAddCurrentTaskToDelayedList>
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000908 	.word	0x20000908

08005688 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	617b      	str	r3, [r7, #20]
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	e7fd      	b.n	80056ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056b2:	4b0a      	ldr	r3, [pc, #40]	@ (80056dc <vTaskPlaceOnEventListRestricted+0x54>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3318      	adds	r3, #24
 80056b8:	4619      	mov	r1, r3
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7fe fc19 	bl	8003ef2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	68b8      	ldr	r0, [r7, #8]
 80056d0:	f000 fa5a 	bl	8005b88 <prvAddCurrentTaskToDelayedList>
	}
 80056d4:	bf00      	nop
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000908 	.word	0x20000908

080056e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60fb      	str	r3, [r7, #12]
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	e7fd      	b.n	800570a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3318      	adds	r3, #24
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fc4a 	bl	8003fac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005718:	4b1d      	ldr	r3, [pc, #116]	@ (8005790 <xTaskRemoveFromEventList+0xb0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11d      	bne.n	800575c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	3304      	adds	r3, #4
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe fc41 	bl	8003fac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572e:	4b19      	ldr	r3, [pc, #100]	@ (8005794 <xTaskRemoveFromEventList+0xb4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d903      	bls.n	800573e <xTaskRemoveFromEventList+0x5e>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	4a16      	ldr	r2, [pc, #88]	@ (8005794 <xTaskRemoveFromEventList+0xb4>)
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4a13      	ldr	r2, [pc, #76]	@ (8005798 <xTaskRemoveFromEventList+0xb8>)
 800574c:	441a      	add	r2, r3
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3304      	adds	r3, #4
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f7fe fbcc 	bl	8003ef2 <vListInsertEnd>
 800575a:	e005      	b.n	8005768 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	3318      	adds	r3, #24
 8005760:	4619      	mov	r1, r3
 8005762:	480e      	ldr	r0, [pc, #56]	@ (800579c <xTaskRemoveFromEventList+0xbc>)
 8005764:	f7fe fbc5 	bl	8003ef2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576c:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <xTaskRemoveFromEventList+0xc0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	429a      	cmp	r2, r3
 8005774:	d905      	bls.n	8005782 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005776:	2301      	movs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800577a:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <xTaskRemoveFromEventList+0xc4>)
 800577c:	2201      	movs	r2, #1
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e001      	b.n	8005786 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005786:	697b      	ldr	r3, [r7, #20]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20000e04 	.word	0x20000e04
 8005794:	20000de4 	.word	0x20000de4
 8005798:	2000090c 	.word	0x2000090c
 800579c:	20000d9c 	.word	0x20000d9c
 80057a0:	20000908 	.word	0x20000908
 80057a4:	20000df0 	.word	0x20000df0

080057a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <vTaskInternalSetTimeOutState+0x24>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <vTaskInternalSetTimeOutState+0x28>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	605a      	str	r2, [r3, #4]
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000df4 	.word	0x20000df4
 80057d0:	20000de0 	.word	0x20000de0

080057d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	613b      	str	r3, [r7, #16]
}
 80057f6:	bf00      	nop
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	60fb      	str	r3, [r7, #12]
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	e7fd      	b.n	8005816 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800581a:	f000 fe95 	bl	8006548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800581e:	4b1d      	ldr	r3, [pc, #116]	@ (8005894 <xTaskCheckForTimeOut+0xc0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005836:	d102      	bne.n	800583e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e023      	b.n	8005886 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4b15      	ldr	r3, [pc, #84]	@ (8005898 <xTaskCheckForTimeOut+0xc4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d007      	beq.n	800585a <xTaskCheckForTimeOut+0x86>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	429a      	cmp	r2, r3
 8005852:	d302      	bcc.n	800585a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	e015      	b.n	8005886 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	429a      	cmp	r2, r3
 8005862:	d20b      	bcs.n	800587c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff ff99 	bl	80057a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
 800587a:	e004      	b.n	8005886 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005882:	2301      	movs	r3, #1
 8005884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005886:	f000 fe91 	bl	80065ac <vPortExitCritical>

	return xReturn;
 800588a:	69fb      	ldr	r3, [r7, #28]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000de0 	.word	0x20000de0
 8005898:	20000df4 	.word	0x20000df4

0800589c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058a0:	4b03      	ldr	r3, [pc, #12]	@ (80058b0 <vTaskMissedYield+0x14>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
}
 80058a6:	bf00      	nop
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000df0 	.word	0x20000df0

080058b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058bc:	f000 f852 	bl	8005964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058c0:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <prvIdleTask+0x28>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d9f9      	bls.n	80058bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80058c8:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <prvIdleTask+0x2c>)
 80058ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058d8:	e7f0      	b.n	80058bc <prvIdleTask+0x8>
 80058da:	bf00      	nop
 80058dc:	2000090c 	.word	0x2000090c
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ea:	2300      	movs	r3, #0
 80058ec:	607b      	str	r3, [r7, #4]
 80058ee:	e00c      	b.n	800590a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4a12      	ldr	r2, [pc, #72]	@ (8005944 <prvInitialiseTaskLists+0x60>)
 80058fc:	4413      	add	r3, r2
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe faca 	bl	8003e98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3301      	adds	r3, #1
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b37      	cmp	r3, #55	@ 0x37
 800590e:	d9ef      	bls.n	80058f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005910:	480d      	ldr	r0, [pc, #52]	@ (8005948 <prvInitialiseTaskLists+0x64>)
 8005912:	f7fe fac1 	bl	8003e98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005916:	480d      	ldr	r0, [pc, #52]	@ (800594c <prvInitialiseTaskLists+0x68>)
 8005918:	f7fe fabe 	bl	8003e98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800591c:	480c      	ldr	r0, [pc, #48]	@ (8005950 <prvInitialiseTaskLists+0x6c>)
 800591e:	f7fe fabb 	bl	8003e98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005922:	480c      	ldr	r0, [pc, #48]	@ (8005954 <prvInitialiseTaskLists+0x70>)
 8005924:	f7fe fab8 	bl	8003e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005928:	480b      	ldr	r0, [pc, #44]	@ (8005958 <prvInitialiseTaskLists+0x74>)
 800592a:	f7fe fab5 	bl	8003e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800592e:	4b0b      	ldr	r3, [pc, #44]	@ (800595c <prvInitialiseTaskLists+0x78>)
 8005930:	4a05      	ldr	r2, [pc, #20]	@ (8005948 <prvInitialiseTaskLists+0x64>)
 8005932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005934:	4b0a      	ldr	r3, [pc, #40]	@ (8005960 <prvInitialiseTaskLists+0x7c>)
 8005936:	4a05      	ldr	r2, [pc, #20]	@ (800594c <prvInitialiseTaskLists+0x68>)
 8005938:	601a      	str	r2, [r3, #0]
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	2000090c 	.word	0x2000090c
 8005948:	20000d6c 	.word	0x20000d6c
 800594c:	20000d80 	.word	0x20000d80
 8005950:	20000d9c 	.word	0x20000d9c
 8005954:	20000db0 	.word	0x20000db0
 8005958:	20000dc8 	.word	0x20000dc8
 800595c:	20000d94 	.word	0x20000d94
 8005960:	20000d98 	.word	0x20000d98

08005964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800596a:	e019      	b.n	80059a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800596c:	f000 fdec 	bl	8006548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005970:	4b10      	ldr	r3, [pc, #64]	@ (80059b4 <prvCheckTasksWaitingTermination+0x50>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3304      	adds	r3, #4
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe fb15 	bl	8003fac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005982:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <prvCheckTasksWaitingTermination+0x54>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3b01      	subs	r3, #1
 8005988:	4a0b      	ldr	r2, [pc, #44]	@ (80059b8 <prvCheckTasksWaitingTermination+0x54>)
 800598a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800598c:	4b0b      	ldr	r3, [pc, #44]	@ (80059bc <prvCheckTasksWaitingTermination+0x58>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3b01      	subs	r3, #1
 8005992:	4a0a      	ldr	r2, [pc, #40]	@ (80059bc <prvCheckTasksWaitingTermination+0x58>)
 8005994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005996:	f000 fe09 	bl	80065ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f810 	bl	80059c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059a0:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <prvCheckTasksWaitingTermination+0x58>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e1      	bne.n	800596c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000db0 	.word	0x20000db0
 80059b8:	20000ddc 	.word	0x20000ddc
 80059bc:	20000dc4 	.word	0x20000dc4

080059c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3354      	adds	r3, #84	@ 0x54
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 faed 	bl	8006fac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d108      	bne.n	80059ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 ffa1 	bl	8006928 <vPortFree>
				vPortFree( pxTCB );
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 ff9e 	bl	8006928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059ec:	e019      	b.n	8005a22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d103      	bne.n	8005a00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 ff95 	bl	8006928 <vPortFree>
	}
 80059fe:	e010      	b.n	8005a22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d00b      	beq.n	8005a22 <prvDeleteTCB+0x62>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	60fb      	str	r3, [r7, #12]
}
 8005a1c:	bf00      	nop
 8005a1e:	bf00      	nop
 8005a20:	e7fd      	b.n	8005a1e <prvDeleteTCB+0x5e>
	}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a32:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <prvResetNextTaskUnblockTime+0x38>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <prvResetNextTaskUnblockTime+0x3c>)
 8005a3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a44:	e008      	b.n	8005a58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a46:	4b07      	ldr	r3, [pc, #28]	@ (8005a64 <prvResetNextTaskUnblockTime+0x38>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4a04      	ldr	r2, [pc, #16]	@ (8005a68 <prvResetNextTaskUnblockTime+0x3c>)
 8005a56:	6013      	str	r3, [r2, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	20000d94 	.word	0x20000d94
 8005a68:	20000dfc 	.word	0x20000dfc

08005a6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a72:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <xTaskGetSchedulerState+0x34>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	e008      	b.n	8005a92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a80:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <xTaskGetSchedulerState+0x38>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	607b      	str	r3, [r7, #4]
 8005a8c:	e001      	b.n	8005a92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a92:	687b      	ldr	r3, [r7, #4]
	}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20000de8 	.word	0x20000de8
 8005aa4:	20000e04 	.word	0x20000e04

08005aa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d058      	beq.n	8005b70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005abe:	4b2f      	ldr	r3, [pc, #188]	@ (8005b7c <xTaskPriorityDisinherit+0xd4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d00b      	beq.n	8005ae0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	60fb      	str	r3, [r7, #12]
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	e7fd      	b.n	8005adc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10b      	bne.n	8005b00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	60bb      	str	r3, [r7, #8]
}
 8005afa:	bf00      	nop
 8005afc:	bf00      	nop
 8005afe:	e7fd      	b.n	8005afc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b04:	1e5a      	subs	r2, r3, #1
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d02c      	beq.n	8005b70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d128      	bne.n	8005b70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fa42 	bl	8003fac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b40:	4b0f      	ldr	r3, [pc, #60]	@ (8005b80 <xTaskPriorityDisinherit+0xd8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d903      	bls.n	8005b50 <xTaskPriorityDisinherit+0xa8>
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8005b80 <xTaskPriorityDisinherit+0xd8>)
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4a09      	ldr	r2, [pc, #36]	@ (8005b84 <xTaskPriorityDisinherit+0xdc>)
 8005b5e:	441a      	add	r2, r3
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7fe f9c3 	bl	8003ef2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b70:	697b      	ldr	r3, [r7, #20]
	}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000908 	.word	0x20000908
 8005b80:	20000de4 	.word	0x20000de4
 8005b84:	2000090c 	.word	0x2000090c

08005b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b92:	4b21      	ldr	r3, [pc, #132]	@ (8005c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b98:	4b20      	ldr	r3, [pc, #128]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fa04 	bl	8003fac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005baa:	d10a      	bne.n	8005bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4819      	ldr	r0, [pc, #100]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8005bbc:	f7fe f999 	bl	8003ef2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bc0:	e026      	b.n	8005c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bca:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d209      	bcs.n	8005bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bda:	4b12      	ldr	r3, [pc, #72]	@ (8005c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b0f      	ldr	r3, [pc, #60]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f7fe f9a7 	bl	8003f3a <vListInsert>
}
 8005bec:	e010      	b.n	8005c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bee:	4b0e      	ldr	r3, [pc, #56]	@ (8005c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f7fe f99d 	bl	8003f3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c00:	4b0a      	ldr	r3, [pc, #40]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d202      	bcs.n	8005c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c0a:	4a08      	ldr	r2, [pc, #32]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6013      	str	r3, [r2, #0]
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000de0 	.word	0x20000de0
 8005c1c:	20000908 	.word	0x20000908
 8005c20:	20000dc8 	.word	0x20000dc8
 8005c24:	20000d98 	.word	0x20000d98
 8005c28:	20000d94 	.word	0x20000d94
 8005c2c:	20000dfc 	.word	0x20000dfc

08005c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	@ 0x28
 8005c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c3a:	f000 fb13 	bl	8006264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb4 <xTimerCreateTimerTask+0x84>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d021      	beq.n	8005c8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c4e:	1d3a      	adds	r2, r7, #4
 8005c50:	f107 0108 	add.w	r1, r7, #8
 8005c54:	f107 030c 	add.w	r3, r7, #12
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe f903 	bl	8003e64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	9202      	str	r2, [sp, #8]
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	2302      	movs	r3, #2
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	460a      	mov	r2, r1
 8005c70:	4911      	ldr	r1, [pc, #68]	@ (8005cb8 <xTimerCreateTimerTask+0x88>)
 8005c72:	4812      	ldr	r0, [pc, #72]	@ (8005cbc <xTimerCreateTimerTask+0x8c>)
 8005c74:	f7fe febe 	bl	80049f4 <xTaskCreateStatic>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4a11      	ldr	r2, [pc, #68]	@ (8005cc0 <xTimerCreateTimerTask+0x90>)
 8005c7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c7e:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <xTimerCreateTimerTask+0x90>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c86:	2301      	movs	r3, #1
 8005c88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	613b      	str	r3, [r7, #16]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ca8:	697b      	ldr	r3, [r7, #20]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000e38 	.word	0x20000e38
 8005cb8:	08007cb0 	.word	0x08007cb0
 8005cbc:	08005dfd 	.word	0x08005dfd
 8005cc0:	20000e3c 	.word	0x20000e3c

08005cc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	@ 0x28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10b      	bne.n	8005cf4 <xTimerGenericCommand+0x30>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	623b      	str	r3, [r7, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cf4:	4b19      	ldr	r3, [pc, #100]	@ (8005d5c <xTimerGenericCommand+0x98>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02a      	beq.n	8005d52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	dc18      	bgt.n	8005d40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d0e:	f7ff fead 	bl	8005a6c <xTaskGetSchedulerState>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d109      	bne.n	8005d2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d18:	4b10      	ldr	r3, [pc, #64]	@ (8005d5c <xTimerGenericCommand+0x98>)
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	f107 0110 	add.w	r1, r7, #16
 8005d20:	2300      	movs	r3, #0
 8005d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d24:	f7fe fa76 	bl	8004214 <xQueueGenericSend>
 8005d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d2a:	e012      	b.n	8005d52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <xTimerGenericCommand+0x98>)
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	f107 0110 	add.w	r1, r7, #16
 8005d34:	2300      	movs	r3, #0
 8005d36:	2200      	movs	r2, #0
 8005d38:	f7fe fa6c 	bl	8004214 <xQueueGenericSend>
 8005d3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d3e:	e008      	b.n	8005d52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d40:	4b06      	ldr	r3, [pc, #24]	@ (8005d5c <xTimerGenericCommand+0x98>)
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	f107 0110 	add.w	r1, r7, #16
 8005d48:	2300      	movs	r3, #0
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	f7fe fb64 	bl	8004418 <xQueueGenericSendFromISR>
 8005d50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3728      	adds	r7, #40	@ 0x28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000e38 	.word	0x20000e38

08005d60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6a:	4b23      	ldr	r3, [pc, #140]	@ (8005df8 <prvProcessExpiredTimer+0x98>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe f917 	bl	8003fac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d023      	beq.n	8005dd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	18d1      	adds	r1, r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	6978      	ldr	r0, [r7, #20]
 8005d9a:	f000 f8d5 	bl	8005f48 <prvInsertTimerInActiveList>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d020      	beq.n	8005de6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005da4:	2300      	movs	r3, #0
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	2300      	movs	r3, #0
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	2100      	movs	r1, #0
 8005dae:	6978      	ldr	r0, [r7, #20]
 8005db0:	f7ff ff88 	bl	8005cc4 <xTimerGenericCommand>
 8005db4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d114      	bne.n	8005de6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dda:	f023 0301 	bic.w	r3, r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	6978      	ldr	r0, [r7, #20]
 8005dec:	4798      	blx	r3
}
 8005dee:	bf00      	nop
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000e30 	.word	0x20000e30

08005dfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e04:	f107 0308 	add.w	r3, r7, #8
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 f859 	bl	8005ec0 <prvGetNextExpireTime>
 8005e0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4619      	mov	r1, r3
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f805 	bl	8005e24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e1a:	f000 f8d7 	bl	8005fcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e1e:	bf00      	nop
 8005e20:	e7f0      	b.n	8005e04 <prvTimerTask+0x8>
	...

08005e24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e2e:	f7ff fa29 	bl	8005284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e32:	f107 0308 	add.w	r3, r7, #8
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f866 	bl	8005f08 <prvSampleTimeNow>
 8005e3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d130      	bne.n	8005ea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <prvProcessTimerOrBlockTask+0x3c>
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d806      	bhi.n	8005e60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e52:	f7ff fa25 	bl	80052a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ff81 	bl	8005d60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e5e:	e024      	b.n	8005eaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e66:	4b13      	ldr	r3, [pc, #76]	@ (8005eb4 <prvProcessTimerOrBlockTask+0x90>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <prvProcessTimerOrBlockTask+0x50>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <prvProcessTimerOrBlockTask+0x52>
 8005e74:	2300      	movs	r3, #0
 8005e76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e78:	4b0f      	ldr	r3, [pc, #60]	@ (8005eb8 <prvProcessTimerOrBlockTask+0x94>)
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	f7fe fd81 	bl	800498c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e8a:	f7ff fa09 	bl	80052a0 <xTaskResumeAll>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e94:	4b09      	ldr	r3, [pc, #36]	@ (8005ebc <prvProcessTimerOrBlockTask+0x98>)
 8005e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy
}
 8005ea4:	e001      	b.n	8005eaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ea6:	f7ff f9fb 	bl	80052a0 <xTaskResumeAll>
}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000e34 	.word	0x20000e34
 8005eb8:	20000e38 	.word	0x20000e38
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f04 <prvGetNextExpireTime+0x44>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <prvGetNextExpireTime+0x16>
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	e000      	b.n	8005ed8 <prvGetNextExpireTime+0x18>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ee4:	4b07      	ldr	r3, [pc, #28]	@ (8005f04 <prvGetNextExpireTime+0x44>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e001      	b.n	8005ef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000e30 	.word	0x20000e30

08005f08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f10:	f7ff fa64 	bl	80053dc <xTaskGetTickCount>
 8005f14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f16:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <prvSampleTimeNow+0x3c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d205      	bcs.n	8005f2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f20:	f000 f93a 	bl	8006198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f32:	4a04      	ldr	r2, [pc, #16]	@ (8005f44 <prvSampleTimeNow+0x3c>)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f38:	68fb      	ldr	r3, [r7, #12]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000e40 	.word	0x20000e40

08005f48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d812      	bhi.n	8005f94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d302      	bcc.n	8005f82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	e01b      	b.n	8005fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f82:	4b10      	ldr	r3, [pc, #64]	@ (8005fc4 <prvInsertTimerInActiveList+0x7c>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fd ffd4 	bl	8003f3a <vListInsert>
 8005f92:	e012      	b.n	8005fba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d206      	bcs.n	8005faa <prvInsertTimerInActiveList+0x62>
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d302      	bcc.n	8005faa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e007      	b.n	8005fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005faa:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <prvInsertTimerInActiveList+0x80>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f7fd ffc0 	bl	8003f3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fba:	697b      	ldr	r3, [r7, #20]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000e34 	.word	0x20000e34
 8005fc8:	20000e30 	.word	0x20000e30

08005fcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08e      	sub	sp, #56	@ 0x38
 8005fd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fd2:	e0ce      	b.n	8006172 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da19      	bge.n	800600e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	3304      	adds	r3, #4
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	61fb      	str	r3, [r7, #28]
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	e7fd      	b.n	8005ffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006004:	6850      	ldr	r0, [r2, #4]
 8006006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006008:	6892      	ldr	r2, [r2, #8]
 800600a:	4611      	mov	r1, r2
 800600c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f2c0 80ae 	blt.w	8006172 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800601a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	3304      	adds	r3, #4
 8006026:	4618      	mov	r0, r3
 8006028:	f7fd ffc0 	bl	8003fac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800602c:	463b      	mov	r3, r7
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff ff6a 	bl	8005f08 <prvSampleTimeNow>
 8006034:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b09      	cmp	r3, #9
 800603a:	f200 8097 	bhi.w	800616c <prvProcessReceivedCommands+0x1a0>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <prvProcessReceivedCommands+0x78>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	0800606d 	.word	0x0800606d
 8006048:	0800606d 	.word	0x0800606d
 800604c:	0800606d 	.word	0x0800606d
 8006050:	080060e3 	.word	0x080060e3
 8006054:	080060f7 	.word	0x080060f7
 8006058:	08006143 	.word	0x08006143
 800605c:	0800606d 	.word	0x0800606d
 8006060:	0800606d 	.word	0x0800606d
 8006064:	080060e3 	.word	0x080060e3
 8006068:	080060f7 	.word	0x080060f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800606c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	18d1      	adds	r1, r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800608a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800608c:	f7ff ff5c 	bl	8005f48 <prvInsertTimerInActiveList>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d06c      	beq.n	8006170 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800609c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d061      	beq.n	8006170 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	441a      	add	r2, r3
 80060b4:	2300      	movs	r3, #0
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2300      	movs	r3, #0
 80060ba:	2100      	movs	r1, #0
 80060bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060be:	f7ff fe01 	bl	8005cc4 <xTimerGenericCommand>
 80060c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d152      	bne.n	8006170 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	61bb      	str	r3, [r7, #24]
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	e7fd      	b.n	80060de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80060f4:	e03d      	b.n	8006172 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060fc:	f043 0301 	orr.w	r3, r3, #1
 8006100:	b2da      	uxtb	r2, r3
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	617b      	str	r3, [r7, #20]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	18d1      	adds	r1, r2, r3
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800613a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800613c:	f7ff ff04 	bl	8005f48 <prvInsertTimerInActiveList>
					break;
 8006140:	e017      	b.n	8006172 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006152:	f000 fbe9 	bl	8006928 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006156:	e00c      	b.n	8006172 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800615e:	f023 0301 	bic.w	r3, r3, #1
 8006162:	b2da      	uxtb	r2, r3
 8006164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800616a:	e002      	b.n	8006172 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <prvProcessReceivedCommands+0x1a6>
					break;
 8006170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006172:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <prvProcessReceivedCommands+0x1c8>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	1d39      	adds	r1, r7, #4
 8006178:	2200      	movs	r2, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe f9ea 	bl	8004554 <xQueueReceive>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	f47f af26 	bne.w	8005fd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	3730      	adds	r7, #48	@ 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000e38 	.word	0x20000e38

08006198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800619e:	e049      	b.n	8006234 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061a0:	4b2e      	ldr	r3, [pc, #184]	@ (800625c <prvSwitchTimerLists+0xc4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061aa:	4b2c      	ldr	r3, [pc, #176]	@ (800625c <prvSwitchTimerLists+0xc4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fd fef7 	bl	8003fac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02f      	beq.n	8006234 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d90e      	bls.n	8006204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061f2:	4b1a      	ldr	r3, [pc, #104]	@ (800625c <prvSwitchTimerLists+0xc4>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fd fe9c 	bl	8003f3a <vListInsert>
 8006202:	e017      	b.n	8006234 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006204:	2300      	movs	r3, #0
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	2300      	movs	r3, #0
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	2100      	movs	r1, #0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff fd58 	bl	8005cc4 <xTimerGenericCommand>
 8006214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	603b      	str	r3, [r7, #0]
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006234:	4b09      	ldr	r3, [pc, #36]	@ (800625c <prvSwitchTimerLists+0xc4>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1b0      	bne.n	80061a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800623e:	4b07      	ldr	r3, [pc, #28]	@ (800625c <prvSwitchTimerLists+0xc4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006244:	4b06      	ldr	r3, [pc, #24]	@ (8006260 <prvSwitchTimerLists+0xc8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a04      	ldr	r2, [pc, #16]	@ (800625c <prvSwitchTimerLists+0xc4>)
 800624a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800624c:	4a04      	ldr	r2, [pc, #16]	@ (8006260 <prvSwitchTimerLists+0xc8>)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	6013      	str	r3, [r2, #0]
}
 8006252:	bf00      	nop
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000e30 	.word	0x20000e30
 8006260:	20000e34 	.word	0x20000e34

08006264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800626a:	f000 f96d 	bl	8006548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800626e:	4b15      	ldr	r3, [pc, #84]	@ (80062c4 <prvCheckForValidListAndQueue+0x60>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d120      	bne.n	80062b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006276:	4814      	ldr	r0, [pc, #80]	@ (80062c8 <prvCheckForValidListAndQueue+0x64>)
 8006278:	f7fd fe0e 	bl	8003e98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800627c:	4813      	ldr	r0, [pc, #76]	@ (80062cc <prvCheckForValidListAndQueue+0x68>)
 800627e:	f7fd fe0b 	bl	8003e98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006282:	4b13      	ldr	r3, [pc, #76]	@ (80062d0 <prvCheckForValidListAndQueue+0x6c>)
 8006284:	4a10      	ldr	r2, [pc, #64]	@ (80062c8 <prvCheckForValidListAndQueue+0x64>)
 8006286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006288:	4b12      	ldr	r3, [pc, #72]	@ (80062d4 <prvCheckForValidListAndQueue+0x70>)
 800628a:	4a10      	ldr	r2, [pc, #64]	@ (80062cc <prvCheckForValidListAndQueue+0x68>)
 800628c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800628e:	2300      	movs	r3, #0
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	4b11      	ldr	r3, [pc, #68]	@ (80062d8 <prvCheckForValidListAndQueue+0x74>)
 8006294:	4a11      	ldr	r2, [pc, #68]	@ (80062dc <prvCheckForValidListAndQueue+0x78>)
 8006296:	2110      	movs	r1, #16
 8006298:	200a      	movs	r0, #10
 800629a:	f7fd ff1b 	bl	80040d4 <xQueueGenericCreateStatic>
 800629e:	4603      	mov	r3, r0
 80062a0:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <prvCheckForValidListAndQueue+0x60>)
 80062a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062a4:	4b07      	ldr	r3, [pc, #28]	@ (80062c4 <prvCheckForValidListAndQueue+0x60>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062ac:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <prvCheckForValidListAndQueue+0x60>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	490b      	ldr	r1, [pc, #44]	@ (80062e0 <prvCheckForValidListAndQueue+0x7c>)
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe fb40 	bl	8004938 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062b8:	f000 f978 	bl	80065ac <vPortExitCritical>
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000e38 	.word	0x20000e38
 80062c8:	20000e08 	.word	0x20000e08
 80062cc:	20000e1c 	.word	0x20000e1c
 80062d0:	20000e30 	.word	0x20000e30
 80062d4:	20000e34 	.word	0x20000e34
 80062d8:	20000ee4 	.word	0x20000ee4
 80062dc:	20000e44 	.word	0x20000e44
 80062e0:	08007cb8 	.word	0x08007cb8

080062e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3b04      	subs	r3, #4
 80062f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3b04      	subs	r3, #4
 8006302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f023 0201 	bic.w	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3b04      	subs	r3, #4
 8006312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006314:	4a0c      	ldr	r2, [pc, #48]	@ (8006348 <pxPortInitialiseStack+0x64>)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3b14      	subs	r3, #20
 800631e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3b04      	subs	r3, #4
 800632a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f06f 0202 	mvn.w	r2, #2
 8006332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3b20      	subs	r3, #32
 8006338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800633a:	68fb      	ldr	r3, [r7, #12]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	0800634d 	.word	0x0800634d

0800634c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006356:	4b13      	ldr	r3, [pc, #76]	@ (80063a4 <prvTaskExitError+0x58>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800635e:	d00b      	beq.n	8006378 <prvTaskExitError+0x2c>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	60fb      	str	r3, [r7, #12]
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	e7fd      	b.n	8006374 <prvTaskExitError+0x28>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	60bb      	str	r3, [r7, #8]
}
 800638a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800638c:	bf00      	nop
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0fc      	beq.n	800638e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	2000000c 	.word	0x2000000c
	...

080063b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063b0:	4b07      	ldr	r3, [pc, #28]	@ (80063d0 <pxCurrentTCBConst2>)
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	6808      	ldr	r0, [r1, #0]
 80063b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ba:	f380 8809 	msr	PSP, r0
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8811 	msr	BASEPRI, r0
 80063ca:	4770      	bx	lr
 80063cc:	f3af 8000 	nop.w

080063d0 <pxCurrentTCBConst2>:
 80063d0:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063d8:	4808      	ldr	r0, [pc, #32]	@ (80063fc <prvPortStartFirstTask+0x24>)
 80063da:	6800      	ldr	r0, [r0, #0]
 80063dc:	6800      	ldr	r0, [r0, #0]
 80063de:	f380 8808 	msr	MSP, r0
 80063e2:	f04f 0000 	mov.w	r0, #0
 80063e6:	f380 8814 	msr	CONTROL, r0
 80063ea:	b662      	cpsie	i
 80063ec:	b661      	cpsie	f
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	df00      	svc	0
 80063f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063fa:	bf00      	nop
 80063fc:	e000ed08 	.word	0xe000ed08

08006400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006406:	4b47      	ldr	r3, [pc, #284]	@ (8006524 <xPortStartScheduler+0x124>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a47      	ldr	r2, [pc, #284]	@ (8006528 <xPortStartScheduler+0x128>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10b      	bne.n	8006428 <xPortStartScheduler+0x28>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	613b      	str	r3, [r7, #16]
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006428:	4b3e      	ldr	r3, [pc, #248]	@ (8006524 <xPortStartScheduler+0x124>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a3f      	ldr	r2, [pc, #252]	@ (800652c <xPortStartScheduler+0x12c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d10b      	bne.n	800644a <xPortStartScheduler+0x4a>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60fb      	str	r3, [r7, #12]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800644a:	4b39      	ldr	r3, [pc, #228]	@ (8006530 <xPortStartScheduler+0x130>)
 800644c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	22ff      	movs	r2, #255	@ 0xff
 800645a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800646c:	b2da      	uxtb	r2, r3
 800646e:	4b31      	ldr	r3, [pc, #196]	@ (8006534 <xPortStartScheduler+0x134>)
 8006470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006472:	4b31      	ldr	r3, [pc, #196]	@ (8006538 <xPortStartScheduler+0x138>)
 8006474:	2207      	movs	r2, #7
 8006476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006478:	e009      	b.n	800648e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800647a:	4b2f      	ldr	r3, [pc, #188]	@ (8006538 <xPortStartScheduler+0x138>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3b01      	subs	r3, #1
 8006480:	4a2d      	ldr	r2, [pc, #180]	@ (8006538 <xPortStartScheduler+0x138>)
 8006482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	b2db      	uxtb	r3, r3
 800648c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006496:	2b80      	cmp	r3, #128	@ 0x80
 8006498:	d0ef      	beq.n	800647a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800649a:	4b27      	ldr	r3, [pc, #156]	@ (8006538 <xPortStartScheduler+0x138>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1c3 0307 	rsb	r3, r3, #7
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d00b      	beq.n	80064be <xPortStartScheduler+0xbe>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	e7fd      	b.n	80064ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064be:	4b1e      	ldr	r3, [pc, #120]	@ (8006538 <xPortStartScheduler+0x138>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006538 <xPortStartScheduler+0x138>)
 80064c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006538 <xPortStartScheduler+0x138>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064d0:	4a19      	ldr	r2, [pc, #100]	@ (8006538 <xPortStartScheduler+0x138>)
 80064d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064dc:	4b17      	ldr	r3, [pc, #92]	@ (800653c <xPortStartScheduler+0x13c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a16      	ldr	r2, [pc, #88]	@ (800653c <xPortStartScheduler+0x13c>)
 80064e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064e8:	4b14      	ldr	r3, [pc, #80]	@ (800653c <xPortStartScheduler+0x13c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a13      	ldr	r2, [pc, #76]	@ (800653c <xPortStartScheduler+0x13c>)
 80064ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80064f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064f4:	f000 f8da 	bl	80066ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064f8:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <xPortStartScheduler+0x140>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064fe:	f000 f8f9 	bl	80066f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006502:	4b10      	ldr	r3, [pc, #64]	@ (8006544 <xPortStartScheduler+0x144>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a0f      	ldr	r2, [pc, #60]	@ (8006544 <xPortStartScheduler+0x144>)
 8006508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800650c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800650e:	f7ff ff63 	bl	80063d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006512:	f7ff f82d 	bl	8005570 <vTaskSwitchContext>
	prvTaskExitError();
 8006516:	f7ff ff19 	bl	800634c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	e000ed00 	.word	0xe000ed00
 8006528:	410fc271 	.word	0x410fc271
 800652c:	410fc270 	.word	0x410fc270
 8006530:	e000e400 	.word	0xe000e400
 8006534:	20000f34 	.word	0x20000f34
 8006538:	20000f38 	.word	0x20000f38
 800653c:	e000ed20 	.word	0xe000ed20
 8006540:	2000000c 	.word	0x2000000c
 8006544:	e000ef34 	.word	0xe000ef34

08006548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	607b      	str	r3, [r7, #4]
}
 8006560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006562:	4b10      	ldr	r3, [pc, #64]	@ (80065a4 <vPortEnterCritical+0x5c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3301      	adds	r3, #1
 8006568:	4a0e      	ldr	r2, [pc, #56]	@ (80065a4 <vPortEnterCritical+0x5c>)
 800656a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800656c:	4b0d      	ldr	r3, [pc, #52]	@ (80065a4 <vPortEnterCritical+0x5c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d110      	bne.n	8006596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006574:	4b0c      	ldr	r3, [pc, #48]	@ (80065a8 <vPortEnterCritical+0x60>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <vPortEnterCritical+0x4e>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	603b      	str	r3, [r7, #0]
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <vPortEnterCritical+0x4a>
	}
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000000c 	.word	0x2000000c
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065b2:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <vPortExitCritical+0x50>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <vPortExitCritical+0x26>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	e7fd      	b.n	80065ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065d2:	4b0a      	ldr	r3, [pc, #40]	@ (80065fc <vPortExitCritical+0x50>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	4a08      	ldr	r2, [pc, #32]	@ (80065fc <vPortExitCritical+0x50>)
 80065da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065dc:	4b07      	ldr	r3, [pc, #28]	@ (80065fc <vPortExitCritical+0x50>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <vPortExitCritical+0x44>
 80065e4:	2300      	movs	r3, #0
 80065e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f383 8811 	msr	BASEPRI, r3
}
 80065ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	2000000c 	.word	0x2000000c

08006600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006600:	f3ef 8009 	mrs	r0, PSP
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <pxCurrentTCBConst>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	f01e 0f10 	tst.w	lr, #16
 8006610:	bf08      	it	eq
 8006612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661a:	6010      	str	r0, [r2, #0]
 800661c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006624:	f380 8811 	msr	BASEPRI, r0
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f7fe ff9e 	bl	8005570 <vTaskSwitchContext>
 8006634:	f04f 0000 	mov.w	r0, #0
 8006638:	f380 8811 	msr	BASEPRI, r0
 800663c:	bc09      	pop	{r0, r3}
 800663e:	6819      	ldr	r1, [r3, #0]
 8006640:	6808      	ldr	r0, [r1, #0]
 8006642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006646:	f01e 0f10 	tst.w	lr, #16
 800664a:	bf08      	it	eq
 800664c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006650:	f380 8809 	msr	PSP, r0
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	f3af 8000 	nop.w

08006660 <pxCurrentTCBConst>:
 8006660:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop

08006668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
}
 8006680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006682:	f7fe febb 	bl	80053fc <xTaskIncrementTick>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <xPortSysTickHandler+0x40>)
 800668e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	2300      	movs	r3, #0
 8006696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f383 8811 	msr	BASEPRI, r3
}
 800669e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066b0:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <vPortSetupTimerInterrupt+0x34>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066b6:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <vPortSetupTimerInterrupt+0x38>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066bc:	4b0a      	ldr	r3, [pc, #40]	@ (80066e8 <vPortSetupTimerInterrupt+0x3c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0a      	ldr	r2, [pc, #40]	@ (80066ec <vPortSetupTimerInterrupt+0x40>)
 80066c2:	fba2 2303 	umull	r2, r3, r2, r3
 80066c6:	099b      	lsrs	r3, r3, #6
 80066c8:	4a09      	ldr	r2, [pc, #36]	@ (80066f0 <vPortSetupTimerInterrupt+0x44>)
 80066ca:	3b01      	subs	r3, #1
 80066cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066ce:	4b04      	ldr	r3, [pc, #16]	@ (80066e0 <vPortSetupTimerInterrupt+0x34>)
 80066d0:	2207      	movs	r2, #7
 80066d2:	601a      	str	r2, [r3, #0]
}
 80066d4:	bf00      	nop
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	e000e010 	.word	0xe000e010
 80066e4:	e000e018 	.word	0xe000e018
 80066e8:	20000000 	.word	0x20000000
 80066ec:	10624dd3 	.word	0x10624dd3
 80066f0:	e000e014 	.word	0xe000e014

080066f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006704 <vPortEnableVFP+0x10>
 80066f8:	6801      	ldr	r1, [r0, #0]
 80066fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80066fe:	6001      	str	r1, [r0, #0]
 8006700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006702:	bf00      	nop
 8006704:	e000ed88 	.word	0xe000ed88

08006708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800670e:	f3ef 8305 	mrs	r3, IPSR
 8006712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d915      	bls.n	8006746 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800671a:	4a18      	ldr	r2, [pc, #96]	@ (800677c <vPortValidateInterruptPriority+0x74>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006724:	4b16      	ldr	r3, [pc, #88]	@ (8006780 <vPortValidateInterruptPriority+0x78>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	7afa      	ldrb	r2, [r7, #11]
 800672a:	429a      	cmp	r2, r3
 800672c:	d20b      	bcs.n	8006746 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	607b      	str	r3, [r7, #4]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006746:	4b0f      	ldr	r3, [pc, #60]	@ (8006784 <vPortValidateInterruptPriority+0x7c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800674e:	4b0e      	ldr	r3, [pc, #56]	@ (8006788 <vPortValidateInterruptPriority+0x80>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d90b      	bls.n	800676e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	603b      	str	r3, [r7, #0]
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	e7fd      	b.n	800676a <vPortValidateInterruptPriority+0x62>
	}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	e000e3f0 	.word	0xe000e3f0
 8006780:	20000f34 	.word	0x20000f34
 8006784:	e000ed0c 	.word	0xe000ed0c
 8006788:	20000f38 	.word	0x20000f38

0800678c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	@ 0x28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006794:	2300      	movs	r3, #0
 8006796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006798:	f7fe fd74 	bl	8005284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800679c:	4b5c      	ldr	r3, [pc, #368]	@ (8006910 <pvPortMalloc+0x184>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067a4:	f000 f924 	bl	80069f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006914 <pvPortMalloc+0x188>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f040 8095 	bne.w	80068e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01e      	beq.n	80067fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80067bc:	2208      	movs	r2, #8
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d015      	beq.n	80067fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f023 0307 	bic.w	r3, r3, #7
 80067d4:	3308      	adds	r3, #8
 80067d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <pvPortMalloc+0x6e>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	617b      	str	r3, [r7, #20]
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d06f      	beq.n	80068e0 <pvPortMalloc+0x154>
 8006800:	4b45      	ldr	r3, [pc, #276]	@ (8006918 <pvPortMalloc+0x18c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	429a      	cmp	r2, r3
 8006808:	d86a      	bhi.n	80068e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800680a:	4b44      	ldr	r3, [pc, #272]	@ (800691c <pvPortMalloc+0x190>)
 800680c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800680e:	4b43      	ldr	r3, [pc, #268]	@ (800691c <pvPortMalloc+0x190>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006814:	e004      	b.n	8006820 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d903      	bls.n	8006832 <pvPortMalloc+0xa6>
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f1      	bne.n	8006816 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006832:	4b37      	ldr	r3, [pc, #220]	@ (8006910 <pvPortMalloc+0x184>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006838:	429a      	cmp	r2, r3
 800683a:	d051      	beq.n	80068e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2208      	movs	r2, #8
 8006842:	4413      	add	r3, r2
 8006844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	1ad2      	subs	r2, r2, r3
 8006856:	2308      	movs	r3, #8
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	429a      	cmp	r2, r3
 800685c:	d920      	bls.n	80068a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800685e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <pvPortMalloc+0xfc>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	613b      	str	r3, [r7, #16]
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	e7fd      	b.n	8006884 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	1ad2      	subs	r2, r2, r3
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800689a:	69b8      	ldr	r0, [r7, #24]
 800689c:	f000 f90a 	bl	8006ab4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006918 <pvPortMalloc+0x18c>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <pvPortMalloc+0x18c>)
 80068ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006918 <pvPortMalloc+0x18c>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006920 <pvPortMalloc+0x194>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d203      	bcs.n	80068c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068ba:	4b17      	ldr	r3, [pc, #92]	@ (8006918 <pvPortMalloc+0x18c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <pvPortMalloc+0x194>)
 80068c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4b13      	ldr	r3, [pc, #76]	@ (8006914 <pvPortMalloc+0x188>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068d6:	4b13      	ldr	r3, [pc, #76]	@ (8006924 <pvPortMalloc+0x198>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	4a11      	ldr	r2, [pc, #68]	@ (8006924 <pvPortMalloc+0x198>)
 80068de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068e0:	f7fe fcde 	bl	80052a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00b      	beq.n	8006906 <pvPortMalloc+0x17a>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	60fb      	str	r3, [r7, #12]
}
 8006900:	bf00      	nop
 8006902:	bf00      	nop
 8006904:	e7fd      	b.n	8006902 <pvPortMalloc+0x176>
	return pvReturn;
 8006906:	69fb      	ldr	r3, [r7, #28]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	@ 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20001afc 	.word	0x20001afc
 8006914:	20001b10 	.word	0x20001b10
 8006918:	20001b00 	.word	0x20001b00
 800691c:	20001af4 	.word	0x20001af4
 8006920:	20001b04 	.word	0x20001b04
 8006924:	20001b08 	.word	0x20001b08

08006928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d04f      	beq.n	80069da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800693a:	2308      	movs	r3, #8
 800693c:	425b      	negs	r3, r3
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	4b25      	ldr	r3, [pc, #148]	@ (80069e4 <vPortFree+0xbc>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4013      	ands	r3, r2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10b      	bne.n	800696e <vPortFree+0x46>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60fb      	str	r3, [r7, #12]
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	e7fd      	b.n	800696a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <vPortFree+0x66>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60bb      	str	r3, [r7, #8]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	4b14      	ldr	r3, [pc, #80]	@ (80069e4 <vPortFree+0xbc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4013      	ands	r3, r2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01e      	beq.n	80069da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d11a      	bne.n	80069da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	4b0e      	ldr	r3, [pc, #56]	@ (80069e4 <vPortFree+0xbc>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	43db      	mvns	r3, r3
 80069ae:	401a      	ands	r2, r3
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069b4:	f7fe fc66 	bl	8005284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <vPortFree+0xc0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4413      	add	r3, r2
 80069c2:	4a09      	ldr	r2, [pc, #36]	@ (80069e8 <vPortFree+0xc0>)
 80069c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069c6:	6938      	ldr	r0, [r7, #16]
 80069c8:	f000 f874 	bl	8006ab4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <vPortFree+0xc4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	4a06      	ldr	r2, [pc, #24]	@ (80069ec <vPortFree+0xc4>)
 80069d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069d6:	f7fe fc63 	bl	80052a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069da:	bf00      	nop
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20001b10 	.word	0x20001b10
 80069e8:	20001b00 	.word	0x20001b00
 80069ec:	20001b0c 	.word	0x20001b0c

080069f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80069fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069fc:	4b27      	ldr	r3, [pc, #156]	@ (8006a9c <prvHeapInit+0xac>)
 80069fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00c      	beq.n	8006a24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3307      	adds	r3, #7
 8006a0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0307 	bic.w	r3, r3, #7
 8006a16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006a9c <prvHeapInit+0xac>)
 8006a20:	4413      	add	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a28:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa0 <prvHeapInit+0xb0>)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8006aa0 <prvHeapInit+0xb0>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4413      	add	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1a9b      	subs	r3, r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0307 	bic.w	r3, r3, #7
 8006a4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <prvHeapInit+0xb4>)
 8006a50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a52:	4b14      	ldr	r3, [pc, #80]	@ (8006aa4 <prvHeapInit+0xb4>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a5a:	4b12      	ldr	r3, [pc, #72]	@ (8006aa4 <prvHeapInit+0xb4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	1ad2      	subs	r2, r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a70:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <prvHeapInit+0xb4>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa8 <prvHeapInit+0xb8>)
 8006a7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4a09      	ldr	r2, [pc, #36]	@ (8006aac <prvHeapInit+0xbc>)
 8006a86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a88:	4b09      	ldr	r3, [pc, #36]	@ (8006ab0 <prvHeapInit+0xc0>)
 8006a8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a8e:	601a      	str	r2, [r3, #0]
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	20000f3c 	.word	0x20000f3c
 8006aa0:	20001af4 	.word	0x20001af4
 8006aa4:	20001afc 	.word	0x20001afc
 8006aa8:	20001b04 	.word	0x20001b04
 8006aac:	20001b00 	.word	0x20001b00
 8006ab0:	20001b10 	.word	0x20001b10

08006ab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006abc:	4b28      	ldr	r3, [pc, #160]	@ (8006b60 <prvInsertBlockIntoFreeList+0xac>)
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	e002      	b.n	8006ac8 <prvInsertBlockIntoFreeList+0x14>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d8f7      	bhi.n	8006ac2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d108      	bne.n	8006af6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	441a      	add	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	441a      	add	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d118      	bne.n	8006b3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <prvInsertBlockIntoFreeList+0xb0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d00d      	beq.n	8006b32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	441a      	add	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e008      	b.n	8006b44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b32:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <prvInsertBlockIntoFreeList+0xb0>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e003      	b.n	8006b44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d002      	beq.n	8006b52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20001af4 	.word	0x20001af4
 8006b64:	20001afc 	.word	0x20001afc

08006b68 <std>:
 8006b68:	2300      	movs	r3, #0
 8006b6a:	b510      	push	{r4, lr}
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b76:	6083      	str	r3, [r0, #8]
 8006b78:	8181      	strh	r1, [r0, #12]
 8006b7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b7c:	81c2      	strh	r2, [r0, #14]
 8006b7e:	6183      	str	r3, [r0, #24]
 8006b80:	4619      	mov	r1, r3
 8006b82:	2208      	movs	r2, #8
 8006b84:	305c      	adds	r0, #92	@ 0x5c
 8006b86:	f000 f9f9 	bl	8006f7c <memset>
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc0 <std+0x58>)
 8006b8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <std+0x5c>)
 8006b90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b92:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc8 <std+0x60>)
 8006b94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b96:	4b0d      	ldr	r3, [pc, #52]	@ (8006bcc <std+0x64>)
 8006b98:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd0 <std+0x68>)
 8006b9c:	6224      	str	r4, [r4, #32]
 8006b9e:	429c      	cmp	r4, r3
 8006ba0:	d006      	beq.n	8006bb0 <std+0x48>
 8006ba2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ba6:	4294      	cmp	r4, r2
 8006ba8:	d002      	beq.n	8006bb0 <std+0x48>
 8006baa:	33d0      	adds	r3, #208	@ 0xd0
 8006bac:	429c      	cmp	r4, r3
 8006bae:	d105      	bne.n	8006bbc <std+0x54>
 8006bb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb8:	f000 baae 	b.w	8007118 <__retarget_lock_init_recursive>
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08006dcd 	.word	0x08006dcd
 8006bc4:	08006def 	.word	0x08006def
 8006bc8:	08006e27 	.word	0x08006e27
 8006bcc:	08006e4b 	.word	0x08006e4b
 8006bd0:	20001b14 	.word	0x20001b14

08006bd4 <stdio_exit_handler>:
 8006bd4:	4a02      	ldr	r2, [pc, #8]	@ (8006be0 <stdio_exit_handler+0xc>)
 8006bd6:	4903      	ldr	r1, [pc, #12]	@ (8006be4 <stdio_exit_handler+0x10>)
 8006bd8:	4803      	ldr	r0, [pc, #12]	@ (8006be8 <stdio_exit_handler+0x14>)
 8006bda:	f000 b869 	b.w	8006cb0 <_fwalk_sglue>
 8006bde:	bf00      	nop
 8006be0:	20000010 	.word	0x20000010
 8006be4:	080079d5 	.word	0x080079d5
 8006be8:	20000020 	.word	0x20000020

08006bec <cleanup_stdio>:
 8006bec:	6841      	ldr	r1, [r0, #4]
 8006bee:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <cleanup_stdio+0x34>)
 8006bf0:	4299      	cmp	r1, r3
 8006bf2:	b510      	push	{r4, lr}
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	d001      	beq.n	8006bfc <cleanup_stdio+0x10>
 8006bf8:	f000 feec 	bl	80079d4 <_fflush_r>
 8006bfc:	68a1      	ldr	r1, [r4, #8]
 8006bfe:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <cleanup_stdio+0x38>)
 8006c00:	4299      	cmp	r1, r3
 8006c02:	d002      	beq.n	8006c0a <cleanup_stdio+0x1e>
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 fee5 	bl	80079d4 <_fflush_r>
 8006c0a:	68e1      	ldr	r1, [r4, #12]
 8006c0c:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <cleanup_stdio+0x3c>)
 8006c0e:	4299      	cmp	r1, r3
 8006c10:	d004      	beq.n	8006c1c <cleanup_stdio+0x30>
 8006c12:	4620      	mov	r0, r4
 8006c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c18:	f000 bedc 	b.w	80079d4 <_fflush_r>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	bf00      	nop
 8006c20:	20001b14 	.word	0x20001b14
 8006c24:	20001b7c 	.word	0x20001b7c
 8006c28:	20001be4 	.word	0x20001be4

08006c2c <global_stdio_init.part.0>:
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c5c <global_stdio_init.part.0+0x30>)
 8006c30:	4c0b      	ldr	r4, [pc, #44]	@ (8006c60 <global_stdio_init.part.0+0x34>)
 8006c32:	4a0c      	ldr	r2, [pc, #48]	@ (8006c64 <global_stdio_init.part.0+0x38>)
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	4620      	mov	r0, r4
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2104      	movs	r1, #4
 8006c3c:	f7ff ff94 	bl	8006b68 <std>
 8006c40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c44:	2201      	movs	r2, #1
 8006c46:	2109      	movs	r1, #9
 8006c48:	f7ff ff8e 	bl	8006b68 <std>
 8006c4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c50:	2202      	movs	r2, #2
 8006c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c56:	2112      	movs	r1, #18
 8006c58:	f7ff bf86 	b.w	8006b68 <std>
 8006c5c:	20001c4c 	.word	0x20001c4c
 8006c60:	20001b14 	.word	0x20001b14
 8006c64:	08006bd5 	.word	0x08006bd5

08006c68 <__sfp_lock_acquire>:
 8006c68:	4801      	ldr	r0, [pc, #4]	@ (8006c70 <__sfp_lock_acquire+0x8>)
 8006c6a:	f000 ba56 	b.w	800711a <__retarget_lock_acquire_recursive>
 8006c6e:	bf00      	nop
 8006c70:	20001c55 	.word	0x20001c55

08006c74 <__sfp_lock_release>:
 8006c74:	4801      	ldr	r0, [pc, #4]	@ (8006c7c <__sfp_lock_release+0x8>)
 8006c76:	f000 ba51 	b.w	800711c <__retarget_lock_release_recursive>
 8006c7a:	bf00      	nop
 8006c7c:	20001c55 	.word	0x20001c55

08006c80 <__sinit>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	4604      	mov	r4, r0
 8006c84:	f7ff fff0 	bl	8006c68 <__sfp_lock_acquire>
 8006c88:	6a23      	ldr	r3, [r4, #32]
 8006c8a:	b11b      	cbz	r3, 8006c94 <__sinit+0x14>
 8006c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c90:	f7ff bff0 	b.w	8006c74 <__sfp_lock_release>
 8006c94:	4b04      	ldr	r3, [pc, #16]	@ (8006ca8 <__sinit+0x28>)
 8006c96:	6223      	str	r3, [r4, #32]
 8006c98:	4b04      	ldr	r3, [pc, #16]	@ (8006cac <__sinit+0x2c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1f5      	bne.n	8006c8c <__sinit+0xc>
 8006ca0:	f7ff ffc4 	bl	8006c2c <global_stdio_init.part.0>
 8006ca4:	e7f2      	b.n	8006c8c <__sinit+0xc>
 8006ca6:	bf00      	nop
 8006ca8:	08006bed 	.word	0x08006bed
 8006cac:	20001c4c 	.word	0x20001c4c

08006cb0 <_fwalk_sglue>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	4688      	mov	r8, r1
 8006cb8:	4614      	mov	r4, r2
 8006cba:	2600      	movs	r6, #0
 8006cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8006cc4:	d505      	bpl.n	8006cd2 <_fwalk_sglue+0x22>
 8006cc6:	6824      	ldr	r4, [r4, #0]
 8006cc8:	2c00      	cmp	r4, #0
 8006cca:	d1f7      	bne.n	8006cbc <_fwalk_sglue+0xc>
 8006ccc:	4630      	mov	r0, r6
 8006cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d907      	bls.n	8006ce8 <_fwalk_sglue+0x38>
 8006cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	d003      	beq.n	8006ce8 <_fwalk_sglue+0x38>
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	47c0      	blx	r8
 8006ce6:	4306      	orrs	r6, r0
 8006ce8:	3568      	adds	r5, #104	@ 0x68
 8006cea:	e7e9      	b.n	8006cc0 <_fwalk_sglue+0x10>

08006cec <iprintf>:
 8006cec:	b40f      	push	{r0, r1, r2, r3}
 8006cee:	b507      	push	{r0, r1, r2, lr}
 8006cf0:	4906      	ldr	r1, [pc, #24]	@ (8006d0c <iprintf+0x20>)
 8006cf2:	ab04      	add	r3, sp, #16
 8006cf4:	6808      	ldr	r0, [r1, #0]
 8006cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cfa:	6881      	ldr	r1, [r0, #8]
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	f000 fb3f 	bl	8007380 <_vfiprintf_r>
 8006d02:	b003      	add	sp, #12
 8006d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d08:	b004      	add	sp, #16
 8006d0a:	4770      	bx	lr
 8006d0c:	2000001c 	.word	0x2000001c

08006d10 <_puts_r>:
 8006d10:	6a03      	ldr	r3, [r0, #32]
 8006d12:	b570      	push	{r4, r5, r6, lr}
 8006d14:	6884      	ldr	r4, [r0, #8]
 8006d16:	4605      	mov	r5, r0
 8006d18:	460e      	mov	r6, r1
 8006d1a:	b90b      	cbnz	r3, 8006d20 <_puts_r+0x10>
 8006d1c:	f7ff ffb0 	bl	8006c80 <__sinit>
 8006d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d22:	07db      	lsls	r3, r3, #31
 8006d24:	d405      	bmi.n	8006d32 <_puts_r+0x22>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	0598      	lsls	r0, r3, #22
 8006d2a:	d402      	bmi.n	8006d32 <_puts_r+0x22>
 8006d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d2e:	f000 f9f4 	bl	800711a <__retarget_lock_acquire_recursive>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	0719      	lsls	r1, r3, #28
 8006d36:	d502      	bpl.n	8006d3e <_puts_r+0x2e>
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d135      	bne.n	8006daa <_puts_r+0x9a>
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 f8c5 	bl	8006ed0 <__swsetup_r>
 8006d46:	b380      	cbz	r0, 8006daa <_puts_r+0x9a>
 8006d48:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006d4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d4e:	07da      	lsls	r2, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_puts_r+0x4e>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	059b      	lsls	r3, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_puts_r+0x4e>
 8006d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d5a:	f000 f9df 	bl	800711c <__retarget_lock_release_recursive>
 8006d5e:	4628      	mov	r0, r5
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da04      	bge.n	8006d70 <_puts_r+0x60>
 8006d66:	69a2      	ldr	r2, [r4, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	dc17      	bgt.n	8006d9c <_puts_r+0x8c>
 8006d6c:	290a      	cmp	r1, #10
 8006d6e:	d015      	beq.n	8006d9c <_puts_r+0x8c>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	6022      	str	r2, [r4, #0]
 8006d76:	7019      	strb	r1, [r3, #0]
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	2900      	cmp	r1, #0
 8006d84:	d1ed      	bne.n	8006d62 <_puts_r+0x52>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	da11      	bge.n	8006dae <_puts_r+0x9e>
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	210a      	movs	r1, #10
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f000 f85f 	bl	8006e52 <__swbuf_r>
 8006d94:	3001      	adds	r0, #1
 8006d96:	d0d7      	beq.n	8006d48 <_puts_r+0x38>
 8006d98:	250a      	movs	r5, #10
 8006d9a:	e7d7      	b.n	8006d4c <_puts_r+0x3c>
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 f857 	bl	8006e52 <__swbuf_r>
 8006da4:	3001      	adds	r0, #1
 8006da6:	d1e7      	bne.n	8006d78 <_puts_r+0x68>
 8006da8:	e7ce      	b.n	8006d48 <_puts_r+0x38>
 8006daa:	3e01      	subs	r6, #1
 8006dac:	e7e4      	b.n	8006d78 <_puts_r+0x68>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	6022      	str	r2, [r4, #0]
 8006db4:	220a      	movs	r2, #10
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	e7ee      	b.n	8006d98 <_puts_r+0x88>
	...

08006dbc <puts>:
 8006dbc:	4b02      	ldr	r3, [pc, #8]	@ (8006dc8 <puts+0xc>)
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	f7ff bfa5 	b.w	8006d10 <_puts_r>
 8006dc6:	bf00      	nop
 8006dc8:	2000001c 	.word	0x2000001c

08006dcc <__sread>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	460c      	mov	r4, r1
 8006dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd4:	f000 f952 	bl	800707c <_read_r>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	bfab      	itete	ge
 8006ddc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dde:	89a3      	ldrhlt	r3, [r4, #12]
 8006de0:	181b      	addge	r3, r3, r0
 8006de2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006de6:	bfac      	ite	ge
 8006de8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dea:	81a3      	strhlt	r3, [r4, #12]
 8006dec:	bd10      	pop	{r4, pc}

08006dee <__swrite>:
 8006dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df2:	461f      	mov	r7, r3
 8006df4:	898b      	ldrh	r3, [r1, #12]
 8006df6:	05db      	lsls	r3, r3, #23
 8006df8:	4605      	mov	r5, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	4616      	mov	r6, r2
 8006dfe:	d505      	bpl.n	8006e0c <__swrite+0x1e>
 8006e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e04:	2302      	movs	r3, #2
 8006e06:	2200      	movs	r2, #0
 8006e08:	f000 f926 	bl	8007058 <_lseek_r>
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	4632      	mov	r2, r6
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e22:	f000 b93d 	b.w	80070a0 <_write_r>

08006e26 <__sseek>:
 8006e26:	b510      	push	{r4, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2e:	f000 f913 	bl	8007058 <_lseek_r>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	bf15      	itete	ne
 8006e38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e42:	81a3      	strheq	r3, [r4, #12]
 8006e44:	bf18      	it	ne
 8006e46:	81a3      	strhne	r3, [r4, #12]
 8006e48:	bd10      	pop	{r4, pc}

08006e4a <__sclose>:
 8006e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4e:	f000 b89d 	b.w	8006f8c <_close_r>

08006e52 <__swbuf_r>:
 8006e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e54:	460e      	mov	r6, r1
 8006e56:	4614      	mov	r4, r2
 8006e58:	4605      	mov	r5, r0
 8006e5a:	b118      	cbz	r0, 8006e64 <__swbuf_r+0x12>
 8006e5c:	6a03      	ldr	r3, [r0, #32]
 8006e5e:	b90b      	cbnz	r3, 8006e64 <__swbuf_r+0x12>
 8006e60:	f7ff ff0e 	bl	8006c80 <__sinit>
 8006e64:	69a3      	ldr	r3, [r4, #24]
 8006e66:	60a3      	str	r3, [r4, #8]
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	071a      	lsls	r2, r3, #28
 8006e6c:	d501      	bpl.n	8006e72 <__swbuf_r+0x20>
 8006e6e:	6923      	ldr	r3, [r4, #16]
 8006e70:	b943      	cbnz	r3, 8006e84 <__swbuf_r+0x32>
 8006e72:	4621      	mov	r1, r4
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 f82b 	bl	8006ed0 <__swsetup_r>
 8006e7a:	b118      	cbz	r0, 8006e84 <__swbuf_r+0x32>
 8006e7c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006e80:	4638      	mov	r0, r7
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	6922      	ldr	r2, [r4, #16]
 8006e88:	1a98      	subs	r0, r3, r2
 8006e8a:	6963      	ldr	r3, [r4, #20]
 8006e8c:	b2f6      	uxtb	r6, r6
 8006e8e:	4283      	cmp	r3, r0
 8006e90:	4637      	mov	r7, r6
 8006e92:	dc05      	bgt.n	8006ea0 <__swbuf_r+0x4e>
 8006e94:	4621      	mov	r1, r4
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 fd9c 	bl	80079d4 <_fflush_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d1ed      	bne.n	8006e7c <__swbuf_r+0x2a>
 8006ea0:	68a3      	ldr	r3, [r4, #8]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	60a3      	str	r3, [r4, #8]
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	6022      	str	r2, [r4, #0]
 8006eac:	701e      	strb	r6, [r3, #0]
 8006eae:	6962      	ldr	r2, [r4, #20]
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d004      	beq.n	8006ec0 <__swbuf_r+0x6e>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	07db      	lsls	r3, r3, #31
 8006eba:	d5e1      	bpl.n	8006e80 <__swbuf_r+0x2e>
 8006ebc:	2e0a      	cmp	r6, #10
 8006ebe:	d1df      	bne.n	8006e80 <__swbuf_r+0x2e>
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 fd86 	bl	80079d4 <_fflush_r>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d0d9      	beq.n	8006e80 <__swbuf_r+0x2e>
 8006ecc:	e7d6      	b.n	8006e7c <__swbuf_r+0x2a>
	...

08006ed0 <__swsetup_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4b29      	ldr	r3, [pc, #164]	@ (8006f78 <__swsetup_r+0xa8>)
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	460c      	mov	r4, r1
 8006eda:	b118      	cbz	r0, 8006ee4 <__swsetup_r+0x14>
 8006edc:	6a03      	ldr	r3, [r0, #32]
 8006ede:	b90b      	cbnz	r3, 8006ee4 <__swsetup_r+0x14>
 8006ee0:	f7ff fece 	bl	8006c80 <__sinit>
 8006ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee8:	0719      	lsls	r1, r3, #28
 8006eea:	d422      	bmi.n	8006f32 <__swsetup_r+0x62>
 8006eec:	06da      	lsls	r2, r3, #27
 8006eee:	d407      	bmi.n	8006f00 <__swsetup_r+0x30>
 8006ef0:	2209      	movs	r2, #9
 8006ef2:	602a      	str	r2, [r5, #0]
 8006ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006efe:	e033      	b.n	8006f68 <__swsetup_r+0x98>
 8006f00:	0758      	lsls	r0, r3, #29
 8006f02:	d512      	bpl.n	8006f2a <__swsetup_r+0x5a>
 8006f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f06:	b141      	cbz	r1, 8006f1a <__swsetup_r+0x4a>
 8006f08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	d002      	beq.n	8006f16 <__swsetup_r+0x46>
 8006f10:	4628      	mov	r0, r5
 8006f12:	f000 f913 	bl	800713c <_free_r>
 8006f16:	2300      	movs	r3, #0
 8006f18:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	2300      	movs	r3, #0
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	f043 0308 	orr.w	r3, r3, #8
 8006f30:	81a3      	strh	r3, [r4, #12]
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	b94b      	cbnz	r3, 8006f4a <__swsetup_r+0x7a>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f40:	d003      	beq.n	8006f4a <__swsetup_r+0x7a>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 fd93 	bl	8007a70 <__smakebuf_r>
 8006f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4e:	f013 0201 	ands.w	r2, r3, #1
 8006f52:	d00a      	beq.n	8006f6a <__swsetup_r+0x9a>
 8006f54:	2200      	movs	r2, #0
 8006f56:	60a2      	str	r2, [r4, #8]
 8006f58:	6962      	ldr	r2, [r4, #20]
 8006f5a:	4252      	negs	r2, r2
 8006f5c:	61a2      	str	r2, [r4, #24]
 8006f5e:	6922      	ldr	r2, [r4, #16]
 8006f60:	b942      	cbnz	r2, 8006f74 <__swsetup_r+0xa4>
 8006f62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f66:	d1c5      	bne.n	8006ef4 <__swsetup_r+0x24>
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	0799      	lsls	r1, r3, #30
 8006f6c:	bf58      	it	pl
 8006f6e:	6962      	ldrpl	r2, [r4, #20]
 8006f70:	60a2      	str	r2, [r4, #8]
 8006f72:	e7f4      	b.n	8006f5e <__swsetup_r+0x8e>
 8006f74:	2000      	movs	r0, #0
 8006f76:	e7f7      	b.n	8006f68 <__swsetup_r+0x98>
 8006f78:	2000001c 	.word	0x2000001c

08006f7c <memset>:
 8006f7c:	4402      	add	r2, r0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d100      	bne.n	8006f86 <memset+0xa>
 8006f84:	4770      	bx	lr
 8006f86:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8a:	e7f9      	b.n	8006f80 <memset+0x4>

08006f8c <_close_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4d06      	ldr	r5, [pc, #24]	@ (8006fa8 <_close_r+0x1c>)
 8006f90:	2300      	movs	r3, #0
 8006f92:	4604      	mov	r4, r0
 8006f94:	4608      	mov	r0, r1
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	f7f9 fdfc 	bl	8000b94 <_close>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_close_r+0x1a>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_close_r+0x1a>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	20001c50 	.word	0x20001c50

08006fac <_reclaim_reent>:
 8006fac:	4b29      	ldr	r3, [pc, #164]	@ (8007054 <_reclaim_reent+0xa8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4283      	cmp	r3, r0
 8006fb2:	b570      	push	{r4, r5, r6, lr}
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	d04b      	beq.n	8007050 <_reclaim_reent+0xa4>
 8006fb8:	69c3      	ldr	r3, [r0, #28]
 8006fba:	b1ab      	cbz	r3, 8006fe8 <_reclaim_reent+0x3c>
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	b16b      	cbz	r3, 8006fdc <_reclaim_reent+0x30>
 8006fc0:	2500      	movs	r5, #0
 8006fc2:	69e3      	ldr	r3, [r4, #28]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	5959      	ldr	r1, [r3, r5]
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	d13b      	bne.n	8007044 <_reclaim_reent+0x98>
 8006fcc:	3504      	adds	r5, #4
 8006fce:	2d80      	cmp	r5, #128	@ 0x80
 8006fd0:	d1f7      	bne.n	8006fc2 <_reclaim_reent+0x16>
 8006fd2:	69e3      	ldr	r3, [r4, #28]
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	68d9      	ldr	r1, [r3, #12]
 8006fd8:	f000 f8b0 	bl	800713c <_free_r>
 8006fdc:	69e3      	ldr	r3, [r4, #28]
 8006fde:	6819      	ldr	r1, [r3, #0]
 8006fe0:	b111      	cbz	r1, 8006fe8 <_reclaim_reent+0x3c>
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 f8aa 	bl	800713c <_free_r>
 8006fe8:	6961      	ldr	r1, [r4, #20]
 8006fea:	b111      	cbz	r1, 8006ff2 <_reclaim_reent+0x46>
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 f8a5 	bl	800713c <_free_r>
 8006ff2:	69e1      	ldr	r1, [r4, #28]
 8006ff4:	b111      	cbz	r1, 8006ffc <_reclaim_reent+0x50>
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 f8a0 	bl	800713c <_free_r>
 8006ffc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006ffe:	b111      	cbz	r1, 8007006 <_reclaim_reent+0x5a>
 8007000:	4620      	mov	r0, r4
 8007002:	f000 f89b 	bl	800713c <_free_r>
 8007006:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007008:	b111      	cbz	r1, 8007010 <_reclaim_reent+0x64>
 800700a:	4620      	mov	r0, r4
 800700c:	f000 f896 	bl	800713c <_free_r>
 8007010:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007012:	b111      	cbz	r1, 800701a <_reclaim_reent+0x6e>
 8007014:	4620      	mov	r0, r4
 8007016:	f000 f891 	bl	800713c <_free_r>
 800701a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800701c:	b111      	cbz	r1, 8007024 <_reclaim_reent+0x78>
 800701e:	4620      	mov	r0, r4
 8007020:	f000 f88c 	bl	800713c <_free_r>
 8007024:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007026:	b111      	cbz	r1, 800702e <_reclaim_reent+0x82>
 8007028:	4620      	mov	r0, r4
 800702a:	f000 f887 	bl	800713c <_free_r>
 800702e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007030:	b111      	cbz	r1, 8007038 <_reclaim_reent+0x8c>
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f882 	bl	800713c <_free_r>
 8007038:	6a23      	ldr	r3, [r4, #32]
 800703a:	b14b      	cbz	r3, 8007050 <_reclaim_reent+0xa4>
 800703c:	4620      	mov	r0, r4
 800703e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007042:	4718      	bx	r3
 8007044:	680e      	ldr	r6, [r1, #0]
 8007046:	4620      	mov	r0, r4
 8007048:	f000 f878 	bl	800713c <_free_r>
 800704c:	4631      	mov	r1, r6
 800704e:	e7bb      	b.n	8006fc8 <_reclaim_reent+0x1c>
 8007050:	bd70      	pop	{r4, r5, r6, pc}
 8007052:	bf00      	nop
 8007054:	2000001c 	.word	0x2000001c

08007058 <_lseek_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d07      	ldr	r5, [pc, #28]	@ (8007078 <_lseek_r+0x20>)
 800705c:	4604      	mov	r4, r0
 800705e:	4608      	mov	r0, r1
 8007060:	4611      	mov	r1, r2
 8007062:	2200      	movs	r2, #0
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f7f9 fdbb 	bl	8000be2 <_lseek>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_lseek_r+0x1e>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_lseek_r+0x1e>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	20001c50 	.word	0x20001c50

0800707c <_read_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d07      	ldr	r5, [pc, #28]	@ (800709c <_read_r+0x20>)
 8007080:	4604      	mov	r4, r0
 8007082:	4608      	mov	r0, r1
 8007084:	4611      	mov	r1, r2
 8007086:	2200      	movs	r2, #0
 8007088:	602a      	str	r2, [r5, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f7f9 fd4e 	bl	8000b2c <_read>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_read_r+0x1e>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_read_r+0x1e>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	20001c50 	.word	0x20001c50

080070a0 <_write_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d07      	ldr	r5, [pc, #28]	@ (80070c0 <_write_r+0x20>)
 80070a4:	4604      	mov	r4, r0
 80070a6:	4608      	mov	r0, r1
 80070a8:	4611      	mov	r1, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7f9 fd5a 	bl	8000b68 <_write>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_write_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_write_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	20001c50 	.word	0x20001c50

080070c4 <__errno>:
 80070c4:	4b01      	ldr	r3, [pc, #4]	@ (80070cc <__errno+0x8>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	2000001c 	.word	0x2000001c

080070d0 <__libc_init_array>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007108 <__libc_init_array+0x38>)
 80070d4:	4c0d      	ldr	r4, [pc, #52]	@ (800710c <__libc_init_array+0x3c>)
 80070d6:	1b64      	subs	r4, r4, r5
 80070d8:	10a4      	asrs	r4, r4, #2
 80070da:	2600      	movs	r6, #0
 80070dc:	42a6      	cmp	r6, r4
 80070de:	d109      	bne.n	80070f4 <__libc_init_array+0x24>
 80070e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007110 <__libc_init_array+0x40>)
 80070e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007114 <__libc_init_array+0x44>)
 80070e4:	f000 fd32 	bl	8007b4c <_init>
 80070e8:	1b64      	subs	r4, r4, r5
 80070ea:	10a4      	asrs	r4, r4, #2
 80070ec:	2600      	movs	r6, #0
 80070ee:	42a6      	cmp	r6, r4
 80070f0:	d105      	bne.n	80070fe <__libc_init_array+0x2e>
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f8:	4798      	blx	r3
 80070fa:	3601      	adds	r6, #1
 80070fc:	e7ee      	b.n	80070dc <__libc_init_array+0xc>
 80070fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007102:	4798      	blx	r3
 8007104:	3601      	adds	r6, #1
 8007106:	e7f2      	b.n	80070ee <__libc_init_array+0x1e>
 8007108:	08007db0 	.word	0x08007db0
 800710c:	08007db0 	.word	0x08007db0
 8007110:	08007db0 	.word	0x08007db0
 8007114:	08007db4 	.word	0x08007db4

08007118 <__retarget_lock_init_recursive>:
 8007118:	4770      	bx	lr

0800711a <__retarget_lock_acquire_recursive>:
 800711a:	4770      	bx	lr

0800711c <__retarget_lock_release_recursive>:
 800711c:	4770      	bx	lr

0800711e <memcpy>:
 800711e:	440a      	add	r2, r1
 8007120:	4291      	cmp	r1, r2
 8007122:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007126:	d100      	bne.n	800712a <memcpy+0xc>
 8007128:	4770      	bx	lr
 800712a:	b510      	push	{r4, lr}
 800712c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007134:	4291      	cmp	r1, r2
 8007136:	d1f9      	bne.n	800712c <memcpy+0xe>
 8007138:	bd10      	pop	{r4, pc}
	...

0800713c <_free_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4605      	mov	r5, r0
 8007140:	2900      	cmp	r1, #0
 8007142:	d041      	beq.n	80071c8 <_free_r+0x8c>
 8007144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007148:	1f0c      	subs	r4, r1, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	bfb8      	it	lt
 800714e:	18e4      	addlt	r4, r4, r3
 8007150:	f000 f8e0 	bl	8007314 <__malloc_lock>
 8007154:	4a1d      	ldr	r2, [pc, #116]	@ (80071cc <_free_r+0x90>)
 8007156:	6813      	ldr	r3, [r2, #0]
 8007158:	b933      	cbnz	r3, 8007168 <_free_r+0x2c>
 800715a:	6063      	str	r3, [r4, #4]
 800715c:	6014      	str	r4, [r2, #0]
 800715e:	4628      	mov	r0, r5
 8007160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007164:	f000 b8dc 	b.w	8007320 <__malloc_unlock>
 8007168:	42a3      	cmp	r3, r4
 800716a:	d908      	bls.n	800717e <_free_r+0x42>
 800716c:	6820      	ldr	r0, [r4, #0]
 800716e:	1821      	adds	r1, r4, r0
 8007170:	428b      	cmp	r3, r1
 8007172:	bf01      	itttt	eq
 8007174:	6819      	ldreq	r1, [r3, #0]
 8007176:	685b      	ldreq	r3, [r3, #4]
 8007178:	1809      	addeq	r1, r1, r0
 800717a:	6021      	streq	r1, [r4, #0]
 800717c:	e7ed      	b.n	800715a <_free_r+0x1e>
 800717e:	461a      	mov	r2, r3
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	b10b      	cbz	r3, 8007188 <_free_r+0x4c>
 8007184:	42a3      	cmp	r3, r4
 8007186:	d9fa      	bls.n	800717e <_free_r+0x42>
 8007188:	6811      	ldr	r1, [r2, #0]
 800718a:	1850      	adds	r0, r2, r1
 800718c:	42a0      	cmp	r0, r4
 800718e:	d10b      	bne.n	80071a8 <_free_r+0x6c>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	4401      	add	r1, r0
 8007194:	1850      	adds	r0, r2, r1
 8007196:	4283      	cmp	r3, r0
 8007198:	6011      	str	r1, [r2, #0]
 800719a:	d1e0      	bne.n	800715e <_free_r+0x22>
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	6053      	str	r3, [r2, #4]
 80071a2:	4408      	add	r0, r1
 80071a4:	6010      	str	r0, [r2, #0]
 80071a6:	e7da      	b.n	800715e <_free_r+0x22>
 80071a8:	d902      	bls.n	80071b0 <_free_r+0x74>
 80071aa:	230c      	movs	r3, #12
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	e7d6      	b.n	800715e <_free_r+0x22>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	1821      	adds	r1, r4, r0
 80071b4:	428b      	cmp	r3, r1
 80071b6:	bf04      	itt	eq
 80071b8:	6819      	ldreq	r1, [r3, #0]
 80071ba:	685b      	ldreq	r3, [r3, #4]
 80071bc:	6063      	str	r3, [r4, #4]
 80071be:	bf04      	itt	eq
 80071c0:	1809      	addeq	r1, r1, r0
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	6054      	str	r4, [r2, #4]
 80071c6:	e7ca      	b.n	800715e <_free_r+0x22>
 80071c8:	bd38      	pop	{r3, r4, r5, pc}
 80071ca:	bf00      	nop
 80071cc:	20001c5c 	.word	0x20001c5c

080071d0 <sbrk_aligned>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4e0f      	ldr	r6, [pc, #60]	@ (8007210 <sbrk_aligned+0x40>)
 80071d4:	460c      	mov	r4, r1
 80071d6:	6831      	ldr	r1, [r6, #0]
 80071d8:	4605      	mov	r5, r0
 80071da:	b911      	cbnz	r1, 80071e2 <sbrk_aligned+0x12>
 80071dc:	f000 fca6 	bl	8007b2c <_sbrk_r>
 80071e0:	6030      	str	r0, [r6, #0]
 80071e2:	4621      	mov	r1, r4
 80071e4:	4628      	mov	r0, r5
 80071e6:	f000 fca1 	bl	8007b2c <_sbrk_r>
 80071ea:	1c43      	adds	r3, r0, #1
 80071ec:	d103      	bne.n	80071f6 <sbrk_aligned+0x26>
 80071ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80071f2:	4620      	mov	r0, r4
 80071f4:	bd70      	pop	{r4, r5, r6, pc}
 80071f6:	1cc4      	adds	r4, r0, #3
 80071f8:	f024 0403 	bic.w	r4, r4, #3
 80071fc:	42a0      	cmp	r0, r4
 80071fe:	d0f8      	beq.n	80071f2 <sbrk_aligned+0x22>
 8007200:	1a21      	subs	r1, r4, r0
 8007202:	4628      	mov	r0, r5
 8007204:	f000 fc92 	bl	8007b2c <_sbrk_r>
 8007208:	3001      	adds	r0, #1
 800720a:	d1f2      	bne.n	80071f2 <sbrk_aligned+0x22>
 800720c:	e7ef      	b.n	80071ee <sbrk_aligned+0x1e>
 800720e:	bf00      	nop
 8007210:	20001c58 	.word	0x20001c58

08007214 <_malloc_r>:
 8007214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007218:	1ccd      	adds	r5, r1, #3
 800721a:	f025 0503 	bic.w	r5, r5, #3
 800721e:	3508      	adds	r5, #8
 8007220:	2d0c      	cmp	r5, #12
 8007222:	bf38      	it	cc
 8007224:	250c      	movcc	r5, #12
 8007226:	2d00      	cmp	r5, #0
 8007228:	4606      	mov	r6, r0
 800722a:	db01      	blt.n	8007230 <_malloc_r+0x1c>
 800722c:	42a9      	cmp	r1, r5
 800722e:	d904      	bls.n	800723a <_malloc_r+0x26>
 8007230:	230c      	movs	r3, #12
 8007232:	6033      	str	r3, [r6, #0]
 8007234:	2000      	movs	r0, #0
 8007236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007310 <_malloc_r+0xfc>
 800723e:	f000 f869 	bl	8007314 <__malloc_lock>
 8007242:	f8d8 3000 	ldr.w	r3, [r8]
 8007246:	461c      	mov	r4, r3
 8007248:	bb44      	cbnz	r4, 800729c <_malloc_r+0x88>
 800724a:	4629      	mov	r1, r5
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff ffbf 	bl	80071d0 <sbrk_aligned>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	4604      	mov	r4, r0
 8007256:	d158      	bne.n	800730a <_malloc_r+0xf6>
 8007258:	f8d8 4000 	ldr.w	r4, [r8]
 800725c:	4627      	mov	r7, r4
 800725e:	2f00      	cmp	r7, #0
 8007260:	d143      	bne.n	80072ea <_malloc_r+0xd6>
 8007262:	2c00      	cmp	r4, #0
 8007264:	d04b      	beq.n	80072fe <_malloc_r+0xea>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	4639      	mov	r1, r7
 800726a:	4630      	mov	r0, r6
 800726c:	eb04 0903 	add.w	r9, r4, r3
 8007270:	f000 fc5c 	bl	8007b2c <_sbrk_r>
 8007274:	4581      	cmp	r9, r0
 8007276:	d142      	bne.n	80072fe <_malloc_r+0xea>
 8007278:	6821      	ldr	r1, [r4, #0]
 800727a:	1a6d      	subs	r5, r5, r1
 800727c:	4629      	mov	r1, r5
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff ffa6 	bl	80071d0 <sbrk_aligned>
 8007284:	3001      	adds	r0, #1
 8007286:	d03a      	beq.n	80072fe <_malloc_r+0xea>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	442b      	add	r3, r5
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	f8d8 3000 	ldr.w	r3, [r8]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	bb62      	cbnz	r2, 80072f0 <_malloc_r+0xdc>
 8007296:	f8c8 7000 	str.w	r7, [r8]
 800729a:	e00f      	b.n	80072bc <_malloc_r+0xa8>
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	1b52      	subs	r2, r2, r5
 80072a0:	d420      	bmi.n	80072e4 <_malloc_r+0xd0>
 80072a2:	2a0b      	cmp	r2, #11
 80072a4:	d917      	bls.n	80072d6 <_malloc_r+0xc2>
 80072a6:	1961      	adds	r1, r4, r5
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	6025      	str	r5, [r4, #0]
 80072ac:	bf18      	it	ne
 80072ae:	6059      	strne	r1, [r3, #4]
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	bf08      	it	eq
 80072b4:	f8c8 1000 	streq.w	r1, [r8]
 80072b8:	5162      	str	r2, [r4, r5]
 80072ba:	604b      	str	r3, [r1, #4]
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 f82f 	bl	8007320 <__malloc_unlock>
 80072c2:	f104 000b 	add.w	r0, r4, #11
 80072c6:	1d23      	adds	r3, r4, #4
 80072c8:	f020 0007 	bic.w	r0, r0, #7
 80072cc:	1ac2      	subs	r2, r0, r3
 80072ce:	bf1c      	itt	ne
 80072d0:	1a1b      	subne	r3, r3, r0
 80072d2:	50a3      	strne	r3, [r4, r2]
 80072d4:	e7af      	b.n	8007236 <_malloc_r+0x22>
 80072d6:	6862      	ldr	r2, [r4, #4]
 80072d8:	42a3      	cmp	r3, r4
 80072da:	bf0c      	ite	eq
 80072dc:	f8c8 2000 	streq.w	r2, [r8]
 80072e0:	605a      	strne	r2, [r3, #4]
 80072e2:	e7eb      	b.n	80072bc <_malloc_r+0xa8>
 80072e4:	4623      	mov	r3, r4
 80072e6:	6864      	ldr	r4, [r4, #4]
 80072e8:	e7ae      	b.n	8007248 <_malloc_r+0x34>
 80072ea:	463c      	mov	r4, r7
 80072ec:	687f      	ldr	r7, [r7, #4]
 80072ee:	e7b6      	b.n	800725e <_malloc_r+0x4a>
 80072f0:	461a      	mov	r2, r3
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d1fb      	bne.n	80072f0 <_malloc_r+0xdc>
 80072f8:	2300      	movs	r3, #0
 80072fa:	6053      	str	r3, [r2, #4]
 80072fc:	e7de      	b.n	80072bc <_malloc_r+0xa8>
 80072fe:	230c      	movs	r3, #12
 8007300:	6033      	str	r3, [r6, #0]
 8007302:	4630      	mov	r0, r6
 8007304:	f000 f80c 	bl	8007320 <__malloc_unlock>
 8007308:	e794      	b.n	8007234 <_malloc_r+0x20>
 800730a:	6005      	str	r5, [r0, #0]
 800730c:	e7d6      	b.n	80072bc <_malloc_r+0xa8>
 800730e:	bf00      	nop
 8007310:	20001c5c 	.word	0x20001c5c

08007314 <__malloc_lock>:
 8007314:	4801      	ldr	r0, [pc, #4]	@ (800731c <__malloc_lock+0x8>)
 8007316:	f7ff bf00 	b.w	800711a <__retarget_lock_acquire_recursive>
 800731a:	bf00      	nop
 800731c:	20001c54 	.word	0x20001c54

08007320 <__malloc_unlock>:
 8007320:	4801      	ldr	r0, [pc, #4]	@ (8007328 <__malloc_unlock+0x8>)
 8007322:	f7ff befb 	b.w	800711c <__retarget_lock_release_recursive>
 8007326:	bf00      	nop
 8007328:	20001c54 	.word	0x20001c54

0800732c <__sfputc_r>:
 800732c:	6893      	ldr	r3, [r2, #8]
 800732e:	3b01      	subs	r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	b410      	push	{r4}
 8007334:	6093      	str	r3, [r2, #8]
 8007336:	da08      	bge.n	800734a <__sfputc_r+0x1e>
 8007338:	6994      	ldr	r4, [r2, #24]
 800733a:	42a3      	cmp	r3, r4
 800733c:	db01      	blt.n	8007342 <__sfputc_r+0x16>
 800733e:	290a      	cmp	r1, #10
 8007340:	d103      	bne.n	800734a <__sfputc_r+0x1e>
 8007342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007346:	f7ff bd84 	b.w	8006e52 <__swbuf_r>
 800734a:	6813      	ldr	r3, [r2, #0]
 800734c:	1c58      	adds	r0, r3, #1
 800734e:	6010      	str	r0, [r2, #0]
 8007350:	7019      	strb	r1, [r3, #0]
 8007352:	4608      	mov	r0, r1
 8007354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007358:	4770      	bx	lr

0800735a <__sfputs_r>:
 800735a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735c:	4606      	mov	r6, r0
 800735e:	460f      	mov	r7, r1
 8007360:	4614      	mov	r4, r2
 8007362:	18d5      	adds	r5, r2, r3
 8007364:	42ac      	cmp	r4, r5
 8007366:	d101      	bne.n	800736c <__sfputs_r+0x12>
 8007368:	2000      	movs	r0, #0
 800736a:	e007      	b.n	800737c <__sfputs_r+0x22>
 800736c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007370:	463a      	mov	r2, r7
 8007372:	4630      	mov	r0, r6
 8007374:	f7ff ffda 	bl	800732c <__sfputc_r>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d1f3      	bne.n	8007364 <__sfputs_r+0xa>
 800737c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007380 <_vfiprintf_r>:
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	460d      	mov	r5, r1
 8007386:	b09d      	sub	sp, #116	@ 0x74
 8007388:	4614      	mov	r4, r2
 800738a:	4698      	mov	r8, r3
 800738c:	4606      	mov	r6, r0
 800738e:	b118      	cbz	r0, 8007398 <_vfiprintf_r+0x18>
 8007390:	6a03      	ldr	r3, [r0, #32]
 8007392:	b90b      	cbnz	r3, 8007398 <_vfiprintf_r+0x18>
 8007394:	f7ff fc74 	bl	8006c80 <__sinit>
 8007398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	d405      	bmi.n	80073aa <_vfiprintf_r+0x2a>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	059a      	lsls	r2, r3, #22
 80073a2:	d402      	bmi.n	80073aa <_vfiprintf_r+0x2a>
 80073a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073a6:	f7ff feb8 	bl	800711a <__retarget_lock_acquire_recursive>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	071b      	lsls	r3, r3, #28
 80073ae:	d501      	bpl.n	80073b4 <_vfiprintf_r+0x34>
 80073b0:	692b      	ldr	r3, [r5, #16]
 80073b2:	b99b      	cbnz	r3, 80073dc <_vfiprintf_r+0x5c>
 80073b4:	4629      	mov	r1, r5
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7ff fd8a 	bl	8006ed0 <__swsetup_r>
 80073bc:	b170      	cbz	r0, 80073dc <_vfiprintf_r+0x5c>
 80073be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073c0:	07dc      	lsls	r4, r3, #31
 80073c2:	d504      	bpl.n	80073ce <_vfiprintf_r+0x4e>
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073c8:	b01d      	add	sp, #116	@ 0x74
 80073ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ce:	89ab      	ldrh	r3, [r5, #12]
 80073d0:	0598      	lsls	r0, r3, #22
 80073d2:	d4f7      	bmi.n	80073c4 <_vfiprintf_r+0x44>
 80073d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073d6:	f7ff fea1 	bl	800711c <__retarget_lock_release_recursive>
 80073da:	e7f3      	b.n	80073c4 <_vfiprintf_r+0x44>
 80073dc:	2300      	movs	r3, #0
 80073de:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e0:	2320      	movs	r3, #32
 80073e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80073ea:	2330      	movs	r3, #48	@ 0x30
 80073ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800759c <_vfiprintf_r+0x21c>
 80073f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073f4:	f04f 0901 	mov.w	r9, #1
 80073f8:	4623      	mov	r3, r4
 80073fa:	469a      	mov	sl, r3
 80073fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007400:	b10a      	cbz	r2, 8007406 <_vfiprintf_r+0x86>
 8007402:	2a25      	cmp	r2, #37	@ 0x25
 8007404:	d1f9      	bne.n	80073fa <_vfiprintf_r+0x7a>
 8007406:	ebba 0b04 	subs.w	fp, sl, r4
 800740a:	d00b      	beq.n	8007424 <_vfiprintf_r+0xa4>
 800740c:	465b      	mov	r3, fp
 800740e:	4622      	mov	r2, r4
 8007410:	4629      	mov	r1, r5
 8007412:	4630      	mov	r0, r6
 8007414:	f7ff ffa1 	bl	800735a <__sfputs_r>
 8007418:	3001      	adds	r0, #1
 800741a:	f000 80a7 	beq.w	800756c <_vfiprintf_r+0x1ec>
 800741e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007420:	445a      	add	r2, fp
 8007422:	9209      	str	r2, [sp, #36]	@ 0x24
 8007424:	f89a 3000 	ldrb.w	r3, [sl]
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 809f 	beq.w	800756c <_vfiprintf_r+0x1ec>
 800742e:	2300      	movs	r3, #0
 8007430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007438:	f10a 0a01 	add.w	sl, sl, #1
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	9307      	str	r3, [sp, #28]
 8007440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007444:	931a      	str	r3, [sp, #104]	@ 0x68
 8007446:	4654      	mov	r4, sl
 8007448:	2205      	movs	r2, #5
 800744a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744e:	4853      	ldr	r0, [pc, #332]	@ (800759c <_vfiprintf_r+0x21c>)
 8007450:	f7f8 fece 	bl	80001f0 <memchr>
 8007454:	9a04      	ldr	r2, [sp, #16]
 8007456:	b9d8      	cbnz	r0, 8007490 <_vfiprintf_r+0x110>
 8007458:	06d1      	lsls	r1, r2, #27
 800745a:	bf44      	itt	mi
 800745c:	2320      	movmi	r3, #32
 800745e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007462:	0713      	lsls	r3, r2, #28
 8007464:	bf44      	itt	mi
 8007466:	232b      	movmi	r3, #43	@ 0x2b
 8007468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800746c:	f89a 3000 	ldrb.w	r3, [sl]
 8007470:	2b2a      	cmp	r3, #42	@ 0x2a
 8007472:	d015      	beq.n	80074a0 <_vfiprintf_r+0x120>
 8007474:	9a07      	ldr	r2, [sp, #28]
 8007476:	4654      	mov	r4, sl
 8007478:	2000      	movs	r0, #0
 800747a:	f04f 0c0a 	mov.w	ip, #10
 800747e:	4621      	mov	r1, r4
 8007480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007484:	3b30      	subs	r3, #48	@ 0x30
 8007486:	2b09      	cmp	r3, #9
 8007488:	d94b      	bls.n	8007522 <_vfiprintf_r+0x1a2>
 800748a:	b1b0      	cbz	r0, 80074ba <_vfiprintf_r+0x13a>
 800748c:	9207      	str	r2, [sp, #28]
 800748e:	e014      	b.n	80074ba <_vfiprintf_r+0x13a>
 8007490:	eba0 0308 	sub.w	r3, r0, r8
 8007494:	fa09 f303 	lsl.w	r3, r9, r3
 8007498:	4313      	orrs	r3, r2
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	46a2      	mov	sl, r4
 800749e:	e7d2      	b.n	8007446 <_vfiprintf_r+0xc6>
 80074a0:	9b03      	ldr	r3, [sp, #12]
 80074a2:	1d19      	adds	r1, r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	9103      	str	r1, [sp, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	bfbb      	ittet	lt
 80074ac:	425b      	neglt	r3, r3
 80074ae:	f042 0202 	orrlt.w	r2, r2, #2
 80074b2:	9307      	strge	r3, [sp, #28]
 80074b4:	9307      	strlt	r3, [sp, #28]
 80074b6:	bfb8      	it	lt
 80074b8:	9204      	strlt	r2, [sp, #16]
 80074ba:	7823      	ldrb	r3, [r4, #0]
 80074bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80074be:	d10a      	bne.n	80074d6 <_vfiprintf_r+0x156>
 80074c0:	7863      	ldrb	r3, [r4, #1]
 80074c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c4:	d132      	bne.n	800752c <_vfiprintf_r+0x1ac>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	1d1a      	adds	r2, r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	9203      	str	r2, [sp, #12]
 80074ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074d2:	3402      	adds	r4, #2
 80074d4:	9305      	str	r3, [sp, #20]
 80074d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075ac <_vfiprintf_r+0x22c>
 80074da:	7821      	ldrb	r1, [r4, #0]
 80074dc:	2203      	movs	r2, #3
 80074de:	4650      	mov	r0, sl
 80074e0:	f7f8 fe86 	bl	80001f0 <memchr>
 80074e4:	b138      	cbz	r0, 80074f6 <_vfiprintf_r+0x176>
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	eba0 000a 	sub.w	r0, r0, sl
 80074ec:	2240      	movs	r2, #64	@ 0x40
 80074ee:	4082      	lsls	r2, r0
 80074f0:	4313      	orrs	r3, r2
 80074f2:	3401      	adds	r4, #1
 80074f4:	9304      	str	r3, [sp, #16]
 80074f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fa:	4829      	ldr	r0, [pc, #164]	@ (80075a0 <_vfiprintf_r+0x220>)
 80074fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007500:	2206      	movs	r2, #6
 8007502:	f7f8 fe75 	bl	80001f0 <memchr>
 8007506:	2800      	cmp	r0, #0
 8007508:	d03f      	beq.n	800758a <_vfiprintf_r+0x20a>
 800750a:	4b26      	ldr	r3, [pc, #152]	@ (80075a4 <_vfiprintf_r+0x224>)
 800750c:	bb1b      	cbnz	r3, 8007556 <_vfiprintf_r+0x1d6>
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	3307      	adds	r3, #7
 8007512:	f023 0307 	bic.w	r3, r3, #7
 8007516:	3308      	adds	r3, #8
 8007518:	9303      	str	r3, [sp, #12]
 800751a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800751c:	443b      	add	r3, r7
 800751e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007520:	e76a      	b.n	80073f8 <_vfiprintf_r+0x78>
 8007522:	fb0c 3202 	mla	r2, ip, r2, r3
 8007526:	460c      	mov	r4, r1
 8007528:	2001      	movs	r0, #1
 800752a:	e7a8      	b.n	800747e <_vfiprintf_r+0xfe>
 800752c:	2300      	movs	r3, #0
 800752e:	3401      	adds	r4, #1
 8007530:	9305      	str	r3, [sp, #20]
 8007532:	4619      	mov	r1, r3
 8007534:	f04f 0c0a 	mov.w	ip, #10
 8007538:	4620      	mov	r0, r4
 800753a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800753e:	3a30      	subs	r2, #48	@ 0x30
 8007540:	2a09      	cmp	r2, #9
 8007542:	d903      	bls.n	800754c <_vfiprintf_r+0x1cc>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0c6      	beq.n	80074d6 <_vfiprintf_r+0x156>
 8007548:	9105      	str	r1, [sp, #20]
 800754a:	e7c4      	b.n	80074d6 <_vfiprintf_r+0x156>
 800754c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007550:	4604      	mov	r4, r0
 8007552:	2301      	movs	r3, #1
 8007554:	e7f0      	b.n	8007538 <_vfiprintf_r+0x1b8>
 8007556:	ab03      	add	r3, sp, #12
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	462a      	mov	r2, r5
 800755c:	4b12      	ldr	r3, [pc, #72]	@ (80075a8 <_vfiprintf_r+0x228>)
 800755e:	a904      	add	r1, sp, #16
 8007560:	4630      	mov	r0, r6
 8007562:	f3af 8000 	nop.w
 8007566:	4607      	mov	r7, r0
 8007568:	1c78      	adds	r0, r7, #1
 800756a:	d1d6      	bne.n	800751a <_vfiprintf_r+0x19a>
 800756c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800756e:	07d9      	lsls	r1, r3, #31
 8007570:	d405      	bmi.n	800757e <_vfiprintf_r+0x1fe>
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	059a      	lsls	r2, r3, #22
 8007576:	d402      	bmi.n	800757e <_vfiprintf_r+0x1fe>
 8007578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800757a:	f7ff fdcf 	bl	800711c <__retarget_lock_release_recursive>
 800757e:	89ab      	ldrh	r3, [r5, #12]
 8007580:	065b      	lsls	r3, r3, #25
 8007582:	f53f af1f 	bmi.w	80073c4 <_vfiprintf_r+0x44>
 8007586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007588:	e71e      	b.n	80073c8 <_vfiprintf_r+0x48>
 800758a:	ab03      	add	r3, sp, #12
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	462a      	mov	r2, r5
 8007590:	4b05      	ldr	r3, [pc, #20]	@ (80075a8 <_vfiprintf_r+0x228>)
 8007592:	a904      	add	r1, sp, #16
 8007594:	4630      	mov	r0, r6
 8007596:	f000 f879 	bl	800768c <_printf_i>
 800759a:	e7e4      	b.n	8007566 <_vfiprintf_r+0x1e6>
 800759c:	08007d74 	.word	0x08007d74
 80075a0:	08007d7e 	.word	0x08007d7e
 80075a4:	00000000 	.word	0x00000000
 80075a8:	0800735b 	.word	0x0800735b
 80075ac:	08007d7a 	.word	0x08007d7a

080075b0 <_printf_common>:
 80075b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	4616      	mov	r6, r2
 80075b6:	4698      	mov	r8, r3
 80075b8:	688a      	ldr	r2, [r1, #8]
 80075ba:	690b      	ldr	r3, [r1, #16]
 80075bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075c0:	4293      	cmp	r3, r2
 80075c2:	bfb8      	it	lt
 80075c4:	4613      	movlt	r3, r2
 80075c6:	6033      	str	r3, [r6, #0]
 80075c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075cc:	4607      	mov	r7, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	b10a      	cbz	r2, 80075d6 <_printf_common+0x26>
 80075d2:	3301      	adds	r3, #1
 80075d4:	6033      	str	r3, [r6, #0]
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	0699      	lsls	r1, r3, #26
 80075da:	bf42      	ittt	mi
 80075dc:	6833      	ldrmi	r3, [r6, #0]
 80075de:	3302      	addmi	r3, #2
 80075e0:	6033      	strmi	r3, [r6, #0]
 80075e2:	6825      	ldr	r5, [r4, #0]
 80075e4:	f015 0506 	ands.w	r5, r5, #6
 80075e8:	d106      	bne.n	80075f8 <_printf_common+0x48>
 80075ea:	f104 0a19 	add.w	sl, r4, #25
 80075ee:	68e3      	ldr	r3, [r4, #12]
 80075f0:	6832      	ldr	r2, [r6, #0]
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	42ab      	cmp	r3, r5
 80075f6:	dc26      	bgt.n	8007646 <_printf_common+0x96>
 80075f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	3b00      	subs	r3, #0
 8007600:	bf18      	it	ne
 8007602:	2301      	movne	r3, #1
 8007604:	0692      	lsls	r2, r2, #26
 8007606:	d42b      	bmi.n	8007660 <_printf_common+0xb0>
 8007608:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800760c:	4641      	mov	r1, r8
 800760e:	4638      	mov	r0, r7
 8007610:	47c8      	blx	r9
 8007612:	3001      	adds	r0, #1
 8007614:	d01e      	beq.n	8007654 <_printf_common+0xa4>
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	6922      	ldr	r2, [r4, #16]
 800761a:	f003 0306 	and.w	r3, r3, #6
 800761e:	2b04      	cmp	r3, #4
 8007620:	bf02      	ittt	eq
 8007622:	68e5      	ldreq	r5, [r4, #12]
 8007624:	6833      	ldreq	r3, [r6, #0]
 8007626:	1aed      	subeq	r5, r5, r3
 8007628:	68a3      	ldr	r3, [r4, #8]
 800762a:	bf0c      	ite	eq
 800762c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007630:	2500      	movne	r5, #0
 8007632:	4293      	cmp	r3, r2
 8007634:	bfc4      	itt	gt
 8007636:	1a9b      	subgt	r3, r3, r2
 8007638:	18ed      	addgt	r5, r5, r3
 800763a:	2600      	movs	r6, #0
 800763c:	341a      	adds	r4, #26
 800763e:	42b5      	cmp	r5, r6
 8007640:	d11a      	bne.n	8007678 <_printf_common+0xc8>
 8007642:	2000      	movs	r0, #0
 8007644:	e008      	b.n	8007658 <_printf_common+0xa8>
 8007646:	2301      	movs	r3, #1
 8007648:	4652      	mov	r2, sl
 800764a:	4641      	mov	r1, r8
 800764c:	4638      	mov	r0, r7
 800764e:	47c8      	blx	r9
 8007650:	3001      	adds	r0, #1
 8007652:	d103      	bne.n	800765c <_printf_common+0xac>
 8007654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765c:	3501      	adds	r5, #1
 800765e:	e7c6      	b.n	80075ee <_printf_common+0x3e>
 8007660:	18e1      	adds	r1, r4, r3
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	2030      	movs	r0, #48	@ 0x30
 8007666:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800766a:	4422      	add	r2, r4
 800766c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007670:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007674:	3302      	adds	r3, #2
 8007676:	e7c7      	b.n	8007608 <_printf_common+0x58>
 8007678:	2301      	movs	r3, #1
 800767a:	4622      	mov	r2, r4
 800767c:	4641      	mov	r1, r8
 800767e:	4638      	mov	r0, r7
 8007680:	47c8      	blx	r9
 8007682:	3001      	adds	r0, #1
 8007684:	d0e6      	beq.n	8007654 <_printf_common+0xa4>
 8007686:	3601      	adds	r6, #1
 8007688:	e7d9      	b.n	800763e <_printf_common+0x8e>
	...

0800768c <_printf_i>:
 800768c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007690:	7e0f      	ldrb	r7, [r1, #24]
 8007692:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007694:	2f78      	cmp	r7, #120	@ 0x78
 8007696:	4691      	mov	r9, r2
 8007698:	4680      	mov	r8, r0
 800769a:	460c      	mov	r4, r1
 800769c:	469a      	mov	sl, r3
 800769e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076a2:	d807      	bhi.n	80076b4 <_printf_i+0x28>
 80076a4:	2f62      	cmp	r7, #98	@ 0x62
 80076a6:	d80a      	bhi.n	80076be <_printf_i+0x32>
 80076a8:	2f00      	cmp	r7, #0
 80076aa:	f000 80d2 	beq.w	8007852 <_printf_i+0x1c6>
 80076ae:	2f58      	cmp	r7, #88	@ 0x58
 80076b0:	f000 80b9 	beq.w	8007826 <_printf_i+0x19a>
 80076b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076bc:	e03a      	b.n	8007734 <_printf_i+0xa8>
 80076be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076c2:	2b15      	cmp	r3, #21
 80076c4:	d8f6      	bhi.n	80076b4 <_printf_i+0x28>
 80076c6:	a101      	add	r1, pc, #4	@ (adr r1, 80076cc <_printf_i+0x40>)
 80076c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076cc:	08007725 	.word	0x08007725
 80076d0:	08007739 	.word	0x08007739
 80076d4:	080076b5 	.word	0x080076b5
 80076d8:	080076b5 	.word	0x080076b5
 80076dc:	080076b5 	.word	0x080076b5
 80076e0:	080076b5 	.word	0x080076b5
 80076e4:	08007739 	.word	0x08007739
 80076e8:	080076b5 	.word	0x080076b5
 80076ec:	080076b5 	.word	0x080076b5
 80076f0:	080076b5 	.word	0x080076b5
 80076f4:	080076b5 	.word	0x080076b5
 80076f8:	08007839 	.word	0x08007839
 80076fc:	08007763 	.word	0x08007763
 8007700:	080077f3 	.word	0x080077f3
 8007704:	080076b5 	.word	0x080076b5
 8007708:	080076b5 	.word	0x080076b5
 800770c:	0800785b 	.word	0x0800785b
 8007710:	080076b5 	.word	0x080076b5
 8007714:	08007763 	.word	0x08007763
 8007718:	080076b5 	.word	0x080076b5
 800771c:	080076b5 	.word	0x080076b5
 8007720:	080077fb 	.word	0x080077fb
 8007724:	6833      	ldr	r3, [r6, #0]
 8007726:	1d1a      	adds	r2, r3, #4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6032      	str	r2, [r6, #0]
 800772c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007730:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007734:	2301      	movs	r3, #1
 8007736:	e09d      	b.n	8007874 <_printf_i+0x1e8>
 8007738:	6833      	ldr	r3, [r6, #0]
 800773a:	6820      	ldr	r0, [r4, #0]
 800773c:	1d19      	adds	r1, r3, #4
 800773e:	6031      	str	r1, [r6, #0]
 8007740:	0606      	lsls	r6, r0, #24
 8007742:	d501      	bpl.n	8007748 <_printf_i+0xbc>
 8007744:	681d      	ldr	r5, [r3, #0]
 8007746:	e003      	b.n	8007750 <_printf_i+0xc4>
 8007748:	0645      	lsls	r5, r0, #25
 800774a:	d5fb      	bpl.n	8007744 <_printf_i+0xb8>
 800774c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007750:	2d00      	cmp	r5, #0
 8007752:	da03      	bge.n	800775c <_printf_i+0xd0>
 8007754:	232d      	movs	r3, #45	@ 0x2d
 8007756:	426d      	negs	r5, r5
 8007758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800775c:	4859      	ldr	r0, [pc, #356]	@ (80078c4 <_printf_i+0x238>)
 800775e:	230a      	movs	r3, #10
 8007760:	e011      	b.n	8007786 <_printf_i+0xfa>
 8007762:	6821      	ldr	r1, [r4, #0]
 8007764:	6833      	ldr	r3, [r6, #0]
 8007766:	0608      	lsls	r0, r1, #24
 8007768:	f853 5b04 	ldr.w	r5, [r3], #4
 800776c:	d402      	bmi.n	8007774 <_printf_i+0xe8>
 800776e:	0649      	lsls	r1, r1, #25
 8007770:	bf48      	it	mi
 8007772:	b2ad      	uxthmi	r5, r5
 8007774:	2f6f      	cmp	r7, #111	@ 0x6f
 8007776:	4853      	ldr	r0, [pc, #332]	@ (80078c4 <_printf_i+0x238>)
 8007778:	6033      	str	r3, [r6, #0]
 800777a:	bf14      	ite	ne
 800777c:	230a      	movne	r3, #10
 800777e:	2308      	moveq	r3, #8
 8007780:	2100      	movs	r1, #0
 8007782:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007786:	6866      	ldr	r6, [r4, #4]
 8007788:	60a6      	str	r6, [r4, #8]
 800778a:	2e00      	cmp	r6, #0
 800778c:	bfa2      	ittt	ge
 800778e:	6821      	ldrge	r1, [r4, #0]
 8007790:	f021 0104 	bicge.w	r1, r1, #4
 8007794:	6021      	strge	r1, [r4, #0]
 8007796:	b90d      	cbnz	r5, 800779c <_printf_i+0x110>
 8007798:	2e00      	cmp	r6, #0
 800779a:	d04b      	beq.n	8007834 <_printf_i+0x1a8>
 800779c:	4616      	mov	r6, r2
 800779e:	fbb5 f1f3 	udiv	r1, r5, r3
 80077a2:	fb03 5711 	mls	r7, r3, r1, r5
 80077a6:	5dc7      	ldrb	r7, [r0, r7]
 80077a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077ac:	462f      	mov	r7, r5
 80077ae:	42bb      	cmp	r3, r7
 80077b0:	460d      	mov	r5, r1
 80077b2:	d9f4      	bls.n	800779e <_printf_i+0x112>
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d10b      	bne.n	80077d0 <_printf_i+0x144>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	07df      	lsls	r7, r3, #31
 80077bc:	d508      	bpl.n	80077d0 <_printf_i+0x144>
 80077be:	6923      	ldr	r3, [r4, #16]
 80077c0:	6861      	ldr	r1, [r4, #4]
 80077c2:	4299      	cmp	r1, r3
 80077c4:	bfde      	ittt	le
 80077c6:	2330      	movle	r3, #48	@ 0x30
 80077c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077cc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80077d0:	1b92      	subs	r2, r2, r6
 80077d2:	6122      	str	r2, [r4, #16]
 80077d4:	f8cd a000 	str.w	sl, [sp]
 80077d8:	464b      	mov	r3, r9
 80077da:	aa03      	add	r2, sp, #12
 80077dc:	4621      	mov	r1, r4
 80077de:	4640      	mov	r0, r8
 80077e0:	f7ff fee6 	bl	80075b0 <_printf_common>
 80077e4:	3001      	adds	r0, #1
 80077e6:	d14a      	bne.n	800787e <_printf_i+0x1f2>
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077ec:	b004      	add	sp, #16
 80077ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	f043 0320 	orr.w	r3, r3, #32
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	4833      	ldr	r0, [pc, #204]	@ (80078c8 <_printf_i+0x23c>)
 80077fc:	2778      	movs	r7, #120	@ 0x78
 80077fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	6831      	ldr	r1, [r6, #0]
 8007806:	061f      	lsls	r7, r3, #24
 8007808:	f851 5b04 	ldr.w	r5, [r1], #4
 800780c:	d402      	bmi.n	8007814 <_printf_i+0x188>
 800780e:	065f      	lsls	r7, r3, #25
 8007810:	bf48      	it	mi
 8007812:	b2ad      	uxthmi	r5, r5
 8007814:	6031      	str	r1, [r6, #0]
 8007816:	07d9      	lsls	r1, r3, #31
 8007818:	bf44      	itt	mi
 800781a:	f043 0320 	orrmi.w	r3, r3, #32
 800781e:	6023      	strmi	r3, [r4, #0]
 8007820:	b11d      	cbz	r5, 800782a <_printf_i+0x19e>
 8007822:	2310      	movs	r3, #16
 8007824:	e7ac      	b.n	8007780 <_printf_i+0xf4>
 8007826:	4827      	ldr	r0, [pc, #156]	@ (80078c4 <_printf_i+0x238>)
 8007828:	e7e9      	b.n	80077fe <_printf_i+0x172>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	f023 0320 	bic.w	r3, r3, #32
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	e7f6      	b.n	8007822 <_printf_i+0x196>
 8007834:	4616      	mov	r6, r2
 8007836:	e7bd      	b.n	80077b4 <_printf_i+0x128>
 8007838:	6833      	ldr	r3, [r6, #0]
 800783a:	6825      	ldr	r5, [r4, #0]
 800783c:	6961      	ldr	r1, [r4, #20]
 800783e:	1d18      	adds	r0, r3, #4
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	062e      	lsls	r6, r5, #24
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	d501      	bpl.n	800784c <_printf_i+0x1c0>
 8007848:	6019      	str	r1, [r3, #0]
 800784a:	e002      	b.n	8007852 <_printf_i+0x1c6>
 800784c:	0668      	lsls	r0, r5, #25
 800784e:	d5fb      	bpl.n	8007848 <_printf_i+0x1bc>
 8007850:	8019      	strh	r1, [r3, #0]
 8007852:	2300      	movs	r3, #0
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	4616      	mov	r6, r2
 8007858:	e7bc      	b.n	80077d4 <_printf_i+0x148>
 800785a:	6833      	ldr	r3, [r6, #0]
 800785c:	1d1a      	adds	r2, r3, #4
 800785e:	6032      	str	r2, [r6, #0]
 8007860:	681e      	ldr	r6, [r3, #0]
 8007862:	6862      	ldr	r2, [r4, #4]
 8007864:	2100      	movs	r1, #0
 8007866:	4630      	mov	r0, r6
 8007868:	f7f8 fcc2 	bl	80001f0 <memchr>
 800786c:	b108      	cbz	r0, 8007872 <_printf_i+0x1e6>
 800786e:	1b80      	subs	r0, r0, r6
 8007870:	6060      	str	r0, [r4, #4]
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	2300      	movs	r3, #0
 8007878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800787c:	e7aa      	b.n	80077d4 <_printf_i+0x148>
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	4632      	mov	r2, r6
 8007882:	4649      	mov	r1, r9
 8007884:	4640      	mov	r0, r8
 8007886:	47d0      	blx	sl
 8007888:	3001      	adds	r0, #1
 800788a:	d0ad      	beq.n	80077e8 <_printf_i+0x15c>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	079b      	lsls	r3, r3, #30
 8007890:	d413      	bmi.n	80078ba <_printf_i+0x22e>
 8007892:	68e0      	ldr	r0, [r4, #12]
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	4298      	cmp	r0, r3
 8007898:	bfb8      	it	lt
 800789a:	4618      	movlt	r0, r3
 800789c:	e7a6      	b.n	80077ec <_printf_i+0x160>
 800789e:	2301      	movs	r3, #1
 80078a0:	4632      	mov	r2, r6
 80078a2:	4649      	mov	r1, r9
 80078a4:	4640      	mov	r0, r8
 80078a6:	47d0      	blx	sl
 80078a8:	3001      	adds	r0, #1
 80078aa:	d09d      	beq.n	80077e8 <_printf_i+0x15c>
 80078ac:	3501      	adds	r5, #1
 80078ae:	68e3      	ldr	r3, [r4, #12]
 80078b0:	9903      	ldr	r1, [sp, #12]
 80078b2:	1a5b      	subs	r3, r3, r1
 80078b4:	42ab      	cmp	r3, r5
 80078b6:	dcf2      	bgt.n	800789e <_printf_i+0x212>
 80078b8:	e7eb      	b.n	8007892 <_printf_i+0x206>
 80078ba:	2500      	movs	r5, #0
 80078bc:	f104 0619 	add.w	r6, r4, #25
 80078c0:	e7f5      	b.n	80078ae <_printf_i+0x222>
 80078c2:	bf00      	nop
 80078c4:	08007d85 	.word	0x08007d85
 80078c8:	08007d96 	.word	0x08007d96

080078cc <__sflush_r>:
 80078cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d4:	0716      	lsls	r6, r2, #28
 80078d6:	4605      	mov	r5, r0
 80078d8:	460c      	mov	r4, r1
 80078da:	d454      	bmi.n	8007986 <__sflush_r+0xba>
 80078dc:	684b      	ldr	r3, [r1, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dc02      	bgt.n	80078e8 <__sflush_r+0x1c>
 80078e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dd48      	ble.n	800797a <__sflush_r+0xae>
 80078e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078ea:	2e00      	cmp	r6, #0
 80078ec:	d045      	beq.n	800797a <__sflush_r+0xae>
 80078ee:	2300      	movs	r3, #0
 80078f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078f4:	682f      	ldr	r7, [r5, #0]
 80078f6:	6a21      	ldr	r1, [r4, #32]
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	d030      	beq.n	800795e <__sflush_r+0x92>
 80078fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	0759      	lsls	r1, r3, #29
 8007902:	d505      	bpl.n	8007910 <__sflush_r+0x44>
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	1ad2      	subs	r2, r2, r3
 8007908:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800790a:	b10b      	cbz	r3, 8007910 <__sflush_r+0x44>
 800790c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	2300      	movs	r3, #0
 8007912:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007914:	6a21      	ldr	r1, [r4, #32]
 8007916:	4628      	mov	r0, r5
 8007918:	47b0      	blx	r6
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	d106      	bne.n	800792e <__sflush_r+0x62>
 8007920:	6829      	ldr	r1, [r5, #0]
 8007922:	291d      	cmp	r1, #29
 8007924:	d82b      	bhi.n	800797e <__sflush_r+0xb2>
 8007926:	4a2a      	ldr	r2, [pc, #168]	@ (80079d0 <__sflush_r+0x104>)
 8007928:	410a      	asrs	r2, r1
 800792a:	07d6      	lsls	r6, r2, #31
 800792c:	d427      	bmi.n	800797e <__sflush_r+0xb2>
 800792e:	2200      	movs	r2, #0
 8007930:	6062      	str	r2, [r4, #4]
 8007932:	04d9      	lsls	r1, r3, #19
 8007934:	6922      	ldr	r2, [r4, #16]
 8007936:	6022      	str	r2, [r4, #0]
 8007938:	d504      	bpl.n	8007944 <__sflush_r+0x78>
 800793a:	1c42      	adds	r2, r0, #1
 800793c:	d101      	bne.n	8007942 <__sflush_r+0x76>
 800793e:	682b      	ldr	r3, [r5, #0]
 8007940:	b903      	cbnz	r3, 8007944 <__sflush_r+0x78>
 8007942:	6560      	str	r0, [r4, #84]	@ 0x54
 8007944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007946:	602f      	str	r7, [r5, #0]
 8007948:	b1b9      	cbz	r1, 800797a <__sflush_r+0xae>
 800794a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800794e:	4299      	cmp	r1, r3
 8007950:	d002      	beq.n	8007958 <__sflush_r+0x8c>
 8007952:	4628      	mov	r0, r5
 8007954:	f7ff fbf2 	bl	800713c <_free_r>
 8007958:	2300      	movs	r3, #0
 800795a:	6363      	str	r3, [r4, #52]	@ 0x34
 800795c:	e00d      	b.n	800797a <__sflush_r+0xae>
 800795e:	2301      	movs	r3, #1
 8007960:	4628      	mov	r0, r5
 8007962:	47b0      	blx	r6
 8007964:	4602      	mov	r2, r0
 8007966:	1c50      	adds	r0, r2, #1
 8007968:	d1c9      	bne.n	80078fe <__sflush_r+0x32>
 800796a:	682b      	ldr	r3, [r5, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0c6      	beq.n	80078fe <__sflush_r+0x32>
 8007970:	2b1d      	cmp	r3, #29
 8007972:	d001      	beq.n	8007978 <__sflush_r+0xac>
 8007974:	2b16      	cmp	r3, #22
 8007976:	d11e      	bne.n	80079b6 <__sflush_r+0xea>
 8007978:	602f      	str	r7, [r5, #0]
 800797a:	2000      	movs	r0, #0
 800797c:	e022      	b.n	80079c4 <__sflush_r+0xf8>
 800797e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007982:	b21b      	sxth	r3, r3
 8007984:	e01b      	b.n	80079be <__sflush_r+0xf2>
 8007986:	690f      	ldr	r7, [r1, #16]
 8007988:	2f00      	cmp	r7, #0
 800798a:	d0f6      	beq.n	800797a <__sflush_r+0xae>
 800798c:	0793      	lsls	r3, r2, #30
 800798e:	680e      	ldr	r6, [r1, #0]
 8007990:	bf08      	it	eq
 8007992:	694b      	ldreq	r3, [r1, #20]
 8007994:	600f      	str	r7, [r1, #0]
 8007996:	bf18      	it	ne
 8007998:	2300      	movne	r3, #0
 800799a:	eba6 0807 	sub.w	r8, r6, r7
 800799e:	608b      	str	r3, [r1, #8]
 80079a0:	f1b8 0f00 	cmp.w	r8, #0
 80079a4:	dde9      	ble.n	800797a <__sflush_r+0xae>
 80079a6:	6a21      	ldr	r1, [r4, #32]
 80079a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079aa:	4643      	mov	r3, r8
 80079ac:	463a      	mov	r2, r7
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b0      	blx	r6
 80079b2:	2800      	cmp	r0, #0
 80079b4:	dc08      	bgt.n	80079c8 <__sflush_r+0xfc>
 80079b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c8:	4407      	add	r7, r0
 80079ca:	eba8 0800 	sub.w	r8, r8, r0
 80079ce:	e7e7      	b.n	80079a0 <__sflush_r+0xd4>
 80079d0:	dfbffffe 	.word	0xdfbffffe

080079d4 <_fflush_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	4605      	mov	r5, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	b913      	cbnz	r3, 80079e4 <_fflush_r+0x10>
 80079de:	2500      	movs	r5, #0
 80079e0:	4628      	mov	r0, r5
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	b118      	cbz	r0, 80079ee <_fflush_r+0x1a>
 80079e6:	6a03      	ldr	r3, [r0, #32]
 80079e8:	b90b      	cbnz	r3, 80079ee <_fflush_r+0x1a>
 80079ea:	f7ff f949 	bl	8006c80 <__sinit>
 80079ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0f3      	beq.n	80079de <_fflush_r+0xa>
 80079f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079f8:	07d0      	lsls	r0, r2, #31
 80079fa:	d404      	bmi.n	8007a06 <_fflush_r+0x32>
 80079fc:	0599      	lsls	r1, r3, #22
 80079fe:	d402      	bmi.n	8007a06 <_fflush_r+0x32>
 8007a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a02:	f7ff fb8a 	bl	800711a <__retarget_lock_acquire_recursive>
 8007a06:	4628      	mov	r0, r5
 8007a08:	4621      	mov	r1, r4
 8007a0a:	f7ff ff5f 	bl	80078cc <__sflush_r>
 8007a0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a10:	07da      	lsls	r2, r3, #31
 8007a12:	4605      	mov	r5, r0
 8007a14:	d4e4      	bmi.n	80079e0 <_fflush_r+0xc>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	059b      	lsls	r3, r3, #22
 8007a1a:	d4e1      	bmi.n	80079e0 <_fflush_r+0xc>
 8007a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1e:	f7ff fb7d 	bl	800711c <__retarget_lock_release_recursive>
 8007a22:	e7dd      	b.n	80079e0 <_fflush_r+0xc>

08007a24 <__swhatbuf_r>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	460c      	mov	r4, r1
 8007a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	b096      	sub	sp, #88	@ 0x58
 8007a30:	4615      	mov	r5, r2
 8007a32:	461e      	mov	r6, r3
 8007a34:	da0d      	bge.n	8007a52 <__swhatbuf_r+0x2e>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a3c:	f04f 0100 	mov.w	r1, #0
 8007a40:	bf14      	ite	ne
 8007a42:	2340      	movne	r3, #64	@ 0x40
 8007a44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a48:	2000      	movs	r0, #0
 8007a4a:	6031      	str	r1, [r6, #0]
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	b016      	add	sp, #88	@ 0x58
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	466a      	mov	r2, sp
 8007a54:	f000 f848 	bl	8007ae8 <_fstat_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	dbec      	blt.n	8007a36 <__swhatbuf_r+0x12>
 8007a5c:	9901      	ldr	r1, [sp, #4]
 8007a5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a66:	4259      	negs	r1, r3
 8007a68:	4159      	adcs	r1, r3
 8007a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a6e:	e7eb      	b.n	8007a48 <__swhatbuf_r+0x24>

08007a70 <__smakebuf_r>:
 8007a70:	898b      	ldrh	r3, [r1, #12]
 8007a72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a74:	079d      	lsls	r5, r3, #30
 8007a76:	4606      	mov	r6, r0
 8007a78:	460c      	mov	r4, r1
 8007a7a:	d507      	bpl.n	8007a8c <__smakebuf_r+0x1c>
 8007a7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	2301      	movs	r3, #1
 8007a86:	6163      	str	r3, [r4, #20]
 8007a88:	b003      	add	sp, #12
 8007a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a8c:	ab01      	add	r3, sp, #4
 8007a8e:	466a      	mov	r2, sp
 8007a90:	f7ff ffc8 	bl	8007a24 <__swhatbuf_r>
 8007a94:	9f00      	ldr	r7, [sp, #0]
 8007a96:	4605      	mov	r5, r0
 8007a98:	4639      	mov	r1, r7
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff fbba 	bl	8007214 <_malloc_r>
 8007aa0:	b948      	cbnz	r0, 8007ab6 <__smakebuf_r+0x46>
 8007aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa6:	059a      	lsls	r2, r3, #22
 8007aa8:	d4ee      	bmi.n	8007a88 <__smakebuf_r+0x18>
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	f043 0302 	orr.w	r3, r3, #2
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	e7e2      	b.n	8007a7c <__smakebuf_r+0xc>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	6020      	str	r0, [r4, #0]
 8007aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	9b01      	ldr	r3, [sp, #4]
 8007ac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ac6:	b15b      	cbz	r3, 8007ae0 <__smakebuf_r+0x70>
 8007ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007acc:	4630      	mov	r0, r6
 8007ace:	f000 f81d 	bl	8007b0c <_isatty_r>
 8007ad2:	b128      	cbz	r0, 8007ae0 <__smakebuf_r+0x70>
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	f023 0303 	bic.w	r3, r3, #3
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	81a3      	strh	r3, [r4, #12]
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	431d      	orrs	r5, r3
 8007ae4:	81a5      	strh	r5, [r4, #12]
 8007ae6:	e7cf      	b.n	8007a88 <__smakebuf_r+0x18>

08007ae8 <_fstat_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d07      	ldr	r5, [pc, #28]	@ (8007b08 <_fstat_r+0x20>)
 8007aec:	2300      	movs	r3, #0
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	4611      	mov	r1, r2
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	f7f9 f859 	bl	8000bac <_fstat>
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	d102      	bne.n	8007b04 <_fstat_r+0x1c>
 8007afe:	682b      	ldr	r3, [r5, #0]
 8007b00:	b103      	cbz	r3, 8007b04 <_fstat_r+0x1c>
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	bd38      	pop	{r3, r4, r5, pc}
 8007b06:	bf00      	nop
 8007b08:	20001c50 	.word	0x20001c50

08007b0c <_isatty_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d06      	ldr	r5, [pc, #24]	@ (8007b28 <_isatty_r+0x1c>)
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	602b      	str	r3, [r5, #0]
 8007b18:	f7f9 f858 	bl	8000bcc <_isatty>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_isatty_r+0x1a>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_isatty_r+0x1a>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20001c50 	.word	0x20001c50

08007b2c <_sbrk_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d06      	ldr	r5, [pc, #24]	@ (8007b48 <_sbrk_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7f9 f860 	bl	8000bfc <_sbrk>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_sbrk_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_sbrk_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	20001c50 	.word	0x20001c50

08007b4c <_init>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	bf00      	nop
 8007b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b52:	bc08      	pop	{r3}
 8007b54:	469e      	mov	lr, r3
 8007b56:	4770      	bx	lr

08007b58 <_fini>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	bf00      	nop
 8007b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5e:	bc08      	pop	{r3}
 8007b60:	469e      	mov	lr, r3
 8007b62:	4770      	bx	lr
