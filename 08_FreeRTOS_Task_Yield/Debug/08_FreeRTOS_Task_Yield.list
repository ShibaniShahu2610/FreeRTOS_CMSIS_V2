
08_FreeRTOS_Task_Yield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006e50  08006e50  00007e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f18  08006f18  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f18  08006f18  00007f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f20  08006f20  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f24  08006f24  00007f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006f28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bec  2000006c  08006f94  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c58  08006f94  00008c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb8a  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ab  00000000  00000000  00023c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  000274d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121d  00000000  00000000  00028c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004964  00000000  00000000  00029e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192e5  00000000  00000000  0002e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f2aa  00000000  00000000  00047a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156d40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b4  00000000  00000000  00156d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e38 	.word	0x08006e38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006e38 	.word	0x08006e38

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fb07 	bl	8000af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f826 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8a2 	bl	8000634 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f0:	f000 f874 	bl	80005dc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f003 fa10 	bl	8003918 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(Start_Task1, NULL, &Task_1_attributes);
 80004f8:	4a09      	ldr	r2, [pc, #36]	@ (8000520 <main+0x40>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4809      	ldr	r0, [pc, #36]	@ (8000524 <main+0x44>)
 80004fe:	f003 fa55 	bl	80039ac <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a08      	ldr	r2, [pc, #32]	@ (8000528 <main+0x48>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Start_Task_2, NULL, &Task_2_attributes);
 8000508:	4a08      	ldr	r2, [pc, #32]	@ (800052c <main+0x4c>)
 800050a:	2100      	movs	r1, #0
 800050c:	4808      	ldr	r0, [pc, #32]	@ (8000530 <main+0x50>)
 800050e:	f003 fa4d 	bl	80039ac <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <main+0x54>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f003 fa22 	bl	8003960 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <main+0x3c>
 8000520:	08006e88 	.word	0x08006e88
 8000524:	08000695 	.word	0x08000695
 8000528:	20000110 	.word	0x20000110
 800052c:	08006eac 	.word	0x08006eac
 8000530:	080006b1 	.word	0x080006b1
 8000534:	20000114 	.word	0x20000114

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	@ 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	@ 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f006 f95e 	bl	8006808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800055e:	f000 fd85 	bl	800106c <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 f8be 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2340      	movs	r3, #64	@ 0x40
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000586:	230a      	movs	r3, #10
 8000588:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fdcc 	bl	8001138 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005a6:	f000 f89f 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2303      	movs	r3, #3
 80005b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005b2:	2390      	movs	r3, #144	@ 0x90
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	2101      	movs	r1, #1
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f9d1 	bl	800196c <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d0:	f000 f88a 	bl	80006e8 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3758      	adds	r7, #88	@ 0x58
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <MX_LPUART1_UART_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <MX_LPUART1_UART_Init+0x50>)
 800061a:	f002 fb8d 	bl	8002d38 <HAL_UART_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f860 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000088 	.word	0x20000088
 8000630:	40008000 	.word	0x40008000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_GPIO_Init+0x5c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <MX_GPIO_Init+0x5c>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_GPIO_Init+0x5c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000652:	f000 fd61 	bl	8001118 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_GPIO_Init+0x5c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <MX_GPIO_Init+0x5c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <MX_GPIO_Init+0x5c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_GPIO_Init+0x5c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <MX_GPIO_Init+0x5c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <MX_GPIO_Init+0x5c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <Start_Task1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Task1 */
void Start_Task1(void *argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Task-1\r\n");
 800069c:	4803      	ldr	r0, [pc, #12]	@ (80006ac <Start_Task1+0x18>)
 800069e:	f005 ffd3 	bl	8006648 <puts>
    osThreadYield();
 80006a2:	f003 fa15 	bl	8003ad0 <osThreadYield>
	printf("Task-1\r\n");
 80006a6:	bf00      	nop
 80006a8:	e7f8      	b.n	800069c <Start_Task1+0x8>
 80006aa:	bf00      	nop
 80006ac:	08006e60 	.word	0x08006e60

080006b0 <Start_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_2 */
void Start_Task_2(void *argument)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_2 */
  /* Infinite loop */
  for(;;)
  {
	  printf("Task-2\r\n");
 80006b8:	4801      	ldr	r0, [pc, #4]	@ (80006c0 <Start_Task_2+0x10>)
 80006ba:	f005 ffc5 	bl	8006648 <puts>
 80006be:	e7fb      	b.n	80006b8 <Start_Task_2+0x8>
 80006c0:	08006e68 	.word	0x08006e68

080006c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d101      	bne.n	80006da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006d6:	f000 fa27 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40001000 	.word	0x40001000

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <Error_Handler+0x8>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_MspInit+0x4c>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <HAL_MspInit+0x4c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6613      	str	r3, [r2, #96]	@ 0x60
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_MspInit+0x4c>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <HAL_MspInit+0x4c>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <HAL_MspInit+0x4c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071c:	6593      	str	r3, [r2, #88]	@ 0x58
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <HAL_MspInit+0x4c>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	210f      	movs	r1, #15
 800072e:	f06f 0001 	mvn.w	r0, #1
 8000732:	f000 fad1 	bl	8000cd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0ac      	sub	sp, #176	@ 0xb0
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	228c      	movs	r2, #140	@ 0x8c
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f006 f84f 	bl	8006808 <memset>
  if(huart->Instance==LPUART1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <HAL_UART_MspInit+0xb4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d13d      	bne.n	80007f0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000774:	2320      	movs	r3, #32
 8000776:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000778:	2300      	movs	r3, #0
 800077a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fb49 	bl	8001e18 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800078c:	f7ff ffac 	bl	80006e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 8000792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000794:	4a19      	ldr	r2, [pc, #100]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 800079e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 80007aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ac:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 80007ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80007c0:	f000 fcaa 	bl	8001118 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007c4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80007de:	2308      	movs	r3, #8
 80007e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007e8:	4619      	mov	r1, r3
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <HAL_UART_MspInit+0xbc>)
 80007ec:	f000 fa9e 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80007f0:	bf00      	nop
 80007f2:	37b0      	adds	r7, #176	@ 0xb0
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40008000 	.word	0x40008000
 80007fc:	40021000 	.word	0x40021000
 8000800:	48001800 	.word	0x48001800

08000804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	@ 0x38
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000812:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <HAL_InitTick+0xe0>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000816:	4a33      	ldr	r2, [pc, #204]	@ (80008e4 <HAL_InitTick+0xe0>)
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	6593      	str	r3, [r2, #88]	@ 0x58
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <HAL_InitTick+0xe0>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800082a:	f107 0210 	add.w	r2, r7, #16
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fa5d 	bl	8001cf4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800083e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000840:	2b00      	cmp	r3, #0
 8000842:	d103      	bne.n	800084c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000844:	f001 fa2a 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8000848:	6378      	str	r0, [r7, #52]	@ 0x34
 800084a:	e004      	b.n	8000856 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800084c:	f001 fa26 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8000850:	4603      	mov	r3, r0
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000858:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <HAL_InitTick+0xe4>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	0c9b      	lsrs	r3, r3, #18
 8000860:	3b01      	subs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <HAL_InitTick+0xe8>)
 8000866:	4a22      	ldr	r2, [pc, #136]	@ (80008f0 <HAL_InitTick+0xec>)
 8000868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <HAL_InitTick+0xe8>)
 800086c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000870:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000872:	4a1e      	ldr	r2, [pc, #120]	@ (80008ec <HAL_InitTick+0xe8>)
 8000874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000876:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <HAL_InitTick+0xe8>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <HAL_InitTick+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <HAL_InitTick+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800088a:	4818      	ldr	r0, [pc, #96]	@ (80008ec <HAL_InitTick+0xe8>)
 800088c:	f001 ff8e 	bl	80027ac <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d11b      	bne.n	80008d6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800089e:	4813      	ldr	r0, [pc, #76]	@ (80008ec <HAL_InitTick+0xe8>)
 80008a0:	f001 ffe6 	bl	8002870 <HAL_TIM_Base_Start_IT>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d111      	bne.n	80008d6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b2:	2036      	movs	r0, #54	@ 0x36
 80008b4:	f000 fa2c 	bl	8000d10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d808      	bhi.n	80008d0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008be:	2200      	movs	r2, #0
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	2036      	movs	r0, #54	@ 0x36
 80008c4:	f000 fa08 	bl	8000cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c8:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_InitTick+0xf0>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	e002      	b.n	80008d6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3738      	adds	r7, #56	@ 0x38
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	20000118 	.word	0x20000118
 80008f0:	40001000 	.word	0x40001000
 80008f4:	20000004 	.word	0x20000004

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <TIM6_DAC_IRQHandler+0x10>)
 8000936:	f002 f80b 	bl	8002950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000118 	.word	0x20000118

08000944 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00a      	b.n	800096c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000956:	f3af 8000 	nop.w
 800095a:	4601      	mov	r1, r0
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	60ba      	str	r2, [r7, #8]
 8000962:	b2ca      	uxtb	r2, r1
 8000964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	dbf0      	blt.n	8000956 <_read+0x12>
  }

  return len;
 8000974:	687b      	ldr	r3, [r7, #4]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *)ptr, len, HAL_MAX_DELAY);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	b29a      	uxth	r2, r3
 8000990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <_write+0x28>)
 8000998:	f002 fa1c 	bl	8002dd4 <HAL_UART_Transmit>
  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000088 	.word	0x20000088

080009ac <_close>:

int _close(int file)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d4:	605a      	str	r2, [r3, #4]
  return 0;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_isatty>:

int _isatty(int file)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b085      	sub	sp, #20
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f005 ff84 	bl	8006950 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20050000 	.word	0x20050000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	20000164 	.word	0x20000164
 8000a7c:	20001c58 	.word	0x20001c58

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000adc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f005 ff43 	bl	800695c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad6:	f7ff fd03 	bl	80004e0 <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000adc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ae8:	08006f28 	.word	0x08006f28
  ldr r2, =_sbss
 8000aec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000af0:	20001c58 	.word	0x20001c58

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>

08000af6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f8de 	bl	8000cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b06:	200f      	movs	r0, #15
 8000b08:	f7ff fe7c 	bl	8000804 <HAL_InitTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e001      	b.n	8000b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b18:	f7ff fdec 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000168 	.word	0x20000168

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000168 	.word	0x20000168

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	@ (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	@ (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	@ 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff4c 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cea:	f7ff ff61 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff ffb1 	bl	8000c5c <NVIC_EncodePriority>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff80 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff54 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e166      	b.n	800100a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 8158 	beq.w	8001004 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d005      	beq.n	8000d6c <HAL_GPIO_Init+0x40>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 0201 	and.w	r2, r3, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d017      	beq.n	8000e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d123      	bne.n	8000e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	6939      	ldr	r1, [r7, #16]
 8000e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0203 	and.w	r2, r3, #3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 80b2 	beq.w	8001004 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b61      	ldr	r3, [pc, #388]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea4:	4a60      	ldr	r2, [pc, #384]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eac:	4b5e      	ldr	r3, [pc, #376]	@ (8001028 <HAL_GPIO_Init+0x2fc>)
 8000eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb8:	4a5c      	ldr	r2, [pc, #368]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ee2:	d02b      	beq.n	8000f3c <HAL_GPIO_Init+0x210>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a52      	ldr	r2, [pc, #328]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d025      	beq.n	8000f38 <HAL_GPIO_Init+0x20c>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a51      	ldr	r2, [pc, #324]	@ (8001034 <HAL_GPIO_Init+0x308>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d01f      	beq.n	8000f34 <HAL_GPIO_Init+0x208>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a50      	ldr	r2, [pc, #320]	@ (8001038 <HAL_GPIO_Init+0x30c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d019      	beq.n	8000f30 <HAL_GPIO_Init+0x204>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a4f      	ldr	r2, [pc, #316]	@ (800103c <HAL_GPIO_Init+0x310>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d013      	beq.n	8000f2c <HAL_GPIO_Init+0x200>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4e      	ldr	r2, [pc, #312]	@ (8001040 <HAL_GPIO_Init+0x314>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d00d      	beq.n	8000f28 <HAL_GPIO_Init+0x1fc>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a4d      	ldr	r2, [pc, #308]	@ (8001044 <HAL_GPIO_Init+0x318>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x1f8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <HAL_GPIO_Init+0x31c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d101      	bne.n	8000f20 <HAL_GPIO_Init+0x1f4>
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	e00e      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f20:	2308      	movs	r3, #8
 8000f22:	e00c      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f24:	2306      	movs	r3, #6
 8000f26:	e00a      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f28:	2305      	movs	r3, #5
 8000f2a:	e008      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f30:	2303      	movs	r3, #3
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f4e:	4937      	ldr	r1, [pc, #220]	@ (800102c <HAL_GPIO_Init+0x300>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f80:	4a32      	ldr	r2, [pc, #200]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f86:	4b31      	ldr	r3, [pc, #196]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000faa:	4a28      	ldr	r2, [pc, #160]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_GPIO_Init+0x320>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ffe:	4a13      	ldr	r2, [pc, #76]	@ (800104c <HAL_GPIO_Init+0x320>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	f47f ae91 	bne.w	8000d3c <HAL_GPIO_Init+0x10>
  }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	48000400 	.word	0x48000400
 8001034:	48000800 	.word	0x48000800
 8001038:	48000c00 	.word	0x48000c00
 800103c:	48001000 	.word	0x48001000
 8001040:	48001400 	.word	0x48001400
 8001044:	48001800 	.word	0x48001800
 8001048:	48001c00 	.word	0x48001c00
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <HAL_PWREx_GetVoltageRange+0x18>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800107a:	d130      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001088:	d038      	beq.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001092:	4a1e      	ldr	r2, [pc, #120]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001094:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001098:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2232      	movs	r2, #50	@ 0x32
 80010a0:	fb02 f303 	mul.w	r3, r2, r3
 80010a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0c9b      	lsrs	r3, r3, #18
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b0:	e002      	b.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010c4:	d102      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f2      	bne.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d8:	d110      	bne.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e00f      	b.n	80010fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ea:	d007      	beq.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f4:	4a05      	ldr	r2, [pc, #20]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40007000 	.word	0x40007000
 8001110:	20000000 	.word	0x20000000
 8001114:	431bde83 	.word	0x431bde83

08001118 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_PWREx_EnableVddIO2+0x1c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001122:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001126:	6053      	str	r3, [r2, #4]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40007000 	.word	0x40007000

08001138 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	f000 bc08 	b.w	800195c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114c:	4b96      	ldr	r3, [pc, #600]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001156:	4b94      	ldr	r3, [pc, #592]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80e4 	beq.w	8001336 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <HAL_RCC_OscConfig+0x4c>
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b0c      	cmp	r3, #12
 8001178:	f040 808b 	bne.w	8001292 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2b01      	cmp	r3, #1
 8001180:	f040 8087 	bne.w	8001292 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001184:	4b88      	ldr	r3, [pc, #544]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_RCC_OscConfig+0x64>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e3df      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1a      	ldr	r2, [r3, #32]
 80011a0:	4b81      	ldr	r3, [pc, #516]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <HAL_RCC_OscConfig+0x7e>
 80011ac:	4b7e      	ldr	r3, [pc, #504]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011b4:	e005      	b.n	80011c2 <HAL_RCC_OscConfig+0x8a>
 80011b6:	4b7c      	ldr	r3, [pc, #496]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80011b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d223      	bcs.n	800120e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fdc4 	bl	8001d58 <RCC_SetFlashLatencyFromMSIRange>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e3c0      	b.n	800195c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011da:	4b73      	ldr	r3, [pc, #460]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a72      	ldr	r2, [pc, #456]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b70      	ldr	r3, [pc, #448]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	496d      	ldr	r1, [pc, #436]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f8:	4b6b      	ldr	r3, [pc, #428]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	4968      	ldr	r1, [pc, #416]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e025      	b.n	800125a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120e:	4b66      	ldr	r3, [pc, #408]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a65      	ldr	r2, [pc, #404]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b63      	ldr	r3, [pc, #396]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4960      	ldr	r1, [pc, #384]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800122c:	4b5e      	ldr	r3, [pc, #376]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	495b      	ldr	r1, [pc, #364]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d109      	bne.n	800125a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fd84 	bl	8001d58 <RCC_SetFlashLatencyFromMSIRange>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e380      	b.n	800195c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800125a:	f000 fc87 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 800125e:	4602      	mov	r2, r0
 8001260:	4b51      	ldr	r3, [pc, #324]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4950      	ldr	r1, [pc, #320]	@ (80013ac <HAL_RCC_OscConfig+0x274>)
 800126c:	5ccb      	ldrb	r3, [r1, r3]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	4a4e      	ldr	r2, [pc, #312]	@ (80013b0 <HAL_RCC_OscConfig+0x278>)
 8001278:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800127a:	4b4e      	ldr	r3, [pc, #312]	@ (80013b4 <HAL_RCC_OscConfig+0x27c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fac0 	bl	8000804 <HAL_InitTick>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d052      	beq.n	8001334 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	e364      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d032      	beq.n	8001300 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800129a:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a42      	ldr	r2, [pc, #264]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fc53 	bl	8000b50 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc4f 	bl	8000b50 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e34d      	b.n	800195c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012c0:	4b39      	ldr	r3, [pc, #228]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012cc:	4b36      	ldr	r3, [pc, #216]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a35      	ldr	r2, [pc, #212]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4930      	ldr	r1, [pc, #192]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ea:	4b2f      	ldr	r3, [pc, #188]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	492b      	ldr	r1, [pc, #172]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
 80012fe:	e01a      	b.n	8001336 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a28      	ldr	r2, [pc, #160]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130c:	f7ff fc20 	bl	8000b50 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001314:	f7ff fc1c 	bl	8000b50 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e31a      	b.n	800195c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x1dc>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d073      	beq.n	800142a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b08      	cmp	r3, #8
 8001346:	d005      	beq.n	8001354 <HAL_RCC_OscConfig+0x21c>
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b0c      	cmp	r3, #12
 800134c:	d10e      	bne.n	800136c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d10b      	bne.n	800136c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d063      	beq.n	8001428 <HAL_RCC_OscConfig+0x2f0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d15f      	bne.n	8001428 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e2f7      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001374:	d106      	bne.n	8001384 <HAL_RCC_OscConfig+0x24c>
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e025      	b.n	80013d0 <HAL_RCC_OscConfig+0x298>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800138c:	d114      	bne.n	80013b8 <HAL_RCC_OscConfig+0x280>
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a02      	ldr	r2, [pc, #8]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e013      	b.n	80013d0 <HAL_RCC_OscConfig+0x298>
 80013a8:	40021000 	.word	0x40021000
 80013ac:	08006ed0 	.word	0x08006ed0
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004
 80013b8:	4ba0      	ldr	r3, [pc, #640]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a9f      	ldr	r2, [pc, #636]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b9d      	ldr	r3, [pc, #628]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a9c      	ldr	r2, [pc, #624]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fbba 	bl	8000b50 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fbb6 	bl	8000b50 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	@ 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e2b4      	b.n	800195c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f2:	4b92      	ldr	r3, [pc, #584]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x2a8>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fba6 	bl	8000b50 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fba2 	bl	8000b50 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e2a0      	b.n	800195c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141a:	4b88      	ldr	r3, [pc, #544]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x2d0>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d060      	beq.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x310>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d119      	bne.n	8001476 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d116      	bne.n	8001476 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001448:	4b7c      	ldr	r3, [pc, #496]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x328>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e27d      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b76      	ldr	r3, [pc, #472]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	4973      	ldr	r1, [pc, #460]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001474:	e040      	b.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d023      	beq.n	80014c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147e:	4b6f      	ldr	r3, [pc, #444]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6e      	ldr	r2, [pc, #440]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff fb61 	bl	8000b50 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fb5d 	bl	8000b50 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e25b      	b.n	800195c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a4:	4b65      	ldr	r3, [pc, #404]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b0:	4b62      	ldr	r3, [pc, #392]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	061b      	lsls	r3, r3, #24
 80014be:	495f      	ldr	r1, [pc, #380]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e018      	b.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c6:	4b5d      	ldr	r3, [pc, #372]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a5c      	ldr	r2, [pc, #368]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80014cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb3d 	bl	8000b50 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fb39 	bl	8000b50 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e237      	b.n	800195c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ec:	4b53      	ldr	r3, [pc, #332]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d03c      	beq.n	800157e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d01c      	beq.n	8001546 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150c:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001512:	4a4a      	ldr	r2, [pc, #296]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff fb18 	bl	8000b50 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff fb14 	bl	8000b50 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e212      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001536:	4b41      	ldr	r3, [pc, #260]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ef      	beq.n	8001524 <HAL_RCC_OscConfig+0x3ec>
 8001544:	e01b      	b.n	800157e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001546:	4b3d      	ldr	r3, [pc, #244]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800154c:	4a3b      	ldr	r2, [pc, #236]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fafb 	bl	8000b50 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff faf7 	bl	8000b50 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1f5      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001570:	4b32      	ldr	r3, [pc, #200]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ef      	bne.n	800155e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80a6 	beq.w	80016d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001590:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10d      	bne.n	80015b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	4b27      	ldr	r3, [pc, #156]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a0:	4a26      	ldr	r2, [pc, #152]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a8:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b4:	2301      	movs	r3, #1
 80015b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <HAL_RCC_OscConfig+0x508>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d118      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <HAL_RCC_OscConfig+0x508>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001640 <HAL_RCC_OscConfig+0x508>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fabe 	bl	8000b50 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d8:	f7ff faba 	bl	8000b50 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1b8      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_RCC_OscConfig+0x508>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d108      	bne.n	8001610 <HAL_RCC_OscConfig+0x4d8>
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800160e:	e029      	b.n	8001664 <HAL_RCC_OscConfig+0x52c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d115      	bne.n	8001644 <HAL_RCC_OscConfig+0x50c>
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 800161a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161e:	4a07      	ldr	r2, [pc, #28]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162e:	4a03      	ldr	r2, [pc, #12]	@ (800163c <HAL_RCC_OscConfig+0x504>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x52c>
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	40007000 	.word	0x40007000
 8001644:	4b9d      	ldr	r3, [pc, #628]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800164a:	4a9c      	ldr	r2, [pc, #624]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001654:	4b99      	ldr	r3, [pc, #612]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800165a:	4a98      	ldr	r2, [pc, #608]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 800165c:	f023 0304 	bic.w	r3, r3, #4
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d016      	beq.n	800169a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fa70 	bl	8000b50 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff fa6c 	bl	8000b50 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e168      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168a:	4b8c      	ldr	r3, [pc, #560]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ed      	beq.n	8001674 <HAL_RCC_OscConfig+0x53c>
 8001698:	e015      	b.n	80016c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff fa59 	bl	8000b50 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fa55 	bl	8000b50 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e151      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b8:	4b80      	ldr	r3, [pc, #512]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ed      	bne.n	80016a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c6:	7ffb      	ldrb	r3, [r7, #31]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016cc:	4b7b      	ldr	r3, [pc, #492]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	4a7a      	ldr	r2, [pc, #488]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d03c      	beq.n	800175e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01c      	beq.n	8001726 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ec:	4b73      	ldr	r3, [pc, #460]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 80016ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016f2:	4a72      	ldr	r2, [pc, #456]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fa28 	bl	8000b50 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001704:	f7ff fa24 	bl	8000b50 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e122      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001716:	4b69      	ldr	r3, [pc, #420]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001718:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0ef      	beq.n	8001704 <HAL_RCC_OscConfig+0x5cc>
 8001724:	e01b      	b.n	800175e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001726:	4b65      	ldr	r3, [pc, #404]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001728:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800172c:	4a63      	ldr	r2, [pc, #396]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff fa0b 	bl	8000b50 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173e:	f7ff fa07 	bl	8000b50 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e105      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001750:	4b5a      	ldr	r3, [pc, #360]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001752:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ef      	bne.n	800173e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80f9 	beq.w	800195a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176c:	2b02      	cmp	r3, #2
 800176e:	f040 80cf 	bne.w	8001910 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001772:	4b52      	ldr	r3, [pc, #328]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001782:	429a      	cmp	r2, r3
 8001784:	d12c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001790:	3b01      	subs	r3, #1
 8001792:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d123      	bne.n	80017e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d11b      	bne.n	80017e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d113      	bne.n	80017e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	3b01      	subs	r3, #1
 80017c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d109      	bne.n	80017e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	3b01      	subs	r3, #1
 80017da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d071      	beq.n	80018c4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d068      	beq.n	80018b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017e6:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017f2:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0ac      	b.n	800195c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001802:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a2d      	ldr	r2, [pc, #180]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001808:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800180c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800180e:	f7ff f99f 	bl	8000b50 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff f99b 	bl	8000b50 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e099      	b.n	800195c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001834:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <HAL_RCC_OscConfig+0x788>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001844:	3a01      	subs	r2, #1
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800184e:	0212      	lsls	r2, r2, #8
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001856:	0852      	lsrs	r2, r2, #1
 8001858:	3a01      	subs	r2, #1
 800185a:	0552      	lsls	r2, r2, #21
 800185c:	4311      	orrs	r1, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001862:	0852      	lsrs	r2, r2, #1
 8001864:	3a01      	subs	r2, #1
 8001866:	0652      	lsls	r2, r2, #25
 8001868:	4311      	orrs	r1, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800186e:	06d2      	lsls	r2, r2, #27
 8001870:	430a      	orrs	r2, r1
 8001872:	4912      	ldr	r1, [pc, #72]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001878:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0f      	ldr	r2, [pc, #60]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a0c      	ldr	r2, [pc, #48]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001890:	f7ff f95e 	bl	8000b50 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f95a 	bl	8000b50 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e058      	b.n	800195c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <HAL_RCC_OscConfig+0x784>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b6:	e050      	b.n	800195a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e04f      	b.n	800195c <HAL_RCC_OscConfig+0x824>
 80018bc:	40021000 	.word	0x40021000
 80018c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d144      	bne.n	800195a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018d0:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a23      	ldr	r2, [pc, #140]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018dc:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018e8:	f7ff f932 	bl	8000b50 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f92e 	bl	8000b50 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e02c      	b.n	800195c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001902:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x7b8>
 800190e:	e024      	b.n	800195a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d01f      	beq.n	8001956 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 800191c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f915 	bl	8000b50 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f911 	bl	8000b50 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e00f      	b.n	800195c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	4905      	ldr	r1, [pc, #20]	@ (8001964 <HAL_RCC_OscConfig+0x82c>)
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_RCC_OscConfig+0x830>)
 8001950:	4013      	ands	r3, r2
 8001952:	60cb      	str	r3, [r1, #12]
 8001954:	e001      	b.n	800195a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	feeefffc 	.word	0xfeeefffc

0800196c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0e7      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b75      	ldr	r3, [pc, #468]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b72      	ldr	r3, [pc, #456]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	4970      	ldr	r1, [pc, #448]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b6e      	ldr	r3, [pc, #440]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0cf      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d908      	bls.n	80019de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4960      	ldr	r1, [pc, #384]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d04c      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d121      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0a6      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	4b54      	ldr	r3, [pc, #336]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e09a      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a22:	4b4e      	ldr	r3, [pc, #312]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e08e      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a32:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e086      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b46      	ldr	r3, [pc, #280]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4943      	ldr	r1, [pc, #268]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a54:	f7ff f87c 	bl	8000b50 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff f878 	bl	8000b50 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e06e      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b3a      	ldr	r3, [pc, #232]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d010      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d208      	bcs.n	8001ab2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	492b      	ldr	r1, [pc, #172]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab2:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d210      	bcs.n	8001ae2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac0:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 0207 	bic.w	r2, r3, #7
 8001ac8:	4923      	ldr	r1, [pc, #140]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad0:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e036      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4918      	ldr	r1, [pc, #96]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4910      	ldr	r1, [pc, #64]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b20:	f000 f824 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	490b      	ldr	r1, [pc, #44]	@ (8001b60 <HAL_RCC_ClockConfig+0x1f4>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_RCC_ClockConfig+0x1fc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fe5d 	bl	8000804 <HAL_InitTick>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40022000 	.word	0x40022000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	08006ed0 	.word	0x08006ed0
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b84:	4b3b      	ldr	r3, [pc, #236]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d121      	bne.n	8001bde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d11e      	bne.n	8001bde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba0:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bac:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e005      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10d      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	e004      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d134      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d003      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0xac>
 8001c10:	e005      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c14:	617b      	str	r3, [r7, #20]
      break;
 8001c16:	e005      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c1a:	617b      	str	r3, [r7, #20]
      break;
 8001c1c:	e002      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	617b      	str	r3, [r7, #20]
      break;
 8001c22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	3301      	adds	r3, #1
 8001c30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	fb03 f202 	mul.w	r2, r3, r2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	0e5b      	lsrs	r3, r3, #25
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	3301      	adds	r3, #1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c64:	69bb      	ldr	r3, [r7, #24]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	@ 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08006ee8 	.word	0x08006ee8
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4904      	ldr	r1, [pc, #16]	@ (8001cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08006ee0 	.word	0x08006ee0

08001cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ccc:	f7ff ffda 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0adb      	lsrs	r3, r3, #11
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4904      	ldr	r1, [pc, #16]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08006ee0 	.word	0x08006ee0

08001cf4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <HAL_RCC_GetClockConfig+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0207 	and.w	r2, r3, #7
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40022000 	.word	0x40022000

08001d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d64:	4b2a      	ldr	r3, [pc, #168]	@ (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d70:	f7ff f96e 	bl	8001050 <HAL_PWREx_GetVoltageRange>
 8001d74:	6178      	str	r0, [r7, #20]
 8001d76:	e014      	b.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	4a24      	ldr	r2, [pc, #144]	@ (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d90:	f7ff f95e 	bl	8001050 <HAL_PWREx_GetVoltageRange>
 8001d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d96:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da8:	d10b      	bne.n	8001dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b80      	cmp	r3, #128	@ 0x80
 8001dae:	d919      	bls.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001db4:	d902      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db6:	2302      	movs	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	e013      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e010      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b80      	cmp	r3, #128	@ 0x80
 8001dc6:	d902      	bls.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dc8:	2303      	movs	r3, #3
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e00a      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b80      	cmp	r3, #128	@ 0x80
 8001dd2:	d102      	bne.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e004      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b70      	cmp	r3, #112	@ 0x70
 8001dde:	d101      	bne.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 0207 	bic.w	r2, r3, #7
 8001dec:	4909      	ldr	r1, [pc, #36]	@ (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001df4:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40022000 	.word	0x40022000

08001e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e20:	2300      	movs	r3, #0
 8001e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e24:	2300      	movs	r3, #0
 8001e26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d041      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e3c:	d02a      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e42:	d824      	bhi.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e48:	d008      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e4e:	d81e      	bhi.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e58:	d010      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e5a:	e018      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e5c:	4b86      	ldr	r3, [pc, #536]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a85      	ldr	r2, [pc, #532]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e68:	e015      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 facd 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8001e76:	4603      	mov	r3, r0
 8001e78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e7a:	e00c      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3320      	adds	r3, #32
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fbb6 	bl	80025f4 <RCCEx_PLLSAI2_Config>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e8c:	e003      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	74fb      	strb	r3, [r7, #19]
      break;
 8001e92:	e000      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e96:	7cfb      	ldrb	r3, [r7, #19]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e9c:	4b76      	ldr	r3, [pc, #472]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eaa:	4973      	ldr	r1, [pc, #460]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eb2:	e001      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d041      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ecc:	d02a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ece:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ed2:	d824      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ed4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ed8:	d008      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ede:	d81e      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eea:	e018      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eec:	4b62      	ldr	r3, [pc, #392]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a61      	ldr	r2, [pc, #388]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef8:	e015      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fa85 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f0a:	e00c      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3320      	adds	r3, #32
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fb6e 	bl	80025f4 <RCCEx_PLLSAI2_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f1c:	e003      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	74fb      	strb	r3, [r7, #19]
      break;
 8001f22:	e000      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f2c:	4b52      	ldr	r3, [pc, #328]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f3a:	494f      	ldr	r1, [pc, #316]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f42:	e001      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a0 	beq.w	8002096 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f5a:	4b47      	ldr	r3, [pc, #284]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	4a40      	ldr	r2, [pc, #256]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a3a      	ldr	r2, [pc, #232]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fdda 	bl	8000b50 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7fe fdd6 	bl	8000b50 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d902      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb4:	4b31      	ldr	r3, [pc, #196]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ef      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d15c      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01f      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d019      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fe4:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	4a20      	ldr	r2, [pc, #128]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d016      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7fe fd95 	bl	8000b50 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002028:	e00b      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fd91 	bl	8000b50 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d902      	bls.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	74fb      	strb	r3, [r7, #19]
            break;
 8002040:	e006      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ec      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	4904      	ldr	r1, [pc, #16]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800206e:	e009      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	74bb      	strb	r3, [r7, #18]
 8002074:	e006      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002084:	7c7b      	ldrb	r3, [r7, #17]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208a:	4ba6      	ldr	r3, [pc, #664]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	4aa5      	ldr	r2, [pc, #660]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002094:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020a2:	4ba0      	ldr	r3, [pc, #640]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a8:	f023 0203 	bic.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b0:	499c      	ldr	r1, [pc, #624]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020c4:	4b97      	ldr	r3, [pc, #604]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	f023 020c 	bic.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d2:	4994      	ldr	r1, [pc, #592]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	498b      	ldr	r1, [pc, #556]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002108:	4b86      	ldr	r3, [pc, #536]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	4983      	ldr	r1, [pc, #524]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800212a:	4b7e      	ldr	r3, [pc, #504]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002138:	497a      	ldr	r1, [pc, #488]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800214c:	4b75      	ldr	r3, [pc, #468]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215a:	4972      	ldr	r1, [pc, #456]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216e:	4b6d      	ldr	r3, [pc, #436]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002174:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217c:	4969      	ldr	r1, [pc, #420]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002190:	4b64      	ldr	r3, [pc, #400]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800219e:	4961      	ldr	r1, [pc, #388]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	4958      	ldr	r1, [pc, #352]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021d4:	4b53      	ldr	r3, [pc, #332]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e2:	4950      	ldr	r1, [pc, #320]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	4947      	ldr	r1, [pc, #284]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002218:	4b42      	ldr	r3, [pc, #264]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800221a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	493f      	ldr	r1, [pc, #252]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d028      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223a:	4b3a      	ldr	r3, [pc, #232]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002240:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002248:	4936      	ldr	r1, [pc, #216]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002258:	d106      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225a:	4b32      	ldr	r3, [pc, #200]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	4a31      	ldr	r2, [pc, #196]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002260:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002264:	60d3      	str	r3, [r2, #12]
 8002266:	e011      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f8c9 	bl	8002410 <RCCEx_PLLSAI1_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d028      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002298:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a6:	491f      	ldr	r1, [pc, #124]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c2:	60d3      	str	r3, [r2, #12]
 80022c4:	e011      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022ce:	d10c      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3304      	adds	r3, #4
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f89a 	bl	8002410 <RCCEx_PLLSAI1_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d02a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002304:	4907      	ldr	r1, [pc, #28]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002314:	d108      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002316:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4a02      	ldr	r2, [pc, #8]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002320:	60d3      	str	r3, [r2, #12]
 8002322:	e013      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002324:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800232c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002330:	d10c      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f869 	bl	8002410 <RCCEx_PLLSAI1_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02f      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002358:	4b2c      	ldr	r3, [pc, #176]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002366:	4929      	ldr	r1, [pc, #164]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002376:	d10d      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	2102      	movs	r1, #2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f846 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d014      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	74bb      	strb	r3, [r7, #18]
 8002392:	e011      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800239c:	d10c      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3320      	adds	r3, #32
 80023a2:	2102      	movs	r1, #2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f925 	bl	80025f4 <RCCEx_PLLSAI2_Config>
 80023aa:	4603      	mov	r3, r0
 80023ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023d4:	490d      	ldr	r1, [pc, #52]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f8:	4904      	ldr	r1, [pc, #16]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002400:	7cbb      	ldrb	r3, [r7, #18]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000

08002410 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800241e:	4b74      	ldr	r3, [pc, #464]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d018      	beq.n	800245c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800242a:	4b71      	ldr	r3, [pc, #452]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0203 	and.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d10d      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
       ||
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002442:	4b6b      	ldr	r3, [pc, #428]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
       ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d047      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e044      	b.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d018      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0x86>
 8002464:	2b03      	cmp	r3, #3
 8002466:	d825      	bhi.n	80024b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002468:	2b01      	cmp	r3, #1
 800246a:	d002      	beq.n	8002472 <RCCEx_PLLSAI1_Config+0x62>
 800246c:	2b02      	cmp	r3, #2
 800246e:	d009      	beq.n	8002484 <RCCEx_PLLSAI1_Config+0x74>
 8002470:	e020      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002472:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11d      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002482:	e01a      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002484:	4b5a      	ldr	r3, [pc, #360]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d116      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e013      	b.n	80024be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002496:	4b56      	ldr	r3, [pc, #344]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10f      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024a2:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024b2:	e006      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e004      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ba:	bf00      	nop
 80024bc:	e002      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	430b      	orrs	r3, r1
 80024e0:	4943      	ldr	r1, [pc, #268]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d17c      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ec:	4b40      	ldr	r3, [pc, #256]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3f      	ldr	r2, [pc, #252]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe fb2a 	bl	8000b50 <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024fe:	e009      	b.n	8002514 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002500:	f7fe fb26 	bl	8000b50 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d902      	bls.n	8002514 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	73fb      	strb	r3, [r7, #15]
        break;
 8002512:	e005      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002514:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ef      	bne.n	8002500 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d15f      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d110      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800252c:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6892      	ldr	r2, [r2, #8]
 800253c:	0211      	lsls	r1, r2, #8
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	06d2      	lsls	r2, r2, #27
 8002544:	430a      	orrs	r2, r1
 8002546:	492a      	ldr	r1, [pc, #168]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	610b      	str	r3, [r1, #16]
 800254c:	e027      	b.n	800259e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d112      	bne.n	800257a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002554:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800255c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6892      	ldr	r2, [r2, #8]
 8002564:	0211      	lsls	r1, r2, #8
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6912      	ldr	r2, [r2, #16]
 800256a:	0852      	lsrs	r2, r2, #1
 800256c:	3a01      	subs	r2, #1
 800256e:	0552      	lsls	r2, r2, #21
 8002570:	430a      	orrs	r2, r1
 8002572:	491f      	ldr	r1, [pc, #124]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002574:	4313      	orrs	r3, r2
 8002576:	610b      	str	r3, [r1, #16]
 8002578:	e011      	b.n	800259e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002582:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6892      	ldr	r2, [r2, #8]
 800258a:	0211      	lsls	r1, r2, #8
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6952      	ldr	r2, [r2, #20]
 8002590:	0852      	lsrs	r2, r2, #1
 8002592:	3a01      	subs	r2, #1
 8002594:	0652      	lsls	r2, r2, #25
 8002596:	430a      	orrs	r2, r1
 8002598:	4915      	ldr	r1, [pc, #84]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a13      	ldr	r2, [pc, #76]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe fad1 	bl	8000b50 <HAL_GetTick>
 80025ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b0:	e009      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b2:	f7fe facd 	bl	8000b50 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d902      	bls.n	80025c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	73fb      	strb	r3, [r7, #15]
          break;
 80025c4:	e005      	b.n	80025d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0ef      	beq.n	80025b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d106      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002602:	4b69      	ldr	r3, [pc, #420]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800260e:	4b66      	ldr	r3, [pc, #408]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d10d      	bne.n	800263a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
       ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002626:	4b60      	ldr	r3, [pc, #384]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
       ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d047      	beq.n	80026ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e044      	b.n	80026ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d018      	beq.n	800267a <RCCEx_PLLSAI2_Config+0x86>
 8002648:	2b03      	cmp	r3, #3
 800264a:	d825      	bhi.n	8002698 <RCCEx_PLLSAI2_Config+0xa4>
 800264c:	2b01      	cmp	r3, #1
 800264e:	d002      	beq.n	8002656 <RCCEx_PLLSAI2_Config+0x62>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d009      	beq.n	8002668 <RCCEx_PLLSAI2_Config+0x74>
 8002654:	e020      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002656:	4b54      	ldr	r3, [pc, #336]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11d      	bne.n	800269e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e01a      	b.n	800269e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002668:	4b4f      	ldr	r3, [pc, #316]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e013      	b.n	80026a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800267a:	4b4b      	ldr	r3, [pc, #300]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002686:	4b48      	ldr	r3, [pc, #288]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002696:	e006      	b.n	80026a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e004      	b.n	80026a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ae:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	430b      	orrs	r3, r1
 80026c4:	4938      	ldr	r1, [pc, #224]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d166      	bne.n	800279e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026d0:	4b35      	ldr	r3, [pc, #212]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a34      	ldr	r2, [pc, #208]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fa38 	bl	8000b50 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026e4:	f7fe fa34 	bl	8000b50 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
        break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ef      	bne.n	80026e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d149      	bne.n	800279e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d110      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002710:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002718:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6892      	ldr	r2, [r2, #8]
 8002720:	0211      	lsls	r1, r2, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	06d2      	lsls	r2, r2, #27
 8002728:	430a      	orrs	r2, r1
 800272a:	491f      	ldr	r1, [pc, #124]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	614b      	str	r3, [r1, #20]
 8002730:	e011      	b.n	8002756 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002732:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800273a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6892      	ldr	r2, [r2, #8]
 8002742:	0211      	lsls	r1, r2, #8
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6912      	ldr	r2, [r2, #16]
 8002748:	0852      	lsrs	r2, r2, #1
 800274a:	3a01      	subs	r2, #1
 800274c:	0652      	lsls	r2, r2, #25
 800274e:	430a      	orrs	r2, r1
 8002750:	4915      	ldr	r1, [pc, #84]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002756:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a13      	ldr	r2, [pc, #76]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe f9f5 	bl	8000b50 <HAL_GetTick>
 8002766:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002768:	e009      	b.n	800277e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800276a:	f7fe f9f1 	bl	8000b50 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d902      	bls.n	800277e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	73fb      	strb	r3, [r7, #15]
          break;
 800277c:	e005      	b.n	800278a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800277e:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ef      	beq.n	800276a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d106      	bne.n	800279e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e049      	b.n	8002852 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f841 	bl	800285a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f000 f9e0 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d001      	beq.n	8002888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e04f      	b.n	8002928 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	@ (8002934 <HAL_TIM_Base_Start_IT+0xc4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01d      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b2:	d018      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002938 <HAL_TIM_Base_Start_IT+0xc8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1e      	ldr	r2, [pc, #120]	@ (800293c <HAL_TIM_Base_Start_IT+0xcc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002940 <HAL_TIM_Base_Start_IT+0xd0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002944 <HAL_TIM_Base_Start_IT+0xd4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a19      	ldr	r2, [pc, #100]	@ (8002948 <HAL_TIM_Base_Start_IT+0xd8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d115      	bne.n	8002912 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b17      	ldr	r3, [pc, #92]	@ (800294c <HAL_TIM_Base_Start_IT+0xdc>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d015      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0xb4>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fe:	d011      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	e008      	b.n	8002924 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e000      	b.n	8002926 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40013400 	.word	0x40013400
 8002948:	40014000 	.word	0x40014000
 800294c:	00010007 	.word	0x00010007

08002950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d020      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0202 	mvn.w	r2, #2
 8002984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8e9 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8db 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f8ec 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d020      	beq.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0204 	mvn.w	r2, #4
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8c3 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8b5 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f8c6 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d020      	beq.n	8002a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01b      	beq.n	8002a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0208 	mvn.w	r2, #8
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f89d 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f88f 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8a0 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d020      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0210 	mvn.w	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f877 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f869 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f87a 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0201 	mvn.w	r2, #1
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fd fe04 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00c      	beq.n	8002aea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f913 	bl	8002d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00c      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f90b 	bl	8002d24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00c      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f834 	bl	8002b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00c      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0220 	mvn.w	r2, #32
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8d3 	bl	8002cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a46      	ldr	r2, [pc, #280]	@ (8002cdc <TIM_Base_SetConfig+0x12c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bce:	d00f      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a43      	ldr	r2, [pc, #268]	@ (8002ce0 <TIM_Base_SetConfig+0x130>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a42      	ldr	r2, [pc, #264]	@ (8002ce4 <TIM_Base_SetConfig+0x134>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a41      	ldr	r2, [pc, #260]	@ (8002ce8 <TIM_Base_SetConfig+0x138>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a40      	ldr	r2, [pc, #256]	@ (8002cec <TIM_Base_SetConfig+0x13c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d108      	bne.n	8002c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a35      	ldr	r2, [pc, #212]	@ (8002cdc <TIM_Base_SetConfig+0x12c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c10:	d01b      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a32      	ldr	r2, [pc, #200]	@ (8002ce0 <TIM_Base_SetConfig+0x130>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d017      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ce4 <TIM_Base_SetConfig+0x134>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a30      	ldr	r2, [pc, #192]	@ (8002ce8 <TIM_Base_SetConfig+0x138>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00f      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8002cec <TIM_Base_SetConfig+0x13c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf0 <TIM_Base_SetConfig+0x140>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf4 <TIM_Base_SetConfig+0x144>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0x9a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf8 <TIM_Base_SetConfig+0x148>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <TIM_Base_SetConfig+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00f      	beq.n	8002ca8 <TIM_Base_SetConfig+0xf8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a18      	ldr	r2, [pc, #96]	@ (8002cec <TIM_Base_SetConfig+0x13c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00b      	beq.n	8002ca8 <TIM_Base_SetConfig+0xf8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <TIM_Base_SetConfig+0x140>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <TIM_Base_SetConfig+0xf8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <TIM_Base_SetConfig+0x144>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d003      	beq.n	8002ca8 <TIM_Base_SetConfig+0xf8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <TIM_Base_SetConfig+0x148>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d103      	bne.n	8002cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f023 0201 	bic.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	611a      	str	r2, [r3, #16]
  }
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	40013400 	.word	0x40013400
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	40014400 	.word	0x40014400
 8002cf8:	40014800 	.word	0x40014800

08002cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e040      	b.n	8002dcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fd fcf2 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	@ 0x24
 8002d64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fb6a 	bl	8003458 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f8af 	bl	8002ee8 <UART_SetConfig>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e01b      	b.n	8002dcc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fbe9 	bl	800359c <UART_CheckIdleState>
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	@ 0x28
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d177      	bne.n	8002edc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_UART_Transmit+0x24>
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e070      	b.n	8002ede <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2221      	movs	r2, #33	@ 0x21
 8002e08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e0a:	f7fd fea1 	bl	8000b50 <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e28:	d108      	bne.n	8002e3c <HAL_UART_Transmit+0x68>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e003      	b.n	8002e44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e44:	e02f      	b.n	8002ea6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	@ 0x80
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fc4b 	bl	80036ec <UART_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e03b      	b.n	8002ede <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	881a      	ldrh	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	3302      	adds	r3, #2
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e007      	b.n	8002e94 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1c9      	bne.n	8002e46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	@ 0x40
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fc15 	bl	80036ec <UART_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e005      	b.n	8002ede <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b08a      	sub	sp, #40	@ 0x28
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4ba4      	ldr	r3, [pc, #656]	@ (80031a8 <UART_SetConfig+0x2c0>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a99      	ldr	r2, [pc, #612]	@ (80031ac <UART_SetConfig+0x2c4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	4313      	orrs	r3, r2
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a90      	ldr	r2, [pc, #576]	@ (80031b0 <UART_SetConfig+0x2c8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d126      	bne.n	8002fc0 <UART_SetConfig+0xd8>
 8002f72:	4b90      	ldr	r3, [pc, #576]	@ (80031b4 <UART_SetConfig+0x2cc>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d81b      	bhi.n	8002fb8 <UART_SetConfig+0xd0>
 8002f80:	a201      	add	r2, pc, #4	@ (adr r2, 8002f88 <UART_SetConfig+0xa0>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa9 	.word	0x08002fa9
 8002f90:	08002fa1 	.word	0x08002fa1
 8002f94:	08002fb1 	.word	0x08002fb1
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9e:	e116      	b.n	80031ce <UART_SetConfig+0x2e6>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e112      	b.n	80031ce <UART_SetConfig+0x2e6>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fae:	e10e      	b.n	80031ce <UART_SetConfig+0x2e6>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	e10a      	b.n	80031ce <UART_SetConfig+0x2e6>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e106      	b.n	80031ce <UART_SetConfig+0x2e6>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a7c      	ldr	r2, [pc, #496]	@ (80031b8 <UART_SetConfig+0x2d0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d138      	bne.n	800303c <UART_SetConfig+0x154>
 8002fca:	4b7a      	ldr	r3, [pc, #488]	@ (80031b4 <UART_SetConfig+0x2cc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d82d      	bhi.n	8003034 <UART_SetConfig+0x14c>
 8002fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <UART_SetConfig+0xf8>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	08003035 	.word	0x08003035
 8002fe8:	08003035 	.word	0x08003035
 8002fec:	08003035 	.word	0x08003035
 8002ff0:	08003025 	.word	0x08003025
 8002ff4:	08003035 	.word	0x08003035
 8002ff8:	08003035 	.word	0x08003035
 8002ffc:	08003035 	.word	0x08003035
 8003000:	0800301d 	.word	0x0800301d
 8003004:	08003035 	.word	0x08003035
 8003008:	08003035 	.word	0x08003035
 800300c:	08003035 	.word	0x08003035
 8003010:	0800302d 	.word	0x0800302d
 8003014:	2300      	movs	r3, #0
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301a:	e0d8      	b.n	80031ce <UART_SetConfig+0x2e6>
 800301c:	2302      	movs	r3, #2
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003022:	e0d4      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003024:	2304      	movs	r3, #4
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302a:	e0d0      	b.n	80031ce <UART_SetConfig+0x2e6>
 800302c:	2308      	movs	r3, #8
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003032:	e0cc      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003034:	2310      	movs	r3, #16
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303a:	e0c8      	b.n	80031ce <UART_SetConfig+0x2e6>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5e      	ldr	r2, [pc, #376]	@ (80031bc <UART_SetConfig+0x2d4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d125      	bne.n	8003092 <UART_SetConfig+0x1aa>
 8003046:	4b5b      	ldr	r3, [pc, #364]	@ (80031b4 <UART_SetConfig+0x2cc>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003050:	2b30      	cmp	r3, #48	@ 0x30
 8003052:	d016      	beq.n	8003082 <UART_SetConfig+0x19a>
 8003054:	2b30      	cmp	r3, #48	@ 0x30
 8003056:	d818      	bhi.n	800308a <UART_SetConfig+0x1a2>
 8003058:	2b20      	cmp	r3, #32
 800305a:	d00a      	beq.n	8003072 <UART_SetConfig+0x18a>
 800305c:	2b20      	cmp	r3, #32
 800305e:	d814      	bhi.n	800308a <UART_SetConfig+0x1a2>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <UART_SetConfig+0x182>
 8003064:	2b10      	cmp	r3, #16
 8003066:	d008      	beq.n	800307a <UART_SetConfig+0x192>
 8003068:	e00f      	b.n	800308a <UART_SetConfig+0x1a2>
 800306a:	2300      	movs	r3, #0
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003070:	e0ad      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003072:	2302      	movs	r3, #2
 8003074:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003078:	e0a9      	b.n	80031ce <UART_SetConfig+0x2e6>
 800307a:	2304      	movs	r3, #4
 800307c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003080:	e0a5      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003082:	2308      	movs	r3, #8
 8003084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003088:	e0a1      	b.n	80031ce <UART_SetConfig+0x2e6>
 800308a:	2310      	movs	r3, #16
 800308c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003090:	e09d      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a4a      	ldr	r2, [pc, #296]	@ (80031c0 <UART_SetConfig+0x2d8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d125      	bne.n	80030e8 <UART_SetConfig+0x200>
 800309c:	4b45      	ldr	r3, [pc, #276]	@ (80031b4 <UART_SetConfig+0x2cc>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80030a8:	d016      	beq.n	80030d8 <UART_SetConfig+0x1f0>
 80030aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80030ac:	d818      	bhi.n	80030e0 <UART_SetConfig+0x1f8>
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	d00a      	beq.n	80030c8 <UART_SetConfig+0x1e0>
 80030b2:	2b80      	cmp	r3, #128	@ 0x80
 80030b4:	d814      	bhi.n	80030e0 <UART_SetConfig+0x1f8>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <UART_SetConfig+0x1d8>
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d008      	beq.n	80030d0 <UART_SetConfig+0x1e8>
 80030be:	e00f      	b.n	80030e0 <UART_SetConfig+0x1f8>
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c6:	e082      	b.n	80031ce <UART_SetConfig+0x2e6>
 80030c8:	2302      	movs	r3, #2
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ce:	e07e      	b.n	80031ce <UART_SetConfig+0x2e6>
 80030d0:	2304      	movs	r3, #4
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d6:	e07a      	b.n	80031ce <UART_SetConfig+0x2e6>
 80030d8:	2308      	movs	r3, #8
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030de:	e076      	b.n	80031ce <UART_SetConfig+0x2e6>
 80030e0:	2310      	movs	r3, #16
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e6:	e072      	b.n	80031ce <UART_SetConfig+0x2e6>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a35      	ldr	r2, [pc, #212]	@ (80031c4 <UART_SetConfig+0x2dc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d12a      	bne.n	8003148 <UART_SetConfig+0x260>
 80030f2:	4b30      	ldr	r3, [pc, #192]	@ (80031b4 <UART_SetConfig+0x2cc>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003100:	d01a      	beq.n	8003138 <UART_SetConfig+0x250>
 8003102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003106:	d81b      	bhi.n	8003140 <UART_SetConfig+0x258>
 8003108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800310c:	d00c      	beq.n	8003128 <UART_SetConfig+0x240>
 800310e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003112:	d815      	bhi.n	8003140 <UART_SetConfig+0x258>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <UART_SetConfig+0x238>
 8003118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800311c:	d008      	beq.n	8003130 <UART_SetConfig+0x248>
 800311e:	e00f      	b.n	8003140 <UART_SetConfig+0x258>
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003126:	e052      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003128:	2302      	movs	r3, #2
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312e:	e04e      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003130:	2304      	movs	r3, #4
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003136:	e04a      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003138:	2308      	movs	r3, #8
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313e:	e046      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003140:	2310      	movs	r3, #16
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003146:	e042      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a17      	ldr	r2, [pc, #92]	@ (80031ac <UART_SetConfig+0x2c4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d13a      	bne.n	80031c8 <UART_SetConfig+0x2e0>
 8003152:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <UART_SetConfig+0x2cc>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003158:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800315c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003160:	d01a      	beq.n	8003198 <UART_SetConfig+0x2b0>
 8003162:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003166:	d81b      	bhi.n	80031a0 <UART_SetConfig+0x2b8>
 8003168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800316c:	d00c      	beq.n	8003188 <UART_SetConfig+0x2a0>
 800316e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003172:	d815      	bhi.n	80031a0 <UART_SetConfig+0x2b8>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <UART_SetConfig+0x298>
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800317c:	d008      	beq.n	8003190 <UART_SetConfig+0x2a8>
 800317e:	e00f      	b.n	80031a0 <UART_SetConfig+0x2b8>
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e022      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003188:	2302      	movs	r3, #2
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318e:	e01e      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003190:	2304      	movs	r3, #4
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003196:	e01a      	b.n	80031ce <UART_SetConfig+0x2e6>
 8003198:	2308      	movs	r3, #8
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319e:	e016      	b.n	80031ce <UART_SetConfig+0x2e6>
 80031a0:	2310      	movs	r3, #16
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a6:	e012      	b.n	80031ce <UART_SetConfig+0x2e6>
 80031a8:	efff69f3 	.word	0xefff69f3
 80031ac:	40008000 	.word	0x40008000
 80031b0:	40013800 	.word	0x40013800
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40004400 	.word	0x40004400
 80031bc:	40004800 	.word	0x40004800
 80031c0:	40004c00 	.word	0x40004c00
 80031c4:	40005000 	.word	0x40005000
 80031c8:	2310      	movs	r3, #16
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a9f      	ldr	r2, [pc, #636]	@ (8003450 <UART_SetConfig+0x568>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d17a      	bne.n	80032ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d824      	bhi.n	800322a <UART_SetConfig+0x342>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <UART_SetConfig+0x300>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	0800322b 	.word	0x0800322b
 80031f0:	08003215 	.word	0x08003215
 80031f4:	0800322b 	.word	0x0800322b
 80031f8:	0800321b 	.word	0x0800321b
 80031fc:	0800322b 	.word	0x0800322b
 8003200:	0800322b 	.word	0x0800322b
 8003204:	0800322b 	.word	0x0800322b
 8003208:	08003223 	.word	0x08003223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800320c:	f7fe fd46 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8003210:	61f8      	str	r0, [r7, #28]
        break;
 8003212:	e010      	b.n	8003236 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003214:	4b8f      	ldr	r3, [pc, #572]	@ (8003454 <UART_SetConfig+0x56c>)
 8003216:	61fb      	str	r3, [r7, #28]
        break;
 8003218:	e00d      	b.n	8003236 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321a:	f7fe fca7 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 800321e:	61f8      	str	r0, [r7, #28]
        break;
 8003220:	e009      	b.n	8003236 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003226:	61fb      	str	r3, [r7, #28]
        break;
 8003228:	e005      	b.n	8003236 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003234:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80fb 	beq.w	8003434 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	429a      	cmp	r2, r3
 800324c:	d305      	bcc.n	800325a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	429a      	cmp	r2, r3
 8003258:	d903      	bls.n	8003262 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003260:	e0e8      	b.n	8003434 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2200      	movs	r2, #0
 8003266:	461c      	mov	r4, r3
 8003268:	4615      	mov	r5, r2
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	022b      	lsls	r3, r5, #8
 8003274:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003278:	0222      	lsls	r2, r4, #8
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	6849      	ldr	r1, [r1, #4]
 800327e:	0849      	lsrs	r1, r1, #1
 8003280:	2000      	movs	r0, #0
 8003282:	4688      	mov	r8, r1
 8003284:	4681      	mov	r9, r0
 8003286:	eb12 0a08 	adds.w	sl, r2, r8
 800328a:	eb43 0b09 	adc.w	fp, r3, r9
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800329c:	4650      	mov	r0, sl
 800329e:	4659      	mov	r1, fp
 80032a0:	f7fc ffa6 	bl	80001f0 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4613      	mov	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032b2:	d308      	bcc.n	80032c6 <UART_SetConfig+0x3de>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ba:	d204      	bcs.n	80032c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e0b6      	b.n	8003434 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032cc:	e0b2      	b.n	8003434 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d6:	d15e      	bne.n	8003396 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d828      	bhi.n	8003332 <UART_SetConfig+0x44a>
 80032e0:	a201      	add	r2, pc, #4	@ (adr r2, 80032e8 <UART_SetConfig+0x400>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	0800330d 	.word	0x0800330d
 80032ec:	08003315 	.word	0x08003315
 80032f0:	0800331d 	.word	0x0800331d
 80032f4:	08003333 	.word	0x08003333
 80032f8:	08003323 	.word	0x08003323
 80032fc:	08003333 	.word	0x08003333
 8003300:	08003333 	.word	0x08003333
 8003304:	08003333 	.word	0x08003333
 8003308:	0800332b 	.word	0x0800332b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800330c:	f7fe fcc6 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8003310:	61f8      	str	r0, [r7, #28]
        break;
 8003312:	e014      	b.n	800333e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7fe fcd8 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8003318:	61f8      	str	r0, [r7, #28]
        break;
 800331a:	e010      	b.n	800333e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800331c:	4b4d      	ldr	r3, [pc, #308]	@ (8003454 <UART_SetConfig+0x56c>)
 800331e:	61fb      	str	r3, [r7, #28]
        break;
 8003320:	e00d      	b.n	800333e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003322:	f7fe fc23 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8003326:	61f8      	str	r0, [r7, #28]
        break;
 8003328:	e009      	b.n	800333e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800332e:	61fb      	str	r3, [r7, #28]
        break;
 8003330:	e005      	b.n	800333e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800333c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d077      	beq.n	8003434 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005a      	lsls	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	441a      	add	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d916      	bls.n	800338e <UART_SetConfig+0x4a6>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003366:	d212      	bcs.n	800338e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f023 030f 	bic.w	r3, r3, #15
 8003370:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	b29b      	uxth	r3, r3
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	b29a      	uxth	r2, r3
 800337e:	8afb      	ldrh	r3, [r7, #22]
 8003380:	4313      	orrs	r3, r2
 8003382:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	8afa      	ldrh	r2, [r7, #22]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	e052      	b.n	8003434 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003394:	e04e      	b.n	8003434 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003396:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800339a:	2b08      	cmp	r3, #8
 800339c:	d827      	bhi.n	80033ee <UART_SetConfig+0x506>
 800339e:	a201      	add	r2, pc, #4	@ (adr r2, 80033a4 <UART_SetConfig+0x4bc>)
 80033a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d9 	.word	0x080033d9
 80033b0:	080033ef 	.word	0x080033ef
 80033b4:	080033df 	.word	0x080033df
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	080033ef 	.word	0x080033ef
 80033c0:	080033ef 	.word	0x080033ef
 80033c4:	080033e7 	.word	0x080033e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c8:	f7fe fc68 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80033cc:	61f8      	str	r0, [r7, #28]
        break;
 80033ce:	e014      	b.n	80033fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d0:	f7fe fc7a 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 80033d4:	61f8      	str	r0, [r7, #28]
        break;
 80033d6:	e010      	b.n	80033fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <UART_SetConfig+0x56c>)
 80033da:	61fb      	str	r3, [r7, #28]
        break;
 80033dc:	e00d      	b.n	80033fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7fe fbc5 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 80033e2:	61f8      	str	r0, [r7, #28]
        break;
 80033e4:	e009      	b.n	80033fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ea:	61fb      	str	r3, [r7, #28]
        break;
 80033ec:	e005      	b.n	80033fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033f8:	bf00      	nop
    }

    if (pclk != 0U)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d019      	beq.n	8003434 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	085a      	lsrs	r2, r3, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	441a      	add	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d909      	bls.n	800342e <UART_SetConfig+0x546>
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003420:	d205      	bcs.n	800342e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	e002      	b.n	8003434 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003440:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003444:	4618      	mov	r0, r3
 8003446:	3728      	adds	r7, #40	@ 0x28
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	40008000 	.word	0x40008000
 8003454:	00f42400 	.word	0x00f42400

08003458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01a      	beq.n	800356e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003556:	d10a      	bne.n	800356e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]
  }
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b098      	sub	sp, #96	@ 0x60
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035ac:	f7fd fad0 	bl	8000b50 <HAL_GetTick>
 80035b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d12e      	bne.n	800361e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c8:	2200      	movs	r2, #0
 80035ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f88c 	bl	80036ec <UART_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d021      	beq.n	800361e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e6      	bne.n	80035da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e062      	b.n	80036e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d149      	bne.n	80036c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003634:	2200      	movs	r2, #0
 8003636:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f856 	bl	80036ec <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d03c      	beq.n	80036c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	623b      	str	r3, [r7, #32]
   return(result);
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800365a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003664:	633b      	str	r3, [r7, #48]	@ 0x30
 8003666:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800366a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e6      	bne.n	8003646 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	60fb      	str	r3, [r7, #12]
   return(result);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003698:	61fa      	str	r2, [r7, #28]
 800369a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	617b      	str	r3, [r7, #20]
   return(result);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e5      	bne.n	8003678 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e011      	b.n	80036e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3758      	adds	r7, #88	@ 0x58
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fc:	e04f      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003704:	d04b      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fd fa23 	bl	8000b50 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <UART_WaitOnFlagUntilTimeout+0x30>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e04e      	b.n	80037be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d037      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0xb2>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b80      	cmp	r3, #128	@ 0x80
 8003732:	d034      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b40      	cmp	r3, #64	@ 0x40
 8003738:	d031      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b08      	cmp	r3, #8
 8003746:	d110      	bne.n	800376a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2208      	movs	r2, #8
 800374e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f838 	bl	80037c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2208      	movs	r2, #8
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e029      	b.n	80037be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003778:	d111      	bne.n	800379e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f81e 	bl	80037c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e00f      	b.n	80037be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d0a0      	beq.n	80036fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b095      	sub	sp, #84	@ 0x54
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e6      	bne.n	80037ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3308      	adds	r3, #8
 800381e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003820:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003838:	2b01      	cmp	r3, #1
 800383a:	d118      	bne.n	800386e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	60bb      	str	r3, [r7, #8]
   return(result);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 0310 	bic.w	r3, r3, #16
 8003850:	647b      	str	r3, [r7, #68]	@ 0x44
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	613b      	str	r3, [r7, #16]
   return(result);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e6      	bne.n	800383c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003882:	bf00      	nop
 8003884:	3754      	adds	r7, #84	@ 0x54
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <__NVIC_SetPriority>:
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db0a      	blt.n	80038ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	490c      	ldr	r1, [pc, #48]	@ (80038dc <__NVIC_SetPriority+0x4c>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	440b      	add	r3, r1
 80038b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038b8:	e00a      	b.n	80038d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4908      	ldr	r1, [pc, #32]	@ (80038e0 <__NVIC_SetPriority+0x50>)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3b04      	subs	r3, #4
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	440b      	add	r3, r1
 80038ce:	761a      	strb	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <SysTick_Handler+0x1c>)
 80038ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80038ec:	f001 fd14 	bl	8005318 <xTaskGetSchedulerState>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80038f6:	f002 fb0f 	bl	8005f18 <xPortSysTickHandler>
  }
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000e010 	.word	0xe000e010

08003904 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003908:	2100      	movs	r1, #0
 800390a:	f06f 0004 	mvn.w	r0, #4
 800390e:	f7ff ffbf 	bl	8003890 <__NVIC_SetPriority>
#endif
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800391e:	f3ef 8305 	mrs	r3, IPSR
 8003922:	603b      	str	r3, [r7, #0]
  return(result);
 8003924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800392a:	f06f 0305 	mvn.w	r3, #5
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	e00c      	b.n	800394c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003932:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <osKernelInitialize+0x44>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <osKernelInitialize+0x44>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003940:	2300      	movs	r3, #0
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	e002      	b.n	800394c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800394a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800394c:	687b      	ldr	r3, [r7, #4]
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	2000016c 	.word	0x2000016c

08003960 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003966:	f3ef 8305 	mrs	r3, IPSR
 800396a:	603b      	str	r3, [r7, #0]
  return(result);
 800396c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003972:	f06f 0305 	mvn.w	r3, #5
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	e010      	b.n	800399c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <osKernelStart+0x48>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d109      	bne.n	8003996 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003982:	f7ff ffbf 	bl	8003904 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003986:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <osKernelStart+0x48>)
 8003988:	2202      	movs	r2, #2
 800398a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800398c:	f001 f860 	bl	8004a50 <vTaskStartScheduler>
      stat = osOK;
 8003990:	2300      	movs	r3, #0
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	e002      	b.n	800399c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800399a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800399c:	687b      	ldr	r3, [r7, #4]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000016c 	.word	0x2000016c

080039ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08e      	sub	sp, #56	@ 0x38
 80039b0:	af04      	add	r7, sp, #16
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039bc:	f3ef 8305 	mrs	r3, IPSR
 80039c0:	617b      	str	r3, [r7, #20]
  return(result);
 80039c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d17e      	bne.n	8003ac6 <osThreadNew+0x11a>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d07b      	beq.n	8003ac6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039d2:	2318      	movs	r3, #24
 80039d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d045      	beq.n	8003a72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <osThreadNew+0x48>
        name = attr->name;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <osThreadNew+0x6e>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b38      	cmp	r3, #56	@ 0x38
 8003a0c:	d805      	bhi.n	8003a1a <osThreadNew+0x6e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <osThreadNew+0x72>
        return (NULL);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e054      	b.n	8003ac8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <osThreadNew+0xa8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2ba7      	cmp	r3, #167	@ 0xa7
 8003a3c:	d90a      	bls.n	8003a54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d006      	beq.n	8003a54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <osThreadNew+0xa8>
        mem = 1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e010      	b.n	8003a76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10c      	bne.n	8003a76 <osThreadNew+0xca>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d108      	bne.n	8003a76 <osThreadNew+0xca>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <osThreadNew+0xca>
          mem = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e001      	b.n	8003a76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d110      	bne.n	8003a9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a84:	9202      	str	r2, [sp, #8]
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fe1e 	bl	80046d4 <xTaskCreateStatic>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	e013      	b.n	8003ac6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d110      	bne.n	8003ac6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	f107 0310 	add.w	r3, r7, #16
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fe6c 	bl	8004794 <xTaskCreate>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <osThreadNew+0x11a>
            hTask = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ac6:	693b      	ldr	r3, [r7, #16]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	@ 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad6:	f3ef 8305 	mrs	r3, IPSR
 8003ada:	603b      	str	r3, [r7, #0]
  return(result);
 8003adc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <osThreadYield+0x1a>
    stat = osErrorISR;
 8003ae2:	f06f 0305 	mvn.w	r3, #5
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	e009      	b.n	8003afe <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8003aee:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <osThreadYield+0x3c>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003afe:	687b      	ldr	r3, [r7, #4]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8003b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4a06      	ldr	r2, [pc, #24]	@ (8003b40 <vApplicationGetIdleTaskMemory+0x30>)
 8003b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2280      	movs	r2, #128	@ 0x80
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000170 	.word	0x20000170
 8003b40:	20000218 	.word	0x20000218

08003b44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a07      	ldr	r2, [pc, #28]	@ (8003b70 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4a06      	ldr	r2, [pc, #24]	@ (8003b74 <vApplicationGetTimerTaskMemory+0x30>)
 8003b5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b62:	601a      	str	r2, [r3, #0]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	20000418 	.word	0x20000418
 8003b74:	200004c0 	.word	0x200004c0

08003b78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f103 0208 	add.w	r2, r3, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f103 0208 	add.w	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f103 0208 	add.w	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c30:	d103      	bne.n	8003c3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	e00c      	b.n	8003c54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e002      	b.n	8003c48 <vListInsert+0x2e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d2f6      	bcs.n	8003c42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	601a      	str	r2, [r3, #0]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6892      	ldr	r2, [r2, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6852      	ldr	r2, [r2, #4]
 8003cac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d103      	bne.n	8003cc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	1e5a      	subs	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d0c:	f002 f874 	bl	8005df8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	441a      	add	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	22ff      	movs	r2, #255	@ 0xff
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	22ff      	movs	r2, #255	@ 0xff
 8003d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d114      	bne.n	8003d8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01a      	beq.n	8003da0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3310      	adds	r3, #16
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f90c 	bl	8004f8c <xTaskRemoveFromEventList>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d012      	beq.n	8003da0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <xQueueGenericReset+0xd0>)
 8003d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	e009      	b.n	8003da0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3310      	adds	r3, #16
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fef1 	bl	8003b78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3324      	adds	r3, #36	@ 0x24
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff feec 	bl	8003b78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003da0:	f002 f85c 	bl	8005e5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003da4:	2301      	movs	r3, #1
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08e      	sub	sp, #56	@ 0x38
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <xQueueGenericCreateStatic+0x56>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <xQueueGenericCreateStatic+0x5a>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueGenericCreateStatic+0x5c>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	623b      	str	r3, [r7, #32]
}
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <xQueueGenericCreateStatic+0x84>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <xQueueGenericCreateStatic+0x88>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <xQueueGenericCreateStatic+0x8a>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	61fb      	str	r3, [r7, #28]
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	e7fd      	b.n	8003e56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e5a:	2350      	movs	r3, #80	@ 0x50
 8003e5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b50      	cmp	r3, #80	@ 0x50
 8003e62:	d00b      	beq.n	8003e7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	61bb      	str	r3, [r7, #24]
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f805 	bl	8003eae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3730      	adds	r7, #48	@ 0x30
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e002      	b.n	8003ed0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003edc:	2101      	movs	r1, #1
 8003ede:	69b8      	ldr	r0, [r7, #24]
 8003ee0:	f7ff fefe 	bl	8003ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08e      	sub	sp, #56	@ 0x38
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f02:	2300      	movs	r3, #0
 8003f04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <xQueueGenericSend+0x34>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <xQueueGenericSend+0x42>
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <xQueueGenericSend+0x46>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <xQueueGenericSend+0x48>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <xQueueGenericSend+0x64>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d103      	bne.n	8003f66 <xQueueGenericSend+0x72>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <xQueueGenericSend+0x76>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <xQueueGenericSend+0x78>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <xQueueGenericSend+0x94>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	623b      	str	r3, [r7, #32]
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	e7fd      	b.n	8003f84 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f88:	f001 f9c6 	bl	8005318 <xTaskGetSchedulerState>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <xQueueGenericSend+0xa4>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <xQueueGenericSend+0xa8>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <xQueueGenericSend+0xaa>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <xQueueGenericSend+0xc6>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	61fb      	str	r3, [r7, #28]
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fba:	f001 ff1d 	bl	8005df8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <xQueueGenericSend+0xdc>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d129      	bne.n	8004024 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fd6:	f000 fa0f 	bl	80043f8 <prvCopyDataToQueue>
 8003fda:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d010      	beq.n	8004006 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	3324      	adds	r3, #36	@ 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 ffcf 	bl	8004f8c <xTaskRemoveFromEventList>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80040f4 <xQueueGenericSend+0x200>)
 8003ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	e00a      	b.n	800401c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800400c:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <xQueueGenericSend+0x200>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800401c:	f001 ff1e 	bl	8005e5c <vPortExitCritical>
				return pdPASS;
 8004020:	2301      	movs	r3, #1
 8004022:	e063      	b.n	80040ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800402a:	f001 ff17 	bl	8005e5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800402e:	2300      	movs	r3, #0
 8004030:	e05c      	b.n	80040ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004038:	f107 0314 	add.w	r3, r7, #20
 800403c:	4618      	mov	r0, r3
 800403e:	f001 f809 	bl	8005054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004042:	2301      	movs	r3, #1
 8004044:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004046:	f001 ff09 	bl	8005e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800404a:	f000 fd71 	bl	8004b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800404e:	f001 fed3 	bl	8005df8 <vPortEnterCritical>
 8004052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004058:	b25b      	sxtb	r3, r3
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800405e:	d103      	bne.n	8004068 <xQueueGenericSend+0x174>
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800406e:	b25b      	sxtb	r3, r3
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004074:	d103      	bne.n	800407e <xQueueGenericSend+0x18a>
 8004076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800407e:	f001 feed 	bl	8005e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004082:	1d3a      	adds	r2, r7, #4
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fff8 	bl	8005080 <xTaskCheckForTimeOut>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d124      	bne.n	80040e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004096:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004098:	f000 faa6 	bl	80045e8 <prvIsQueueFull>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	3310      	adds	r3, #16
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 ff1c 	bl	8004ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040b2:	f000 fa31 	bl	8004518 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040b6:	f000 fd49 	bl	8004b4c <xTaskResumeAll>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f af7c 	bne.w	8003fba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040c2:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <xQueueGenericSend+0x200>)
 80040c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	e772      	b.n	8003fba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040d6:	f000 fa1f 	bl	8004518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040da:	f000 fd37 	bl	8004b4c <xTaskResumeAll>
 80040de:	e76c      	b.n	8003fba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040e2:	f000 fa19 	bl	8004518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040e6:	f000 fd31 	bl	8004b4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3738      	adds	r7, #56	@ 0x38
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b090      	sub	sp, #64	@ 0x40
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d103      	bne.n	8004136 <xQueueGenericSendFromISR+0x3e>
 800412e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <xQueueGenericSendFromISR+0x42>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xQueueGenericSendFromISR+0x44>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004152:	bf00      	nop
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d103      	bne.n	8004166 <xQueueGenericSendFromISR+0x6e>
 800415e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <xQueueGenericSendFromISR+0x72>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <xQueueGenericSendFromISR+0x74>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10b      	bne.n	8004188 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	623b      	str	r3, [r7, #32]
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004188:	f001 ff16 	bl	8005fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800418c:	f3ef 8211 	mrs	r2, BASEPRI
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61fa      	str	r2, [r7, #28]
 80041a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d302      	bcc.n	80041ba <xQueueGenericSendFromISR+0xc2>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d12f      	bne.n	800421a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041d0:	f000 f912 	bl	80043f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041dc:	d112      	bne.n	8004204 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	3324      	adds	r3, #36	@ 0x24
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fece 	bl	8004f8c <xTaskRemoveFromEventList>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e007      	b.n	8004214 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004204:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004208:	3301      	adds	r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	b25a      	sxtb	r2, r3
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004214:	2301      	movs	r3, #1
 8004216:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004218:	e001      	b.n	800421e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800421a:	2300      	movs	r3, #0
 800421c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800421e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004220:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004228:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800422a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800422c:	4618      	mov	r0, r3
 800422e:	3740      	adds	r7, #64	@ 0x40
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	@ 0x30
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10b      	bne.n	8004266 <xQueueReceive+0x32>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	623b      	str	r3, [r7, #32]
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	e7fd      	b.n	8004262 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d103      	bne.n	8004274 <xQueueReceive+0x40>
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <xQueueReceive+0x44>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <xQueueReceive+0x46>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <xQueueReceive+0x62>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	61fb      	str	r3, [r7, #28]
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004296:	f001 f83f 	bl	8005318 <xTaskGetSchedulerState>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <xQueueReceive+0x72>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <xQueueReceive+0x76>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueueReceive+0x78>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <xQueueReceive+0x94>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	61bb      	str	r3, [r7, #24]
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	e7fd      	b.n	80042c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042c8:	f001 fd96 	bl	8005df8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01f      	beq.n	8004318 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042dc:	f000 f8f6 	bl	80044cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	1e5a      	subs	r2, r3, #1
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00f      	beq.n	8004310 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	3310      	adds	r3, #16
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fe49 	bl	8004f8c <xTaskRemoveFromEventList>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004300:	4b3c      	ldr	r3, [pc, #240]	@ (80043f4 <xQueueReceive+0x1c0>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004310:	f001 fda4 	bl	8005e5c <vPortExitCritical>
				return pdPASS;
 8004314:	2301      	movs	r3, #1
 8004316:	e069      	b.n	80043ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800431e:	f001 fd9d 	bl	8005e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004322:	2300      	movs	r3, #0
 8004324:	e062      	b.n	80043ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800432c:	f107 0310 	add.w	r3, r7, #16
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fe8f 	bl	8005054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800433a:	f001 fd8f 	bl	8005e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800433e:	f000 fbf7 	bl	8004b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004342:	f001 fd59 	bl	8005df8 <vPortEnterCritical>
 8004346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004348:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800434c:	b25b      	sxtb	r3, r3
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004352:	d103      	bne.n	800435c <xQueueReceive+0x128>
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800435c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004362:	b25b      	sxtb	r3, r3
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004368:	d103      	bne.n	8004372 <xQueueReceive+0x13e>
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004372:	f001 fd73 	bl	8005e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004376:	1d3a      	adds	r2, r7, #4
 8004378:	f107 0310 	add.w	r3, r7, #16
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fe7e 	bl	8005080 <xTaskCheckForTimeOut>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d123      	bne.n	80043d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800438a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800438c:	f000 f916 	bl	80045bc <prvIsQueueEmpty>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d017      	beq.n	80043c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004398:	3324      	adds	r3, #36	@ 0x24
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fda2 	bl	8004ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043a6:	f000 f8b7 	bl	8004518 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043aa:	f000 fbcf 	bl	8004b4c <xTaskResumeAll>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d189      	bne.n	80042c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80043b4:	4b0f      	ldr	r3, [pc, #60]	@ (80043f4 <xQueueReceive+0x1c0>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	e780      	b.n	80042c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c8:	f000 f8a6 	bl	8004518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043cc:	f000 fbbe 	bl	8004b4c <xTaskResumeAll>
 80043d0:	e77a      	b.n	80042c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043d4:	f000 f8a0 	bl	8004518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043d8:	f000 fbb8 	bl	8004b4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043de:	f000 f8ed 	bl	80045bc <prvIsQueueEmpty>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f43f af6f 	beq.w	80042c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3730      	adds	r7, #48	@ 0x30
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10d      	bne.n	8004432 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d14d      	bne.n	80044ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 ff96 	bl	8005354 <xTaskPriorityDisinherit>
 8004428:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	e043      	b.n	80044ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d119      	bne.n	800446c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6858      	ldr	r0, [r3, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	461a      	mov	r2, r3
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	f002 fab1 	bl	80069aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	d32b      	bcc.n	80044ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	e026      	b.n	80044ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68d8      	ldr	r0, [r3, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	461a      	mov	r2, r3
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	f002 fa97 	bl	80069aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	425b      	negs	r3, r3
 8004486:	441a      	add	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d207      	bcs.n	80044a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	425b      	negs	r3, r3
 80044a2:	441a      	add	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d105      	bne.n	80044ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80044c2:	697b      	ldr	r3, [r7, #20]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d018      	beq.n	8004510 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	441a      	add	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d303      	bcc.n	8004500 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68d9      	ldr	r1, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004508:	461a      	mov	r2, r3
 800450a:	6838      	ldr	r0, [r7, #0]
 800450c:	f002 fa4d 	bl	80069aa <memcpy>
	}
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004520:	f001 fc6a 	bl	8005df8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800452a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800452c:	e011      	b.n	8004552 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	d012      	beq.n	800455c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3324      	adds	r3, #36	@ 0x24
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fd26 	bl	8004f8c <xTaskRemoveFromEventList>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004546:	f000 fdff 	bl	8005148 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	3b01      	subs	r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	dce9      	bgt.n	800452e <prvUnlockQueue+0x16>
 800455a:	e000      	b.n	800455e <prvUnlockQueue+0x46>
					break;
 800455c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	22ff      	movs	r2, #255	@ 0xff
 8004562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004566:	f001 fc79 	bl	8005e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800456a:	f001 fc45 	bl	8005df8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004574:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004576:	e011      	b.n	800459c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3310      	adds	r3, #16
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fd01 	bl	8004f8c <xTaskRemoveFromEventList>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004590:	f000 fdda 	bl	8005148 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	3b01      	subs	r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800459c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	dce9      	bgt.n	8004578 <prvUnlockQueue+0x60>
 80045a4:	e000      	b.n	80045a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	22ff      	movs	r2, #255	@ 0xff
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80045b0:	f001 fc54 	bl	8005e5c <vPortExitCritical>
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045c4:	f001 fc18 	bl	8005df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e001      	b.n	80045da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045da:	f001 fc3f 	bl	8005e5c <vPortExitCritical>

	return xReturn;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045f0:	f001 fc02 	bl	8005df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d102      	bne.n	8004606 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e001      	b.n	800460a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800460a:	f001 fc27 	bl	8005e5c <vPortExitCritical>

	return xReturn;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e014      	b.n	8004652 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004628:	4a0f      	ldr	r2, [pc, #60]	@ (8004668 <vQueueAddToRegistry+0x50>)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004634:	490c      	ldr	r1, [pc, #48]	@ (8004668 <vQueueAddToRegistry+0x50>)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800463e:	4a0a      	ldr	r2, [pc, #40]	@ (8004668 <vQueueAddToRegistry+0x50>)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800464a:	e006      	b.n	800465a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3301      	adds	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b07      	cmp	r3, #7
 8004656:	d9e7      	bls.n	8004628 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	200008c0 	.word	0x200008c0

0800466c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800467c:	f001 fbbc 	bl	8005df8 <vPortEnterCritical>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004686:	b25b      	sxtb	r3, r3
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800468c:	d103      	bne.n	8004696 <vQueueWaitForMessageRestricted+0x2a>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800469c:	b25b      	sxtb	r3, r3
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a2:	d103      	bne.n	80046ac <vQueueWaitForMessageRestricted+0x40>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046ac:	f001 fbd6 	bl	8005e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	3324      	adds	r3, #36	@ 0x24
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fc37 	bl	8004f34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046c6:	6978      	ldr	r0, [r7, #20]
 80046c8:	f7ff ff26 	bl	8004518 <prvUnlockQueue>
	}
 80046cc:	bf00      	nop
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08e      	sub	sp, #56	@ 0x38
 80046d8:	af04      	add	r7, sp, #16
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <xTaskCreateStatic+0x2c>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	623b      	str	r3, [r7, #32]
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	e7fd      	b.n	80046fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61fb      	str	r3, [r7, #28]
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	e7fd      	b.n	800471a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800471e:	23a8      	movs	r3, #168	@ 0xa8
 8004720:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2ba8      	cmp	r3, #168	@ 0xa8
 8004726:	d00b      	beq.n	8004740 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	61bb      	str	r3, [r7, #24]
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	e7fd      	b.n	800473c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004740:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01e      	beq.n	8004786 <xTaskCreateStatic+0xb2>
 8004748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01b      	beq.n	8004786 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	2202      	movs	r2, #2
 800475c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004760:	2300      	movs	r3, #0
 8004762:	9303      	str	r3, [sp, #12]
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	9302      	str	r3, [sp, #8]
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f851 	bl	8004820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800477e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004780:	f000 f8f6 	bl	8004970 <prvAddNewTaskToReadyList>
 8004784:	e001      	b.n	800478a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800478a:	697b      	ldr	r3, [r7, #20]
	}
 800478c:	4618      	mov	r0, r3
 800478e:	3728      	adds	r7, #40	@ 0x28
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08c      	sub	sp, #48	@ 0x30
 8004798:	af04      	add	r7, sp, #16
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 fc47 	bl	800603c <pvPortMalloc>
 80047ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047b6:	20a8      	movs	r0, #168	@ 0xa8
 80047b8:	f001 fc40 	bl	800603c <pvPortMalloc>
 80047bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80047ca:	e005      	b.n	80047d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f001 fd03 	bl	80061d8 <vPortFree>
 80047d2:	e001      	b.n	80047d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d017      	beq.n	800480e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9303      	str	r3, [sp, #12]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	9302      	str	r3, [sp, #8]
 80047f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f80f 	bl	8004820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004802:	69f8      	ldr	r0, [r7, #28]
 8004804:	f000 f8b4 	bl	8004970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004808:	2301      	movs	r3, #1
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e002      	b.n	8004814 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800480e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004812:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004814:	69bb      	ldr	r3, [r7, #24]
	}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	461a      	mov	r2, r3
 8004838:	21a5      	movs	r1, #165	@ 0xa5
 800483a:	f001 ffe5 	bl	8006808 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004848:	3b01      	subs	r3, #1
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	617b      	str	r3, [r7, #20]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01f      	beq.n	80048c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	e012      	b.n	80048ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	7819      	ldrb	r1, [r3, #0]
 800488e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	3334      	adds	r3, #52	@ 0x34
 8004896:	460a      	mov	r2, r1
 8004898:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3301      	adds	r3, #1
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	d9e9      	bls.n	8004886 <prvInitialiseNewTask+0x66>
 80048b2:	e000      	b.n	80048b6 <prvInitialiseNewTask+0x96>
			{
				break;
 80048b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048be:	e003      	b.n	80048c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	2b37      	cmp	r3, #55	@ 0x37
 80048cc:	d901      	bls.n	80048d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048ce:	2337      	movs	r3, #55	@ 0x37
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	2200      	movs	r2, #0
 80048e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	3304      	adds	r3, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff f965 	bl	8003bb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	3318      	adds	r3, #24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff f960 	bl	8003bb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800490c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	2200      	movs	r2, #0
 8004912:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	2200      	movs	r2, #0
 800491a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	3354      	adds	r3, #84	@ 0x54
 8004922:	224c      	movs	r2, #76	@ 0x4c
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f001 ff6e 	bl	8006808 <memset>
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	4a0d      	ldr	r2, [pc, #52]	@ (8004964 <prvInitialiseNewTask+0x144>)
 8004930:	659a      	str	r2, [r3, #88]	@ 0x58
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	4a0c      	ldr	r2, [pc, #48]	@ (8004968 <prvInitialiseNewTask+0x148>)
 8004936:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	4a0c      	ldr	r2, [pc, #48]	@ (800496c <prvInitialiseNewTask+0x14c>)
 800493c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	69b8      	ldr	r0, [r7, #24]
 8004944:	f001 f924 	bl	8005b90 <pxPortInitialiseStack>
 8004948:	4602      	mov	r2, r0
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800494e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800495a:	bf00      	nop
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20001b0c 	.word	0x20001b0c
 8004968:	20001b74 	.word	0x20001b74
 800496c:	20001bdc 	.word	0x20001bdc

08004970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004978:	f001 fa3e 	bl	8005df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800497c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a34 <prvAddNewTaskToReadyList+0xc4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	4a2c      	ldr	r2, [pc, #176]	@ (8004a34 <prvAddNewTaskToReadyList+0xc4>)
 8004984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004986:	4b2c      	ldr	r3, [pc, #176]	@ (8004a38 <prvAddNewTaskToReadyList+0xc8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800498e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a38 <prvAddNewTaskToReadyList+0xc8>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004994:	4b27      	ldr	r3, [pc, #156]	@ (8004a34 <prvAddNewTaskToReadyList+0xc4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d110      	bne.n	80049be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800499c:	f000 fbf8 	bl	8005190 <prvInitialiseTaskLists>
 80049a0:	e00d      	b.n	80049be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049a2:	4b26      	ldr	r3, [pc, #152]	@ (8004a3c <prvAddNewTaskToReadyList+0xcc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049aa:	4b23      	ldr	r3, [pc, #140]	@ (8004a38 <prvAddNewTaskToReadyList+0xc8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d802      	bhi.n	80049be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <prvAddNewTaskToReadyList+0xc8>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049be:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <prvAddNewTaskToReadyList+0xd0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a40 <prvAddNewTaskToReadyList+0xd0>)
 80049c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a40 <prvAddNewTaskToReadyList+0xd0>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a44 <prvAddNewTaskToReadyList+0xd4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d903      	bls.n	80049e4 <prvAddNewTaskToReadyList+0x74>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	4a18      	ldr	r2, [pc, #96]	@ (8004a44 <prvAddNewTaskToReadyList+0xd4>)
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4a15      	ldr	r2, [pc, #84]	@ (8004a48 <prvAddNewTaskToReadyList+0xd8>)
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f7ff f8e9 	bl	8003bd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a00:	f001 fa2c 	bl	8005e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a04:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <prvAddNewTaskToReadyList+0xcc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00e      	beq.n	8004a2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <prvAddNewTaskToReadyList+0xc8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d207      	bcs.n	8004a2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <prvAddNewTaskToReadyList+0xdc>)
 8004a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000dd4 	.word	0x20000dd4
 8004a38:	20000900 	.word	0x20000900
 8004a3c:	20000de0 	.word	0x20000de0
 8004a40:	20000df0 	.word	0x20000df0
 8004a44:	20000ddc 	.word	0x20000ddc
 8004a48:	20000904 	.word	0x20000904
 8004a4c:	e000ed04 	.word	0xe000ed04

08004a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	@ 0x28
 8004a54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a5e:	463a      	mov	r2, r7
 8004a60:	1d39      	adds	r1, r7, #4
 8004a62:	f107 0308 	add.w	r3, r7, #8
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff f852 	bl	8003b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	9202      	str	r2, [sp, #8]
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	2300      	movs	r3, #0
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	460a      	mov	r2, r1
 8004a7e:	4924      	ldr	r1, [pc, #144]	@ (8004b10 <vTaskStartScheduler+0xc0>)
 8004a80:	4824      	ldr	r0, [pc, #144]	@ (8004b14 <vTaskStartScheduler+0xc4>)
 8004a82:	f7ff fe27 	bl	80046d4 <xTaskCreateStatic>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4a23      	ldr	r2, [pc, #140]	@ (8004b18 <vTaskStartScheduler+0xc8>)
 8004a8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a8c:	4b22      	ldr	r3, [pc, #136]	@ (8004b18 <vTaskStartScheduler+0xc8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a94:	2301      	movs	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e001      	b.n	8004a9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d102      	bne.n	8004aaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004aa4:	f000 fd1a 	bl	80054dc <xTimerCreateTimerTask>
 8004aa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d11b      	bne.n	8004ae8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
}
 8004ac2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ac4:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <vTaskStartScheduler+0xcc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3354      	adds	r3, #84	@ 0x54
 8004aca:	4a15      	ldr	r2, [pc, #84]	@ (8004b20 <vTaskStartScheduler+0xd0>)
 8004acc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ace:	4b15      	ldr	r3, [pc, #84]	@ (8004b24 <vTaskStartScheduler+0xd4>)
 8004ad0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <vTaskStartScheduler+0xd8>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004adc:	4b13      	ldr	r3, [pc, #76]	@ (8004b2c <vTaskStartScheduler+0xdc>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ae2:	f001 f8e5 	bl	8005cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ae6:	e00f      	b.n	8004b08 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aee:	d10b      	bne.n	8004b08 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <vTaskStartScheduler+0xb4>
}
 8004b08:	bf00      	nop
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	08006e70 	.word	0x08006e70
 8004b14:	08005161 	.word	0x08005161
 8004b18:	20000df8 	.word	0x20000df8
 8004b1c:	20000900 	.word	0x20000900
 8004b20:	2000001c 	.word	0x2000001c
 8004b24:	20000df4 	.word	0x20000df4
 8004b28:	20000de0 	.word	0x20000de0
 8004b2c:	20000dd8 	.word	0x20000dd8

08004b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b34:	4b04      	ldr	r3, [pc, #16]	@ (8004b48 <vTaskSuspendAll+0x18>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	4a03      	ldr	r2, [pc, #12]	@ (8004b48 <vTaskSuspendAll+0x18>)
 8004b3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	20000dfc 	.word	0x20000dfc

08004b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b5a:	4b42      	ldr	r3, [pc, #264]	@ (8004c64 <xTaskResumeAll+0x118>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <xTaskResumeAll+0x2e>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	603b      	str	r3, [r7, #0]
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	e7fd      	b.n	8004b76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b7a:	f001 f93d 	bl	8005df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b7e:	4b39      	ldr	r3, [pc, #228]	@ (8004c64 <xTaskResumeAll+0x118>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	4a37      	ldr	r2, [pc, #220]	@ (8004c64 <xTaskResumeAll+0x118>)
 8004b86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b88:	4b36      	ldr	r3, [pc, #216]	@ (8004c64 <xTaskResumeAll+0x118>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d162      	bne.n	8004c56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b90:	4b35      	ldr	r3, [pc, #212]	@ (8004c68 <xTaskResumeAll+0x11c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05e      	beq.n	8004c56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b98:	e02f      	b.n	8004bfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9a:	4b34      	ldr	r3, [pc, #208]	@ (8004c6c <xTaskResumeAll+0x120>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff f870 	bl	8003c8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff f86b 	bl	8003c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bba:	4b2d      	ldr	r3, [pc, #180]	@ (8004c70 <xTaskResumeAll+0x124>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d903      	bls.n	8004bca <xTaskResumeAll+0x7e>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004c70 <xTaskResumeAll+0x124>)
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a27      	ldr	r2, [pc, #156]	@ (8004c74 <xTaskResumeAll+0x128>)
 8004bd8:	441a      	add	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fe fff6 	bl	8003bd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bea:	4b23      	ldr	r3, [pc, #140]	@ (8004c78 <xTaskResumeAll+0x12c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d302      	bcc.n	8004bfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004bf4:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <xTaskResumeAll+0x130>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004c6c <xTaskResumeAll+0x120>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1cb      	bne.n	8004b9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c08:	f000 fb66 	bl	80052d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004c80 <xTaskResumeAll+0x134>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c18:	f000 f846 	bl	8004ca8 <xTaskIncrementTick>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004c22:	4b16      	ldr	r3, [pc, #88]	@ (8004c7c <xTaskResumeAll+0x130>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f1      	bne.n	8004c18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004c34:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <xTaskResumeAll+0x134>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <xTaskResumeAll+0x130>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c42:	2301      	movs	r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <xTaskResumeAll+0x138>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c56:	f001 f901 	bl	8005e5c <vPortExitCritical>

	return xAlreadyYielded;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000dfc 	.word	0x20000dfc
 8004c68:	20000dd4 	.word	0x20000dd4
 8004c6c:	20000d94 	.word	0x20000d94
 8004c70:	20000ddc 	.word	0x20000ddc
 8004c74:	20000904 	.word	0x20000904
 8004c78:	20000900 	.word	0x20000900
 8004c7c:	20000de8 	.word	0x20000de8
 8004c80:	20000de4 	.word	0x20000de4
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <xTaskGetTickCount+0x1c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c94:	687b      	ldr	r3, [r7, #4]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000dd8 	.word	0x20000dd8

08004ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8004df0 <xTaskIncrementTick+0x148>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 8090 	bne.w	8004ddc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8004df4 <xTaskIncrementTick+0x14c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8004df4 <xTaskIncrementTick+0x14c>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d121      	bne.n	8004d14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cd0:	4b49      	ldr	r3, [pc, #292]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	603b      	str	r3, [r7, #0]
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	e7fd      	b.n	8004cee <xTaskIncrementTick+0x46>
 8004cf2:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	4b40      	ldr	r3, [pc, #256]	@ (8004dfc <xTaskIncrementTick+0x154>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4a3e      	ldr	r2, [pc, #248]	@ (8004dfc <xTaskIncrementTick+0x154>)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b3e      	ldr	r3, [pc, #248]	@ (8004e00 <xTaskIncrementTick+0x158>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e00 <xTaskIncrementTick+0x158>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	f000 fae2 	bl	80052d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d14:	4b3b      	ldr	r3, [pc, #236]	@ (8004e04 <xTaskIncrementTick+0x15c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d349      	bcc.n	8004db2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1e:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	4b36      	ldr	r3, [pc, #216]	@ (8004e04 <xTaskIncrementTick+0x15c>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d2e:	601a      	str	r2, [r3, #0]
					break;
 8004d30:	e03f      	b.n	8004db2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b31      	ldr	r3, [pc, #196]	@ (8004df8 <xTaskIncrementTick+0x150>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8004e04 <xTaskIncrementTick+0x15c>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d50:	e02f      	b.n	8004db2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe ff98 	bl	8003c8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	3318      	adds	r3, #24
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe ff8f 	bl	8003c8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d72:	4b25      	ldr	r3, [pc, #148]	@ (8004e08 <xTaskIncrementTick+0x160>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d903      	bls.n	8004d82 <xTaskIncrementTick+0xda>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <xTaskIncrementTick+0x160>)
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e0c <xTaskIncrementTick+0x164>)
 8004d90:	441a      	add	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fe ff1a 	bl	8003bd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <xTaskIncrementTick+0x168>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d3b8      	bcc.n	8004d1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004db0:	e7b5      	b.n	8004d1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004db2:	4b17      	ldr	r3, [pc, #92]	@ (8004e10 <xTaskIncrementTick+0x168>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db8:	4914      	ldr	r1, [pc, #80]	@ (8004e0c <xTaskIncrementTick+0x164>)
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d901      	bls.n	8004dce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004dce:	4b11      	ldr	r3, [pc, #68]	@ (8004e14 <xTaskIncrementTick+0x16c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e004      	b.n	8004de6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e18 <xTaskIncrementTick+0x170>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	4a0d      	ldr	r2, [pc, #52]	@ (8004e18 <xTaskIncrementTick+0x170>)
 8004de4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004de6:	697b      	ldr	r3, [r7, #20]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000dfc 	.word	0x20000dfc
 8004df4:	20000dd8 	.word	0x20000dd8
 8004df8:	20000d8c 	.word	0x20000d8c
 8004dfc:	20000d90 	.word	0x20000d90
 8004e00:	20000dec 	.word	0x20000dec
 8004e04:	20000df4 	.word	0x20000df4
 8004e08:	20000ddc 	.word	0x20000ddc
 8004e0c:	20000904 	.word	0x20000904
 8004e10:	20000900 	.word	0x20000900
 8004e14:	20000de8 	.word	0x20000de8
 8004e18:	20000de4 	.word	0x20000de4

08004e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e22:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <vTaskSwitchContext+0xb4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed4 <vTaskSwitchContext+0xb8>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e30:	e047      	b.n	8004ec2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004e32:	4b28      	ldr	r3, [pc, #160]	@ (8004ed4 <vTaskSwitchContext+0xb8>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e38:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <vTaskSwitchContext+0xbc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e011      	b.n	8004e64 <vTaskSwitchContext+0x48>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <vTaskSwitchContext+0x42>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	607b      	str	r3, [r7, #4]
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	e7fd      	b.n	8004e5a <vTaskSwitchContext+0x3e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	491d      	ldr	r1, [pc, #116]	@ (8004edc <vTaskSwitchContext+0xc0>)
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0e3      	beq.n	8004e40 <vTaskSwitchContext+0x24>
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <vTaskSwitchContext+0xc0>)
 8004e84:	4413      	add	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d104      	bne.n	8004ea8 <vTaskSwitchContext+0x8c>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee0 <vTaskSwitchContext+0xc4>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4a09      	ldr	r2, [pc, #36]	@ (8004ed8 <vTaskSwitchContext+0xbc>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <vTaskSwitchContext+0xc4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3354      	adds	r3, #84	@ 0x54
 8004ebe:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <vTaskSwitchContext+0xc8>)
 8004ec0:	6013      	str	r3, [r2, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20000dfc 	.word	0x20000dfc
 8004ed4:	20000de8 	.word	0x20000de8
 8004ed8:	20000ddc 	.word	0x20000ddc
 8004edc:	20000904 	.word	0x20000904
 8004ee0:	20000900 	.word	0x20000900
 8004ee4:	2000001c 	.word	0x2000001c

08004ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60fb      	str	r3, [r7, #12]
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f10:	4b07      	ldr	r3, [pc, #28]	@ (8004f30 <vTaskPlaceOnEventList+0x48>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3318      	adds	r3, #24
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fe fe7e 	bl	8003c1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f1e:	2101      	movs	r1, #1
 8004f20:	6838      	ldr	r0, [r7, #0]
 8004f22:	f000 fa87 	bl	8005434 <prvAddCurrentTaskToDelayedList>
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000900 	.word	0x20000900

08004f34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3318      	adds	r3, #24
 8004f64:	4619      	mov	r1, r3
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7fe fe33 	bl	8003bd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	68b8      	ldr	r0, [r7, #8]
 8004f7c:	f000 fa5a 	bl	8005434 <prvAddCurrentTaskToDelayedList>
	}
 8004f80:	bf00      	nop
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000900 	.word	0x20000900

08004f8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	e7fd      	b.n	8004fb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe fe64 	bl	8003c8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800503c <xTaskRemoveFromEventList+0xb0>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11d      	bne.n	8005008 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fe5b 	bl	8003c8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fda:	4b19      	ldr	r3, [pc, #100]	@ (8005040 <xTaskRemoveFromEventList+0xb4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d903      	bls.n	8004fea <xTaskRemoveFromEventList+0x5e>
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4a16      	ldr	r2, [pc, #88]	@ (8005040 <xTaskRemoveFromEventList+0xb4>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4a13      	ldr	r2, [pc, #76]	@ (8005044 <xTaskRemoveFromEventList+0xb8>)
 8004ff8:	441a      	add	r2, r3
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7fe fde6 	bl	8003bd2 <vListInsertEnd>
 8005006:	e005      	b.n	8005014 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	3318      	adds	r3, #24
 800500c:	4619      	mov	r1, r3
 800500e:	480e      	ldr	r0, [pc, #56]	@ (8005048 <xTaskRemoveFromEventList+0xbc>)
 8005010:	f7fe fddf 	bl	8003bd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <xTaskRemoveFromEventList+0xc0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	429a      	cmp	r2, r3
 8005020:	d905      	bls.n	800502e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005026:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <xTaskRemoveFromEventList+0xc4>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e001      	b.n	8005032 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005032:	697b      	ldr	r3, [r7, #20]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000dfc 	.word	0x20000dfc
 8005040:	20000ddc 	.word	0x20000ddc
 8005044:	20000904 	.word	0x20000904
 8005048:	20000d94 	.word	0x20000d94
 800504c:	20000900 	.word	0x20000900
 8005050:	20000de8 	.word	0x20000de8

08005054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800505c:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <vTaskInternalSetTimeOutState+0x24>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <vTaskInternalSetTimeOutState+0x28>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	605a      	str	r2, [r3, #4]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	20000dec 	.word	0x20000dec
 800507c:	20000dd8 	.word	0x20000dd8

08005080 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10b      	bne.n	80050a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	613b      	str	r3, [r7, #16]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60fb      	str	r3, [r7, #12]
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	e7fd      	b.n	80050c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80050c6:	f000 fe97 	bl	8005df8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005140 <xTaskCheckForTimeOut+0xc0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050e2:	d102      	bne.n	80050ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	e023      	b.n	8005132 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b15      	ldr	r3, [pc, #84]	@ (8005144 <xTaskCheckForTimeOut+0xc4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d007      	beq.n	8005106 <xTaskCheckForTimeOut+0x86>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d302      	bcc.n	8005106 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	e015      	b.n	8005132 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	429a      	cmp	r2, r3
 800510e:	d20b      	bcs.n	8005128 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff99 	bl	8005054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e004      	b.n	8005132 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800512e:	2301      	movs	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005132:	f000 fe93 	bl	8005e5c <vPortExitCritical>

	return xReturn;
 8005136:	69fb      	ldr	r3, [r7, #28]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000dd8 	.word	0x20000dd8
 8005144:	20000dec 	.word	0x20000dec

08005148 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800514c:	4b03      	ldr	r3, [pc, #12]	@ (800515c <vTaskMissedYield+0x14>)
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]
}
 8005152:	bf00      	nop
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20000de8 	.word	0x20000de8

08005160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005168:	f000 f852 	bl	8005210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800516c:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <prvIdleTask+0x28>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d9f9      	bls.n	8005168 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005174:	4b05      	ldr	r3, [pc, #20]	@ (800518c <prvIdleTask+0x2c>)
 8005176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005184:	e7f0      	b.n	8005168 <prvIdleTask+0x8>
 8005186:	bf00      	nop
 8005188:	20000904 	.word	0x20000904
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	e00c      	b.n	80051b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4a12      	ldr	r2, [pc, #72]	@ (80051f0 <prvInitialiseTaskLists+0x60>)
 80051a8:	4413      	add	r3, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe fce4 	bl	8003b78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3301      	adds	r3, #1
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b37      	cmp	r3, #55	@ 0x37
 80051ba:	d9ef      	bls.n	800519c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051bc:	480d      	ldr	r0, [pc, #52]	@ (80051f4 <prvInitialiseTaskLists+0x64>)
 80051be:	f7fe fcdb 	bl	8003b78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051c2:	480d      	ldr	r0, [pc, #52]	@ (80051f8 <prvInitialiseTaskLists+0x68>)
 80051c4:	f7fe fcd8 	bl	8003b78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051c8:	480c      	ldr	r0, [pc, #48]	@ (80051fc <prvInitialiseTaskLists+0x6c>)
 80051ca:	f7fe fcd5 	bl	8003b78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051ce:	480c      	ldr	r0, [pc, #48]	@ (8005200 <prvInitialiseTaskLists+0x70>)
 80051d0:	f7fe fcd2 	bl	8003b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051d4:	480b      	ldr	r0, [pc, #44]	@ (8005204 <prvInitialiseTaskLists+0x74>)
 80051d6:	f7fe fccf 	bl	8003b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051da:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <prvInitialiseTaskLists+0x78>)
 80051dc:	4a05      	ldr	r2, [pc, #20]	@ (80051f4 <prvInitialiseTaskLists+0x64>)
 80051de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051e0:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <prvInitialiseTaskLists+0x7c>)
 80051e2:	4a05      	ldr	r2, [pc, #20]	@ (80051f8 <prvInitialiseTaskLists+0x68>)
 80051e4:	601a      	str	r2, [r3, #0]
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000904 	.word	0x20000904
 80051f4:	20000d64 	.word	0x20000d64
 80051f8:	20000d78 	.word	0x20000d78
 80051fc:	20000d94 	.word	0x20000d94
 8005200:	20000da8 	.word	0x20000da8
 8005204:	20000dc0 	.word	0x20000dc0
 8005208:	20000d8c 	.word	0x20000d8c
 800520c:	20000d90 	.word	0x20000d90

08005210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005216:	e019      	b.n	800524c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005218:	f000 fdee 	bl	8005df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521c:	4b10      	ldr	r3, [pc, #64]	@ (8005260 <prvCheckTasksWaitingTermination+0x50>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe fd2f 	bl	8003c8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <prvCheckTasksWaitingTermination+0x54>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3b01      	subs	r3, #1
 8005234:	4a0b      	ldr	r2, [pc, #44]	@ (8005264 <prvCheckTasksWaitingTermination+0x54>)
 8005236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <prvCheckTasksWaitingTermination+0x58>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3b01      	subs	r3, #1
 800523e:	4a0a      	ldr	r2, [pc, #40]	@ (8005268 <prvCheckTasksWaitingTermination+0x58>)
 8005240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005242:	f000 fe0b 	bl	8005e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f810 	bl	800526c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <prvCheckTasksWaitingTermination+0x58>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e1      	bne.n	8005218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000da8 	.word	0x20000da8
 8005264:	20000dd4 	.word	0x20000dd4
 8005268:	20000dbc 	.word	0x20000dbc

0800526c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3354      	adds	r3, #84	@ 0x54
 8005278:	4618      	mov	r0, r3
 800527a:	f001 fadd 	bl	8006838 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005284:	2b00      	cmp	r3, #0
 8005286:	d108      	bne.n	800529a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	4618      	mov	r0, r3
 800528e:	f000 ffa3 	bl	80061d8 <vPortFree>
				vPortFree( pxTCB );
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 ffa0 	bl	80061d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005298:	e019      	b.n	80052ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d103      	bne.n	80052ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 ff97 	bl	80061d8 <vPortFree>
	}
 80052aa:	e010      	b.n	80052ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d00b      	beq.n	80052ce <prvDeleteTCB+0x62>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60fb      	str	r3, [r7, #12]
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <prvDeleteTCB+0x5e>
	}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052de:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <prvResetNextTaskUnblockTime+0x38>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005314 <prvResetNextTaskUnblockTime+0x3c>)
 80052ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052f0:	e008      	b.n	8005304 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f2:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <prvResetNextTaskUnblockTime+0x38>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <prvResetNextTaskUnblockTime+0x3c>)
 8005302:	6013      	str	r3, [r2, #0]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000d8c 	.word	0x20000d8c
 8005314:	20000df4 	.word	0x20000df4

08005318 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800531e:	4b0b      	ldr	r3, [pc, #44]	@ (800534c <xTaskGetSchedulerState+0x34>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005326:	2301      	movs	r3, #1
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	e008      	b.n	800533e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532c:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <xTaskGetSchedulerState+0x38>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005334:	2302      	movs	r3, #2
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	e001      	b.n	800533e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800533a:	2300      	movs	r3, #0
 800533c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800533e:	687b      	ldr	r3, [r7, #4]
	}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	20000de0 	.word	0x20000de0
 8005350:	20000dfc 	.word	0x20000dfc

08005354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d058      	beq.n	800541c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800536a:	4b2f      	ldr	r3, [pc, #188]	@ (8005428 <xTaskPriorityDisinherit+0xd4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	429a      	cmp	r2, r3
 8005372:	d00b      	beq.n	800538c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60bb      	str	r3, [r7, #8]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b0:	1e5a      	subs	r2, r3, #1
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053be:	429a      	cmp	r2, r3
 80053c0:	d02c      	beq.n	800541c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d128      	bne.n	800541c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fc5c 	bl	8003c8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ec:	4b0f      	ldr	r3, [pc, #60]	@ (800542c <xTaskPriorityDisinherit+0xd8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d903      	bls.n	80053fc <xTaskPriorityDisinherit+0xa8>
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	4a0c      	ldr	r2, [pc, #48]	@ (800542c <xTaskPriorityDisinherit+0xd8>)
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <xTaskPriorityDisinherit+0xdc>)
 800540a:	441a      	add	r2, r3
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fe fbdd 	bl	8003bd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005418:	2301      	movs	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800541c:	697b      	ldr	r3, [r7, #20]
	}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000900 	.word	0x20000900
 800542c:	20000ddc 	.word	0x20000ddc
 8005430:	20000904 	.word	0x20000904

08005434 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800543e:	4b21      	ldr	r3, [pc, #132]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005444:	4b20      	ldr	r3, [pc, #128]	@ (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3304      	adds	r3, #4
 800544a:	4618      	mov	r0, r3
 800544c:	f7fe fc1e 	bl	8003c8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005456:	d10a      	bne.n	800546e <prvAddCurrentTaskToDelayedList+0x3a>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545e:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4819      	ldr	r0, [pc, #100]	@ (80054cc <prvAddCurrentTaskToDelayedList+0x98>)
 8005468:	f7fe fbb3 	bl	8003bd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800546c:	e026      	b.n	80054bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005476:	4b14      	ldr	r3, [pc, #80]	@ (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	d209      	bcs.n	800549a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005486:	4b12      	ldr	r3, [pc, #72]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b0f      	ldr	r3, [pc, #60]	@ (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f7fe fbc1 	bl	8003c1a <vListInsert>
}
 8005498:	e010      	b.n	80054bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800549a:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7fe fbb7 	bl	8003c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054ac:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d202      	bcs.n	80054bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054b6:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6013      	str	r3, [r2, #0]
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000dd8 	.word	0x20000dd8
 80054c8:	20000900 	.word	0x20000900
 80054cc:	20000dc0 	.word	0x20000dc0
 80054d0:	20000d90 	.word	0x20000d90
 80054d4:	20000d8c 	.word	0x20000d8c
 80054d8:	20000df4 	.word	0x20000df4

080054dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	@ 0x28
 80054e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054e6:	f000 fb13 	bl	8005b10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005560 <xTimerCreateTimerTask+0x84>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d021      	beq.n	8005536 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054fa:	1d3a      	adds	r2, r7, #4
 80054fc:	f107 0108 	add.w	r1, r7, #8
 8005500:	f107 030c 	add.w	r3, r7, #12
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe fb1d 	bl	8003b44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	9202      	str	r2, [sp, #8]
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	2302      	movs	r3, #2
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	2300      	movs	r3, #0
 800551a:	460a      	mov	r2, r1
 800551c:	4911      	ldr	r1, [pc, #68]	@ (8005564 <xTimerCreateTimerTask+0x88>)
 800551e:	4812      	ldr	r0, [pc, #72]	@ (8005568 <xTimerCreateTimerTask+0x8c>)
 8005520:	f7ff f8d8 	bl	80046d4 <xTaskCreateStatic>
 8005524:	4603      	mov	r3, r0
 8005526:	4a11      	ldr	r2, [pc, #68]	@ (800556c <xTimerCreateTimerTask+0x90>)
 8005528:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800552a:	4b10      	ldr	r3, [pc, #64]	@ (800556c <xTimerCreateTimerTask+0x90>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005532:	2301      	movs	r3, #1
 8005534:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10b      	bne.n	8005554 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	613b      	str	r3, [r7, #16]
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005554:	697b      	ldr	r3, [r7, #20]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000e30 	.word	0x20000e30
 8005564:	08006e78 	.word	0x08006e78
 8005568:	080056a9 	.word	0x080056a9
 800556c:	20000e34 	.word	0x20000e34

08005570 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	@ 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800557e:	2300      	movs	r3, #0
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	623b      	str	r3, [r7, #32]
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	e7fd      	b.n	800559c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055a0:	4b19      	ldr	r3, [pc, #100]	@ (8005608 <xTimerGenericCommand+0x98>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02a      	beq.n	80055fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	dc18      	bgt.n	80055ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055ba:	f7ff fead 	bl	8005318 <xTaskGetSchedulerState>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d109      	bne.n	80055d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055c4:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <xTimerGenericCommand+0x98>)
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	f107 0110 	add.w	r1, r7, #16
 80055cc:	2300      	movs	r3, #0
 80055ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d0:	f7fe fc90 	bl	8003ef4 <xQueueGenericSend>
 80055d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80055d6:	e012      	b.n	80055fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <xTimerGenericCommand+0x98>)
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	f107 0110 	add.w	r1, r7, #16
 80055e0:	2300      	movs	r3, #0
 80055e2:	2200      	movs	r2, #0
 80055e4:	f7fe fc86 	bl	8003ef4 <xQueueGenericSend>
 80055e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80055ea:	e008      	b.n	80055fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055ec:	4b06      	ldr	r3, [pc, #24]	@ (8005608 <xTimerGenericCommand+0x98>)
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	f107 0110 	add.w	r1, r7, #16
 80055f4:	2300      	movs	r3, #0
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	f7fe fd7e 	bl	80040f8 <xQueueGenericSendFromISR>
 80055fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005600:	4618      	mov	r0, r3
 8005602:	3728      	adds	r7, #40	@ 0x28
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000e30 	.word	0x20000e30

0800560c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005616:	4b23      	ldr	r3, [pc, #140]	@ (80056a4 <prvProcessExpiredTimer+0x98>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	3304      	adds	r3, #4
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe fb31 	bl	8003c8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d023      	beq.n	8005680 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	18d1      	adds	r1, r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	6978      	ldr	r0, [r7, #20]
 8005646:	f000 f8d5 	bl	80057f4 <prvInsertTimerInActiveList>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d020      	beq.n	8005692 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005650:	2300      	movs	r3, #0
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	2100      	movs	r1, #0
 800565a:	6978      	ldr	r0, [r7, #20]
 800565c:	f7ff ff88 	bl	8005570 <xTimerGenericCommand>
 8005660:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d114      	bne.n	8005692 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	60fb      	str	r3, [r7, #12]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	4798      	blx	r3
}
 800569a:	bf00      	nop
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000e28 	.word	0x20000e28

080056a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056b0:	f107 0308 	add.w	r3, r7, #8
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 f859 	bl	800576c <prvGetNextExpireTime>
 80056ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4619      	mov	r1, r3
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f805 	bl	80056d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056c6:	f000 f8d7 	bl	8005878 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056ca:	bf00      	nop
 80056cc:	e7f0      	b.n	80056b0 <prvTimerTask+0x8>
	...

080056d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056da:	f7ff fa29 	bl	8004b30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056de:	f107 0308 	add.w	r3, r7, #8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f866 	bl	80057b4 <prvSampleTimeNow>
 80056e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d130      	bne.n	8005752 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <prvProcessTimerOrBlockTask+0x3c>
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d806      	bhi.n	800570c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056fe:	f7ff fa25 	bl	8004b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ff81 	bl	800560c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800570a:	e024      	b.n	8005756 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d008      	beq.n	8005724 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005712:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <prvProcessTimerOrBlockTask+0x90>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <prvProcessTimerOrBlockTask+0x50>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <prvProcessTimerOrBlockTask+0x52>
 8005720:	2300      	movs	r3, #0
 8005722:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005724:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <prvProcessTimerOrBlockTask+0x94>)
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	4619      	mov	r1, r3
 8005732:	f7fe ff9b 	bl	800466c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005736:	f7ff fa09 	bl	8004b4c <xTaskResumeAll>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005740:	4b09      	ldr	r3, [pc, #36]	@ (8005768 <prvProcessTimerOrBlockTask+0x98>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
}
 8005750:	e001      	b.n	8005756 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005752:	f7ff f9fb 	bl	8004b4c <xTaskResumeAll>
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000e2c 	.word	0x20000e2c
 8005764:	20000e30 	.word	0x20000e30
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005774:	4b0e      	ldr	r3, [pc, #56]	@ (80057b0 <prvGetNextExpireTime+0x44>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <prvGetNextExpireTime+0x16>
 800577e:	2201      	movs	r2, #1
 8005780:	e000      	b.n	8005784 <prvGetNextExpireTime+0x18>
 8005782:	2200      	movs	r2, #0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005790:	4b07      	ldr	r3, [pc, #28]	@ (80057b0 <prvGetNextExpireTime+0x44>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e001      	b.n	80057a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000e28 	.word	0x20000e28

080057b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057bc:	f7ff fa64 	bl	8004c88 <xTaskGetTickCount>
 80057c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057c2:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <prvSampleTimeNow+0x3c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d205      	bcs.n	80057d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057cc:	f000 f93a 	bl	8005a44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	e002      	b.n	80057de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057de:	4a04      	ldr	r2, [pc, #16]	@ (80057f0 <prvSampleTimeNow+0x3c>)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057e4:	68fb      	ldr	r3, [r7, #12]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000e38 	.word	0x20000e38

080057f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d812      	bhi.n	8005840 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	1ad2      	subs	r2, r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e01b      	b.n	8005866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800582e:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <prvInsertTimerInActiveList+0x7c>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3304      	adds	r3, #4
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f7fe f9ee 	bl	8003c1a <vListInsert>
 800583e:	e012      	b.n	8005866 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d206      	bcs.n	8005856 <prvInsertTimerInActiveList+0x62>
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d302      	bcc.n	8005856 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e007      	b.n	8005866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005856:	4b07      	ldr	r3, [pc, #28]	@ (8005874 <prvInsertTimerInActiveList+0x80>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3304      	adds	r3, #4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f7fe f9da 	bl	8003c1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005866:	697b      	ldr	r3, [r7, #20]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000e2c 	.word	0x20000e2c
 8005874:	20000e28 	.word	0x20000e28

08005878 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08e      	sub	sp, #56	@ 0x38
 800587c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800587e:	e0ce      	b.n	8005a1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	da19      	bge.n	80058ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	3304      	adds	r3, #4
 800588a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	61fb      	str	r3, [r7, #28]
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	e7fd      	b.n	80058a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b0:	6850      	ldr	r0, [r2, #4]
 80058b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b4:	6892      	ldr	r2, [r2, #8]
 80058b6:	4611      	mov	r1, r2
 80058b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f2c0 80ae 	blt.w	8005a1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d0:	3304      	adds	r3, #4
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe f9da 	bl	8003c8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058d8:	463b      	mov	r3, r7
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff ff6a 	bl	80057b4 <prvSampleTimeNow>
 80058e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b09      	cmp	r3, #9
 80058e6:	f200 8097 	bhi.w	8005a18 <prvProcessReceivedCommands+0x1a0>
 80058ea:	a201      	add	r2, pc, #4	@ (adr r2, 80058f0 <prvProcessReceivedCommands+0x78>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005919 	.word	0x08005919
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005919 	.word	0x08005919
 80058fc:	0800598f 	.word	0x0800598f
 8005900:	080059a3 	.word	0x080059a3
 8005904:	080059ef 	.word	0x080059ef
 8005908:	08005919 	.word	0x08005919
 800590c:	08005919 	.word	0x08005919
 8005910:	0800598f 	.word	0x0800598f
 8005914:	080059a3 	.word	0x080059a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	b2da      	uxtb	r2, r3
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	18d1      	adds	r1, r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005938:	f7ff ff5c 	bl	80057f4 <prvInsertTimerInActiveList>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d06c      	beq.n	8005a1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005948:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d061      	beq.n	8005a1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	441a      	add	r2, r3
 8005960:	2300      	movs	r3, #0
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	2100      	movs	r1, #0
 8005968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800596a:	f7ff fe01 	bl	8005570 <xTimerGenericCommand>
 800596e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d152      	bne.n	8005a1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	61bb      	str	r3, [r7, #24]
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	e7fd      	b.n	800598a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80059a0:	e03d      	b.n	8005a1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	617b      	str	r3, [r7, #20]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	18d1      	adds	r1, r2, r3
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059e8:	f7ff ff04 	bl	80057f4 <prvInsertTimerInActiveList>
					break;
 80059ec:	e017      	b.n	8005a1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d103      	bne.n	8005a04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80059fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059fe:	f000 fbeb 	bl	80061d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a02:	e00c      	b.n	8005a1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a16:	e002      	b.n	8005a1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <prvProcessReceivedCommands+0x1a6>
					break;
 8005a1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a1e:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <prvProcessReceivedCommands+0x1c8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	1d39      	adds	r1, r7, #4
 8005a24:	2200      	movs	r2, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fc04 	bl	8004234 <xQueueReceive>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f47f af26 	bne.w	8005880 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	3730      	adds	r7, #48	@ 0x30
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000e30 	.word	0x20000e30

08005a44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a4a:	e049      	b.n	8005ae0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b08 <prvSwitchTimerLists+0xc4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a56:	4b2c      	ldr	r3, [pc, #176]	@ (8005b08 <prvSwitchTimerLists+0xc4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe f911 	bl	8003c8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d02f      	beq.n	8005ae0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4413      	add	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d90e      	bls.n	8005ab0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <prvSwitchTimerLists+0xc4>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7fe f8b6 	bl	8003c1a <vListInsert>
 8005aae:	e017      	b.n	8005ae0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7ff fd58 	bl	8005570 <xTimerGenericCommand>
 8005ac0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10b      	bne.n	8005ae0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	603b      	str	r3, [r7, #0]
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	e7fd      	b.n	8005adc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ae0:	4b09      	ldr	r3, [pc, #36]	@ (8005b08 <prvSwitchTimerLists+0xc4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1b0      	bne.n	8005a4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005aea:	4b07      	ldr	r3, [pc, #28]	@ (8005b08 <prvSwitchTimerLists+0xc4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <prvSwitchTimerLists+0xc8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <prvSwitchTimerLists+0xc4>)
 8005af6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005af8:	4a04      	ldr	r2, [pc, #16]	@ (8005b0c <prvSwitchTimerLists+0xc8>)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	6013      	str	r3, [r2, #0]
}
 8005afe:	bf00      	nop
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000e28 	.word	0x20000e28
 8005b0c:	20000e2c 	.word	0x20000e2c

08005b10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b16:	f000 f96f 	bl	8005df8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b1a:	4b15      	ldr	r3, [pc, #84]	@ (8005b70 <prvCheckForValidListAndQueue+0x60>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d120      	bne.n	8005b64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b22:	4814      	ldr	r0, [pc, #80]	@ (8005b74 <prvCheckForValidListAndQueue+0x64>)
 8005b24:	f7fe f828 	bl	8003b78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b28:	4813      	ldr	r0, [pc, #76]	@ (8005b78 <prvCheckForValidListAndQueue+0x68>)
 8005b2a:	f7fe f825 	bl	8003b78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b2e:	4b13      	ldr	r3, [pc, #76]	@ (8005b7c <prvCheckForValidListAndQueue+0x6c>)
 8005b30:	4a10      	ldr	r2, [pc, #64]	@ (8005b74 <prvCheckForValidListAndQueue+0x64>)
 8005b32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b34:	4b12      	ldr	r3, [pc, #72]	@ (8005b80 <prvCheckForValidListAndQueue+0x70>)
 8005b36:	4a10      	ldr	r2, [pc, #64]	@ (8005b78 <prvCheckForValidListAndQueue+0x68>)
 8005b38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	4b11      	ldr	r3, [pc, #68]	@ (8005b84 <prvCheckForValidListAndQueue+0x74>)
 8005b40:	4a11      	ldr	r2, [pc, #68]	@ (8005b88 <prvCheckForValidListAndQueue+0x78>)
 8005b42:	2110      	movs	r1, #16
 8005b44:	200a      	movs	r0, #10
 8005b46:	f7fe f935 	bl	8003db4 <xQueueGenericCreateStatic>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4a08      	ldr	r2, [pc, #32]	@ (8005b70 <prvCheckForValidListAndQueue+0x60>)
 8005b4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b50:	4b07      	ldr	r3, [pc, #28]	@ (8005b70 <prvCheckForValidListAndQueue+0x60>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <prvCheckForValidListAndQueue+0x60>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	490b      	ldr	r1, [pc, #44]	@ (8005b8c <prvCheckForValidListAndQueue+0x7c>)
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fd5a 	bl	8004618 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b64:	f000 f97a 	bl	8005e5c <vPortExitCritical>
}
 8005b68:	bf00      	nop
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000e30 	.word	0x20000e30
 8005b74:	20000e00 	.word	0x20000e00
 8005b78:	20000e14 	.word	0x20000e14
 8005b7c:	20000e28 	.word	0x20000e28
 8005b80:	20000e2c 	.word	0x20000e2c
 8005b84:	20000edc 	.word	0x20000edc
 8005b88:	20000e3c 	.word	0x20000e3c
 8005b8c:	08006e80 	.word	0x08006e80

08005b90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3b04      	subs	r3, #4
 8005ba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b04      	subs	r3, #4
 8005bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3b04      	subs	r3, #4
 8005bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf4 <pxPortInitialiseStack+0x64>)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b14      	subs	r3, #20
 8005bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b04      	subs	r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f06f 0202 	mvn.w	r2, #2
 8005bde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3b20      	subs	r3, #32
 8005be4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	08005bf9 	.word	0x08005bf9

08005bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c02:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <prvTaskExitError+0x58>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c0a:	d00b      	beq.n	8005c24 <prvTaskExitError+0x2c>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60fb      	str	r3, [r7, #12]
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <prvTaskExitError+0x28>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60bb      	str	r3, [r7, #8]
}
 8005c36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c38:	bf00      	nop
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0fc      	beq.n	8005c3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	2000000c 	.word	0x2000000c
	...

08005c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c60:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <pxCurrentTCBConst2>)
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	6808      	ldr	r0, [r1, #0]
 8005c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6a:	f380 8809 	msr	PSP, r0
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f380 8811 	msr	BASEPRI, r0
 8005c7a:	4770      	bx	lr
 8005c7c:	f3af 8000 	nop.w

08005c80 <pxCurrentTCBConst2>:
 8005c80:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c88:	4808      	ldr	r0, [pc, #32]	@ (8005cac <prvPortStartFirstTask+0x24>)
 8005c8a:	6800      	ldr	r0, [r0, #0]
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f380 8808 	msr	MSP, r0
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8814 	msr	CONTROL, r0
 8005c9a:	b662      	cpsie	i
 8005c9c:	b661      	cpsie	f
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	df00      	svc	0
 8005ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005caa:	bf00      	nop
 8005cac:	e000ed08 	.word	0xe000ed08

08005cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cb6:	4b47      	ldr	r3, [pc, #284]	@ (8005dd4 <xPortStartScheduler+0x124>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a47      	ldr	r2, [pc, #284]	@ (8005dd8 <xPortStartScheduler+0x128>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10b      	bne.n	8005cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	613b      	str	r3, [r7, #16]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd4 <xPortStartScheduler+0x124>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ddc <xPortStartScheduler+0x12c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10b      	bne.n	8005cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60fb      	str	r3, [r7, #12]
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	e7fd      	b.n	8005cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cfa:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <xPortStartScheduler+0x130>)
 8005cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	22ff      	movs	r2, #255	@ 0xff
 8005d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	4b31      	ldr	r3, [pc, #196]	@ (8005de4 <xPortStartScheduler+0x134>)
 8005d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d22:	4b31      	ldr	r3, [pc, #196]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d24:	2207      	movs	r2, #7
 8005d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d28:	e009      	b.n	8005d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	4a2d      	ldr	r2, [pc, #180]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	2b80      	cmp	r3, #128	@ 0x80
 8005d48:	d0ef      	beq.n	8005d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d4a:	4b27      	ldr	r3, [pc, #156]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1c3 0307 	rsb	r3, r3, #7
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d00b      	beq.n	8005d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	60bb      	str	r3, [r7, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	e7fd      	b.n	8005d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	4a1c      	ldr	r2, [pc, #112]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d78:	4b1b      	ldr	r3, [pc, #108]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d80:	4a19      	ldr	r2, [pc, #100]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d8c:	4b17      	ldr	r3, [pc, #92]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a16      	ldr	r2, [pc, #88]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d98:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a13      	ldr	r2, [pc, #76]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005da4:	f000 f8da 	bl	8005f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <xPortStartScheduler+0x140>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dae:	f000 f8f9 	bl	8005fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005db2:	4b10      	ldr	r3, [pc, #64]	@ (8005df4 <xPortStartScheduler+0x144>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a0f      	ldr	r2, [pc, #60]	@ (8005df4 <xPortStartScheduler+0x144>)
 8005db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dbe:	f7ff ff63 	bl	8005c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dc2:	f7ff f82b 	bl	8004e1c <vTaskSwitchContext>
	prvTaskExitError();
 8005dc6:	f7ff ff17 	bl	8005bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed00 	.word	0xe000ed00
 8005dd8:	410fc271 	.word	0x410fc271
 8005ddc:	410fc270 	.word	0x410fc270
 8005de0:	e000e400 	.word	0xe000e400
 8005de4:	20000f2c 	.word	0x20000f2c
 8005de8:	20000f30 	.word	0x20000f30
 8005dec:	e000ed20 	.word	0xe000ed20
 8005df0:	2000000c 	.word	0x2000000c
 8005df4:	e000ef34 	.word	0xe000ef34

08005df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
}
 8005e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e12:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3301      	adds	r3, #1
 8005e18:	4a0e      	ldr	r2, [pc, #56]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d110      	bne.n	8005e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e24:	4b0c      	ldr	r3, [pc, #48]	@ (8005e58 <vPortEnterCritical+0x60>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	603b      	str	r3, [r7, #0]
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	e7fd      	b.n	8005e42 <vPortEnterCritical+0x4a>
	}
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000000c 	.word	0x2000000c
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e62:	4b12      	ldr	r3, [pc, #72]	@ (8005eac <vPortExitCritical+0x50>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <vPortExitCritical+0x26>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	607b      	str	r3, [r7, #4]
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	e7fd      	b.n	8005e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e82:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <vPortExitCritical+0x50>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	4a08      	ldr	r2, [pc, #32]	@ (8005eac <vPortExitCritical+0x50>)
 8005e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <vPortExitCritical+0x50>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <vPortExitCritical+0x44>
 8005e94:	2300      	movs	r3, #0
 8005e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005eb0:	f3ef 8009 	mrs	r0, PSP
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <pxCurrentTCBConst>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f01e 0f10 	tst.w	lr, #16
 8005ec0:	bf08      	it	eq
 8005ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	6010      	str	r0, [r2, #0]
 8005ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ed4:	f380 8811 	msr	BASEPRI, r0
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f7fe ff9c 	bl	8004e1c <vTaskSwitchContext>
 8005ee4:	f04f 0000 	mov.w	r0, #0
 8005ee8:	f380 8811 	msr	BASEPRI, r0
 8005eec:	bc09      	pop	{r0, r3}
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	6808      	ldr	r0, [r1, #0]
 8005ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef6:	f01e 0f10 	tst.w	lr, #16
 8005efa:	bf08      	it	eq
 8005efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f00:	f380 8809 	msr	PSP, r0
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst>:
 8005f10:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	607b      	str	r3, [r7, #4]
}
 8005f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f32:	f7fe feb9 	bl	8004ca8 <xTaskIncrementTick>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <xPortSysTickHandler+0x40>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
}
 8005f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <vPortSetupTimerInterrupt+0x34>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f66:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <vPortSetupTimerInterrupt+0x38>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f98 <vPortSetupTimerInterrupt+0x3c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0a      	ldr	r2, [pc, #40]	@ (8005f9c <vPortSetupTimerInterrupt+0x40>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	4a09      	ldr	r2, [pc, #36]	@ (8005fa0 <vPortSetupTimerInterrupt+0x44>)
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f7e:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <vPortSetupTimerInterrupt+0x34>)
 8005f80:	2207      	movs	r2, #7
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	e000e010 	.word	0xe000e010
 8005f94:	e000e018 	.word	0xe000e018
 8005f98:	20000000 	.word	0x20000000
 8005f9c:	10624dd3 	.word	0x10624dd3
 8005fa0:	e000e014 	.word	0xe000e014

08005fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005fb4 <vPortEnableVFP+0x10>
 8005fa8:	6801      	ldr	r1, [r0, #0]
 8005faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005fae:	6001      	str	r1, [r0, #0]
 8005fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fb2:	bf00      	nop
 8005fb4:	e000ed88 	.word	0xe000ed88

08005fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fbe:	f3ef 8305 	mrs	r3, IPSR
 8005fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b0f      	cmp	r3, #15
 8005fc8:	d915      	bls.n	8005ff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fca:	4a18      	ldr	r2, [pc, #96]	@ (800602c <vPortValidateInterruptPriority+0x74>)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fd4:	4b16      	ldr	r3, [pc, #88]	@ (8006030 <vPortValidateInterruptPriority+0x78>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	7afa      	ldrb	r2, [r7, #11]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d20b      	bcs.n	8005ff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	607b      	str	r3, [r7, #4]
}
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
 8005ff4:	e7fd      	b.n	8005ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8006034 <vPortValidateInterruptPriority+0x7c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8006038 <vPortValidateInterruptPriority+0x80>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d90b      	bls.n	800601e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	603b      	str	r3, [r7, #0]
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <vPortValidateInterruptPriority+0x62>
	}
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	e000e3f0 	.word	0xe000e3f0
 8006030:	20000f2c 	.word	0x20000f2c
 8006034:	e000ed0c 	.word	0xe000ed0c
 8006038:	20000f30 	.word	0x20000f30

0800603c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	@ 0x28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006048:	f7fe fd72 	bl	8004b30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800604c:	4b5c      	ldr	r3, [pc, #368]	@ (80061c0 <pvPortMalloc+0x184>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006054:	f000 f924 	bl	80062a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006058:	4b5a      	ldr	r3, [pc, #360]	@ (80061c4 <pvPortMalloc+0x188>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4013      	ands	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	f040 8095 	bne.w	8006190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01e      	beq.n	80060aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800606c:	2208      	movs	r2, #8
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4413      	add	r3, r2
 8006072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b00      	cmp	r3, #0
 800607c:	d015      	beq.n	80060aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f023 0307 	bic.w	r3, r3, #7
 8006084:	3308      	adds	r3, #8
 8006086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <pvPortMalloc+0x6e>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	617b      	str	r3, [r7, #20]
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d06f      	beq.n	8006190 <pvPortMalloc+0x154>
 80060b0:	4b45      	ldr	r3, [pc, #276]	@ (80061c8 <pvPortMalloc+0x18c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d86a      	bhi.n	8006190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060ba:	4b44      	ldr	r3, [pc, #272]	@ (80061cc <pvPortMalloc+0x190>)
 80060bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060be:	4b43      	ldr	r3, [pc, #268]	@ (80061cc <pvPortMalloc+0x190>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060c4:	e004      	b.n	80060d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <pvPortMalloc+0xa6>
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f1      	bne.n	80060c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060e2:	4b37      	ldr	r3, [pc, #220]	@ (80061c0 <pvPortMalloc+0x184>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d051      	beq.n	8006190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2208      	movs	r2, #8
 80060f2:	4413      	add	r3, r2
 80060f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1ad2      	subs	r2, r2, r3
 8006106:	2308      	movs	r3, #8
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	429a      	cmp	r2, r3
 800610c:	d920      	bls.n	8006150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800610e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4413      	add	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <pvPortMalloc+0xfc>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	613b      	str	r3, [r7, #16]
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	e7fd      	b.n	8006134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	1ad2      	subs	r2, r2, r3
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800614a:	69b8      	ldr	r0, [r7, #24]
 800614c:	f000 f90a 	bl	8006364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006150:	4b1d      	ldr	r3, [pc, #116]	@ (80061c8 <pvPortMalloc+0x18c>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	4a1b      	ldr	r2, [pc, #108]	@ (80061c8 <pvPortMalloc+0x18c>)
 800615c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800615e:	4b1a      	ldr	r3, [pc, #104]	@ (80061c8 <pvPortMalloc+0x18c>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <pvPortMalloc+0x194>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d203      	bcs.n	8006172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800616a:	4b17      	ldr	r3, [pc, #92]	@ (80061c8 <pvPortMalloc+0x18c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a18      	ldr	r2, [pc, #96]	@ (80061d0 <pvPortMalloc+0x194>)
 8006170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	4b13      	ldr	r3, [pc, #76]	@ (80061c4 <pvPortMalloc+0x188>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	431a      	orrs	r2, r3
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006186:	4b13      	ldr	r3, [pc, #76]	@ (80061d4 <pvPortMalloc+0x198>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	4a11      	ldr	r2, [pc, #68]	@ (80061d4 <pvPortMalloc+0x198>)
 800618e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006190:	f7fe fcdc 	bl	8004b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <pvPortMalloc+0x17a>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60fb      	str	r3, [r7, #12]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <pvPortMalloc+0x176>
	return pvReturn;
 80061b6:	69fb      	ldr	r3, [r7, #28]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3728      	adds	r7, #40	@ 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20001af4 	.word	0x20001af4
 80061c4:	20001b08 	.word	0x20001b08
 80061c8:	20001af8 	.word	0x20001af8
 80061cc:	20001aec 	.word	0x20001aec
 80061d0:	20001afc 	.word	0x20001afc
 80061d4:	20001b00 	.word	0x20001b00

080061d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d04f      	beq.n	800628a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061ea:	2308      	movs	r3, #8
 80061ec:	425b      	negs	r3, r3
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4b25      	ldr	r3, [pc, #148]	@ (8006294 <vPortFree+0xbc>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4013      	ands	r3, r2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <vPortFree+0x46>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60fb      	str	r3, [r7, #12]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <vPortFree+0x66>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	60bb      	str	r3, [r7, #8]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	4b14      	ldr	r3, [pc, #80]	@ (8006294 <vPortFree+0xbc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4013      	ands	r3, r2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01e      	beq.n	800628a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d11a      	bne.n	800628a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	4b0e      	ldr	r3, [pc, #56]	@ (8006294 <vPortFree+0xbc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	43db      	mvns	r3, r3
 800625e:	401a      	ands	r2, r3
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006264:	f7fe fc64 	bl	8004b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	4b0a      	ldr	r3, [pc, #40]	@ (8006298 <vPortFree+0xc0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4413      	add	r3, r2
 8006272:	4a09      	ldr	r2, [pc, #36]	@ (8006298 <vPortFree+0xc0>)
 8006274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006276:	6938      	ldr	r0, [r7, #16]
 8006278:	f000 f874 	bl	8006364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800627c:	4b07      	ldr	r3, [pc, #28]	@ (800629c <vPortFree+0xc4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	4a06      	ldr	r2, [pc, #24]	@ (800629c <vPortFree+0xc4>)
 8006284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006286:	f7fe fc61 	bl	8004b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20001b08 	.word	0x20001b08
 8006298:	20001af8 	.word	0x20001af8
 800629c:	20001b04 	.word	0x20001b04

080062a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80062aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062ac:	4b27      	ldr	r3, [pc, #156]	@ (800634c <prvHeapInit+0xac>)
 80062ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3307      	adds	r3, #7
 80062be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0307 	bic.w	r3, r3, #7
 80062c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	4a1f      	ldr	r2, [pc, #124]	@ (800634c <prvHeapInit+0xac>)
 80062d0:	4413      	add	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006350 <prvHeapInit+0xb0>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062de:	4b1c      	ldr	r3, [pc, #112]	@ (8006350 <prvHeapInit+0xb0>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4413      	add	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062ec:	2208      	movs	r2, #8
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0307 	bic.w	r3, r3, #7
 80062fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4a15      	ldr	r2, [pc, #84]	@ (8006354 <prvHeapInit+0xb4>)
 8006300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006302:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <prvHeapInit+0xb4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2200      	movs	r2, #0
 8006308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800630a:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <prvHeapInit+0xb4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	1ad2      	subs	r2, r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006320:	4b0c      	ldr	r3, [pc, #48]	@ (8006354 <prvHeapInit+0xb4>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4a0a      	ldr	r2, [pc, #40]	@ (8006358 <prvHeapInit+0xb8>)
 800632e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a09      	ldr	r2, [pc, #36]	@ (800635c <prvHeapInit+0xbc>)
 8006336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006338:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <prvHeapInit+0xc0>)
 800633a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800633e:	601a      	str	r2, [r3, #0]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	20000f34 	.word	0x20000f34
 8006350:	20001aec 	.word	0x20001aec
 8006354:	20001af4 	.word	0x20001af4
 8006358:	20001afc 	.word	0x20001afc
 800635c:	20001af8 	.word	0x20001af8
 8006360:	20001b08 	.word	0x20001b08

08006364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800636c:	4b28      	ldr	r3, [pc, #160]	@ (8006410 <prvInsertBlockIntoFreeList+0xac>)
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e002      	b.n	8006378 <prvInsertBlockIntoFreeList+0x14>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	d8f7      	bhi.n	8006372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d108      	bne.n	80063a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	441a      	add	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d118      	bne.n	80063ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <prvInsertBlockIntoFreeList+0xb0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d00d      	beq.n	80063e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	441a      	add	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	e008      	b.n	80063f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <prvInsertBlockIntoFreeList+0xb0>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e003      	b.n	80063f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d002      	beq.n	8006402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	20001aec 	.word	0x20001aec
 8006414:	20001af4 	.word	0x20001af4

08006418 <std>:
 8006418:	2300      	movs	r3, #0
 800641a:	b510      	push	{r4, lr}
 800641c:	4604      	mov	r4, r0
 800641e:	e9c0 3300 	strd	r3, r3, [r0]
 8006422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006426:	6083      	str	r3, [r0, #8]
 8006428:	8181      	strh	r1, [r0, #12]
 800642a:	6643      	str	r3, [r0, #100]	@ 0x64
 800642c:	81c2      	strh	r2, [r0, #14]
 800642e:	6183      	str	r3, [r0, #24]
 8006430:	4619      	mov	r1, r3
 8006432:	2208      	movs	r2, #8
 8006434:	305c      	adds	r0, #92	@ 0x5c
 8006436:	f000 f9e7 	bl	8006808 <memset>
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <std+0x58>)
 800643c:	6263      	str	r3, [r4, #36]	@ 0x24
 800643e:	4b0d      	ldr	r3, [pc, #52]	@ (8006474 <std+0x5c>)
 8006440:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006442:	4b0d      	ldr	r3, [pc, #52]	@ (8006478 <std+0x60>)
 8006444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006446:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <std+0x64>)
 8006448:	6323      	str	r3, [r4, #48]	@ 0x30
 800644a:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <std+0x68>)
 800644c:	6224      	str	r4, [r4, #32]
 800644e:	429c      	cmp	r4, r3
 8006450:	d006      	beq.n	8006460 <std+0x48>
 8006452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006456:	4294      	cmp	r4, r2
 8006458:	d002      	beq.n	8006460 <std+0x48>
 800645a:	33d0      	adds	r3, #208	@ 0xd0
 800645c:	429c      	cmp	r4, r3
 800645e:	d105      	bne.n	800646c <std+0x54>
 8006460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006468:	f000 ba9c 	b.w	80069a4 <__retarget_lock_init_recursive>
 800646c:	bd10      	pop	{r4, pc}
 800646e:	bf00      	nop
 8006470:	08006659 	.word	0x08006659
 8006474:	0800667b 	.word	0x0800667b
 8006478:	080066b3 	.word	0x080066b3
 800647c:	080066d7 	.word	0x080066d7
 8006480:	20001b0c 	.word	0x20001b0c

08006484 <stdio_exit_handler>:
 8006484:	4a02      	ldr	r2, [pc, #8]	@ (8006490 <stdio_exit_handler+0xc>)
 8006486:	4903      	ldr	r1, [pc, #12]	@ (8006494 <stdio_exit_handler+0x10>)
 8006488:	4803      	ldr	r0, [pc, #12]	@ (8006498 <stdio_exit_handler+0x14>)
 800648a:	f000 b869 	b.w	8006560 <_fwalk_sglue>
 800648e:	bf00      	nop
 8006490:	20000010 	.word	0x20000010
 8006494:	08006cc1 	.word	0x08006cc1
 8006498:	20000020 	.word	0x20000020

0800649c <cleanup_stdio>:
 800649c:	6841      	ldr	r1, [r0, #4]
 800649e:	4b0c      	ldr	r3, [pc, #48]	@ (80064d0 <cleanup_stdio+0x34>)
 80064a0:	4299      	cmp	r1, r3
 80064a2:	b510      	push	{r4, lr}
 80064a4:	4604      	mov	r4, r0
 80064a6:	d001      	beq.n	80064ac <cleanup_stdio+0x10>
 80064a8:	f000 fc0a 	bl	8006cc0 <_fflush_r>
 80064ac:	68a1      	ldr	r1, [r4, #8]
 80064ae:	4b09      	ldr	r3, [pc, #36]	@ (80064d4 <cleanup_stdio+0x38>)
 80064b0:	4299      	cmp	r1, r3
 80064b2:	d002      	beq.n	80064ba <cleanup_stdio+0x1e>
 80064b4:	4620      	mov	r0, r4
 80064b6:	f000 fc03 	bl	8006cc0 <_fflush_r>
 80064ba:	68e1      	ldr	r1, [r4, #12]
 80064bc:	4b06      	ldr	r3, [pc, #24]	@ (80064d8 <cleanup_stdio+0x3c>)
 80064be:	4299      	cmp	r1, r3
 80064c0:	d004      	beq.n	80064cc <cleanup_stdio+0x30>
 80064c2:	4620      	mov	r0, r4
 80064c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c8:	f000 bbfa 	b.w	8006cc0 <_fflush_r>
 80064cc:	bd10      	pop	{r4, pc}
 80064ce:	bf00      	nop
 80064d0:	20001b0c 	.word	0x20001b0c
 80064d4:	20001b74 	.word	0x20001b74
 80064d8:	20001bdc 	.word	0x20001bdc

080064dc <global_stdio_init.part.0>:
 80064dc:	b510      	push	{r4, lr}
 80064de:	4b0b      	ldr	r3, [pc, #44]	@ (800650c <global_stdio_init.part.0+0x30>)
 80064e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006510 <global_stdio_init.part.0+0x34>)
 80064e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006514 <global_stdio_init.part.0+0x38>)
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	4620      	mov	r0, r4
 80064e8:	2200      	movs	r2, #0
 80064ea:	2104      	movs	r1, #4
 80064ec:	f7ff ff94 	bl	8006418 <std>
 80064f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064f4:	2201      	movs	r2, #1
 80064f6:	2109      	movs	r1, #9
 80064f8:	f7ff ff8e 	bl	8006418 <std>
 80064fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006500:	2202      	movs	r2, #2
 8006502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006506:	2112      	movs	r1, #18
 8006508:	f7ff bf86 	b.w	8006418 <std>
 800650c:	20001c44 	.word	0x20001c44
 8006510:	20001b0c 	.word	0x20001b0c
 8006514:	08006485 	.word	0x08006485

08006518 <__sfp_lock_acquire>:
 8006518:	4801      	ldr	r0, [pc, #4]	@ (8006520 <__sfp_lock_acquire+0x8>)
 800651a:	f000 ba44 	b.w	80069a6 <__retarget_lock_acquire_recursive>
 800651e:	bf00      	nop
 8006520:	20001c4d 	.word	0x20001c4d

08006524 <__sfp_lock_release>:
 8006524:	4801      	ldr	r0, [pc, #4]	@ (800652c <__sfp_lock_release+0x8>)
 8006526:	f000 ba3f 	b.w	80069a8 <__retarget_lock_release_recursive>
 800652a:	bf00      	nop
 800652c:	20001c4d 	.word	0x20001c4d

08006530 <__sinit>:
 8006530:	b510      	push	{r4, lr}
 8006532:	4604      	mov	r4, r0
 8006534:	f7ff fff0 	bl	8006518 <__sfp_lock_acquire>
 8006538:	6a23      	ldr	r3, [r4, #32]
 800653a:	b11b      	cbz	r3, 8006544 <__sinit+0x14>
 800653c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006540:	f7ff bff0 	b.w	8006524 <__sfp_lock_release>
 8006544:	4b04      	ldr	r3, [pc, #16]	@ (8006558 <__sinit+0x28>)
 8006546:	6223      	str	r3, [r4, #32]
 8006548:	4b04      	ldr	r3, [pc, #16]	@ (800655c <__sinit+0x2c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f5      	bne.n	800653c <__sinit+0xc>
 8006550:	f7ff ffc4 	bl	80064dc <global_stdio_init.part.0>
 8006554:	e7f2      	b.n	800653c <__sinit+0xc>
 8006556:	bf00      	nop
 8006558:	0800649d 	.word	0x0800649d
 800655c:	20001c44 	.word	0x20001c44

08006560 <_fwalk_sglue>:
 8006560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006564:	4607      	mov	r7, r0
 8006566:	4688      	mov	r8, r1
 8006568:	4614      	mov	r4, r2
 800656a:	2600      	movs	r6, #0
 800656c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006570:	f1b9 0901 	subs.w	r9, r9, #1
 8006574:	d505      	bpl.n	8006582 <_fwalk_sglue+0x22>
 8006576:	6824      	ldr	r4, [r4, #0]
 8006578:	2c00      	cmp	r4, #0
 800657a:	d1f7      	bne.n	800656c <_fwalk_sglue+0xc>
 800657c:	4630      	mov	r0, r6
 800657e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006582:	89ab      	ldrh	r3, [r5, #12]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d907      	bls.n	8006598 <_fwalk_sglue+0x38>
 8006588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800658c:	3301      	adds	r3, #1
 800658e:	d003      	beq.n	8006598 <_fwalk_sglue+0x38>
 8006590:	4629      	mov	r1, r5
 8006592:	4638      	mov	r0, r7
 8006594:	47c0      	blx	r8
 8006596:	4306      	orrs	r6, r0
 8006598:	3568      	adds	r5, #104	@ 0x68
 800659a:	e7e9      	b.n	8006570 <_fwalk_sglue+0x10>

0800659c <_puts_r>:
 800659c:	6a03      	ldr	r3, [r0, #32]
 800659e:	b570      	push	{r4, r5, r6, lr}
 80065a0:	6884      	ldr	r4, [r0, #8]
 80065a2:	4605      	mov	r5, r0
 80065a4:	460e      	mov	r6, r1
 80065a6:	b90b      	cbnz	r3, 80065ac <_puts_r+0x10>
 80065a8:	f7ff ffc2 	bl	8006530 <__sinit>
 80065ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065ae:	07db      	lsls	r3, r3, #31
 80065b0:	d405      	bmi.n	80065be <_puts_r+0x22>
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	0598      	lsls	r0, r3, #22
 80065b6:	d402      	bmi.n	80065be <_puts_r+0x22>
 80065b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ba:	f000 f9f4 	bl	80069a6 <__retarget_lock_acquire_recursive>
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	0719      	lsls	r1, r3, #28
 80065c2:	d502      	bpl.n	80065ca <_puts_r+0x2e>
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d135      	bne.n	8006636 <_puts_r+0x9a>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4628      	mov	r0, r5
 80065ce:	f000 f8c5 	bl	800675c <__swsetup_r>
 80065d2:	b380      	cbz	r0, 8006636 <_puts_r+0x9a>
 80065d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80065d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065da:	07da      	lsls	r2, r3, #31
 80065dc:	d405      	bmi.n	80065ea <_puts_r+0x4e>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	059b      	lsls	r3, r3, #22
 80065e2:	d402      	bmi.n	80065ea <_puts_r+0x4e>
 80065e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065e6:	f000 f9df 	bl	80069a8 <__retarget_lock_release_recursive>
 80065ea:	4628      	mov	r0, r5
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da04      	bge.n	80065fc <_puts_r+0x60>
 80065f2:	69a2      	ldr	r2, [r4, #24]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	dc17      	bgt.n	8006628 <_puts_r+0x8c>
 80065f8:	290a      	cmp	r1, #10
 80065fa:	d015      	beq.n	8006628 <_puts_r+0x8c>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	6022      	str	r2, [r4, #0]
 8006602:	7019      	strb	r1, [r3, #0]
 8006604:	68a3      	ldr	r3, [r4, #8]
 8006606:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800660a:	3b01      	subs	r3, #1
 800660c:	60a3      	str	r3, [r4, #8]
 800660e:	2900      	cmp	r1, #0
 8006610:	d1ed      	bne.n	80065ee <_puts_r+0x52>
 8006612:	2b00      	cmp	r3, #0
 8006614:	da11      	bge.n	800663a <_puts_r+0x9e>
 8006616:	4622      	mov	r2, r4
 8006618:	210a      	movs	r1, #10
 800661a:	4628      	mov	r0, r5
 800661c:	f000 f85f 	bl	80066de <__swbuf_r>
 8006620:	3001      	adds	r0, #1
 8006622:	d0d7      	beq.n	80065d4 <_puts_r+0x38>
 8006624:	250a      	movs	r5, #10
 8006626:	e7d7      	b.n	80065d8 <_puts_r+0x3c>
 8006628:	4622      	mov	r2, r4
 800662a:	4628      	mov	r0, r5
 800662c:	f000 f857 	bl	80066de <__swbuf_r>
 8006630:	3001      	adds	r0, #1
 8006632:	d1e7      	bne.n	8006604 <_puts_r+0x68>
 8006634:	e7ce      	b.n	80065d4 <_puts_r+0x38>
 8006636:	3e01      	subs	r6, #1
 8006638:	e7e4      	b.n	8006604 <_puts_r+0x68>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	6022      	str	r2, [r4, #0]
 8006640:	220a      	movs	r2, #10
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e7ee      	b.n	8006624 <_puts_r+0x88>
	...

08006648 <puts>:
 8006648:	4b02      	ldr	r3, [pc, #8]	@ (8006654 <puts+0xc>)
 800664a:	4601      	mov	r1, r0
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	f7ff bfa5 	b.w	800659c <_puts_r>
 8006652:	bf00      	nop
 8006654:	2000001c 	.word	0x2000001c

08006658 <__sread>:
 8006658:	b510      	push	{r4, lr}
 800665a:	460c      	mov	r4, r1
 800665c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006660:	f000 f952 	bl	8006908 <_read_r>
 8006664:	2800      	cmp	r0, #0
 8006666:	bfab      	itete	ge
 8006668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800666a:	89a3      	ldrhlt	r3, [r4, #12]
 800666c:	181b      	addge	r3, r3, r0
 800666e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006672:	bfac      	ite	ge
 8006674:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006676:	81a3      	strhlt	r3, [r4, #12]
 8006678:	bd10      	pop	{r4, pc}

0800667a <__swrite>:
 800667a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	461f      	mov	r7, r3
 8006680:	898b      	ldrh	r3, [r1, #12]
 8006682:	05db      	lsls	r3, r3, #23
 8006684:	4605      	mov	r5, r0
 8006686:	460c      	mov	r4, r1
 8006688:	4616      	mov	r6, r2
 800668a:	d505      	bpl.n	8006698 <__swrite+0x1e>
 800668c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006690:	2302      	movs	r3, #2
 8006692:	2200      	movs	r2, #0
 8006694:	f000 f926 	bl	80068e4 <_lseek_r>
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800669e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	4632      	mov	r2, r6
 80066a6:	463b      	mov	r3, r7
 80066a8:	4628      	mov	r0, r5
 80066aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	f000 b93d 	b.w	800692c <_write_r>

080066b2 <__sseek>:
 80066b2:	b510      	push	{r4, lr}
 80066b4:	460c      	mov	r4, r1
 80066b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ba:	f000 f913 	bl	80068e4 <_lseek_r>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	bf15      	itete	ne
 80066c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066ce:	81a3      	strheq	r3, [r4, #12]
 80066d0:	bf18      	it	ne
 80066d2:	81a3      	strhne	r3, [r4, #12]
 80066d4:	bd10      	pop	{r4, pc}

080066d6 <__sclose>:
 80066d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066da:	f000 b89d 	b.w	8006818 <_close_r>

080066de <__swbuf_r>:
 80066de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e0:	460e      	mov	r6, r1
 80066e2:	4614      	mov	r4, r2
 80066e4:	4605      	mov	r5, r0
 80066e6:	b118      	cbz	r0, 80066f0 <__swbuf_r+0x12>
 80066e8:	6a03      	ldr	r3, [r0, #32]
 80066ea:	b90b      	cbnz	r3, 80066f0 <__swbuf_r+0x12>
 80066ec:	f7ff ff20 	bl	8006530 <__sinit>
 80066f0:	69a3      	ldr	r3, [r4, #24]
 80066f2:	60a3      	str	r3, [r4, #8]
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	071a      	lsls	r2, r3, #28
 80066f8:	d501      	bpl.n	80066fe <__swbuf_r+0x20>
 80066fa:	6923      	ldr	r3, [r4, #16]
 80066fc:	b943      	cbnz	r3, 8006710 <__swbuf_r+0x32>
 80066fe:	4621      	mov	r1, r4
 8006700:	4628      	mov	r0, r5
 8006702:	f000 f82b 	bl	800675c <__swsetup_r>
 8006706:	b118      	cbz	r0, 8006710 <__swbuf_r+0x32>
 8006708:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800670c:	4638      	mov	r0, r7
 800670e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	6922      	ldr	r2, [r4, #16]
 8006714:	1a98      	subs	r0, r3, r2
 8006716:	6963      	ldr	r3, [r4, #20]
 8006718:	b2f6      	uxtb	r6, r6
 800671a:	4283      	cmp	r3, r0
 800671c:	4637      	mov	r7, r6
 800671e:	dc05      	bgt.n	800672c <__swbuf_r+0x4e>
 8006720:	4621      	mov	r1, r4
 8006722:	4628      	mov	r0, r5
 8006724:	f000 facc 	bl	8006cc0 <_fflush_r>
 8006728:	2800      	cmp	r0, #0
 800672a:	d1ed      	bne.n	8006708 <__swbuf_r+0x2a>
 800672c:	68a3      	ldr	r3, [r4, #8]
 800672e:	3b01      	subs	r3, #1
 8006730:	60a3      	str	r3, [r4, #8]
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	701e      	strb	r6, [r3, #0]
 800673a:	6962      	ldr	r2, [r4, #20]
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	429a      	cmp	r2, r3
 8006740:	d004      	beq.n	800674c <__swbuf_r+0x6e>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	07db      	lsls	r3, r3, #31
 8006746:	d5e1      	bpl.n	800670c <__swbuf_r+0x2e>
 8006748:	2e0a      	cmp	r6, #10
 800674a:	d1df      	bne.n	800670c <__swbuf_r+0x2e>
 800674c:	4621      	mov	r1, r4
 800674e:	4628      	mov	r0, r5
 8006750:	f000 fab6 	bl	8006cc0 <_fflush_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	d0d9      	beq.n	800670c <__swbuf_r+0x2e>
 8006758:	e7d6      	b.n	8006708 <__swbuf_r+0x2a>
	...

0800675c <__swsetup_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4b29      	ldr	r3, [pc, #164]	@ (8006804 <__swsetup_r+0xa8>)
 8006760:	4605      	mov	r5, r0
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	460c      	mov	r4, r1
 8006766:	b118      	cbz	r0, 8006770 <__swsetup_r+0x14>
 8006768:	6a03      	ldr	r3, [r0, #32]
 800676a:	b90b      	cbnz	r3, 8006770 <__swsetup_r+0x14>
 800676c:	f7ff fee0 	bl	8006530 <__sinit>
 8006770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006774:	0719      	lsls	r1, r3, #28
 8006776:	d422      	bmi.n	80067be <__swsetup_r+0x62>
 8006778:	06da      	lsls	r2, r3, #27
 800677a:	d407      	bmi.n	800678c <__swsetup_r+0x30>
 800677c:	2209      	movs	r2, #9
 800677e:	602a      	str	r2, [r5, #0]
 8006780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800678a:	e033      	b.n	80067f4 <__swsetup_r+0x98>
 800678c:	0758      	lsls	r0, r3, #29
 800678e:	d512      	bpl.n	80067b6 <__swsetup_r+0x5a>
 8006790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006792:	b141      	cbz	r1, 80067a6 <__swsetup_r+0x4a>
 8006794:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006798:	4299      	cmp	r1, r3
 800679a:	d002      	beq.n	80067a2 <__swsetup_r+0x46>
 800679c:	4628      	mov	r0, r5
 800679e:	f000 f913 	bl	80069c8 <_free_r>
 80067a2:	2300      	movs	r3, #0
 80067a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	2300      	movs	r3, #0
 80067b0:	6063      	str	r3, [r4, #4]
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f043 0308 	orr.w	r3, r3, #8
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	b94b      	cbnz	r3, 80067d6 <__swsetup_r+0x7a>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067cc:	d003      	beq.n	80067d6 <__swsetup_r+0x7a>
 80067ce:	4621      	mov	r1, r4
 80067d0:	4628      	mov	r0, r5
 80067d2:	f000 fac3 	bl	8006d5c <__smakebuf_r>
 80067d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067da:	f013 0201 	ands.w	r2, r3, #1
 80067de:	d00a      	beq.n	80067f6 <__swsetup_r+0x9a>
 80067e0:	2200      	movs	r2, #0
 80067e2:	60a2      	str	r2, [r4, #8]
 80067e4:	6962      	ldr	r2, [r4, #20]
 80067e6:	4252      	negs	r2, r2
 80067e8:	61a2      	str	r2, [r4, #24]
 80067ea:	6922      	ldr	r2, [r4, #16]
 80067ec:	b942      	cbnz	r2, 8006800 <__swsetup_r+0xa4>
 80067ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067f2:	d1c5      	bne.n	8006780 <__swsetup_r+0x24>
 80067f4:	bd38      	pop	{r3, r4, r5, pc}
 80067f6:	0799      	lsls	r1, r3, #30
 80067f8:	bf58      	it	pl
 80067fa:	6962      	ldrpl	r2, [r4, #20]
 80067fc:	60a2      	str	r2, [r4, #8]
 80067fe:	e7f4      	b.n	80067ea <__swsetup_r+0x8e>
 8006800:	2000      	movs	r0, #0
 8006802:	e7f7      	b.n	80067f4 <__swsetup_r+0x98>
 8006804:	2000001c 	.word	0x2000001c

08006808 <memset>:
 8006808:	4402      	add	r2, r0
 800680a:	4603      	mov	r3, r0
 800680c:	4293      	cmp	r3, r2
 800680e:	d100      	bne.n	8006812 <memset+0xa>
 8006810:	4770      	bx	lr
 8006812:	f803 1b01 	strb.w	r1, [r3], #1
 8006816:	e7f9      	b.n	800680c <memset+0x4>

08006818 <_close_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4d06      	ldr	r5, [pc, #24]	@ (8006834 <_close_r+0x1c>)
 800681c:	2300      	movs	r3, #0
 800681e:	4604      	mov	r4, r0
 8006820:	4608      	mov	r0, r1
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	f7fa f8c2 	bl	80009ac <_close>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d102      	bne.n	8006832 <_close_r+0x1a>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	b103      	cbz	r3, 8006832 <_close_r+0x1a>
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	20001c48 	.word	0x20001c48

08006838 <_reclaim_reent>:
 8006838:	4b29      	ldr	r3, [pc, #164]	@ (80068e0 <_reclaim_reent+0xa8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4283      	cmp	r3, r0
 800683e:	b570      	push	{r4, r5, r6, lr}
 8006840:	4604      	mov	r4, r0
 8006842:	d04b      	beq.n	80068dc <_reclaim_reent+0xa4>
 8006844:	69c3      	ldr	r3, [r0, #28]
 8006846:	b1ab      	cbz	r3, 8006874 <_reclaim_reent+0x3c>
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	b16b      	cbz	r3, 8006868 <_reclaim_reent+0x30>
 800684c:	2500      	movs	r5, #0
 800684e:	69e3      	ldr	r3, [r4, #28]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	5959      	ldr	r1, [r3, r5]
 8006854:	2900      	cmp	r1, #0
 8006856:	d13b      	bne.n	80068d0 <_reclaim_reent+0x98>
 8006858:	3504      	adds	r5, #4
 800685a:	2d80      	cmp	r5, #128	@ 0x80
 800685c:	d1f7      	bne.n	800684e <_reclaim_reent+0x16>
 800685e:	69e3      	ldr	r3, [r4, #28]
 8006860:	4620      	mov	r0, r4
 8006862:	68d9      	ldr	r1, [r3, #12]
 8006864:	f000 f8b0 	bl	80069c8 <_free_r>
 8006868:	69e3      	ldr	r3, [r4, #28]
 800686a:	6819      	ldr	r1, [r3, #0]
 800686c:	b111      	cbz	r1, 8006874 <_reclaim_reent+0x3c>
 800686e:	4620      	mov	r0, r4
 8006870:	f000 f8aa 	bl	80069c8 <_free_r>
 8006874:	6961      	ldr	r1, [r4, #20]
 8006876:	b111      	cbz	r1, 800687e <_reclaim_reent+0x46>
 8006878:	4620      	mov	r0, r4
 800687a:	f000 f8a5 	bl	80069c8 <_free_r>
 800687e:	69e1      	ldr	r1, [r4, #28]
 8006880:	b111      	cbz	r1, 8006888 <_reclaim_reent+0x50>
 8006882:	4620      	mov	r0, r4
 8006884:	f000 f8a0 	bl	80069c8 <_free_r>
 8006888:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800688a:	b111      	cbz	r1, 8006892 <_reclaim_reent+0x5a>
 800688c:	4620      	mov	r0, r4
 800688e:	f000 f89b 	bl	80069c8 <_free_r>
 8006892:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006894:	b111      	cbz	r1, 800689c <_reclaim_reent+0x64>
 8006896:	4620      	mov	r0, r4
 8006898:	f000 f896 	bl	80069c8 <_free_r>
 800689c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800689e:	b111      	cbz	r1, 80068a6 <_reclaim_reent+0x6e>
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 f891 	bl	80069c8 <_free_r>
 80068a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80068a8:	b111      	cbz	r1, 80068b0 <_reclaim_reent+0x78>
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f88c 	bl	80069c8 <_free_r>
 80068b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80068b2:	b111      	cbz	r1, 80068ba <_reclaim_reent+0x82>
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 f887 	bl	80069c8 <_free_r>
 80068ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80068bc:	b111      	cbz	r1, 80068c4 <_reclaim_reent+0x8c>
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 f882 	bl	80069c8 <_free_r>
 80068c4:	6a23      	ldr	r3, [r4, #32]
 80068c6:	b14b      	cbz	r3, 80068dc <_reclaim_reent+0xa4>
 80068c8:	4620      	mov	r0, r4
 80068ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068ce:	4718      	bx	r3
 80068d0:	680e      	ldr	r6, [r1, #0]
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 f878 	bl	80069c8 <_free_r>
 80068d8:	4631      	mov	r1, r6
 80068da:	e7bb      	b.n	8006854 <_reclaim_reent+0x1c>
 80068dc:	bd70      	pop	{r4, r5, r6, pc}
 80068de:	bf00      	nop
 80068e0:	2000001c 	.word	0x2000001c

080068e4 <_lseek_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d07      	ldr	r5, [pc, #28]	@ (8006904 <_lseek_r+0x20>)
 80068e8:	4604      	mov	r4, r0
 80068ea:	4608      	mov	r0, r1
 80068ec:	4611      	mov	r1, r2
 80068ee:	2200      	movs	r2, #0
 80068f0:	602a      	str	r2, [r5, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f7fa f881 	bl	80009fa <_lseek>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_lseek_r+0x1e>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_lseek_r+0x1e>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	20001c48 	.word	0x20001c48

08006908 <_read_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	@ (8006928 <_read_r+0x20>)
 800690c:	4604      	mov	r4, r0
 800690e:	4608      	mov	r0, r1
 8006910:	4611      	mov	r1, r2
 8006912:	2200      	movs	r2, #0
 8006914:	602a      	str	r2, [r5, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f7fa f814 	bl	8000944 <_read>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_read_r+0x1e>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_read_r+0x1e>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20001c48 	.word	0x20001c48

0800692c <_write_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	@ (800694c <_write_r+0x20>)
 8006930:	4604      	mov	r4, r0
 8006932:	4608      	mov	r0, r1
 8006934:	4611      	mov	r1, r2
 8006936:	2200      	movs	r2, #0
 8006938:	602a      	str	r2, [r5, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f7fa f820 	bl	8000980 <_write>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_write_r+0x1e>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_write_r+0x1e>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20001c48 	.word	0x20001c48

08006950 <__errno>:
 8006950:	4b01      	ldr	r3, [pc, #4]	@ (8006958 <__errno+0x8>)
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	2000001c 	.word	0x2000001c

0800695c <__libc_init_array>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	4d0d      	ldr	r5, [pc, #52]	@ (8006994 <__libc_init_array+0x38>)
 8006960:	4c0d      	ldr	r4, [pc, #52]	@ (8006998 <__libc_init_array+0x3c>)
 8006962:	1b64      	subs	r4, r4, r5
 8006964:	10a4      	asrs	r4, r4, #2
 8006966:	2600      	movs	r6, #0
 8006968:	42a6      	cmp	r6, r4
 800696a:	d109      	bne.n	8006980 <__libc_init_array+0x24>
 800696c:	4d0b      	ldr	r5, [pc, #44]	@ (800699c <__libc_init_array+0x40>)
 800696e:	4c0c      	ldr	r4, [pc, #48]	@ (80069a0 <__libc_init_array+0x44>)
 8006970:	f000 fa62 	bl	8006e38 <_init>
 8006974:	1b64      	subs	r4, r4, r5
 8006976:	10a4      	asrs	r4, r4, #2
 8006978:	2600      	movs	r6, #0
 800697a:	42a6      	cmp	r6, r4
 800697c:	d105      	bne.n	800698a <__libc_init_array+0x2e>
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	f855 3b04 	ldr.w	r3, [r5], #4
 8006984:	4798      	blx	r3
 8006986:	3601      	adds	r6, #1
 8006988:	e7ee      	b.n	8006968 <__libc_init_array+0xc>
 800698a:	f855 3b04 	ldr.w	r3, [r5], #4
 800698e:	4798      	blx	r3
 8006990:	3601      	adds	r6, #1
 8006992:	e7f2      	b.n	800697a <__libc_init_array+0x1e>
 8006994:	08006f20 	.word	0x08006f20
 8006998:	08006f20 	.word	0x08006f20
 800699c:	08006f20 	.word	0x08006f20
 80069a0:	08006f24 	.word	0x08006f24

080069a4 <__retarget_lock_init_recursive>:
 80069a4:	4770      	bx	lr

080069a6 <__retarget_lock_acquire_recursive>:
 80069a6:	4770      	bx	lr

080069a8 <__retarget_lock_release_recursive>:
 80069a8:	4770      	bx	lr

080069aa <memcpy>:
 80069aa:	440a      	add	r2, r1
 80069ac:	4291      	cmp	r1, r2
 80069ae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80069b2:	d100      	bne.n	80069b6 <memcpy+0xc>
 80069b4:	4770      	bx	lr
 80069b6:	b510      	push	{r4, lr}
 80069b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c0:	4291      	cmp	r1, r2
 80069c2:	d1f9      	bne.n	80069b8 <memcpy+0xe>
 80069c4:	bd10      	pop	{r4, pc}
	...

080069c8 <_free_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4605      	mov	r5, r0
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d041      	beq.n	8006a54 <_free_r+0x8c>
 80069d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d4:	1f0c      	subs	r4, r1, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bfb8      	it	lt
 80069da:	18e4      	addlt	r4, r4, r3
 80069dc:	f000 f8e0 	bl	8006ba0 <__malloc_lock>
 80069e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <_free_r+0x90>)
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	b933      	cbnz	r3, 80069f4 <_free_r+0x2c>
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	6014      	str	r4, [r2, #0]
 80069ea:	4628      	mov	r0, r5
 80069ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f0:	f000 b8dc 	b.w	8006bac <__malloc_unlock>
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	d908      	bls.n	8006a0a <_free_r+0x42>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	1821      	adds	r1, r4, r0
 80069fc:	428b      	cmp	r3, r1
 80069fe:	bf01      	itttt	eq
 8006a00:	6819      	ldreq	r1, [r3, #0]
 8006a02:	685b      	ldreq	r3, [r3, #4]
 8006a04:	1809      	addeq	r1, r1, r0
 8006a06:	6021      	streq	r1, [r4, #0]
 8006a08:	e7ed      	b.n	80069e6 <_free_r+0x1e>
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b10b      	cbz	r3, 8006a14 <_free_r+0x4c>
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d9fa      	bls.n	8006a0a <_free_r+0x42>
 8006a14:	6811      	ldr	r1, [r2, #0]
 8006a16:	1850      	adds	r0, r2, r1
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d10b      	bne.n	8006a34 <_free_r+0x6c>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	4401      	add	r1, r0
 8006a20:	1850      	adds	r0, r2, r1
 8006a22:	4283      	cmp	r3, r0
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	d1e0      	bne.n	80069ea <_free_r+0x22>
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	6053      	str	r3, [r2, #4]
 8006a2e:	4408      	add	r0, r1
 8006a30:	6010      	str	r0, [r2, #0]
 8006a32:	e7da      	b.n	80069ea <_free_r+0x22>
 8006a34:	d902      	bls.n	8006a3c <_free_r+0x74>
 8006a36:	230c      	movs	r3, #12
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	e7d6      	b.n	80069ea <_free_r+0x22>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	1821      	adds	r1, r4, r0
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf04      	itt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	6063      	str	r3, [r4, #4]
 8006a4a:	bf04      	itt	eq
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	6054      	str	r4, [r2, #4]
 8006a52:	e7ca      	b.n	80069ea <_free_r+0x22>
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	20001c54 	.word	0x20001c54

08006a5c <sbrk_aligned>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a9c <sbrk_aligned+0x40>)
 8006a60:	460c      	mov	r4, r1
 8006a62:	6831      	ldr	r1, [r6, #0]
 8006a64:	4605      	mov	r5, r0
 8006a66:	b911      	cbnz	r1, 8006a6e <sbrk_aligned+0x12>
 8006a68:	f000 f9d6 	bl	8006e18 <_sbrk_r>
 8006a6c:	6030      	str	r0, [r6, #0]
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 f9d1 	bl	8006e18 <_sbrk_r>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d103      	bne.n	8006a82 <sbrk_aligned+0x26>
 8006a7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a7e:	4620      	mov	r0, r4
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
 8006a82:	1cc4      	adds	r4, r0, #3
 8006a84:	f024 0403 	bic.w	r4, r4, #3
 8006a88:	42a0      	cmp	r0, r4
 8006a8a:	d0f8      	beq.n	8006a7e <sbrk_aligned+0x22>
 8006a8c:	1a21      	subs	r1, r4, r0
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f9c2 	bl	8006e18 <_sbrk_r>
 8006a94:	3001      	adds	r0, #1
 8006a96:	d1f2      	bne.n	8006a7e <sbrk_aligned+0x22>
 8006a98:	e7ef      	b.n	8006a7a <sbrk_aligned+0x1e>
 8006a9a:	bf00      	nop
 8006a9c:	20001c50 	.word	0x20001c50

08006aa0 <_malloc_r>:
 8006aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa4:	1ccd      	adds	r5, r1, #3
 8006aa6:	f025 0503 	bic.w	r5, r5, #3
 8006aaa:	3508      	adds	r5, #8
 8006aac:	2d0c      	cmp	r5, #12
 8006aae:	bf38      	it	cc
 8006ab0:	250c      	movcc	r5, #12
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	db01      	blt.n	8006abc <_malloc_r+0x1c>
 8006ab8:	42a9      	cmp	r1, r5
 8006aba:	d904      	bls.n	8006ac6 <_malloc_r+0x26>
 8006abc:	230c      	movs	r3, #12
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b9c <_malloc_r+0xfc>
 8006aca:	f000 f869 	bl	8006ba0 <__malloc_lock>
 8006ace:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad2:	461c      	mov	r4, r3
 8006ad4:	bb44      	cbnz	r4, 8006b28 <_malloc_r+0x88>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7ff ffbf 	bl	8006a5c <sbrk_aligned>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	d158      	bne.n	8006b96 <_malloc_r+0xf6>
 8006ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ae8:	4627      	mov	r7, r4
 8006aea:	2f00      	cmp	r7, #0
 8006aec:	d143      	bne.n	8006b76 <_malloc_r+0xd6>
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	d04b      	beq.n	8006b8a <_malloc_r+0xea>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	4639      	mov	r1, r7
 8006af6:	4630      	mov	r0, r6
 8006af8:	eb04 0903 	add.w	r9, r4, r3
 8006afc:	f000 f98c 	bl	8006e18 <_sbrk_r>
 8006b00:	4581      	cmp	r9, r0
 8006b02:	d142      	bne.n	8006b8a <_malloc_r+0xea>
 8006b04:	6821      	ldr	r1, [r4, #0]
 8006b06:	1a6d      	subs	r5, r5, r1
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff ffa6 	bl	8006a5c <sbrk_aligned>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d03a      	beq.n	8006b8a <_malloc_r+0xea>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	442b      	add	r3, r5
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	bb62      	cbnz	r2, 8006b7c <_malloc_r+0xdc>
 8006b22:	f8c8 7000 	str.w	r7, [r8]
 8006b26:	e00f      	b.n	8006b48 <_malloc_r+0xa8>
 8006b28:	6822      	ldr	r2, [r4, #0]
 8006b2a:	1b52      	subs	r2, r2, r5
 8006b2c:	d420      	bmi.n	8006b70 <_malloc_r+0xd0>
 8006b2e:	2a0b      	cmp	r2, #11
 8006b30:	d917      	bls.n	8006b62 <_malloc_r+0xc2>
 8006b32:	1961      	adds	r1, r4, r5
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	6025      	str	r5, [r4, #0]
 8006b38:	bf18      	it	ne
 8006b3a:	6059      	strne	r1, [r3, #4]
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	bf08      	it	eq
 8006b40:	f8c8 1000 	streq.w	r1, [r8]
 8006b44:	5162      	str	r2, [r4, r5]
 8006b46:	604b      	str	r3, [r1, #4]
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f000 f82f 	bl	8006bac <__malloc_unlock>
 8006b4e:	f104 000b 	add.w	r0, r4, #11
 8006b52:	1d23      	adds	r3, r4, #4
 8006b54:	f020 0007 	bic.w	r0, r0, #7
 8006b58:	1ac2      	subs	r2, r0, r3
 8006b5a:	bf1c      	itt	ne
 8006b5c:	1a1b      	subne	r3, r3, r0
 8006b5e:	50a3      	strne	r3, [r4, r2]
 8006b60:	e7af      	b.n	8006ac2 <_malloc_r+0x22>
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	bf0c      	ite	eq
 8006b68:	f8c8 2000 	streq.w	r2, [r8]
 8006b6c:	605a      	strne	r2, [r3, #4]
 8006b6e:	e7eb      	b.n	8006b48 <_malloc_r+0xa8>
 8006b70:	4623      	mov	r3, r4
 8006b72:	6864      	ldr	r4, [r4, #4]
 8006b74:	e7ae      	b.n	8006ad4 <_malloc_r+0x34>
 8006b76:	463c      	mov	r4, r7
 8006b78:	687f      	ldr	r7, [r7, #4]
 8006b7a:	e7b6      	b.n	8006aea <_malloc_r+0x4a>
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d1fb      	bne.n	8006b7c <_malloc_r+0xdc>
 8006b84:	2300      	movs	r3, #0
 8006b86:	6053      	str	r3, [r2, #4]
 8006b88:	e7de      	b.n	8006b48 <_malloc_r+0xa8>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	6033      	str	r3, [r6, #0]
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f000 f80c 	bl	8006bac <__malloc_unlock>
 8006b94:	e794      	b.n	8006ac0 <_malloc_r+0x20>
 8006b96:	6005      	str	r5, [r0, #0]
 8006b98:	e7d6      	b.n	8006b48 <_malloc_r+0xa8>
 8006b9a:	bf00      	nop
 8006b9c:	20001c54 	.word	0x20001c54

08006ba0 <__malloc_lock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	@ (8006ba8 <__malloc_lock+0x8>)
 8006ba2:	f7ff bf00 	b.w	80069a6 <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20001c4c 	.word	0x20001c4c

08006bac <__malloc_unlock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__malloc_unlock+0x8>)
 8006bae:	f7ff befb 	b.w	80069a8 <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20001c4c 	.word	0x20001c4c

08006bb8 <__sflush_r>:
 8006bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	0716      	lsls	r6, r2, #28
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	d454      	bmi.n	8006c72 <__sflush_r+0xba>
 8006bc8:	684b      	ldr	r3, [r1, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dc02      	bgt.n	8006bd4 <__sflush_r+0x1c>
 8006bce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	dd48      	ble.n	8006c66 <__sflush_r+0xae>
 8006bd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	d045      	beq.n	8006c66 <__sflush_r+0xae>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006be0:	682f      	ldr	r7, [r5, #0]
 8006be2:	6a21      	ldr	r1, [r4, #32]
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	d030      	beq.n	8006c4a <__sflush_r+0x92>
 8006be8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	0759      	lsls	r1, r3, #29
 8006bee:	d505      	bpl.n	8006bfc <__sflush_r+0x44>
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bf6:	b10b      	cbz	r3, 8006bfc <__sflush_r+0x44>
 8006bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c00:	6a21      	ldr	r1, [r4, #32]
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b0      	blx	r6
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	d106      	bne.n	8006c1a <__sflush_r+0x62>
 8006c0c:	6829      	ldr	r1, [r5, #0]
 8006c0e:	291d      	cmp	r1, #29
 8006c10:	d82b      	bhi.n	8006c6a <__sflush_r+0xb2>
 8006c12:	4a2a      	ldr	r2, [pc, #168]	@ (8006cbc <__sflush_r+0x104>)
 8006c14:	410a      	asrs	r2, r1
 8006c16:	07d6      	lsls	r6, r2, #31
 8006c18:	d427      	bmi.n	8006c6a <__sflush_r+0xb2>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6062      	str	r2, [r4, #4]
 8006c1e:	04d9      	lsls	r1, r3, #19
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	6022      	str	r2, [r4, #0]
 8006c24:	d504      	bpl.n	8006c30 <__sflush_r+0x78>
 8006c26:	1c42      	adds	r2, r0, #1
 8006c28:	d101      	bne.n	8006c2e <__sflush_r+0x76>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	b903      	cbnz	r3, 8006c30 <__sflush_r+0x78>
 8006c2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c32:	602f      	str	r7, [r5, #0]
 8006c34:	b1b9      	cbz	r1, 8006c66 <__sflush_r+0xae>
 8006c36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d002      	beq.n	8006c44 <__sflush_r+0x8c>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7ff fec2 	bl	80069c8 <_free_r>
 8006c44:	2300      	movs	r3, #0
 8006c46:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c48:	e00d      	b.n	8006c66 <__sflush_r+0xae>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b0      	blx	r6
 8006c50:	4602      	mov	r2, r0
 8006c52:	1c50      	adds	r0, r2, #1
 8006c54:	d1c9      	bne.n	8006bea <__sflush_r+0x32>
 8006c56:	682b      	ldr	r3, [r5, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0c6      	beq.n	8006bea <__sflush_r+0x32>
 8006c5c:	2b1d      	cmp	r3, #29
 8006c5e:	d001      	beq.n	8006c64 <__sflush_r+0xac>
 8006c60:	2b16      	cmp	r3, #22
 8006c62:	d11e      	bne.n	8006ca2 <__sflush_r+0xea>
 8006c64:	602f      	str	r7, [r5, #0]
 8006c66:	2000      	movs	r0, #0
 8006c68:	e022      	b.n	8006cb0 <__sflush_r+0xf8>
 8006c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c6e:	b21b      	sxth	r3, r3
 8006c70:	e01b      	b.n	8006caa <__sflush_r+0xf2>
 8006c72:	690f      	ldr	r7, [r1, #16]
 8006c74:	2f00      	cmp	r7, #0
 8006c76:	d0f6      	beq.n	8006c66 <__sflush_r+0xae>
 8006c78:	0793      	lsls	r3, r2, #30
 8006c7a:	680e      	ldr	r6, [r1, #0]
 8006c7c:	bf08      	it	eq
 8006c7e:	694b      	ldreq	r3, [r1, #20]
 8006c80:	600f      	str	r7, [r1, #0]
 8006c82:	bf18      	it	ne
 8006c84:	2300      	movne	r3, #0
 8006c86:	eba6 0807 	sub.w	r8, r6, r7
 8006c8a:	608b      	str	r3, [r1, #8]
 8006c8c:	f1b8 0f00 	cmp.w	r8, #0
 8006c90:	dde9      	ble.n	8006c66 <__sflush_r+0xae>
 8006c92:	6a21      	ldr	r1, [r4, #32]
 8006c94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c96:	4643      	mov	r3, r8
 8006c98:	463a      	mov	r2, r7
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	47b0      	blx	r6
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	dc08      	bgt.n	8006cb4 <__sflush_r+0xfc>
 8006ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb4:	4407      	add	r7, r0
 8006cb6:	eba8 0800 	sub.w	r8, r8, r0
 8006cba:	e7e7      	b.n	8006c8c <__sflush_r+0xd4>
 8006cbc:	dfbffffe 	.word	0xdfbffffe

08006cc0 <_fflush_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	690b      	ldr	r3, [r1, #16]
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	b913      	cbnz	r3, 8006cd0 <_fflush_r+0x10>
 8006cca:	2500      	movs	r5, #0
 8006ccc:	4628      	mov	r0, r5
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	b118      	cbz	r0, 8006cda <_fflush_r+0x1a>
 8006cd2:	6a03      	ldr	r3, [r0, #32]
 8006cd4:	b90b      	cbnz	r3, 8006cda <_fflush_r+0x1a>
 8006cd6:	f7ff fc2b 	bl	8006530 <__sinit>
 8006cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0f3      	beq.n	8006cca <_fflush_r+0xa>
 8006ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ce4:	07d0      	lsls	r0, r2, #31
 8006ce6:	d404      	bmi.n	8006cf2 <_fflush_r+0x32>
 8006ce8:	0599      	lsls	r1, r3, #22
 8006cea:	d402      	bmi.n	8006cf2 <_fflush_r+0x32>
 8006cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cee:	f7ff fe5a 	bl	80069a6 <__retarget_lock_acquire_recursive>
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	f7ff ff5f 	bl	8006bb8 <__sflush_r>
 8006cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cfc:	07da      	lsls	r2, r3, #31
 8006cfe:	4605      	mov	r5, r0
 8006d00:	d4e4      	bmi.n	8006ccc <_fflush_r+0xc>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	059b      	lsls	r3, r3, #22
 8006d06:	d4e1      	bmi.n	8006ccc <_fflush_r+0xc>
 8006d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d0a:	f7ff fe4d 	bl	80069a8 <__retarget_lock_release_recursive>
 8006d0e:	e7dd      	b.n	8006ccc <_fflush_r+0xc>

08006d10 <__swhatbuf_r>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	460c      	mov	r4, r1
 8006d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	b096      	sub	sp, #88	@ 0x58
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	461e      	mov	r6, r3
 8006d20:	da0d      	bge.n	8006d3e <__swhatbuf_r+0x2e>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d28:	f04f 0100 	mov.w	r1, #0
 8006d2c:	bf14      	ite	ne
 8006d2e:	2340      	movne	r3, #64	@ 0x40
 8006d30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d34:	2000      	movs	r0, #0
 8006d36:	6031      	str	r1, [r6, #0]
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	b016      	add	sp, #88	@ 0x58
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
 8006d3e:	466a      	mov	r2, sp
 8006d40:	f000 f848 	bl	8006dd4 <_fstat_r>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	dbec      	blt.n	8006d22 <__swhatbuf_r+0x12>
 8006d48:	9901      	ldr	r1, [sp, #4]
 8006d4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d52:	4259      	negs	r1, r3
 8006d54:	4159      	adcs	r1, r3
 8006d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d5a:	e7eb      	b.n	8006d34 <__swhatbuf_r+0x24>

08006d5c <__smakebuf_r>:
 8006d5c:	898b      	ldrh	r3, [r1, #12]
 8006d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d60:	079d      	lsls	r5, r3, #30
 8006d62:	4606      	mov	r6, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	d507      	bpl.n	8006d78 <__smakebuf_r+0x1c>
 8006d68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	2301      	movs	r3, #1
 8006d72:	6163      	str	r3, [r4, #20]
 8006d74:	b003      	add	sp, #12
 8006d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d78:	ab01      	add	r3, sp, #4
 8006d7a:	466a      	mov	r2, sp
 8006d7c:	f7ff ffc8 	bl	8006d10 <__swhatbuf_r>
 8006d80:	9f00      	ldr	r7, [sp, #0]
 8006d82:	4605      	mov	r5, r0
 8006d84:	4639      	mov	r1, r7
 8006d86:	4630      	mov	r0, r6
 8006d88:	f7ff fe8a 	bl	8006aa0 <_malloc_r>
 8006d8c:	b948      	cbnz	r0, 8006da2 <__smakebuf_r+0x46>
 8006d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d92:	059a      	lsls	r2, r3, #22
 8006d94:	d4ee      	bmi.n	8006d74 <__smakebuf_r+0x18>
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	f043 0302 	orr.w	r3, r3, #2
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	e7e2      	b.n	8006d68 <__smakebuf_r+0xc>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	6020      	str	r0, [r4, #0]
 8006da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006daa:	81a3      	strh	r3, [r4, #12]
 8006dac:	9b01      	ldr	r3, [sp, #4]
 8006dae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006db2:	b15b      	cbz	r3, 8006dcc <__smakebuf_r+0x70>
 8006db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006db8:	4630      	mov	r0, r6
 8006dba:	f000 f81d 	bl	8006df8 <_isatty_r>
 8006dbe:	b128      	cbz	r0, 8006dcc <__smakebuf_r+0x70>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	f023 0303 	bic.w	r3, r3, #3
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	431d      	orrs	r5, r3
 8006dd0:	81a5      	strh	r5, [r4, #12]
 8006dd2:	e7cf      	b.n	8006d74 <__smakebuf_r+0x18>

08006dd4 <_fstat_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d07      	ldr	r5, [pc, #28]	@ (8006df4 <_fstat_r+0x20>)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	f7f9 fdef 	bl	80009c4 <_fstat>
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	d102      	bne.n	8006df0 <_fstat_r+0x1c>
 8006dea:	682b      	ldr	r3, [r5, #0]
 8006dec:	b103      	cbz	r3, 8006df0 <_fstat_r+0x1c>
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	bd38      	pop	{r3, r4, r5, pc}
 8006df2:	bf00      	nop
 8006df4:	20001c48 	.word	0x20001c48

08006df8 <_isatty_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d06      	ldr	r5, [pc, #24]	@ (8006e14 <_isatty_r+0x1c>)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	602b      	str	r3, [r5, #0]
 8006e04:	f7f9 fdee 	bl	80009e4 <_isatty>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_isatty_r+0x1a>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_isatty_r+0x1a>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	20001c48 	.word	0x20001c48

08006e18 <_sbrk_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d06      	ldr	r5, [pc, #24]	@ (8006e34 <_sbrk_r+0x1c>)
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	f7f9 fdf6 	bl	8000a14 <_sbrk>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_sbrk_r+0x1a>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_sbrk_r+0x1a>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	20001c48 	.word	0x20001c48

08006e38 <_init>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr

08006e44 <_fini>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr
