
09_FreeRTOS_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007190  08007190  00008190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a4  080073a4  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080073a4  080073a4  000083a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ac  080073ac  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ac  080073ac  000083ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073b0  080073b0  000083b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080073b4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000060  08007414  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c44  08007414  00009c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0c2  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c4  00000000  00000000  00024152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00027718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119b  00000000  00000000  00028db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003816  00000000  00000000  00029f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001845f  00000000  00000000  0002d761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d4fc  00000000  00000000  00045bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001530bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006288  00000000  00000000  00153100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00159388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007178 	.word	0x08007178

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007178 	.word	0x08007178

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fb33 	bl	8000b5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f840 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8bc 	bl	8000678 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000500:	f000 f88e 	bl	8000620 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f003 fa54 	bl	80039b0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem */
  BinarySemHandle = osSemaphoreNew(1, 1, &BinarySem_attributes);
 8000508:	4a11      	ldr	r2, [pc, #68]	@ (8000550 <main+0x60>)
 800050a:	2101      	movs	r1, #1
 800050c:	2001      	movs	r0, #1
 800050e:	f003 fb46 	bl	8003b9e <osSemaphoreNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a0f      	ldr	r2, [pc, #60]	@ (8000554 <main+0x64>)
 8000516:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Normal_Task */
  Normal_TaskHandle = osThreadNew(Start_Normal_Task, NULL, &Normal_Task_attributes);
 8000518:	4a0f      	ldr	r2, [pc, #60]	@ (8000558 <main+0x68>)
 800051a:	2100      	movs	r1, #0
 800051c:	480f      	ldr	r0, [pc, #60]	@ (800055c <main+0x6c>)
 800051e:	f003 fa91 	bl	8003a44 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <main+0x70>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of Low_Task */
  Low_TaskHandle = osThreadNew(Start_Low_Task, NULL, &Low_Task_attributes);
 8000528:	4a0e      	ldr	r2, [pc, #56]	@ (8000564 <main+0x74>)
 800052a:	2100      	movs	r1, #0
 800052c:	480e      	ldr	r0, [pc, #56]	@ (8000568 <main+0x78>)
 800052e:	f003 fa89 	bl	8003a44 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0d      	ldr	r2, [pc, #52]	@ (800056c <main+0x7c>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of High_Task */
  High_TaskHandle = osThreadNew(Start_High_Task, NULL, &High_Task_attributes);
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <main+0x80>)
 800053a:	2100      	movs	r1, #0
 800053c:	480d      	ldr	r0, [pc, #52]	@ (8000574 <main+0x84>)
 800053e:	f003 fa81 	bl	8003a44 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <main+0x88>)
 8000546:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f003 fa56 	bl	80039f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x5c>
 8000550:	0800734c 	.word	0x0800734c
 8000554:	20000110 	.word	0x20000110
 8000558:	080072e0 	.word	0x080072e0
 800055c:	08000711 	.word	0x08000711
 8000560:	20000104 	.word	0x20000104
 8000564:	08007304 	.word	0x08007304
 8000568:	08000795 	.word	0x08000795
 800056c:	20000108 	.word	0x20000108
 8000570:	08007328 	.word	0x08007328
 8000574:	080007e5 	.word	0x080007e5
 8000578:	2000010c 	.word	0x2000010c

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	@ 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	@ 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 fd0c 	bl	8006fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a2:	f000 fdaf 	bl	8001104 <HAL_PWREx_ControlVoltageScaling>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ac:	f000 f96e 	bl	800088c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2340      	movs	r3, #64	@ 0x40
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ca:	230a      	movs	r3, #10
 80005cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fdf6 	bl	80011d0 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ea:	f000 f94f 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	2104      	movs	r1, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f9fb 	bl	8001a04 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000614:	f000 f93a 	bl	800088c <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3758      	adds	r7, #88	@ 0x58
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <MX_LPUART1_UART_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_LPUART1_UART_Init+0x50>)
 800065e:	f002 fbb7 	bl	8002dd0 <HAL_UART_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f910 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000007c 	.word	0x2000007c
 8000674:	40008000 	.word	0x40008000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800068e:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <MX_GPIO_Init+0x90>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a1d      	ldr	r2, [pc, #116]	@ (8000708 <MX_GPIO_Init+0x90>)
 8000694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_GPIO_Init+0x90>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80006a6:	f000 fd83 	bl	80011b0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_GPIO_Init+0x90>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4a16      	ldr	r2, [pc, #88]	@ (8000708 <MX_GPIO_Init+0x90>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_GPIO_Init+0x90>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_GPIO_Init+0x90>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	4a10      	ldr	r2, [pc, #64]	@ (8000708 <MX_GPIO_Init+0x90>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_GPIO_Init+0x90>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2180      	movs	r1, #128	@ 0x80
 80006de:	480b      	ldr	r0, [pc, #44]	@ (800070c <MX_GPIO_Init+0x94>)
 80006e0:	f000 fcea 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80006e4:	2380      	movs	r3, #128	@ 0x80
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_GPIO_Init+0x94>)
 80006fc:	f000 fb4a 	bl	8000d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	48000400 	.word	0x48000400

08000710 <Start_Normal_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Normal_Task */
void Start_Normal_Task(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//    char *str1 = "\r\nEntered into NORMAL TASK & waiting for semaphore\r\n";
//    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str1, strlen(str1), 100);

    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <Start_Normal_Task+0x70>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fac5 	bl	8003cb0 <osSemaphoreAcquire>

    char *str2 = "\r\nNormal Task: Semaphore acquired, performing task...\r\n";
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <Start_Normal_Task+0x74>)
 8000728:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str2, strlen(str2), 100);
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f7ff fd60 	bl	80001f0 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	2364      	movs	r3, #100	@ 0x64
 8000736:	68f9      	ldr	r1, [r7, #12]
 8000738:	4813      	ldr	r0, [pc, #76]	@ (8000788 <Start_Normal_Task+0x78>)
 800073a:	f002 fb97 	bl	8002e6c <HAL_UART_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	4812      	ldr	r0, [pc, #72]	@ (800078c <Start_Normal_Task+0x7c>)
 8000744:	f000 fcb8 	bl	80010b8 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000748:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074c:	f003 fa0c 	bl	8003b68 <osDelay>

    // below line that release the semaphore
    // if i comment this line it will not allowed to acquire semaphore
    // for high task and continue to execute the low task

    osSemaphoreRelease(BinarySemHandle);
 8000750:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <Start_Normal_Task+0x70>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f003 fafd 	bl	8003d54 <osSemaphoreRelease>
    char *str3 = "Normal Task: Semaphore released, task completed.\r\n";
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <Start_Normal_Task+0x80>)
 800075c:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str3, strlen(str3), 100);
 800075e:	68b8      	ldr	r0, [r7, #8]
 8000760:	f7ff fd46 	bl	80001f0 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b29a      	uxth	r2, r3
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	4806      	ldr	r0, [pc, #24]	@ (8000788 <Start_Normal_Task+0x78>)
 800076e:	f002 fb7d 	bl	8002e6c <HAL_UART_Transmit>

    osDelay(1000);  // Ensure some delay to avoid busy looping
 8000772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000776:	f003 f9f7 	bl	8003b68 <osDelay>
  {
 800077a:	bf00      	nop
 800077c:	e7cc      	b.n	8000718 <Start_Normal_Task+0x8>
 800077e:	bf00      	nop
 8000780:	20000110 	.word	0x20000110
 8000784:	080071c0 	.word	0x080071c0
 8000788:	2000007c 	.word	0x2000007c
 800078c:	48000400 	.word	0x48000400
 8000790:	080071f8 	.word	0x080071f8

08000794 <Start_Low_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Low_Task */
void Start_Low_Task(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Low_Task */
  /* Infinite loop */
  for(;;)
  {
    char *str1 = "\r\nEntered into LOW TASK\r\n";
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <Start_Low_Task+0x44>)
 800079e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str1, strlen(str1), 100);
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f7ff fd25 	bl	80001f0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	2364      	movs	r3, #100	@ 0x64
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	480b      	ldr	r0, [pc, #44]	@ (80007dc <Start_Low_Task+0x48>)
 80007b0:	f002 fb5c 	bl	8002e6c <HAL_UART_Transmit>

    char *str2 = "Leaving LOW TASK\r\n";
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <Start_Low_Task+0x4c>)
 80007b6:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str2, strlen(str2), 100);
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f7ff fd19 	bl	80001f0 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	2364      	movs	r3, #100	@ 0x64
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <Start_Low_Task+0x48>)
 80007c8:	f002 fb50 	bl	8002e6c <HAL_UART_Transmit>

    osDelay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d0:	f003 f9ca 	bl	8003b68 <osDelay>
  {
 80007d4:	bf00      	nop
 80007d6:	e7e1      	b.n	800079c <Start_Low_Task+0x8>
 80007d8:	0800722c 	.word	0x0800722c
 80007dc:	2000007c 	.word	0x2000007c
 80007e0:	08007248 	.word	0x08007248

080007e4 <Start_High_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_High_Task */
void Start_High_Task(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//    char *str1 = "\r\nEntered into HIGH TASK & waiting for Semaphore\r\n";
//    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str1, strlen(str1), 100);

    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <Start_High_Task+0x70>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fa5b 	bl	8003cb0 <osSemaphoreAcquire>

    char *str2 = "\r\nHigh Task: Semaphore acquired, performing task...\r\n";
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <Start_High_Task+0x74>)
 80007fc:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str2, strlen(str2), 100);
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff fcf6 	bl	80001f0 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	2364      	movs	r3, #100	@ 0x64
 800080a:	68f9      	ldr	r1, [r7, #12]
 800080c:	4813      	ldr	r0, [pc, #76]	@ (800085c <Start_High_Task+0x78>)
 800080e:	f002 fb2d 	bl	8002e6c <HAL_UART_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2180      	movs	r1, #128	@ 0x80
 8000816:	4812      	ldr	r0, [pc, #72]	@ (8000860 <Start_High_Task+0x7c>)
 8000818:	f000 fc4e 	bl	80010b8 <HAL_GPIO_WritePin>
    osDelay(1000);
 800081c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000820:	f003 f9a2 	bl	8003b68 <osDelay>

    // below line that release the semaphore
    // if i comment this line it will not allow to acquire semaphore
    // for normal task and continue to execute the low task
    osSemaphoreRelease(BinarySemHandle);
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <Start_High_Task+0x70>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f003 fa93 	bl	8003d54 <osSemaphoreRelease>
    char *str3 = "High Task: Semaphore released, task completed.\r\n";
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <Start_High_Task+0x80>)
 8000830:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str3, strlen(str3), 100);
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f7ff fcdc 	bl	80001f0 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	2364      	movs	r3, #100	@ 0x64
 800083e:	68b9      	ldr	r1, [r7, #8]
 8000840:	4806      	ldr	r0, [pc, #24]	@ (800085c <Start_High_Task+0x78>)
 8000842:	f002 fb13 	bl	8002e6c <HAL_UART_Transmit>

    osDelay(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084a:	f003 f98d 	bl	8003b68 <osDelay>
  {
 800084e:	bf00      	nop
 8000850:	e7cc      	b.n	80007ec <Start_High_Task+0x8>
 8000852:	bf00      	nop
 8000854:	20000110 	.word	0x20000110
 8000858:	0800725c 	.word	0x0800725c
 800085c:	2000007c 	.word	0x2000007c
 8000860:	48000400 	.word	0x48000400
 8000864:	08007294 	.word	0x08007294

08000868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d101      	bne.n	800087e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087a:	f000 f989 	bl	8000b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40001000 	.word	0x40001000

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 fa33 	bl	8000d40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0ac      	sub	sp, #176	@ 0xb0
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	228c      	movs	r2, #140	@ 0x8c
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f006 fb4d 	bl	8006fa8 <memset>
  if(huart->Instance==LPUART1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a22      	ldr	r2, [pc, #136]	@ (800099c <HAL_UART_MspInit+0xb4>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d13d      	bne.n	8000994 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000918:	2320      	movs	r3, #32
 800091a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800091c:	2300      	movs	r3, #0
 800091e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fac3 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000930:	f7ff ffac 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_UART_MspInit+0xb8>)
 8000936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000938:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <HAL_UART_MspInit+0xb8>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_UART_MspInit+0xb8>)
 8000942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_UART_MspInit+0xb8>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <HAL_UART_MspInit+0xb8>)
 8000952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_UART_MspInit+0xb8>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000964:	f000 fc24 	bl	80011b0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000968:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800096c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000982:	2308      	movs	r3, #8
 8000984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000988:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800098c:	4619      	mov	r1, r3
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <HAL_UART_MspInit+0xbc>)
 8000990:	f000 fa00 	bl	8000d94 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000994:	bf00      	nop
 8000996:	37b0      	adds	r7, #176	@ 0xb0
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40008000 	.word	0x40008000
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48001800 	.word	0x48001800

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	@ 0x38
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b6:	4b34      	ldr	r3, [pc, #208]	@ (8000a88 <HAL_InitTick+0xe0>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ba:	4a33      	ldr	r2, [pc, #204]	@ (8000a88 <HAL_InitTick+0xe0>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c2:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <HAL_InitTick+0xe0>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ce:	f107 0210 	add.w	r2, r7, #16
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 f9d7 	bl	8001d8c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d103      	bne.n	80009f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e8:	f001 f9a4 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 80009ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80009ee:	e004      	b.n	80009fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f0:	f001 f9a0 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 80009f4:	4603      	mov	r3, r0
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009fc:	4a23      	ldr	r2, [pc, #140]	@ (8000a8c <HAL_InitTick+0xe4>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	0c9b      	lsrs	r3, r3, #18
 8000a04:	3b01      	subs	r3, #1
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a08:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a0a:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <HAL_InitTick+0xec>)
 8000a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a16:	4a1e      	ldr	r2, [pc, #120]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a2e:	4818      	ldr	r0, [pc, #96]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a30:	f001 ff08 	bl	8002844 <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d11b      	bne.n	8000a7a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a42:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <HAL_InitTick+0xe8>)
 8000a44:	f001 ff60 	bl	8002908 <HAL_TIM_Base_Start_IT>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d111      	bne.n	8000a7a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a56:	2036      	movs	r0, #54	@ 0x36
 8000a58:	f000 f98e 	bl	8000d78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b0f      	cmp	r3, #15
 8000a60:	d808      	bhi.n	8000a74 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a62:	2200      	movs	r2, #0
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	2036      	movs	r0, #54	@ 0x36
 8000a68:	f000 f96a 	bl	8000d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_InitTick+0xf0>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	e002      	b.n	8000a7a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3738      	adds	r7, #56	@ 0x38
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	20000114 	.word	0x20000114
 8000a94:	40001000 	.word	0x40001000
 8000a98:	20000004 	.word	0x20000004

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <TIM6_DAC_IRQHandler+0x10>)
 8000ada:	f001 ff85 	bl	80029e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000114 	.word	0x20000114

08000ae8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff ffea 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	@ (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f006 fa93 	bl	8007064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff fcd7 	bl	80004f0 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b50:	080073b4 	.word	0x080073b4
  ldr r2, =_sbss
 8000b54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b58:	20001c44 	.word	0x20001c44

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>

08000b5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f8de 	bl	8000d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f7ff ff1a 	bl	80009a8 <HAL_InitTick>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	e001      	b.n	8000b84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b80:	f7ff fe8a 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000160 	.word	0x20000160

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000160 	.word	0x20000160

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	@ (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	@ (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	@ 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff4c 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d52:	f7ff ff61 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff ffb1 	bl	8000cc4 <NVIC_EncodePriority>
 8000d62:	4602      	mov	r2, r0
 8000d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff80 	bl	8000c70 <__NVIC_SetPriority>
}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff54 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da2:	e166      	b.n	8001072 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2101      	movs	r1, #1
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8158 	beq.w	800106c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d005      	beq.n	8000dd4 <HAL_GPIO_Init+0x40>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d130      	bne.n	8000e36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	f003 0201 	and.w	r2, r3, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d017      	beq.n	8000e72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d123      	bne.n	8000ec6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	6939      	ldr	r1, [r7, #16]
 8000ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0203 	and.w	r2, r3, #3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 80b2 	beq.w	800106c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	4b61      	ldr	r3, [pc, #388]	@ (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0c:	4a60      	ldr	r2, [pc, #384]	@ (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f14:	4b5e      	ldr	r3, [pc, #376]	@ (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f20:	4a5c      	ldr	r2, [pc, #368]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f4a:	d02b      	beq.n	8000fa4 <HAL_GPIO_Init+0x210>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a52      	ldr	r2, [pc, #328]	@ (8001098 <HAL_GPIO_Init+0x304>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d025      	beq.n	8000fa0 <HAL_GPIO_Init+0x20c>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a51      	ldr	r2, [pc, #324]	@ (800109c <HAL_GPIO_Init+0x308>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d01f      	beq.n	8000f9c <HAL_GPIO_Init+0x208>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a50      	ldr	r2, [pc, #320]	@ (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d019      	beq.n	8000f98 <HAL_GPIO_Init+0x204>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4f      	ldr	r2, [pc, #316]	@ (80010a4 <HAL_GPIO_Init+0x310>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d013      	beq.n	8000f94 <HAL_GPIO_Init+0x200>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a4e      	ldr	r2, [pc, #312]	@ (80010a8 <HAL_GPIO_Init+0x314>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d00d      	beq.n	8000f90 <HAL_GPIO_Init+0x1fc>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a4d      	ldr	r2, [pc, #308]	@ (80010ac <HAL_GPIO_Init+0x318>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x1f8>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80010b0 <HAL_GPIO_Init+0x31c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_GPIO_Init+0x1f4>
 8000f84:	2307      	movs	r3, #7
 8000f86:	e00e      	b.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f88:	2308      	movs	r3, #8
 8000f8a:	e00c      	b.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	e00a      	b.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f90:	2305      	movs	r3, #5
 8000f92:	e008      	b.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f94:	2304      	movs	r3, #4
 8000f96:	e006      	b.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e004      	b.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e002      	b.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	f002 0203 	and.w	r2, r2, #3
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	4093      	lsls	r3, r2
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb6:	4937      	ldr	r1, [pc, #220]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fe8:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fee:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001012:	4a28      	ldr	r2, [pc, #160]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001018:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103c:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001042:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001066:	4a13      	ldr	r2, [pc, #76]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	f47f ae91 	bne.w	8000da4 <HAL_GPIO_Init+0x10>
  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	48000400 	.word	0x48000400
 800109c:	48000800 	.word	0x48000800
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	48001000 	.word	0x48001000
 80010a8:	48001400 	.word	0x48001400
 80010ac:	48001800 	.word	0x48001800
 80010b0:	48001c00 	.word	0x48001c00
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40007000 	.word	0x40007000

08001104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001112:	d130      	bne.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001114:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800111c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001120:	d038      	beq.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800112a:	4a1e      	ldr	r2, [pc, #120]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001130:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2232      	movs	r2, #50	@ 0x32
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	4a1b      	ldr	r2, [pc, #108]	@ (80011ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	0c9b      	lsrs	r3, r3, #18
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001148:	e002      	b.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3b01      	subs	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800115c:	d102      	bne.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x60>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f2      	bne.n	800114a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800116c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001170:	d110      	bne.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e00f      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800117e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001182:	d007      	beq.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800118c:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001192:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40007000 	.word	0x40007000
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011be:	6053      	str	r3, [r2, #4]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000

080011d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	f000 bc08 	b.w	80019f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e4:	4b96      	ldr	r3, [pc, #600]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ee:	4b94      	ldr	r3, [pc, #592]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80e4 	beq.w	80013ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_RCC_OscConfig+0x4c>
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	f040 808b 	bne.w	800132a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b01      	cmp	r3, #1
 8001218:	f040 8087 	bne.w	800132a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800121c:	4b88      	ldr	r3, [pc, #544]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x64>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e3df      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1a      	ldr	r2, [r3, #32]
 8001238:	4b81      	ldr	r3, [pc, #516]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <HAL_RCC_OscConfig+0x7e>
 8001244:	4b7e      	ldr	r3, [pc, #504]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800124c:	e005      	b.n	800125a <HAL_RCC_OscConfig+0x8a>
 800124e:	4b7c      	ldr	r3, [pc, #496]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800125a:	4293      	cmp	r3, r2
 800125c:	d223      	bcs.n	80012a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fdc4 	bl	8001df0 <RCC_SetFlashLatencyFromMSIRange>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e3c0      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	4b73      	ldr	r3, [pc, #460]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a72      	ldr	r2, [pc, #456]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b70      	ldr	r3, [pc, #448]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	496d      	ldr	r1, [pc, #436]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001290:	4b6b      	ldr	r3, [pc, #428]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	4968      	ldr	r1, [pc, #416]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	e025      	b.n	80012f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a6:	4b66      	ldr	r3, [pc, #408]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a65      	ldr	r2, [pc, #404]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b63      	ldr	r3, [pc, #396]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4960      	ldr	r1, [pc, #384]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	495b      	ldr	r1, [pc, #364]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fd84 	bl	8001df0 <RCC_SetFlashLatencyFromMSIRange>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e380      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f2:	f000 fc87 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b51      	ldr	r3, [pc, #324]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	4950      	ldr	r1, [pc, #320]	@ (8001444 <HAL_RCC_OscConfig+0x274>)
 8001304:	5ccb      	ldrb	r3, [r1, r3]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	fa22 f303 	lsr.w	r3, r2, r3
 800130e:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_RCC_OscConfig+0x278>)
 8001310:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001312:	4b4e      	ldr	r3, [pc, #312]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fb46 	bl	80009a8 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d052      	beq.n	80013cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	e364      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d032      	beq.n	8001398 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001332:	4b43      	ldr	r3, [pc, #268]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a42      	ldr	r2, [pc, #264]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800133e:	f7ff fc3b 	bl	8000bb8 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001346:	f7ff fc37 	bl	8000bb8 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e34d      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a35      	ldr	r2, [pc, #212]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4930      	ldr	r1, [pc, #192]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	492b      	ldr	r1, [pc, #172]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
 8001396:	e01a      	b.n	80013ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc08 	bl	8000bb8 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ac:	f7ff fc04 	bl	8000bb8 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e31a      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1dc>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d073      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x21c>
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d10e      	bne.n	8001404 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d063      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d15f      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e2f7      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x24c>
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e025      	b.n	8001468 <HAL_RCC_OscConfig+0x298>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001424:	d114      	bne.n	8001450 <HAL_RCC_OscConfig+0x280>
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a02      	ldr	r2, [pc, #8]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e013      	b.n	8001468 <HAL_RCC_OscConfig+0x298>
 8001440:	40021000 	.word	0x40021000
 8001444:	0800735c 	.word	0x0800735c
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004
 8001450:	4ba0      	ldr	r3, [pc, #640]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a9f      	ldr	r2, [pc, #636]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b9d      	ldr	r3, [pc, #628]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a9c      	ldr	r2, [pc, #624]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fba2 	bl	8000bb8 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fb9e 	bl	8000bb8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	@ 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e2b4      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	4b92      	ldr	r3, [pc, #584]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x2a8>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fb8e 	bl	8000bb8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb8a 	bl	8000bb8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e2a0      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b2:	4b88      	ldr	r3, [pc, #544]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2d0>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d060      	beq.n	8001590 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x310>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d119      	bne.n	800150e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d116      	bne.n	800150e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e0:	4b7c      	ldr	r3, [pc, #496]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_OscConfig+0x328>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e27d      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b76      	ldr	r3, [pc, #472]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	4973      	ldr	r1, [pc, #460]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150c:	e040      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d023      	beq.n	800155e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001516:	4b6f      	ldr	r3, [pc, #444]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fb49 	bl	8000bb8 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fb45 	bl	8000bb8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e25b      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153c:	4b65      	ldr	r3, [pc, #404]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b62      	ldr	r3, [pc, #392]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	495f      	ldr	r1, [pc, #380]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
 800155c:	e018      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b5d      	ldr	r3, [pc, #372]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5c      	ldr	r2, [pc, #368]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fb25 	bl	8000bb8 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fb21 	bl	8000bb8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e237      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001584:	4b53      	ldr	r3, [pc, #332]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03c      	beq.n	8001616 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01c      	beq.n	80015de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a4:	4b4b      	ldr	r3, [pc, #300]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015aa:	4a4a      	ldr	r2, [pc, #296]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb00 	bl	8000bb8 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fafc 	bl	8000bb8 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e212      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ce:	4b41      	ldr	r3, [pc, #260]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ef      	beq.n	80015bc <HAL_RCC_OscConfig+0x3ec>
 80015dc:	e01b      	b.n	8001616 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015de:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e4:	4a3b      	ldr	r2, [pc, #236]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff fae3 	bl	8000bb8 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fadf 	bl	8000bb8 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1f5      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001608:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ef      	bne.n	80015f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80a6 	beq.w	8001770 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001628:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001638:	4a26      	ldr	r2, [pc, #152]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001640:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164c:	2301      	movs	r3, #1
 800164e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d118      	bne.n	800168e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <HAL_RCC_OscConfig+0x508>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001668:	f7ff faa6 	bl	8000bb8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff faa2 	bl	8000bb8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1b8      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4d8>
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016a6:	e029      	b.n	80016fc <HAL_RCC_OscConfig+0x52c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d115      	bne.n	80016dc <HAL_RCC_OscConfig+0x50c>
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b6:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c6:	4a03      	ldr	r2, [pc, #12]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d0:	e014      	b.n	80016fc <HAL_RCC_OscConfig+0x52c>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e2:	4a9c      	ldr	r2, [pc, #624]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ec:	4b99      	ldr	r3, [pc, #612]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f2:	4a98      	ldr	r2, [pc, #608]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d016      	beq.n	8001732 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fa58 	bl	8000bb8 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fa54 	bl	8000bb8 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e168      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001722:	4b8c      	ldr	r3, [pc, #560]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ed      	beq.n	800170c <HAL_RCC_OscConfig+0x53c>
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fa41 	bl	8000bb8 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff fa3d 	bl	8000bb8 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e151      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001750:	4b80      	ldr	r3, [pc, #512]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ed      	bne.n	800173a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b7b      	ldr	r3, [pc, #492]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001768:	4a7a      	ldr	r2, [pc, #488]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 800176a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01c      	beq.n	80017be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001784:	4b73      	ldr	r3, [pc, #460]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800178a:	4a72      	ldr	r2, [pc, #456]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fa10 	bl	8000bb8 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800179c:	f7ff fa0c 	bl	8000bb8 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e122      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ae:	4b69      	ldr	r3, [pc, #420]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80017b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ef      	beq.n	800179c <HAL_RCC_OscConfig+0x5cc>
 80017bc:	e01b      	b.n	80017f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017be:	4b65      	ldr	r3, [pc, #404]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80017c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017c4:	4a63      	ldr	r2, [pc, #396]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff f9f3 	bl	8000bb8 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d6:	f7ff f9ef 	bl	8000bb8 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e105      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80017ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ef      	bne.n	80017d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80f9 	beq.w	80019f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	2b02      	cmp	r3, #2
 8001806:	f040 80cf 	bne.w	80019a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800180a:	4b52      	ldr	r3, [pc, #328]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181a:	429a      	cmp	r2, r3
 800181c:	d12c      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	3b01      	subs	r3, #1
 800182a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d123      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d11b      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800184a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d113      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d109      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d071      	beq.n	800195c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d068      	beq.n	8001950 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800187e:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d105      	bne.n	8001896 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800188a:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0ac      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800189a:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2d      	ldr	r2, [pc, #180]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80018a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a6:	f7ff f987 	bl	8000bb8 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f983 	bl	8000bb8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e099      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <HAL_RCC_OscConfig+0x788>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018dc:	3a01      	subs	r2, #1
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018e6:	0212      	lsls	r2, r2, #8
 80018e8:	4311      	orrs	r1, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018ee:	0852      	lsrs	r2, r2, #1
 80018f0:	3a01      	subs	r2, #1
 80018f2:	0552      	lsls	r2, r2, #21
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018fa:	0852      	lsrs	r2, r2, #1
 80018fc:	3a01      	subs	r2, #1
 80018fe:	0652      	lsls	r2, r2, #25
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001906:	06d2      	lsls	r2, r2, #27
 8001908:	430a      	orrs	r2, r1
 800190a:	4912      	ldr	r1, [pc, #72]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 800190c:	4313      	orrs	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001910:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0f      	ldr	r2, [pc, #60]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800191c:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a0c      	ldr	r2, [pc, #48]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001926:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001928:	f7ff f946 	bl	8000bb8 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f942 	bl	8000bb8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e058      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <HAL_RCC_OscConfig+0x784>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194e:	e050      	b.n	80019f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e04f      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
 8001954:	40021000 	.word	0x40021000
 8001958:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d144      	bne.n	80019f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a23      	ldr	r2, [pc, #140]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a20      	ldr	r2, [pc, #128]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001980:	f7ff f91a 	bl	8000bb8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f916 	bl	8000bb8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e02c      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x7b8>
 80019a6:	e024      	b.n	80019f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d01f      	beq.n	80019ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff f8fd 	bl	8000bb8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f8f9 	bl	8000bb8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e00f      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4905      	ldr	r1, [pc, #20]	@ (80019fc <HAL_RCC_OscConfig+0x82c>)
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_RCC_OscConfig+0x830>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e001      	b.n	80019f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	feeefffc 	.word	0xfeeefffc

08001a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0e7      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b75      	ldr	r3, [pc, #468]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d910      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b72      	ldr	r3, [pc, #456]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	4970      	ldr	r1, [pc, #448]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0cf      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d010      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	4b66      	ldr	r3, [pc, #408]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d908      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a64:	4b63      	ldr	r3, [pc, #396]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4960      	ldr	r1, [pc, #384]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d04c      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d121      	bne.n	8001ada <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0a6      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa2:	4b54      	ldr	r3, [pc, #336]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d115      	bne.n	8001ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e09a      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aba:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e08e      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aca:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e086      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ada:	4b46      	ldr	r3, [pc, #280]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f023 0203 	bic.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4943      	ldr	r1, [pc, #268]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aec:	f7ff f864 	bl	8000bb8 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7ff f860 	bl	8000bb8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e06e      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 020c 	and.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1eb      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d208      	bcs.n	8001b4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	492b      	ldr	r1, [pc, #172]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4a:	4b29      	ldr	r3, [pc, #164]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d210      	bcs.n	8001b7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b58:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 0207 	bic.w	r2, r3, #7
 8001b60:	4923      	ldr	r1, [pc, #140]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b68:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e036      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	4918      	ldr	r1, [pc, #96]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4910      	ldr	r1, [pc, #64]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb8:	f000 f824 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	490b      	ldr	r1, [pc, #44]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	4a09      	ldr	r2, [pc, #36]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f8>)
 8001bd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <HAL_RCC_ClockConfig+0x1fc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fee3 	bl	80009a8 <HAL_InitTick>
 8001be2:	4603      	mov	r3, r0
 8001be4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001be6:	7afb      	ldrb	r3, [r7, #11]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	0800735c 	.word	0x0800735c
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c12:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x34>
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d121      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d11e      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c38:	4b34      	ldr	r3, [pc, #208]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c44:	4b31      	ldr	r3, [pc, #196]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e005      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c54:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c60:	4a2b      	ldr	r2, [pc, #172]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d102      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c7c:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	e004      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c88:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d134      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0xa6>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d003      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xac>
 8001ca8:	e005      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cac:	617b      	str	r3, [r7, #20]
      break;
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cb2:	617b      	str	r3, [r7, #20]
      break;
 8001cb4:	e002      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	617b      	str	r3, [r7, #20]
      break;
 8001cba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	fb03 f202 	mul.w	r2, r3, r2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	0e5b      	lsrs	r3, r3, #25
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	3301      	adds	r3, #1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08007374 	.word	0x08007374
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	007a1200 	.word	0x007a1200

08001d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4904      	ldr	r1, [pc, #16]	@ (8001d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	0800736c 	.word	0x0800736c

08001d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d64:	f7ff ffda 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0adb      	lsrs	r3, r3, #11
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4904      	ldr	r1, [pc, #16]	@ (8001d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	0800736c 	.word	0x0800736c

08001d8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	220f      	movs	r2, #15
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <HAL_RCC_GetClockConfig+0x5c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_RCC_GetClockConfig+0x5c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <HAL_RCC_GetClockConfig+0x60>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0207 	and.w	r2, r3, #7
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40022000 	.word	0x40022000

08001df0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e08:	f7ff f96e 	bl	80010e8 <HAL_PWREx_GetVoltageRange>
 8001e0c:	6178      	str	r0, [r7, #20]
 8001e0e:	e014      	b.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e28:	f7ff f95e 	bl	80010e8 <HAL_PWREx_GetVoltageRange>
 8001e2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e40:	d10b      	bne.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b80      	cmp	r3, #128	@ 0x80
 8001e46:	d919      	bls.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e4c:	d902      	bls.n	8001e54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e4e:	2302      	movs	r3, #2
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	e013      	b.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e54:	2301      	movs	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	e010      	b.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b80      	cmp	r3, #128	@ 0x80
 8001e5e:	d902      	bls.n	8001e66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e60:	2303      	movs	r3, #3
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	e00a      	b.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b80      	cmp	r3, #128	@ 0x80
 8001e6a:	d102      	bne.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	e004      	b.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b70      	cmp	r3, #112	@ 0x70
 8001e76:	d101      	bne.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e78:	2301      	movs	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 0207 	bic.w	r2, r3, #7
 8001e84:	4909      	ldr	r1, [pc, #36]	@ (8001eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d041      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ed0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ed4:	d02a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ed6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001eda:	d824      	bhi.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001edc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ee0:	d008      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ee2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ee6:	d81e      	bhi.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00a      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ef0:	d010      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ef2:	e018      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ef4:	4b86      	ldr	r3, [pc, #536]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4a85      	ldr	r2, [pc, #532]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f00:	e015      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 facd 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f12:	e00c      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3320      	adds	r3, #32
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fbb6 	bl	800268c <RCCEx_PLLSAI2_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f24:	e003      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	74fb      	strb	r3, [r7, #19]
      break;
 8001f2a:	e000      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10b      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f34:	4b76      	ldr	r3, [pc, #472]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f42:	4973      	ldr	r1, [pc, #460]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f4a:	e001      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d041      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f64:	d02a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f6a:	d824      	bhi.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f70:	d008      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f76:	d81e      	bhi.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f82:	e018      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f84:	4b62      	ldr	r3, [pc, #392]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a61      	ldr	r2, [pc, #388]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f90:	e015      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fa85 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fa2:	e00c      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fb6e 	bl	800268c <RCCEx_PLLSAI2_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb4:	e003      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fba:	e000      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fc4:	4b52      	ldr	r3, [pc, #328]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd2:	494f      	ldr	r1, [pc, #316]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fda:	e001      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80a0 	beq.w	800212e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ff2:	4b47      	ldr	r3, [pc, #284]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002002:	2300      	movs	r3, #0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b41      	ldr	r3, [pc, #260]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	4a40      	ldr	r2, [pc, #256]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	@ 0x58
 8002014:	4b3e      	ldr	r3, [pc, #248]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002020:	2301      	movs	r3, #1
 8002022:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002024:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3a      	ldr	r2, [pc, #232]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002030:	f7fe fdc2 	bl	8000bb8 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002036:	e009      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7fe fdbe 	bl	8000bb8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d902      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	74fb      	strb	r3, [r7, #19]
        break;
 800204a:	e005      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800204c:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ef      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d15c      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800205e:	4b2c      	ldr	r3, [pc, #176]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002068:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01f      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	d019      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800207c:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002086:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002088:	4b21      	ldr	r3, [pc, #132]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	4a20      	ldr	r2, [pc, #128]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002098:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	4a1c      	ldr	r2, [pc, #112]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d016      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7fe fd7d 	bl	8000bb8 <HAL_GetTick>
 80020be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c0:	e00b      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe fd79 	bl	8000bb8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d902      	bls.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	74fb      	strb	r3, [r7, #19]
            break;
 80020d8:	e006      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020da:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ec      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	4904      	ldr	r1, [pc, #16]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002106:	e009      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	74bb      	strb	r3, [r7, #18]
 800210c:	e006      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211c:	7c7b      	ldrb	r3, [r7, #17]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4ba6      	ldr	r3, [pc, #664]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	4aa5      	ldr	r2, [pc, #660]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800213a:	4ba0      	ldr	r3, [pc, #640]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002140:	f023 0203 	bic.w	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002148:	499c      	ldr	r1, [pc, #624]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800215c:	4b97      	ldr	r3, [pc, #604]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	f023 020c 	bic.w	r2, r3, #12
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216a:	4994      	ldr	r1, [pc, #592]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800217e:	4b8f      	ldr	r3, [pc, #572]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002184:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	498b      	ldr	r1, [pc, #556]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a0:	4b86      	ldr	r3, [pc, #536]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	4983      	ldr	r1, [pc, #524]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021c2:	4b7e      	ldr	r3, [pc, #504]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d0:	497a      	ldr	r1, [pc, #488]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e4:	4b75      	ldr	r3, [pc, #468]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	4972      	ldr	r1, [pc, #456]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002206:	4b6d      	ldr	r3, [pc, #436]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002214:	4969      	ldr	r1, [pc, #420]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002228:	4b64      	ldr	r3, [pc, #400]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002236:	4961      	ldr	r1, [pc, #388]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224a:	4b5c      	ldr	r3, [pc, #368]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002250:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002258:	4958      	ldr	r1, [pc, #352]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800226c:	4b53      	ldr	r3, [pc, #332]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	4950      	ldr	r1, [pc, #320]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800228e:	4b4b      	ldr	r3, [pc, #300]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002294:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	4947      	ldr	r1, [pc, #284]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022b0:	4b42      	ldr	r3, [pc, #264]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	493f      	ldr	r1, [pc, #252]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d2:	4b3a      	ldr	r3, [pc, #232]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	4936      	ldr	r1, [pc, #216]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022f0:	d106      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f2:	4b32      	ldr	r3, [pc, #200]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4a31      	ldr	r2, [pc, #196]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fc:	60d3      	str	r3, [r2, #12]
 80022fe:	e011      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002308:	d10c      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f8c9 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d028      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002330:	4b22      	ldr	r3, [pc, #136]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233e:	491f      	ldr	r1, [pc, #124]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800234a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800234e:	d106      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002350:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800235a:	60d3      	str	r3, [r2, #12]
 800235c:	e011      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002362:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002366:	d10c      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	2101      	movs	r1, #1
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f89a 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d02a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800238e:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002394:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800239c:	4907      	ldr	r1, [pc, #28]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ac:	d108      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ae:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4a02      	ldr	r2, [pc, #8]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b8:	60d3      	str	r3, [r2, #12]
 80023ba:	e013      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80023bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f869 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02f      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f0:	4b2c      	ldr	r3, [pc, #176]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023fe:	4929      	ldr	r1, [pc, #164]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800240a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800240e:	d10d      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	2102      	movs	r1, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f846 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d014      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	74bb      	strb	r3, [r7, #18]
 800242a:	e011      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002434:	d10c      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3320      	adds	r3, #32
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f925 	bl	800268c <RCCEx_PLLSAI2_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800245c:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800246c:	490d      	ldr	r1, [pc, #52]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002480:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002486:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002490:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002498:	7cbb      	ldrb	r3, [r7, #18]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000

080024a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024b6:	4b74      	ldr	r3, [pc, #464]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d018      	beq.n	80024f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024c2:	4b71      	ldr	r3, [pc, #452]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0203 	and.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10d      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
       ||
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024da:	4b6b      	ldr	r3, [pc, #428]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
       ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d047      	beq.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e044      	b.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d018      	beq.n	800252e <RCCEx_PLLSAI1_Config+0x86>
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d825      	bhi.n	800254c <RCCEx_PLLSAI1_Config+0xa4>
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <RCCEx_PLLSAI1_Config+0x62>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d009      	beq.n	800251c <RCCEx_PLLSAI1_Config+0x74>
 8002508:	e020      	b.n	800254c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800250a:	4b5f      	ldr	r3, [pc, #380]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11d      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251a:	e01a      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800251c:	4b5a      	ldr	r3, [pc, #360]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d116      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e013      	b.n	8002556 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800252e:	4b56      	ldr	r3, [pc, #344]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800253a:	4b53      	ldr	r3, [pc, #332]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800254a:	e006      	b.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      break;
 8002550:	e004      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255a:	bf00      	nop
    }

    if(status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002562:	4b49      	ldr	r3, [pc, #292]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	430b      	orrs	r3, r1
 8002578:	4943      	ldr	r1, [pc, #268]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257a:	4313      	orrs	r3, r2
 800257c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d17c      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002584:	4b40      	ldr	r3, [pc, #256]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3f      	ldr	r2, [pc, #252]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe fb12 	bl	8000bb8 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002596:	e009      	b.n	80025ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002598:	f7fe fb0e 	bl	8000bb8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d902      	bls.n	80025ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	73fb      	strb	r3, [r7, #15]
        break;
 80025aa:	e005      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ac:	4b36      	ldr	r3, [pc, #216]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ef      	bne.n	8002598 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d15f      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d110      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c4:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80025cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
 80025d4:	0211      	lsls	r1, r2, #8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	06d2      	lsls	r2, r2, #27
 80025dc:	430a      	orrs	r2, r1
 80025de:	492a      	ldr	r1, [pc, #168]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	610b      	str	r3, [r1, #16]
 80025e4:	e027      	b.n	8002636 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d112      	bne.n	8002612 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ec:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6892      	ldr	r2, [r2, #8]
 80025fc:	0211      	lsls	r1, r2, #8
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6912      	ldr	r2, [r2, #16]
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	0552      	lsls	r2, r2, #21
 8002608:	430a      	orrs	r2, r1
 800260a:	491f      	ldr	r1, [pc, #124]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	610b      	str	r3, [r1, #16]
 8002610:	e011      	b.n	8002636 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800261a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	0211      	lsls	r1, r2, #8
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6952      	ldr	r2, [r2, #20]
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	3a01      	subs	r2, #1
 800262c:	0652      	lsls	r2, r2, #25
 800262e:	430a      	orrs	r2, r1
 8002630:	4915      	ldr	r1, [pc, #84]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fab9 	bl	8000bb8 <HAL_GetTick>
 8002646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002648:	e009      	b.n	800265e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800264a:	f7fe fab5 	bl	8000bb8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d902      	bls.n	800265e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	73fb      	strb	r3, [r7, #15]
          break;
 800265c:	e005      	b.n	800266a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0ef      	beq.n	800264a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4903      	ldr	r1, [pc, #12]	@ (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000

0800268c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800269a:	4b69      	ldr	r3, [pc, #420]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d018      	beq.n	80026d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026a6:	4b66      	ldr	r3, [pc, #408]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0203 	and.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d10d      	bne.n	80026d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
       ||
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026be:	4b60      	ldr	r3, [pc, #384]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
       ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d047      	beq.n	8002762 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e044      	b.n	8002762 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d018      	beq.n	8002712 <RCCEx_PLLSAI2_Config+0x86>
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d825      	bhi.n	8002730 <RCCEx_PLLSAI2_Config+0xa4>
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d002      	beq.n	80026ee <RCCEx_PLLSAI2_Config+0x62>
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d009      	beq.n	8002700 <RCCEx_PLLSAI2_Config+0x74>
 80026ec:	e020      	b.n	8002730 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ee:	4b54      	ldr	r3, [pc, #336]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11d      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fe:	e01a      	b.n	8002736 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002700:	4b4f      	ldr	r3, [pc, #316]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002710:	e013      	b.n	800273a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002712:	4b4b      	ldr	r3, [pc, #300]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271e:	4b48      	ldr	r3, [pc, #288]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800272e:	e006      	b.n	800273e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e004      	b.n	8002740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002736:	bf00      	nop
 8002738:	e002      	b.n	8002740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002746:	4b3e      	ldr	r3, [pc, #248]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	430b      	orrs	r3, r1
 800275c:	4938      	ldr	r1, [pc, #224]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d166      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002768:	4b35      	ldr	r3, [pc, #212]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a34      	ldr	r2, [pc, #208]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002774:	f7fe fa20 	bl	8000bb8 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800277a:	e009      	b.n	8002790 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800277c:	f7fe fa1c 	bl	8000bb8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d902      	bls.n	8002790 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	73fb      	strb	r3, [r7, #15]
        break;
 800278e:	e005      	b.n	800279c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002790:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ef      	bne.n	800277c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d149      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d110      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a8:	4b25      	ldr	r3, [pc, #148]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80027b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6892      	ldr	r2, [r2, #8]
 80027b8:	0211      	lsls	r1, r2, #8
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	06d2      	lsls	r2, r2, #27
 80027c0:	430a      	orrs	r2, r1
 80027c2:	491f      	ldr	r1, [pc, #124]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	614b      	str	r3, [r1, #20]
 80027c8:	e011      	b.n	80027ee <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6892      	ldr	r2, [r2, #8]
 80027da:	0211      	lsls	r1, r2, #8
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6912      	ldr	r2, [r2, #16]
 80027e0:	0852      	lsrs	r2, r2, #1
 80027e2:	3a01      	subs	r2, #1
 80027e4:	0652      	lsls	r2, r2, #25
 80027e6:	430a      	orrs	r2, r1
 80027e8:	4915      	ldr	r1, [pc, #84]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027ee:	4b14      	ldr	r3, [pc, #80]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe f9dd 	bl	8000bb8 <HAL_GetTick>
 80027fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002800:	e009      	b.n	8002816 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002802:	f7fe f9d9 	bl	8000bb8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d902      	bls.n	8002816 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	73fb      	strb	r3, [r7, #15]
          break;
 8002814:	e005      	b.n	8002822 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ef      	beq.n	8002802 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d106      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	4903      	ldr	r1, [pc, #12]	@ (8002840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e049      	b.n	80028ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f841 	bl	80028f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f000 f9e0 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d001      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e04f      	b.n	80029c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a23      	ldr	r2, [pc, #140]	@ (80029cc <HAL_TIM_Base_Start_IT+0xc4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01d      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294a:	d018      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a19      	ldr	r2, [pc, #100]	@ (80029e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d115      	bne.n	80029aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b17      	ldr	r3, [pc, #92]	@ (80029e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b06      	cmp	r3, #6
 800298e:	d015      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0xb4>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002996:	d011      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a8:	e008      	b.n	80029bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e000      	b.n	80029be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40013400 	.word	0x40013400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	00010007 	.word	0x00010007

080029e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d020      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01b      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0202 	mvn.w	r2, #2
 8002a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8e9 	bl	8002c0a <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8db 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8ec 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d020      	beq.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0204 	mvn.w	r2, #4
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8c3 	bl	8002c0a <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8b5 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8c6 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d020      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0208 	mvn.w	r2, #8
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f89d 	bl	8002c0a <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f88f 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8a0 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d020      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0210 	mvn.w	r2, #16
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2208      	movs	r2, #8
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f877 	bl	8002c0a <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f869 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f87a 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0201 	mvn.w	r2, #1
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd fe8a 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00c      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f913 	bl	8002da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f90b 	bl	8002dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f834 	bl	8002c32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f06f 0220 	mvn.w	r2, #32
 8002be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f8d3 	bl	8002d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a46      	ldr	r2, [pc, #280]	@ (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a43      	ldr	r2, [pc, #268]	@ (8002d78 <TIM_Base_SetConfig+0x130>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a42      	ldr	r2, [pc, #264]	@ (8002d7c <TIM_Base_SetConfig+0x134>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a41      	ldr	r2, [pc, #260]	@ (8002d80 <TIM_Base_SetConfig+0x138>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a40      	ldr	r2, [pc, #256]	@ (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a35      	ldr	r2, [pc, #212]	@ (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <TIM_Base_SetConfig+0x9a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca8:	d01b      	beq.n	8002ce2 <TIM_Base_SetConfig+0x9a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a32      	ldr	r2, [pc, #200]	@ (8002d78 <TIM_Base_SetConfig+0x130>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d017      	beq.n	8002ce2 <TIM_Base_SetConfig+0x9a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a31      	ldr	r2, [pc, #196]	@ (8002d7c <TIM_Base_SetConfig+0x134>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <TIM_Base_SetConfig+0x9a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a30      	ldr	r2, [pc, #192]	@ (8002d80 <TIM_Base_SetConfig+0x138>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00f      	beq.n	8002ce2 <TIM_Base_SetConfig+0x9a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <TIM_Base_SetConfig+0x9a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8002d88 <TIM_Base_SetConfig+0x140>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <TIM_Base_SetConfig+0x9a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <TIM_Base_SetConfig+0x144>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002d90 <TIM_Base_SetConfig+0x148>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a16      	ldr	r2, [pc, #88]	@ (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00f      	beq.n	8002d40 <TIM_Base_SetConfig+0xf8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a18      	ldr	r2, [pc, #96]	@ (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <TIM_Base_SetConfig+0xf8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a17      	ldr	r2, [pc, #92]	@ (8002d88 <TIM_Base_SetConfig+0x140>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0xf8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a16      	ldr	r2, [pc, #88]	@ (8002d8c <TIM_Base_SetConfig+0x144>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0xf8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a15      	ldr	r2, [pc, #84]	@ (8002d90 <TIM_Base_SetConfig+0x148>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]
  }
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40013400 	.word	0x40013400
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800

08002d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e040      	b.n	8002e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fd78 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	@ 0x24
 8002dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fb6a 	bl	80034f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f8af 	bl	8002f80 <UART_SetConfig>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e01b      	b.n	8002e64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fbe9 	bl	8003634 <UART_CheckIdleState>
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d177      	bne.n	8002f74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_Transmit+0x24>
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e070      	b.n	8002f76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2221      	movs	r2, #33	@ 0x21
 8002ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea2:	f7fd fe89 	bl	8000bb8 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec0:	d108      	bne.n	8002ed4 <HAL_UART_Transmit+0x68>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e003      	b.n	8002edc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002edc:	e02f      	b.n	8002f3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	@ 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fc4b 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e03b      	b.n	8002f76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f10:	b292      	uxth	r2, r2
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	3302      	adds	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e007      	b.n	8002f2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1c9      	bne.n	8002ede <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2140      	movs	r1, #64	@ 0x40
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fc15 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e005      	b.n	8002f76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b08a      	sub	sp, #40	@ 0x28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4ba4      	ldr	r3, [pc, #656]	@ (8003240 <UART_SetConfig+0x2c0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a99      	ldr	r2, [pc, #612]	@ (8003244 <UART_SetConfig+0x2c4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a90      	ldr	r2, [pc, #576]	@ (8003248 <UART_SetConfig+0x2c8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d126      	bne.n	8003058 <UART_SetConfig+0xd8>
 800300a:	4b90      	ldr	r3, [pc, #576]	@ (800324c <UART_SetConfig+0x2cc>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b03      	cmp	r3, #3
 8003016:	d81b      	bhi.n	8003050 <UART_SetConfig+0xd0>
 8003018:	a201      	add	r2, pc, #4	@ (adr r2, 8003020 <UART_SetConfig+0xa0>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003031 	.word	0x08003031
 8003024:	08003041 	.word	0x08003041
 8003028:	08003039 	.word	0x08003039
 800302c:	08003049 	.word	0x08003049
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003036:	e116      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003038:	2302      	movs	r3, #2
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303e:	e112      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003040:	2304      	movs	r3, #4
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003046:	e10e      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003048:	2308      	movs	r3, #8
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304e:	e10a      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003050:	2310      	movs	r3, #16
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003056:	e106      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a7c      	ldr	r2, [pc, #496]	@ (8003250 <UART_SetConfig+0x2d0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d138      	bne.n	80030d4 <UART_SetConfig+0x154>
 8003062:	4b7a      	ldr	r3, [pc, #488]	@ (800324c <UART_SetConfig+0x2cc>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b0c      	cmp	r3, #12
 800306e:	d82d      	bhi.n	80030cc <UART_SetConfig+0x14c>
 8003070:	a201      	add	r2, pc, #4	@ (adr r2, 8003078 <UART_SetConfig+0xf8>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080030cd 	.word	0x080030cd
 8003080:	080030cd 	.word	0x080030cd
 8003084:	080030cd 	.word	0x080030cd
 8003088:	080030bd 	.word	0x080030bd
 800308c:	080030cd 	.word	0x080030cd
 8003090:	080030cd 	.word	0x080030cd
 8003094:	080030cd 	.word	0x080030cd
 8003098:	080030b5 	.word	0x080030b5
 800309c:	080030cd 	.word	0x080030cd
 80030a0:	080030cd 	.word	0x080030cd
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	080030c5 	.word	0x080030c5
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b2:	e0d8      	b.n	8003266 <UART_SetConfig+0x2e6>
 80030b4:	2302      	movs	r3, #2
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ba:	e0d4      	b.n	8003266 <UART_SetConfig+0x2e6>
 80030bc:	2304      	movs	r3, #4
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c2:	e0d0      	b.n	8003266 <UART_SetConfig+0x2e6>
 80030c4:	2308      	movs	r3, #8
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ca:	e0cc      	b.n	8003266 <UART_SetConfig+0x2e6>
 80030cc:	2310      	movs	r3, #16
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d2:	e0c8      	b.n	8003266 <UART_SetConfig+0x2e6>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5e      	ldr	r2, [pc, #376]	@ (8003254 <UART_SetConfig+0x2d4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d125      	bne.n	800312a <UART_SetConfig+0x1aa>
 80030de:	4b5b      	ldr	r3, [pc, #364]	@ (800324c <UART_SetConfig+0x2cc>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030e8:	2b30      	cmp	r3, #48	@ 0x30
 80030ea:	d016      	beq.n	800311a <UART_SetConfig+0x19a>
 80030ec:	2b30      	cmp	r3, #48	@ 0x30
 80030ee:	d818      	bhi.n	8003122 <UART_SetConfig+0x1a2>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d00a      	beq.n	800310a <UART_SetConfig+0x18a>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d814      	bhi.n	8003122 <UART_SetConfig+0x1a2>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <UART_SetConfig+0x182>
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d008      	beq.n	8003112 <UART_SetConfig+0x192>
 8003100:	e00f      	b.n	8003122 <UART_SetConfig+0x1a2>
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003108:	e0ad      	b.n	8003266 <UART_SetConfig+0x2e6>
 800310a:	2302      	movs	r3, #2
 800310c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003110:	e0a9      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003112:	2304      	movs	r3, #4
 8003114:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003118:	e0a5      	b.n	8003266 <UART_SetConfig+0x2e6>
 800311a:	2308      	movs	r3, #8
 800311c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003120:	e0a1      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003122:	2310      	movs	r3, #16
 8003124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003128:	e09d      	b.n	8003266 <UART_SetConfig+0x2e6>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a4a      	ldr	r2, [pc, #296]	@ (8003258 <UART_SetConfig+0x2d8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d125      	bne.n	8003180 <UART_SetConfig+0x200>
 8003134:	4b45      	ldr	r3, [pc, #276]	@ (800324c <UART_SetConfig+0x2cc>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800313e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003140:	d016      	beq.n	8003170 <UART_SetConfig+0x1f0>
 8003142:	2bc0      	cmp	r3, #192	@ 0xc0
 8003144:	d818      	bhi.n	8003178 <UART_SetConfig+0x1f8>
 8003146:	2b80      	cmp	r3, #128	@ 0x80
 8003148:	d00a      	beq.n	8003160 <UART_SetConfig+0x1e0>
 800314a:	2b80      	cmp	r3, #128	@ 0x80
 800314c:	d814      	bhi.n	8003178 <UART_SetConfig+0x1f8>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <UART_SetConfig+0x1d8>
 8003152:	2b40      	cmp	r3, #64	@ 0x40
 8003154:	d008      	beq.n	8003168 <UART_SetConfig+0x1e8>
 8003156:	e00f      	b.n	8003178 <UART_SetConfig+0x1f8>
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315e:	e082      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003160:	2302      	movs	r3, #2
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003166:	e07e      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003168:	2304      	movs	r3, #4
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316e:	e07a      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003170:	2308      	movs	r3, #8
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003176:	e076      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003178:	2310      	movs	r3, #16
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e072      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a35      	ldr	r2, [pc, #212]	@ (800325c <UART_SetConfig+0x2dc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d12a      	bne.n	80031e0 <UART_SetConfig+0x260>
 800318a:	4b30      	ldr	r3, [pc, #192]	@ (800324c <UART_SetConfig+0x2cc>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003198:	d01a      	beq.n	80031d0 <UART_SetConfig+0x250>
 800319a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800319e:	d81b      	bhi.n	80031d8 <UART_SetConfig+0x258>
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a4:	d00c      	beq.n	80031c0 <UART_SetConfig+0x240>
 80031a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031aa:	d815      	bhi.n	80031d8 <UART_SetConfig+0x258>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <UART_SetConfig+0x238>
 80031b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b4:	d008      	beq.n	80031c8 <UART_SetConfig+0x248>
 80031b6:	e00f      	b.n	80031d8 <UART_SetConfig+0x258>
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031be:	e052      	b.n	8003266 <UART_SetConfig+0x2e6>
 80031c0:	2302      	movs	r3, #2
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c6:	e04e      	b.n	8003266 <UART_SetConfig+0x2e6>
 80031c8:	2304      	movs	r3, #4
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ce:	e04a      	b.n	8003266 <UART_SetConfig+0x2e6>
 80031d0:	2308      	movs	r3, #8
 80031d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d6:	e046      	b.n	8003266 <UART_SetConfig+0x2e6>
 80031d8:	2310      	movs	r3, #16
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031de:	e042      	b.n	8003266 <UART_SetConfig+0x2e6>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <UART_SetConfig+0x2c4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d13a      	bne.n	8003260 <UART_SetConfig+0x2e0>
 80031ea:	4b18      	ldr	r3, [pc, #96]	@ (800324c <UART_SetConfig+0x2cc>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031f8:	d01a      	beq.n	8003230 <UART_SetConfig+0x2b0>
 80031fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031fe:	d81b      	bhi.n	8003238 <UART_SetConfig+0x2b8>
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003204:	d00c      	beq.n	8003220 <UART_SetConfig+0x2a0>
 8003206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800320a:	d815      	bhi.n	8003238 <UART_SetConfig+0x2b8>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <UART_SetConfig+0x298>
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003214:	d008      	beq.n	8003228 <UART_SetConfig+0x2a8>
 8003216:	e00f      	b.n	8003238 <UART_SetConfig+0x2b8>
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e022      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003220:	2302      	movs	r3, #2
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003226:	e01e      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003228:	2304      	movs	r3, #4
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322e:	e01a      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003230:	2308      	movs	r3, #8
 8003232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003236:	e016      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003238:	2310      	movs	r3, #16
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323e:	e012      	b.n	8003266 <UART_SetConfig+0x2e6>
 8003240:	efff69f3 	.word	0xefff69f3
 8003244:	40008000 	.word	0x40008000
 8003248:	40013800 	.word	0x40013800
 800324c:	40021000 	.word	0x40021000
 8003250:	40004400 	.word	0x40004400
 8003254:	40004800 	.word	0x40004800
 8003258:	40004c00 	.word	0x40004c00
 800325c:	40005000 	.word	0x40005000
 8003260:	2310      	movs	r3, #16
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a9f      	ldr	r2, [pc, #636]	@ (80034e8 <UART_SetConfig+0x568>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d17a      	bne.n	8003366 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003270:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003274:	2b08      	cmp	r3, #8
 8003276:	d824      	bhi.n	80032c2 <UART_SetConfig+0x342>
 8003278:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <UART_SetConfig+0x300>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032a5 	.word	0x080032a5
 8003284:	080032c3 	.word	0x080032c3
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032c3 	.word	0x080032c3
 8003290:	080032b3 	.word	0x080032b3
 8003294:	080032c3 	.word	0x080032c3
 8003298:	080032c3 	.word	0x080032c3
 800329c:	080032c3 	.word	0x080032c3
 80032a0:	080032bb 	.word	0x080032bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7fe fd46 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 80032a8:	61f8      	str	r0, [r7, #28]
        break;
 80032aa:	e010      	b.n	80032ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ac:	4b8f      	ldr	r3, [pc, #572]	@ (80034ec <UART_SetConfig+0x56c>)
 80032ae:	61fb      	str	r3, [r7, #28]
        break;
 80032b0:	e00d      	b.n	80032ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b2:	f7fe fca7 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 80032b6:	61f8      	str	r0, [r7, #28]
        break;
 80032b8:	e009      	b.n	80032ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032be:	61fb      	str	r3, [r7, #28]
        break;
 80032c0:	e005      	b.n	80032ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80fb 	beq.w	80034cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d305      	bcc.n	80032f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d903      	bls.n	80032fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032f8:	e0e8      	b.n	80034cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2200      	movs	r2, #0
 80032fe:	461c      	mov	r4, r3
 8003300:	4615      	mov	r5, r2
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	022b      	lsls	r3, r5, #8
 800330c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003310:	0222      	lsls	r2, r4, #8
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	6849      	ldr	r1, [r1, #4]
 8003316:	0849      	lsrs	r1, r1, #1
 8003318:	2000      	movs	r0, #0
 800331a:	4688      	mov	r8, r1
 800331c:	4681      	mov	r9, r0
 800331e:	eb12 0a08 	adds.w	sl, r2, r8
 8003322:	eb43 0b09 	adc.w	fp, r3, r9
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003334:	4650      	mov	r0, sl
 8003336:	4659      	mov	r1, fp
 8003338:	f7fc ff62 	bl	8000200 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4613      	mov	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800334a:	d308      	bcc.n	800335e <UART_SetConfig+0x3de>
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003352:	d204      	bcs.n	800335e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e0b6      	b.n	80034cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003364:	e0b2      	b.n	80034cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800336e:	d15e      	bne.n	800342e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003370:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003374:	2b08      	cmp	r3, #8
 8003376:	d828      	bhi.n	80033ca <UART_SetConfig+0x44a>
 8003378:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <UART_SetConfig+0x400>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	080033a5 	.word	0x080033a5
 8003384:	080033ad 	.word	0x080033ad
 8003388:	080033b5 	.word	0x080033b5
 800338c:	080033cb 	.word	0x080033cb
 8003390:	080033bb 	.word	0x080033bb
 8003394:	080033cb 	.word	0x080033cb
 8003398:	080033cb 	.word	0x080033cb
 800339c:	080033cb 	.word	0x080033cb
 80033a0:	080033c3 	.word	0x080033c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a4:	f7fe fcc6 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 80033a8:	61f8      	str	r0, [r7, #28]
        break;
 80033aa:	e014      	b.n	80033d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033ac:	f7fe fcd8 	bl	8001d60 <HAL_RCC_GetPCLK2Freq>
 80033b0:	61f8      	str	r0, [r7, #28]
        break;
 80033b2:	e010      	b.n	80033d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b4:	4b4d      	ldr	r3, [pc, #308]	@ (80034ec <UART_SetConfig+0x56c>)
 80033b6:	61fb      	str	r3, [r7, #28]
        break;
 80033b8:	e00d      	b.n	80033d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ba:	f7fe fc23 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 80033be:	61f8      	str	r0, [r7, #28]
        break;
 80033c0:	e009      	b.n	80033d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c6:	61fb      	str	r3, [r7, #28]
        break;
 80033c8:	e005      	b.n	80033d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d077      	beq.n	80034cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005a      	lsls	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	441a      	add	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b0f      	cmp	r3, #15
 80033f6:	d916      	bls.n	8003426 <UART_SetConfig+0x4a6>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033fe:	d212      	bcs.n	8003426 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	b29b      	uxth	r3, r3
 8003404:	f023 030f 	bic.w	r3, r3, #15
 8003408:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	b29b      	uxth	r3, r3
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	b29a      	uxth	r2, r3
 8003416:	8afb      	ldrh	r3, [r7, #22]
 8003418:	4313      	orrs	r3, r2
 800341a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	8afa      	ldrh	r2, [r7, #22]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	e052      	b.n	80034cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800342c:	e04e      	b.n	80034cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800342e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003432:	2b08      	cmp	r3, #8
 8003434:	d827      	bhi.n	8003486 <UART_SetConfig+0x506>
 8003436:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <UART_SetConfig+0x4bc>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003461 	.word	0x08003461
 8003440:	08003469 	.word	0x08003469
 8003444:	08003471 	.word	0x08003471
 8003448:	08003487 	.word	0x08003487
 800344c:	08003477 	.word	0x08003477
 8003450:	08003487 	.word	0x08003487
 8003454:	08003487 	.word	0x08003487
 8003458:	08003487 	.word	0x08003487
 800345c:	0800347f 	.word	0x0800347f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003460:	f7fe fc68 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8003464:	61f8      	str	r0, [r7, #28]
        break;
 8003466:	e014      	b.n	8003492 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7fe fc7a 	bl	8001d60 <HAL_RCC_GetPCLK2Freq>
 800346c:	61f8      	str	r0, [r7, #28]
        break;
 800346e:	e010      	b.n	8003492 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003470:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <UART_SetConfig+0x56c>)
 8003472:	61fb      	str	r3, [r7, #28]
        break;
 8003474:	e00d      	b.n	8003492 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003476:	f7fe fbc5 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 800347a:	61f8      	str	r0, [r7, #28]
        break;
 800347c:	e009      	b.n	8003492 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003482:	61fb      	str	r3, [r7, #28]
        break;
 8003484:	e005      	b.n	8003492 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003490:	bf00      	nop
    }

    if (pclk != 0U)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d019      	beq.n	80034cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	085a      	lsrs	r2, r3, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	441a      	add	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	d909      	bls.n	80034c6 <UART_SetConfig+0x546>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b8:	d205      	bcs.n	80034c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	e002      	b.n	80034cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3728      	adds	r7, #40	@ 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e6:	bf00      	nop
 80034e8:	40008000 	.word	0x40008000
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01a      	beq.n	8003606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ee:	d10a      	bne.n	8003606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b098      	sub	sp, #96	@ 0x60
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003644:	f7fd fab8 	bl	8000bb8 <HAL_GetTick>
 8003648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d12e      	bne.n	80036b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f88c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d021      	beq.n	80036b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003686:	653b      	str	r3, [r7, #80]	@ 0x50
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003690:	647b      	str	r3, [r7, #68]	@ 0x44
 8003692:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800369e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e062      	b.n	800377c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d149      	bne.n	8003758 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f856 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d03c      	beq.n	8003758 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	623b      	str	r3, [r7, #32]
   return(result);
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003730:	61fa      	str	r2, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	617b      	str	r3, [r7, #20]
   return(result);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e5      	bne.n	8003710 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e011      	b.n	800377c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3758      	adds	r7, #88	@ 0x58
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e04f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800379c:	d04b      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd fa0b 	bl	8000bb8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e04e      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d037      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b80      	cmp	r3, #128	@ 0x80
 80037ca:	d034      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d031      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d110      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f838 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2208      	movs	r2, #8
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e029      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003810:	d111      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800381a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f81e 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e00f      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0a0      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b095      	sub	sp, #84	@ 0x54
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800387a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003884:	643b      	str	r3, [r7, #64]	@ 0x40
 8003886:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800388a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e6      	bne.n	8003866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3308      	adds	r3, #8
 80038b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d118      	bne.n	8003906 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f023 0310 	bic.w	r3, r3, #16
 80038e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800391a:	bf00      	nop
 800391c:	3754      	adds	r7, #84	@ 0x54
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <__NVIC_SetPriority>:
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	db0a      	blt.n	8003952 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	490c      	ldr	r1, [pc, #48]	@ (8003974 <__NVIC_SetPriority+0x4c>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	440b      	add	r3, r1
 800394c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003950:	e00a      	b.n	8003968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4908      	ldr	r1, [pc, #32]	@ (8003978 <__NVIC_SetPriority+0x50>)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3b04      	subs	r3, #4
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	440b      	add	r3, r1
 8003966:	761a      	strb	r2, [r3, #24]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000e100 	.word	0xe000e100
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003980:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <SysTick_Handler+0x1c>)
 8003982:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003984:	f002 f996 	bl	8005cb4 <xTaskGetSchedulerState>
 8003988:	4603      	mov	r3, r0
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800398e:	f003 f88b 	bl	8006aa8 <xPortSysTickHandler>
  }
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	e000e010 	.word	0xe000e010

0800399c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039a0:	2100      	movs	r1, #0
 80039a2:	f06f 0004 	mvn.w	r0, #4
 80039a6:	f7ff ffbf 	bl	8003928 <__NVIC_SetPriority>
#endif
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b6:	f3ef 8305 	mrs	r3, IPSR
 80039ba:	603b      	str	r3, [r7, #0]
  return(result);
 80039bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039c2:	f06f 0305 	mvn.w	r3, #5
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	e00c      	b.n	80039e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039ca:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <osKernelInitialize+0x44>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d105      	bne.n	80039de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039d2:	4b08      	ldr	r3, [pc, #32]	@ (80039f4 <osKernelInitialize+0x44>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039d8:	2300      	movs	r3, #0
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	e002      	b.n	80039e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039e4:	687b      	ldr	r3, [r7, #4]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000164 	.word	0x20000164

080039f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039fe:	f3ef 8305 	mrs	r3, IPSR
 8003a02:	603b      	str	r3, [r7, #0]
  return(result);
 8003a04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a0a:	f06f 0305 	mvn.w	r3, #5
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	e010      	b.n	8003a34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a12:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <osKernelStart+0x48>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d109      	bne.n	8003a2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a1a:	f7ff ffbf 	bl	800399c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a1e:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <osKernelStart+0x48>)
 8003a20:	2202      	movs	r2, #2
 8003a22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a24:	f001 fce2 	bl	80053ec <vTaskStartScheduler>
      stat = osOK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e002      	b.n	8003a34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a34:	687b      	ldr	r3, [r7, #4]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000164 	.word	0x20000164

08003a44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08e      	sub	sp, #56	@ 0x38
 8003a48:	af04      	add	r7, sp, #16
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a54:	f3ef 8305 	mrs	r3, IPSR
 8003a58:	617b      	str	r3, [r7, #20]
  return(result);
 8003a5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d17e      	bne.n	8003b5e <osThreadNew+0x11a>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d07b      	beq.n	8003b5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a66:	2380      	movs	r3, #128	@ 0x80
 8003a68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a6a:	2318      	movs	r3, #24
 8003a6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d045      	beq.n	8003b0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <osThreadNew+0x48>
        name = attr->name;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <osThreadNew+0x6e>
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b38      	cmp	r3, #56	@ 0x38
 8003aa4:	d805      	bhi.n	8003ab2 <osThreadNew+0x6e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <osThreadNew+0x72>
        return (NULL);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e054      	b.n	8003b60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00e      	beq.n	8003aec <osThreadNew+0xa8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2ba7      	cmp	r3, #167	@ 0xa7
 8003ad4:	d90a      	bls.n	8003aec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <osThreadNew+0xa8>
        mem = 1;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e010      	b.n	8003b0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10c      	bne.n	8003b0e <osThreadNew+0xca>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d108      	bne.n	8003b0e <osThreadNew+0xca>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <osThreadNew+0xca>
          mem = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	e001      	b.n	8003b0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d110      	bne.n	8003b36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b1c:	9202      	str	r2, [sp, #8]
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f001 fa6a 	bl	8005004 <xTaskCreateStatic>
 8003b30:	4603      	mov	r3, r0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	e013      	b.n	8003b5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d110      	bne.n	8003b5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	f107 0310 	add.w	r3, r7, #16
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f001 fab8 	bl	80050c4 <xTaskCreate>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d001      	beq.n	8003b5e <osThreadNew+0x11a>
            hTask = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b5e:	693b      	ldr	r3, [r7, #16]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3728      	adds	r7, #40	@ 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b70:	f3ef 8305 	mrs	r3, IPSR
 8003b74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <osDelay+0x1c>
    stat = osErrorISR;
 8003b7c:	f06f 0305 	mvn.w	r3, #5
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e007      	b.n	8003b94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f001 fbf6 	bl	8005380 <vTaskDelay>
    }
  }

  return (stat);
 8003b94:	68fb      	ldr	r3, [r7, #12]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b08a      	sub	sp, #40	@ 0x28
 8003ba2:	af02      	add	r7, sp, #8
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bae:	f3ef 8305 	mrs	r3, IPSR
 8003bb2:	613b      	str	r3, [r7, #16]
  return(result);
 8003bb4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d175      	bne.n	8003ca6 <osSemaphoreNew+0x108>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d072      	beq.n	8003ca6 <osSemaphoreNew+0x108>
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d86e      	bhi.n	8003ca6 <osSemaphoreNew+0x108>
    mem = -1;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bcc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <osSemaphoreNew+0x4c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b4f      	cmp	r3, #79	@ 0x4f
 8003be2:	d902      	bls.n	8003bea <osSemaphoreNew+0x4c>
        mem = 1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	e00c      	b.n	8003c04 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <osSemaphoreNew+0x66>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <osSemaphoreNew+0x66>
          mem = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	e001      	b.n	8003c04 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c0a:	d04c      	beq.n	8003ca6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d128      	bne.n	8003c64 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10a      	bne.n	8003c2e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	9200      	str	r2, [sp, #0]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2100      	movs	r1, #0
 8003c24:	2001      	movs	r0, #1
 8003c26:	f000 fa2b 	bl	8004080 <xQueueGenericCreateStatic>
 8003c2a:	61f8      	str	r0, [r7, #28]
 8003c2c:	e005      	b.n	8003c3a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003c2e:	2203      	movs	r2, #3
 8003c30:	2100      	movs	r1, #0
 8003c32:	2001      	movs	r0, #1
 8003c34:	f000 faa1 	bl	800417a <xQueueGenericCreate>
 8003c38:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d022      	beq.n	8003c86 <osSemaphoreNew+0xe8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01f      	beq.n	8003c86 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	69f8      	ldr	r0, [r7, #28]
 8003c4e:	f000 fb61 	bl	8004314 <xQueueGenericSend>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d016      	beq.n	8003c86 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003c58:	69f8      	ldr	r0, [r7, #28]
 8003c5a:	f000 ffff 	bl	8004c5c <vQueueDelete>
            hSemaphore = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	e010      	b.n	8003c86 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d108      	bne.n	8003c7c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fadf 	bl	8004236 <xQueueCreateCountingSemaphoreStatic>
 8003c78:	61f8      	str	r0, [r7, #28]
 8003c7a:	e004      	b.n	8003c86 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fb12 	bl	80042a8 <xQueueCreateCountingSemaphore>
 8003c84:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00c      	beq.n	8003ca6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <osSemaphoreNew+0xfc>
          name = attr->name;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e001      	b.n	8003c9e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	69f8      	ldr	r0, [r7, #28]
 8003ca2:	f001 f927 	bl	8004ef4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003cc8:	f06f 0303 	mvn.w	r3, #3
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e039      	b.n	8003d44 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cd0:	f3ef 8305 	mrs	r3, IPSR
 8003cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d022      	beq.n	8003d22 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003ce2:	f06f 0303 	mvn.w	r3, #3
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e02c      	b.n	8003d44 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003cee:	f107 0308 	add.w	r3, r7, #8
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	6938      	ldr	r0, [r7, #16]
 8003cf8:	f000 ff2e 	bl	8004b58 <xQueueReceiveFromISR>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d003      	beq.n	8003d0a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003d02:	f06f 0302 	mvn.w	r3, #2
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e01c      	b.n	8003d44 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d019      	beq.n	8003d44 <osSemaphoreAcquire+0x94>
 8003d10:	4b0f      	ldr	r3, [pc, #60]	@ (8003d50 <osSemaphoreAcquire+0xa0>)
 8003d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	e010      	b.n	8003d44 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	6938      	ldr	r0, [r7, #16]
 8003d26:	f000 fe07 	bl	8004938 <xQueueSemaphoreTake>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d009      	beq.n	8003d44 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003d36:	f06f 0301 	mvn.w	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e002      	b.n	8003d44 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003d3e:	f06f 0302 	mvn.w	r3, #2
 8003d42:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003d44:	697b      	ldr	r3, [r7, #20]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	e000ed04 	.word	0xe000ed04

08003d54 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003d6a:	f06f 0303 	mvn.w	r3, #3
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e02c      	b.n	8003dcc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d72:	f3ef 8305 	mrs	r3, IPSR
 8003d76:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d78:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01a      	beq.n	8003db4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	4619      	mov	r1, r3
 8003d88:	6938      	ldr	r0, [r7, #16]
 8003d8a:	f000 fc63 	bl	8004654 <xQueueGiveFromISR>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d003      	beq.n	8003d9c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003d94:	f06f 0302 	mvn.w	r3, #2
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e017      	b.n	8003dcc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <osSemaphoreRelease+0x78>
 8003da2:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <osSemaphoreRelease+0x84>)
 8003da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	e00b      	b.n	8003dcc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003db4:	2300      	movs	r3, #0
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	6938      	ldr	r0, [r7, #16]
 8003dbc:	f000 faaa 	bl	8004314 <xQueueGenericSend>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d002      	beq.n	8003dcc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003dc6:	f06f 0302 	mvn.w	r3, #2
 8003dca:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a07      	ldr	r2, [pc, #28]	@ (8003e08 <vApplicationGetIdleTaskMemory+0x2c>)
 8003dec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4a06      	ldr	r2, [pc, #24]	@ (8003e0c <vApplicationGetIdleTaskMemory+0x30>)
 8003df2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2280      	movs	r2, #128	@ 0x80
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000168 	.word	0x20000168
 8003e0c:	20000210 	.word	0x20000210

08003e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a07      	ldr	r2, [pc, #28]	@ (8003e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8003e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4a06      	ldr	r2, [pc, #24]	@ (8003e40 <vApplicationGetTimerTaskMemory+0x30>)
 8003e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e2e:	601a      	str	r2, [r3, #0]
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	20000410 	.word	0x20000410
 8003e40:	200004b8 	.word	0x200004b8

08003e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f103 0208 	add.w	r2, r3, #8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f103 0208 	add.w	r2, r3, #8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f103 0208 	add.w	r2, r3, #8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003efc:	d103      	bne.n	8003f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e00c      	b.n	8003f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e002      	b.n	8003f14 <vListInsert+0x2e>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d2f6      	bcs.n	8003f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	601a      	str	r2, [r3, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6852      	ldr	r2, [r2, #4]
 8003f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d103      	bne.n	8003f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1e5a      	subs	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fd8:	f002 fcd6 	bl	8006988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	441a      	add	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004008:	3b01      	subs	r3, #1
 800400a:	68f9      	ldr	r1, [r7, #12]
 800400c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	441a      	add	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	22ff      	movs	r2, #255	@ 0xff
 800401c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	22ff      	movs	r2, #255	@ 0xff
 8004024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d114      	bne.n	8004058 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01a      	beq.n	800406c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3310      	adds	r3, #16
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fc74 	bl	8005928 <xTaskRemoveFromEventList>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004046:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <xQueueGenericReset+0xd0>)
 8004048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	e009      	b.n	800406c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3310      	adds	r3, #16
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fef1 	bl	8003e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3324      	adds	r3, #36	@ 0x24
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff feec 	bl	8003e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800406c:	f002 fcbe 	bl	80069ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004070:	2301      	movs	r3, #1
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	@ 0x38
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <xQueueGenericCreateStatic+0x56>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <xQueueGenericCreateStatic+0x5a>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <xQueueGenericCreateStatic+0x5c>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	623b      	str	r3, [r7, #32]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <xQueueGenericCreateStatic+0x84>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <xQueueGenericCreateStatic+0x88>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <xQueueGenericCreateStatic+0x8a>
 8004108:	2300      	movs	r3, #0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	61fb      	str	r3, [r7, #28]
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	e7fd      	b.n	8004122 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004126:	2350      	movs	r3, #80	@ 0x50
 8004128:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b50      	cmp	r3, #80	@ 0x50
 800412e:	d00b      	beq.n	8004148 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	61bb      	str	r3, [r7, #24]
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004148:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800415c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f840 	bl	80041f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004172:	4618      	mov	r0, r3
 8004174:	3730      	adds	r7, #48	@ 0x30
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800417a:	b580      	push	{r7, lr}
 800417c:	b08a      	sub	sp, #40	@ 0x28
 800417e:	af02      	add	r7, sp, #8
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	4613      	mov	r3, r2
 8004186:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	613b      	str	r3, [r7, #16]
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	e7fd      	b.n	80041a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	fb02 f303 	mul.w	r3, r2, r3
 80041ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	3350      	adds	r3, #80	@ 0x50
 80041b4:	4618      	mov	r0, r3
 80041b6:	f002 fd09 	bl	8006bcc <pvPortMalloc>
 80041ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3350      	adds	r3, #80	@ 0x50
 80041ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041d4:	79fa      	ldrb	r2, [r7, #7]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	4613      	mov	r3, r2
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f805 	bl	80041f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041e6:	69bb      	ldr	r3, [r7, #24]
	}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e002      	b.n	8004212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800421e:	2101      	movs	r1, #1
 8004220:	69b8      	ldr	r0, [r7, #24]
 8004222:	f7ff fec3 	bl	8003fac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004236:	b580      	push	{r7, lr}
 8004238:	b08a      	sub	sp, #40	@ 0x28
 800423a:	af02      	add	r7, sp, #8
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61bb      	str	r3, [r7, #24]
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d90b      	bls.n	8004280 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	617b      	str	r3, [r7, #20]
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004280:	2302      	movs	r3, #2
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	2100      	movs	r1, #0
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff fef8 	bl	8004080 <xQueueGenericCreateStatic>
 8004290:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800429e:	69fb      	ldr	r3, [r7, #28]
	}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	613b      	str	r3, [r7, #16]
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d90b      	bls.n	80042f0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	60fb      	str	r3, [r7, #12]
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80042f0:	2202      	movs	r2, #2
 80042f2:	2100      	movs	r1, #0
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff40 	bl	800417a <xQueueGenericCreate>
 80042fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004308:	697b      	ldr	r3, [r7, #20]
	}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08e      	sub	sp, #56	@ 0x38
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004322:	2300      	movs	r3, #0
 8004324:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800432a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <xQueueGenericSend+0x34>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004342:	bf00      	nop
 8004344:	bf00      	nop
 8004346:	e7fd      	b.n	8004344 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <xQueueGenericSend+0x42>
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <xQueueGenericSend+0x46>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <xQueueGenericSend+0x48>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <xQueueGenericSend+0x64>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d103      	bne.n	8004386 <xQueueGenericSend+0x72>
 800437e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <xQueueGenericSend+0x76>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <xQueueGenericSend+0x78>
 800438a:	2300      	movs	r3, #0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <xQueueGenericSend+0x94>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	623b      	str	r3, [r7, #32]
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043a8:	f001 fc84 	bl	8005cb4 <xTaskGetSchedulerState>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <xQueueGenericSend+0xa4>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <xQueueGenericSend+0xa8>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <xQueueGenericSend+0xaa>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <xQueueGenericSend+0xc6>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61fb      	str	r3, [r7, #28]
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	e7fd      	b.n	80043d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043da:	f002 fad5 	bl	8006988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <xQueueGenericSend+0xdc>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d129      	bne.n	8004444 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043f6:	f000 fc6d 	bl	8004cd4 <prvCopyDataToQueue>
 80043fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	3324      	adds	r3, #36	@ 0x24
 8004408:	4618      	mov	r0, r3
 800440a:	f001 fa8d 	bl	8005928 <xTaskRemoveFromEventList>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004414:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <xQueueGenericSend+0x200>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	e00a      	b.n	800443c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800442c:	4b39      	ldr	r3, [pc, #228]	@ (8004514 <xQueueGenericSend+0x200>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800443c:	f002 fad6 	bl	80069ec <vPortExitCritical>
				return pdPASS;
 8004440:	2301      	movs	r3, #1
 8004442:	e063      	b.n	800450c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800444a:	f002 facf 	bl	80069ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800444e:	2300      	movs	r3, #0
 8004450:	e05c      	b.n	800450c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004458:	f107 0314 	add.w	r3, r7, #20
 800445c:	4618      	mov	r0, r3
 800445e:	f001 fac7 	bl	80059f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004462:	2301      	movs	r3, #1
 8004464:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004466:	f002 fac1 	bl	80069ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800446a:	f001 f82f 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800446e:	f002 fa8b 	bl	8006988 <vPortEnterCritical>
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004478:	b25b      	sxtb	r3, r3
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800447e:	d103      	bne.n	8004488 <xQueueGenericSend+0x174>
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800448e:	b25b      	sxtb	r3, r3
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004494:	d103      	bne.n	800449e <xQueueGenericSend+0x18a>
 8004496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800449e:	f002 faa5 	bl	80069ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044a2:	1d3a      	adds	r2, r7, #4
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fab6 	bl	8005a1c <xTaskCheckForTimeOut>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d124      	bne.n	8004500 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044b8:	f000 fd04 	bl	8004ec4 <prvIsQueueFull>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	3310      	adds	r3, #16
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 f9da 	bl	8005884 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044d2:	f000 fc8f 	bl	8004df4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044d6:	f001 f807 	bl	80054e8 <xTaskResumeAll>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af7c 	bne.w	80043da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80044e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004514 <xQueueGenericSend+0x200>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	e772      	b.n	80043da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044f6:	f000 fc7d 	bl	8004df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044fa:	f000 fff5 	bl	80054e8 <xTaskResumeAll>
 80044fe:	e76c      	b.n	80043da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004502:	f000 fc77 	bl	8004df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004506:	f000 ffef 	bl	80054e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800450a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800450c:	4618      	mov	r0, r3
 800450e:	3738      	adds	r7, #56	@ 0x38
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b090      	sub	sp, #64	@ 0x40
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <xQueueGenericSendFromISR+0x3e>
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <xQueueGenericSendFromISR+0x42>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <xQueueGenericSendFromISR+0x44>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d103      	bne.n	8004586 <xQueueGenericSendFromISR+0x6e>
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <xQueueGenericSendFromISR+0x72>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueGenericSendFromISR+0x74>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045a8:	f002 face 	bl	8006b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045ac:	f3ef 8211 	mrs	r2, BASEPRI
 80045b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	61fa      	str	r2, [r7, #28]
 80045c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <xQueueGenericSendFromISR+0xc2>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d12f      	bne.n	800463a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045f0:	f000 fb70 	bl	8004cd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045fc:	d112      	bne.n	8004624 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004608:	3324      	adds	r3, #36	@ 0x24
 800460a:	4618      	mov	r0, r3
 800460c:	f001 f98c 	bl	8005928 <xTaskRemoveFromEventList>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e007      	b.n	8004634 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004624:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004628:	3301      	adds	r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	b25a      	sxtb	r2, r3
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004634:	2301      	movs	r3, #1
 8004636:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004638:	e001      	b.n	800463e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800463a:	2300      	movs	r3, #0
 800463c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800463e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004640:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004648:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800464a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800464c:	4618      	mov	r0, r3
 800464e:	3740      	adds	r7, #64	@ 0x40
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08e      	sub	sp, #56	@ 0x38
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	623b      	str	r3, [r7, #32]
}
 800467a:	bf00      	nop
 800467c:	bf00      	nop
 800467e:	e7fd      	b.n	800467c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	61fb      	str	r3, [r7, #28]
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <xQueueGiveFromISR+0x5c>
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <xQueueGiveFromISR+0x60>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <xQueueGiveFromISR+0x62>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	61bb      	str	r3, [r7, #24]
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	e7fd      	b.n	80046ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046d2:	f002 fa39 	bl	8006b48 <vPortValidateInterruptPriority>
	__asm volatile
 80046d6:	f3ef 8211 	mrs	r2, BASEPRI
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	617a      	str	r2, [r7, #20]
 80046ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80046ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046fe:	429a      	cmp	r2, r3
 8004700:	d22b      	bcs.n	800475a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004714:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800471c:	d112      	bne.n	8004744 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d016      	beq.n	8004754 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	3324      	adds	r3, #36	@ 0x24
 800472a:	4618      	mov	r0, r3
 800472c:	f001 f8fc 	bl	8005928 <xTaskRemoveFromEventList>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e007      	b.n	8004754 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004748:	3301      	adds	r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	b25a      	sxtb	r2, r3
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004754:	2301      	movs	r3, #1
 8004756:	637b      	str	r3, [r7, #52]	@ 0x34
 8004758:	e001      	b.n	800475e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
 800475e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004760:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f383 8811 	msr	BASEPRI, r3
}
 8004768:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800476c:	4618      	mov	r0, r3
 800476e:	3738      	adds	r7, #56	@ 0x38
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08c      	sub	sp, #48	@ 0x30
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10b      	bne.n	80047a6 <xQueueReceive+0x32>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	623b      	str	r3, [r7, #32]
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	e7fd      	b.n	80047a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d103      	bne.n	80047b4 <xQueueReceive+0x40>
 80047ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <xQueueReceive+0x44>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <xQueueReceive+0x46>
 80047b8:	2300      	movs	r3, #0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <xQueueReceive+0x62>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61fb      	str	r3, [r7, #28]
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	e7fd      	b.n	80047d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047d6:	f001 fa6d 	bl	8005cb4 <xTaskGetSchedulerState>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <xQueueReceive+0x72>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <xQueueReceive+0x76>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <xQueueReceive+0x78>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <xQueueReceive+0x94>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61bb      	str	r3, [r7, #24]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004808:	f002 f8be 	bl	8006988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800480c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01f      	beq.n	8004858 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800481c:	f000 fac4 	bl	8004da8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	1e5a      	subs	r2, r3, #1
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00f      	beq.n	8004850 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	3310      	adds	r3, #16
 8004834:	4618      	mov	r0, r3
 8004836:	f001 f877 	bl	8005928 <xTaskRemoveFromEventList>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004840:	4b3c      	ldr	r3, [pc, #240]	@ (8004934 <xQueueReceive+0x1c0>)
 8004842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004850:	f002 f8cc 	bl	80069ec <vPortExitCritical>
				return pdPASS;
 8004854:	2301      	movs	r3, #1
 8004856:	e069      	b.n	800492c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800485e:	f002 f8c5 	bl	80069ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004862:	2300      	movs	r3, #0
 8004864:	e062      	b.n	800492c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800486c:	f107 0310 	add.w	r3, r7, #16
 8004870:	4618      	mov	r0, r3
 8004872:	f001 f8bd 	bl	80059f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800487a:	f002 f8b7 	bl	80069ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800487e:	f000 fe25 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004882:	f002 f881 	bl	8006988 <vPortEnterCritical>
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800488c:	b25b      	sxtb	r3, r3
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004892:	d103      	bne.n	800489c <xQueueReceive+0x128>
 8004894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048a2:	b25b      	sxtb	r3, r3
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048a8:	d103      	bne.n	80048b2 <xQueueReceive+0x13e>
 80048aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048b2:	f002 f89b 	bl	80069ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048b6:	1d3a      	adds	r2, r7, #4
 80048b8:	f107 0310 	add.w	r3, r7, #16
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f8ac 	bl	8005a1c <xTaskCheckForTimeOut>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d123      	bne.n	8004912 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048cc:	f000 fae4 	bl	8004e98 <prvIsQueueEmpty>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d017      	beq.n	8004906 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	3324      	adds	r3, #36	@ 0x24
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4611      	mov	r1, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 ffd0 	bl	8005884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048e6:	f000 fa85 	bl	8004df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048ea:	f000 fdfd 	bl	80054e8 <xTaskResumeAll>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d189      	bne.n	8004808 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80048f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <xQueueReceive+0x1c0>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	e780      	b.n	8004808 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004908:	f000 fa74 	bl	8004df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800490c:	f000 fdec 	bl	80054e8 <xTaskResumeAll>
 8004910:	e77a      	b.n	8004808 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004914:	f000 fa6e 	bl	8004df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004918:	f000 fde6 	bl	80054e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800491c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800491e:	f000 fabb 	bl	8004e98 <prvIsQueueEmpty>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	f43f af6f 	beq.w	8004808 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800492a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800492c:	4618      	mov	r0, r3
 800492e:	3730      	adds	r7, #48	@ 0x30
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08e      	sub	sp, #56	@ 0x38
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800494a:	2300      	movs	r3, #0
 800494c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800494e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	623b      	str	r3, [r7, #32]
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800496c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	61fb      	str	r3, [r7, #28]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800498c:	f001 f992 	bl	8005cb4 <xTaskGetSchedulerState>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <xQueueSemaphoreTake+0x64>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <xQueueSemaphoreTake+0x68>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <xQueueSemaphoreTake+0x6a>
 80049a0:	2300      	movs	r3, #0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	61bb      	str	r3, [r7, #24]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049be:	f001 ffe3 	bl	8006988 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d024      	beq.n	8004a18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80049de:	f001 fae3 	bl	8005fa8 <pvTaskIncrementMutexHeldCount>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00f      	beq.n	8004a10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f2:	3310      	adds	r3, #16
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 ff97 	bl	8005928 <xTaskRemoveFromEventList>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a00:	4b54      	ldr	r3, [pc, #336]	@ (8004b54 <xQueueSemaphoreTake+0x21c>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a10:	f001 ffec 	bl	80069ec <vPortExitCritical>
				return pdPASS;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e098      	b.n	8004b4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d112      	bne.n	8004a44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	617b      	str	r3, [r7, #20]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a3c:	f001 ffd6 	bl	80069ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e082      	b.n	8004b4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a4a:	f107 030c 	add.w	r3, r7, #12
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 ffce 	bl	80059f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a58:	f001 ffc8 	bl	80069ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a5c:	f000 fd36 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a60:	f001 ff92 	bl	8006988 <vPortEnterCritical>
 8004a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a6a:	b25b      	sxtb	r3, r3
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a70:	d103      	bne.n	8004a7a <xQueueSemaphoreTake+0x142>
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a80:	b25b      	sxtb	r3, r3
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a86:	d103      	bne.n	8004a90 <xQueueSemaphoreTake+0x158>
 8004a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a90:	f001 ffac 	bl	80069ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a94:	463a      	mov	r2, r7
 8004a96:	f107 030c 	add.w	r3, r7, #12
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 ffbd 	bl	8005a1c <xTaskCheckForTimeOut>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d132      	bne.n	8004b0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004aaa:	f000 f9f5 	bl	8004e98 <prvIsQueueEmpty>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d026      	beq.n	8004b02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004abc:	f001 ff64 	bl	8006988 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 f913 	bl	8005cf0 <xTaskPriorityInherit>
 8004aca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004acc:	f001 ff8e 	bl	80069ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad2:	3324      	adds	r3, #36	@ 0x24
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fed3 	bl	8005884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ade:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ae0:	f000 f988 	bl	8004df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ae4:	f000 fd00 	bl	80054e8 <xTaskResumeAll>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f47f af67 	bne.w	80049be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004af0:	4b18      	ldr	r3, [pc, #96]	@ (8004b54 <xQueueSemaphoreTake+0x21c>)
 8004af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	e75d      	b.n	80049be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b04:	f000 f976 	bl	8004df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b08:	f000 fcee 	bl	80054e8 <xTaskResumeAll>
 8004b0c:	e757      	b.n	80049be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b10:	f000 f970 	bl	8004df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b14:	f000 fce8 	bl	80054e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b1a:	f000 f9bd 	bl	8004e98 <prvIsQueueEmpty>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f43f af4c 	beq.w	80049be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00d      	beq.n	8004b48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004b2c:	f001 ff2c 	bl	8006988 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b32:	f000 f8b7 	bl	8004ca4 <prvGetDisinheritPriorityAfterTimeout>
 8004b36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 f9ae 	bl	8005ea0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b44:	f001 ff52 	bl	80069ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3738      	adds	r7, #56	@ 0x38
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08e      	sub	sp, #56	@ 0x38
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	623b      	str	r3, [r7, #32]
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d103      	bne.n	8004b94 <xQueueReceiveFromISR+0x3c>
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <xQueueReceiveFromISR+0x40>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <xQueueReceiveFromISR+0x42>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	61fb      	str	r3, [r7, #28]
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	e7fd      	b.n	8004bb2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bb6:	f001 ffc7 	bl	8006b48 <vPortValidateInterruptPriority>
	__asm volatile
 8004bba:	f3ef 8211 	mrs	r2, BASEPRI
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	61ba      	str	r2, [r7, #24]
 8004bd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004bd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d02f      	beq.n	8004c42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bf0:	f000 f8da 	bl	8004da8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	1e5a      	subs	r2, r3, #1
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c04:	d112      	bne.n	8004c2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d016      	beq.n	8004c3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	3310      	adds	r3, #16
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fe88 	bl	8005928 <xTaskRemoveFromEventList>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e007      	b.n	8004c3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c30:	3301      	adds	r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	b25a      	sxtb	r2, r3
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c40:	e001      	b.n	8004c46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f383 8811 	msr	BASEPRI, r3
}
 8004c50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3738      	adds	r7, #56	@ 0x38
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10b      	bne.n	8004c86 <vQueueDelete+0x2a>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	60bb      	str	r3, [r7, #8]
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	e7fd      	b.n	8004c82 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f95e 	bl	8004f48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f002 f866 	bl	8006d68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d006      	beq.n	8004cc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e001      	b.n	8004cc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
	}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d14d      	bne.n	8004d96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 f85e 	bl	8005dc0 <xTaskPriorityDisinherit>
 8004d04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	e043      	b.n	8004d96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d119      	bne.n	8004d48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6858      	ldr	r0, [r3, #4]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	f002 f9c6 	bl	80070b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d32b      	bcc.n	8004d96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	e026      	b.n	8004d96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68d8      	ldr	r0, [r3, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d50:	461a      	mov	r2, r3
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	f002 f9ac 	bl	80070b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	425b      	negs	r3, r3
 8004d62:	441a      	add	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d207      	bcs.n	8004d84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	441a      	add	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d105      	bne.n	8004d96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d9e:	697b      	ldr	r3, [r7, #20]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d018      	beq.n	8004dec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d303      	bcc.n	8004ddc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68d9      	ldr	r1, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	6838      	ldr	r0, [r7, #0]
 8004de8:	f002 f962 	bl	80070b0 <memcpy>
	}
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dfc:	f001 fdc4 	bl	8006988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e08:	e011      	b.n	8004e2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d012      	beq.n	8004e38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3324      	adds	r3, #36	@ 0x24
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fd86 	bl	8005928 <xTaskRemoveFromEventList>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e22:	f000 fe5f 	bl	8005ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	dce9      	bgt.n	8004e0a <prvUnlockQueue+0x16>
 8004e36:	e000      	b.n	8004e3a <prvUnlockQueue+0x46>
					break;
 8004e38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	22ff      	movs	r2, #255	@ 0xff
 8004e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e42:	f001 fdd3 	bl	80069ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e46:	f001 fd9f 	bl	8006988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e52:	e011      	b.n	8004e78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d012      	beq.n	8004e82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3310      	adds	r3, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fd61 	bl	8005928 <xTaskRemoveFromEventList>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e6c:	f000 fe3a 	bl	8005ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dce9      	bgt.n	8004e54 <prvUnlockQueue+0x60>
 8004e80:	e000      	b.n	8004e84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	22ff      	movs	r2, #255	@ 0xff
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e8c:	f001 fdae 	bl	80069ec <vPortExitCritical>
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ea0:	f001 fd72 	bl	8006988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004eac:	2301      	movs	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e001      	b.n	8004eb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eb6:	f001 fd99 	bl	80069ec <vPortExitCritical>

	return xReturn;
 8004eba:	68fb      	ldr	r3, [r7, #12]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ecc:	f001 fd5c 	bl	8006988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d102      	bne.n	8004ee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e001      	b.n	8004ee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ee6:	f001 fd81 	bl	80069ec <vPortExitCritical>

	return xReturn;
 8004eea:	68fb      	ldr	r3, [r7, #12]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e014      	b.n	8004f2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f04:	4a0f      	ldr	r2, [pc, #60]	@ (8004f44 <vQueueAddToRegistry+0x50>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f10:	490c      	ldr	r1, [pc, #48]	@ (8004f44 <vQueueAddToRegistry+0x50>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f44 <vQueueAddToRegistry+0x50>)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f26:	e006      	b.n	8004f36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b07      	cmp	r3, #7
 8004f32:	d9e7      	bls.n	8004f04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	200008b8 	.word	0x200008b8

08004f48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e016      	b.n	8004f84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004f56:	4a10      	ldr	r2, [pc, #64]	@ (8004f98 <vQueueUnregisterQueue+0x50>)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d10b      	bne.n	8004f7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004f66:	4a0c      	ldr	r2, [pc, #48]	@ (8004f98 <vQueueUnregisterQueue+0x50>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004f70:	4a09      	ldr	r2, [pc, #36]	@ (8004f98 <vQueueUnregisterQueue+0x50>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4413      	add	r3, r2
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]
				break;
 8004f7c:	e006      	b.n	8004f8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3301      	adds	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b07      	cmp	r3, #7
 8004f88:	d9e5      	bls.n	8004f56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	200008b8 	.word	0x200008b8

08004f9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fac:	f001 fcec 	bl	8006988 <vPortEnterCritical>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fb6:	b25b      	sxtb	r3, r3
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fbc:	d103      	bne.n	8004fc6 <vQueueWaitForMessageRestricted+0x2a>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fcc:	b25b      	sxtb	r3, r3
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fd2:	d103      	bne.n	8004fdc <vQueueWaitForMessageRestricted+0x40>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fdc:	f001 fd06 	bl	80069ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3324      	adds	r3, #36	@ 0x24
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fc6d 	bl	80058d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ff6:	6978      	ldr	r0, [r7, #20]
 8004ff8:	f7ff fefc 	bl	8004df4 <prvUnlockQueue>
	}
 8004ffc:	bf00      	nop
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08e      	sub	sp, #56	@ 0x38
 8005008:	af04      	add	r7, sp, #16
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	623b      	str	r3, [r7, #32]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61fb      	str	r3, [r7, #28]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800504e:	23a8      	movs	r3, #168	@ 0xa8
 8005050:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2ba8      	cmp	r3, #168	@ 0xa8
 8005056:	d00b      	beq.n	8005070 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	61bb      	str	r3, [r7, #24]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005070:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01e      	beq.n	80050b6 <xTaskCreateStatic+0xb2>
 8005078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01b      	beq.n	80050b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	2202      	movs	r2, #2
 800508c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005090:	2300      	movs	r3, #0
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	9302      	str	r3, [sp, #8]
 8005098:	f107 0314 	add.w	r3, r7, #20
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f851 	bl	8005150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050b0:	f000 f8f6 	bl	80052a0 <prvAddNewTaskToReadyList>
 80050b4:	e001      	b.n	80050ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050ba:	697b      	ldr	r3, [r7, #20]
	}
 80050bc:	4618      	mov	r0, r3
 80050be:	3728      	adds	r7, #40	@ 0x28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08c      	sub	sp, #48	@ 0x30
 80050c8:	af04      	add	r7, sp, #16
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4618      	mov	r0, r3
 80050da:	f001 fd77 	bl	8006bcc <pvPortMalloc>
 80050de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050e6:	20a8      	movs	r0, #168	@ 0xa8
 80050e8:	f001 fd70 	bl	8006bcc <pvPortMalloc>
 80050ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80050fa:	e005      	b.n	8005108 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050fc:	6978      	ldr	r0, [r7, #20]
 80050fe:	f001 fe33 	bl	8006d68 <vPortFree>
 8005102:	e001      	b.n	8005108 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d017      	beq.n	800513e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	2300      	movs	r3, #0
 800511a:	9303      	str	r3, [sp, #12]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	9302      	str	r3, [sp, #8]
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f80f 	bl	8005150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005132:	69f8      	ldr	r0, [r7, #28]
 8005134:	f000 f8b4 	bl	80052a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005138:	2301      	movs	r3, #1
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e002      	b.n	8005144 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005142:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005144:	69bb      	ldr	r3, [r7, #24]
	}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	461a      	mov	r2, r3
 8005168:	21a5      	movs	r1, #165	@ 0xa5
 800516a:	f001 ff1d 	bl	8006fa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005178:	3b01      	subs	r3, #1
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f023 0307 	bic.w	r3, r3, #7
 8005186:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00b      	beq.n	80051aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	617b      	str	r3, [r7, #20]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01f      	beq.n	80051f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e012      	b.n	80051dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	7819      	ldrb	r1, [r3, #0]
 80051be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	3334      	adds	r3, #52	@ 0x34
 80051c6:	460a      	mov	r2, r1
 80051c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3301      	adds	r3, #1
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d9e9      	bls.n	80051b6 <prvInitialiseNewTask+0x66>
 80051e2:	e000      	b.n	80051e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80051e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051ee:	e003      	b.n	80051f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fa:	2b37      	cmp	r3, #55	@ 0x37
 80051fc:	d901      	bls.n	8005202 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051fe:	2337      	movs	r3, #55	@ 0x37
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005206:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800520c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	2200      	movs	r2, #0
 8005212:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f7fe fe33 	bl	8003e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	3318      	adds	r3, #24
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fe2e 	bl	8003e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800523c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	2200      	movs	r2, #0
 8005242:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005248:	2200      	movs	r2, #0
 800524a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	3354      	adds	r3, #84	@ 0x54
 8005252:	224c      	movs	r2, #76	@ 0x4c
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f001 fea6 	bl	8006fa8 <memset>
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	4a0d      	ldr	r2, [pc, #52]	@ (8005294 <prvInitialiseNewTask+0x144>)
 8005260:	659a      	str	r2, [r3, #88]	@ 0x58
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	4a0c      	ldr	r2, [pc, #48]	@ (8005298 <prvInitialiseNewTask+0x148>)
 8005266:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	4a0c      	ldr	r2, [pc, #48]	@ (800529c <prvInitialiseNewTask+0x14c>)
 800526c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	68f9      	ldr	r1, [r7, #12]
 8005272:	69b8      	ldr	r0, [r7, #24]
 8005274:	f001 fa5a 	bl	800672c <pxPortInitialiseStack>
 8005278:	4602      	mov	r2, r0
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800528a:	bf00      	nop
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20001b04 	.word	0x20001b04
 8005298:	20001b6c 	.word	0x20001b6c
 800529c:	20001bd4 	.word	0x20001bd4

080052a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052a8:	f001 fb6e 	bl	8006988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005368 <prvAddNewTaskToReadyList+0xc8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052be:	4a2a      	ldr	r2, [pc, #168]	@ (8005368 <prvAddNewTaskToReadyList+0xc8>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052c4:	4b27      	ldr	r3, [pc, #156]	@ (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d110      	bne.n	80052ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052cc:	f000 fc2e 	bl	8005b2c <prvInitialiseTaskLists>
 80052d0:	e00d      	b.n	80052ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052d2:	4b26      	ldr	r3, [pc, #152]	@ (800536c <prvAddNewTaskToReadyList+0xcc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052da:	4b23      	ldr	r3, [pc, #140]	@ (8005368 <prvAddNewTaskToReadyList+0xc8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d802      	bhi.n	80052ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005368 <prvAddNewTaskToReadyList+0xc8>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052ee:	4b20      	ldr	r3, [pc, #128]	@ (8005370 <prvAddNewTaskToReadyList+0xd0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005370 <prvAddNewTaskToReadyList+0xd0>)
 80052f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <prvAddNewTaskToReadyList+0xd0>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005304:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <prvAddNewTaskToReadyList+0xd4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d903      	bls.n	8005314 <prvAddNewTaskToReadyList+0x74>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	4a18      	ldr	r2, [pc, #96]	@ (8005374 <prvAddNewTaskToReadyList+0xd4>)
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a15      	ldr	r2, [pc, #84]	@ (8005378 <prvAddNewTaskToReadyList+0xd8>)
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f7fe fdb7 	bl	8003e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005330:	f001 fb5c 	bl	80069ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005334:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <prvAddNewTaskToReadyList+0xcc>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00e      	beq.n	800535a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <prvAddNewTaskToReadyList+0xc8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005346:	429a      	cmp	r2, r3
 8005348:	d207      	bcs.n	800535a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800534a:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <prvAddNewTaskToReadyList+0xdc>)
 800534c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000dcc 	.word	0x20000dcc
 8005368:	200008f8 	.word	0x200008f8
 800536c:	20000dd8 	.word	0x20000dd8
 8005370:	20000de8 	.word	0x20000de8
 8005374:	20000dd4 	.word	0x20000dd4
 8005378:	200008fc 	.word	0x200008fc
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d018      	beq.n	80053c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005392:	4b14      	ldr	r3, [pc, #80]	@ (80053e4 <vTaskDelay+0x64>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00b      	beq.n	80053b2 <vTaskDelay+0x32>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60bb      	str	r3, [r7, #8]
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053b2:	f000 f88b 	bl	80054cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053b6:	2100      	movs	r1, #0
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fe09 	bl	8005fd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053be:	f000 f893 	bl	80054e8 <xTaskResumeAll>
 80053c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80053ca:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <vTaskDelay+0x68>)
 80053cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000df4 	.word	0x20000df4
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	@ 0x28
 80053f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053fa:	463a      	mov	r2, r7
 80053fc:	1d39      	adds	r1, r7, #4
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fcea 	bl	8003ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	9202      	str	r2, [sp, #8]
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	2300      	movs	r3, #0
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	2300      	movs	r3, #0
 8005418:	460a      	mov	r2, r1
 800541a:	4924      	ldr	r1, [pc, #144]	@ (80054ac <vTaskStartScheduler+0xc0>)
 800541c:	4824      	ldr	r0, [pc, #144]	@ (80054b0 <vTaskStartScheduler+0xc4>)
 800541e:	f7ff fdf1 	bl	8005004 <xTaskCreateStatic>
 8005422:	4603      	mov	r3, r0
 8005424:	4a23      	ldr	r2, [pc, #140]	@ (80054b4 <vTaskStartScheduler+0xc8>)
 8005426:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005428:	4b22      	ldr	r3, [pc, #136]	@ (80054b4 <vTaskStartScheduler+0xc8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	e001      	b.n	800543a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d102      	bne.n	8005446 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005440:	f000 fe1a 	bl	8006078 <xTimerCreateTimerTask>
 8005444:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d11b      	bne.n	8005484 <vTaskStartScheduler+0x98>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	613b      	str	r3, [r7, #16]
}
 800545e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005460:	4b15      	ldr	r3, [pc, #84]	@ (80054b8 <vTaskStartScheduler+0xcc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3354      	adds	r3, #84	@ 0x54
 8005466:	4a15      	ldr	r2, [pc, #84]	@ (80054bc <vTaskStartScheduler+0xd0>)
 8005468:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800546a:	4b15      	ldr	r3, [pc, #84]	@ (80054c0 <vTaskStartScheduler+0xd4>)
 800546c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005470:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005472:	4b14      	ldr	r3, [pc, #80]	@ (80054c4 <vTaskStartScheduler+0xd8>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005478:	4b13      	ldr	r3, [pc, #76]	@ (80054c8 <vTaskStartScheduler+0xdc>)
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800547e:	f001 f9df 	bl	8006840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005482:	e00f      	b.n	80054a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800548a:	d10b      	bne.n	80054a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60fb      	str	r3, [r7, #12]
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	e7fd      	b.n	80054a0 <vTaskStartScheduler+0xb4>
}
 80054a4:	bf00      	nop
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	080072c8 	.word	0x080072c8
 80054b0:	08005afd 	.word	0x08005afd
 80054b4:	20000df0 	.word	0x20000df0
 80054b8:	200008f8 	.word	0x200008f8
 80054bc:	20000010 	.word	0x20000010
 80054c0:	20000dec 	.word	0x20000dec
 80054c4:	20000dd8 	.word	0x20000dd8
 80054c8:	20000dd0 	.word	0x20000dd0

080054cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054d0:	4b04      	ldr	r3, [pc, #16]	@ (80054e4 <vTaskSuspendAll+0x18>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	4a03      	ldr	r2, [pc, #12]	@ (80054e4 <vTaskSuspendAll+0x18>)
 80054d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054da:	bf00      	nop
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20000df4 	.word	0x20000df4

080054e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054f6:	4b42      	ldr	r3, [pc, #264]	@ (8005600 <xTaskResumeAll+0x118>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <xTaskResumeAll+0x2e>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	603b      	str	r3, [r7, #0]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005516:	f001 fa37 	bl	8006988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800551a:	4b39      	ldr	r3, [pc, #228]	@ (8005600 <xTaskResumeAll+0x118>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3b01      	subs	r3, #1
 8005520:	4a37      	ldr	r2, [pc, #220]	@ (8005600 <xTaskResumeAll+0x118>)
 8005522:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005524:	4b36      	ldr	r3, [pc, #216]	@ (8005600 <xTaskResumeAll+0x118>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d162      	bne.n	80055f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800552c:	4b35      	ldr	r3, [pc, #212]	@ (8005604 <xTaskResumeAll+0x11c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05e      	beq.n	80055f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005534:	e02f      	b.n	8005596 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005536:	4b34      	ldr	r3, [pc, #208]	@ (8005608 <xTaskResumeAll+0x120>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3318      	adds	r3, #24
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fd08 	bl	8003f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3304      	adds	r3, #4
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fd03 	bl	8003f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	4b2d      	ldr	r3, [pc, #180]	@ (800560c <xTaskResumeAll+0x124>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d903      	bls.n	8005566 <xTaskResumeAll+0x7e>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	4a2a      	ldr	r2, [pc, #168]	@ (800560c <xTaskResumeAll+0x124>)
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4a27      	ldr	r2, [pc, #156]	@ (8005610 <xTaskResumeAll+0x128>)
 8005574:	441a      	add	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f7fe fc8e 	bl	8003e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005586:	4b23      	ldr	r3, [pc, #140]	@ (8005614 <xTaskResumeAll+0x12c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	429a      	cmp	r2, r3
 800558e:	d302      	bcc.n	8005596 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005590:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <xTaskResumeAll+0x130>)
 8005592:	2201      	movs	r2, #1
 8005594:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005596:	4b1c      	ldr	r3, [pc, #112]	@ (8005608 <xTaskResumeAll+0x120>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1cb      	bne.n	8005536 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055a4:	f000 fb66 	bl	8005c74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055a8:	4b1c      	ldr	r3, [pc, #112]	@ (800561c <xTaskResumeAll+0x134>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d010      	beq.n	80055d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055b4:	f000 f846 	bl	8005644 <xTaskIncrementTick>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055be:	4b16      	ldr	r3, [pc, #88]	@ (8005618 <xTaskResumeAll+0x130>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f1      	bne.n	80055b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80055d0:	4b12      	ldr	r3, [pc, #72]	@ (800561c <xTaskResumeAll+0x134>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055d6:	4b10      	ldr	r3, [pc, #64]	@ (8005618 <xTaskResumeAll+0x130>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055de:	2301      	movs	r3, #1
 80055e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005620 <xTaskResumeAll+0x138>)
 80055e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055f2:	f001 f9fb 	bl	80069ec <vPortExitCritical>

	return xAlreadyYielded;
 80055f6:	68bb      	ldr	r3, [r7, #8]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000df4 	.word	0x20000df4
 8005604:	20000dcc 	.word	0x20000dcc
 8005608:	20000d8c 	.word	0x20000d8c
 800560c:	20000dd4 	.word	0x20000dd4
 8005610:	200008fc 	.word	0x200008fc
 8005614:	200008f8 	.word	0x200008f8
 8005618:	20000de0 	.word	0x20000de0
 800561c:	20000ddc 	.word	0x20000ddc
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800562a:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <xTaskGetTickCount+0x1c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005630:	687b      	ldr	r3, [r7, #4]
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000dd0 	.word	0x20000dd0

08005644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564e:	4b4f      	ldr	r3, [pc, #316]	@ (800578c <xTaskIncrementTick+0x148>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f040 8090 	bne.w	8005778 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005658:	4b4d      	ldr	r3, [pc, #308]	@ (8005790 <xTaskIncrementTick+0x14c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3301      	adds	r3, #1
 800565e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005660:	4a4b      	ldr	r2, [pc, #300]	@ (8005790 <xTaskIncrementTick+0x14c>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d121      	bne.n	80056b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800566c:	4b49      	ldr	r3, [pc, #292]	@ (8005794 <xTaskIncrementTick+0x150>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	603b      	str	r3, [r7, #0]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <xTaskIncrementTick+0x46>
 800568e:	4b41      	ldr	r3, [pc, #260]	@ (8005794 <xTaskIncrementTick+0x150>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	4b40      	ldr	r3, [pc, #256]	@ (8005798 <xTaskIncrementTick+0x154>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a3e      	ldr	r2, [pc, #248]	@ (8005794 <xTaskIncrementTick+0x150>)
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	4a3e      	ldr	r2, [pc, #248]	@ (8005798 <xTaskIncrementTick+0x154>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b3e      	ldr	r3, [pc, #248]	@ (800579c <xTaskIncrementTick+0x158>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	4a3c      	ldr	r2, [pc, #240]	@ (800579c <xTaskIncrementTick+0x158>)
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	f000 fae2 	bl	8005c74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056b0:	4b3b      	ldr	r3, [pc, #236]	@ (80057a0 <xTaskIncrementTick+0x15c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d349      	bcc.n	800574e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ba:	4b36      	ldr	r3, [pc, #216]	@ (8005794 <xTaskIncrementTick+0x150>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c4:	4b36      	ldr	r3, [pc, #216]	@ (80057a0 <xTaskIncrementTick+0x15c>)
 80056c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056ca:	601a      	str	r2, [r3, #0]
					break;
 80056cc:	e03f      	b.n	800574e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ce:	4b31      	ldr	r3, [pc, #196]	@ (8005794 <xTaskIncrementTick+0x150>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d203      	bcs.n	80056ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056e6:	4a2e      	ldr	r2, [pc, #184]	@ (80057a0 <xTaskIncrementTick+0x15c>)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056ec:	e02f      	b.n	800574e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe fc30 	bl	8003f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3318      	adds	r3, #24
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe fc27 	bl	8003f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570e:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <xTaskIncrementTick+0x160>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d903      	bls.n	800571e <xTaskIncrementTick+0xda>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	4a22      	ldr	r2, [pc, #136]	@ (80057a4 <xTaskIncrementTick+0x160>)
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4a1f      	ldr	r2, [pc, #124]	@ (80057a8 <xTaskIncrementTick+0x164>)
 800572c:	441a      	add	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fe fbb2 	bl	8003e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573e:	4b1b      	ldr	r3, [pc, #108]	@ (80057ac <xTaskIncrementTick+0x168>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005744:	429a      	cmp	r2, r3
 8005746:	d3b8      	bcc.n	80056ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005748:	2301      	movs	r3, #1
 800574a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800574c:	e7b5      	b.n	80056ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800574e:	4b17      	ldr	r3, [pc, #92]	@ (80057ac <xTaskIncrementTick+0x168>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005754:	4914      	ldr	r1, [pc, #80]	@ (80057a8 <xTaskIncrementTick+0x164>)
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d901      	bls.n	800576a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005766:	2301      	movs	r3, #1
 8005768:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800576a:	4b11      	ldr	r3, [pc, #68]	@ (80057b0 <xTaskIncrementTick+0x16c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005772:	2301      	movs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	e004      	b.n	8005782 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005778:	4b0e      	ldr	r3, [pc, #56]	@ (80057b4 <xTaskIncrementTick+0x170>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	4a0d      	ldr	r2, [pc, #52]	@ (80057b4 <xTaskIncrementTick+0x170>)
 8005780:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005782:	697b      	ldr	r3, [r7, #20]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000df4 	.word	0x20000df4
 8005790:	20000dd0 	.word	0x20000dd0
 8005794:	20000d84 	.word	0x20000d84
 8005798:	20000d88 	.word	0x20000d88
 800579c:	20000de4 	.word	0x20000de4
 80057a0:	20000dec 	.word	0x20000dec
 80057a4:	20000dd4 	.word	0x20000dd4
 80057a8:	200008fc 	.word	0x200008fc
 80057ac:	200008f8 	.word	0x200008f8
 80057b0:	20000de0 	.word	0x20000de0
 80057b4:	20000ddc 	.word	0x20000ddc

080057b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057be:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <vTaskSwitchContext+0xb4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005870 <vTaskSwitchContext+0xb8>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057cc:	e047      	b.n	800585e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80057ce:	4b28      	ldr	r3, [pc, #160]	@ (8005870 <vTaskSwitchContext+0xb8>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b27      	ldr	r3, [pc, #156]	@ (8005874 <vTaskSwitchContext+0xbc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e011      	b.n	8005800 <vTaskSwitchContext+0x48>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <vTaskSwitchContext+0x42>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	607b      	str	r3, [r7, #4]
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	e7fd      	b.n	80057f6 <vTaskSwitchContext+0x3e>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	491d      	ldr	r1, [pc, #116]	@ (8005878 <vTaskSwitchContext+0xc0>)
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0e3      	beq.n	80057dc <vTaskSwitchContext+0x24>
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4a16      	ldr	r2, [pc, #88]	@ (8005878 <vTaskSwitchContext+0xc0>)
 8005820:	4413      	add	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	3308      	adds	r3, #8
 8005836:	429a      	cmp	r2, r3
 8005838:	d104      	bne.n	8005844 <vTaskSwitchContext+0x8c>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	605a      	str	r2, [r3, #4]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4a0c      	ldr	r2, [pc, #48]	@ (800587c <vTaskSwitchContext+0xc4>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4a09      	ldr	r2, [pc, #36]	@ (8005874 <vTaskSwitchContext+0xbc>)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005854:	4b09      	ldr	r3, [pc, #36]	@ (800587c <vTaskSwitchContext+0xc4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3354      	adds	r3, #84	@ 0x54
 800585a:	4a09      	ldr	r2, [pc, #36]	@ (8005880 <vTaskSwitchContext+0xc8>)
 800585c:	6013      	str	r3, [r2, #0]
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20000df4 	.word	0x20000df4
 8005870:	20000de0 	.word	0x20000de0
 8005874:	20000dd4 	.word	0x20000dd4
 8005878:	200008fc 	.word	0x200008fc
 800587c:	200008f8 	.word	0x200008f8
 8005880:	20000010 	.word	0x20000010

08005884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	60fb      	str	r3, [r7, #12]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ac:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <vTaskPlaceOnEventList+0x48>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3318      	adds	r3, #24
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fe fb16 	bl	8003ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058ba:	2101      	movs	r1, #1
 80058bc:	6838      	ldr	r0, [r7, #0]
 80058be:	f000 fb87 	bl	8005fd0 <prvAddCurrentTaskToDelayedList>
}
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	200008f8 	.word	0x200008f8

080058d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	617b      	str	r3, [r7, #20]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <vTaskPlaceOnEventListRestricted+0x54>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3318      	adds	r3, #24
 8005900:	4619      	mov	r1, r3
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7fe facb 	bl	8003e9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800590e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005912:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	68b8      	ldr	r0, [r7, #8]
 8005918:	f000 fb5a 	bl	8005fd0 <prvAddCurrentTaskToDelayedList>
	}
 800591c:	bf00      	nop
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	200008f8 	.word	0x200008f8

08005928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	60fb      	str	r3, [r7, #12]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3318      	adds	r3, #24
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fafc 	bl	8003f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005960:	4b1d      	ldr	r3, [pc, #116]	@ (80059d8 <xTaskRemoveFromEventList+0xb0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11d      	bne.n	80059a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	3304      	adds	r3, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe faf3 	bl	8003f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005976:	4b19      	ldr	r3, [pc, #100]	@ (80059dc <xTaskRemoveFromEventList+0xb4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d903      	bls.n	8005986 <xTaskRemoveFromEventList+0x5e>
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005982:	4a16      	ldr	r2, [pc, #88]	@ (80059dc <xTaskRemoveFromEventList+0xb4>)
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4a13      	ldr	r2, [pc, #76]	@ (80059e0 <xTaskRemoveFromEventList+0xb8>)
 8005994:	441a      	add	r2, r3
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7fe fa7e 	bl	8003e9e <vListInsertEnd>
 80059a2:	e005      	b.n	80059b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3318      	adds	r3, #24
 80059a8:	4619      	mov	r1, r3
 80059aa:	480e      	ldr	r0, [pc, #56]	@ (80059e4 <xTaskRemoveFromEventList+0xbc>)
 80059ac:	f7fe fa77 	bl	8003e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b4:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <xTaskRemoveFromEventList+0xc0>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d905      	bls.n	80059ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059be:	2301      	movs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059c2:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <xTaskRemoveFromEventList+0xc4>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e001      	b.n	80059ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059ce:	697b      	ldr	r3, [r7, #20]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000df4 	.word	0x20000df4
 80059dc:	20000dd4 	.word	0x20000dd4
 80059e0:	200008fc 	.word	0x200008fc
 80059e4:	20000d8c 	.word	0x20000d8c
 80059e8:	200008f8 	.word	0x200008f8
 80059ec:	20000de0 	.word	0x20000de0

080059f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059f8:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <vTaskInternalSetTimeOutState+0x24>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a00:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <vTaskInternalSetTimeOutState+0x28>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	605a      	str	r2, [r3, #4]
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	20000de4 	.word	0x20000de4
 8005a18:	20000dd0 	.word	0x20000dd0

08005a1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10b      	bne.n	8005a44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	613b      	str	r3, [r7, #16]
}
 8005a3e:	bf00      	nop
 8005a40:	bf00      	nop
 8005a42:	e7fd      	b.n	8005a40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	60fb      	str	r3, [r7, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a62:	f000 ff91 	bl	8006988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a66:	4b1d      	ldr	r3, [pc, #116]	@ (8005adc <xTaskCheckForTimeOut+0xc0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a7e:	d102      	bne.n	8005a86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	e023      	b.n	8005ace <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ae0 <xTaskCheckForTimeOut+0xc4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d007      	beq.n	8005aa2 <xTaskCheckForTimeOut+0x86>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d302      	bcc.n	8005aa2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e015      	b.n	8005ace <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d20b      	bcs.n	8005ac4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ff99 	bl	80059f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	e004      	b.n	8005ace <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ace:	f000 ff8d 	bl	80069ec <vPortExitCritical>

	return xReturn;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000dd0 	.word	0x20000dd0
 8005ae0:	20000de4 	.word	0x20000de4

08005ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	@ (8005af8 <vTaskMissedYield+0x14>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000de0 	.word	0x20000de0

08005afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b04:	f000 f852 	bl	8005bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b08:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <prvIdleTask+0x28>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d9f9      	bls.n	8005b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b10:	4b05      	ldr	r3, [pc, #20]	@ (8005b28 <prvIdleTask+0x2c>)
 8005b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b20:	e7f0      	b.n	8005b04 <prvIdleTask+0x8>
 8005b22:	bf00      	nop
 8005b24:	200008fc 	.word	0x200008fc
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
 8005b36:	e00c      	b.n	8005b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4a12      	ldr	r2, [pc, #72]	@ (8005b8c <prvInitialiseTaskLists+0x60>)
 8005b44:	4413      	add	r3, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe f97c 	bl	8003e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b37      	cmp	r3, #55	@ 0x37
 8005b56:	d9ef      	bls.n	8005b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b58:	480d      	ldr	r0, [pc, #52]	@ (8005b90 <prvInitialiseTaskLists+0x64>)
 8005b5a:	f7fe f973 	bl	8003e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b5e:	480d      	ldr	r0, [pc, #52]	@ (8005b94 <prvInitialiseTaskLists+0x68>)
 8005b60:	f7fe f970 	bl	8003e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b64:	480c      	ldr	r0, [pc, #48]	@ (8005b98 <prvInitialiseTaskLists+0x6c>)
 8005b66:	f7fe f96d 	bl	8003e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b6a:	480c      	ldr	r0, [pc, #48]	@ (8005b9c <prvInitialiseTaskLists+0x70>)
 8005b6c:	f7fe f96a 	bl	8003e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b70:	480b      	ldr	r0, [pc, #44]	@ (8005ba0 <prvInitialiseTaskLists+0x74>)
 8005b72:	f7fe f967 	bl	8003e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <prvInitialiseTaskLists+0x78>)
 8005b78:	4a05      	ldr	r2, [pc, #20]	@ (8005b90 <prvInitialiseTaskLists+0x64>)
 8005b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <prvInitialiseTaskLists+0x7c>)
 8005b7e:	4a05      	ldr	r2, [pc, #20]	@ (8005b94 <prvInitialiseTaskLists+0x68>)
 8005b80:	601a      	str	r2, [r3, #0]
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200008fc 	.word	0x200008fc
 8005b90:	20000d5c 	.word	0x20000d5c
 8005b94:	20000d70 	.word	0x20000d70
 8005b98:	20000d8c 	.word	0x20000d8c
 8005b9c:	20000da0 	.word	0x20000da0
 8005ba0:	20000db8 	.word	0x20000db8
 8005ba4:	20000d84 	.word	0x20000d84
 8005ba8:	20000d88 	.word	0x20000d88

08005bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb2:	e019      	b.n	8005be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bb4:	f000 fee8 	bl	8006988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb8:	4b10      	ldr	r3, [pc, #64]	@ (8005bfc <prvCheckTasksWaitingTermination+0x50>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe f9c7 	bl	8003f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <prvCheckTasksWaitingTermination+0x54>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c00 <prvCheckTasksWaitingTermination+0x54>)
 8005bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <prvCheckTasksWaitingTermination+0x58>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4a0a      	ldr	r2, [pc, #40]	@ (8005c04 <prvCheckTasksWaitingTermination+0x58>)
 8005bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bde:	f000 ff05 	bl	80069ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f810 	bl	8005c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005be8:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <prvCheckTasksWaitingTermination+0x58>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e1      	bne.n	8005bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000da0 	.word	0x20000da0
 8005c00:	20000dcc 	.word	0x20000dcc
 8005c04:	20000db4 	.word	0x20000db4

08005c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3354      	adds	r3, #84	@ 0x54
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 f9cf 	bl	8006fb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d108      	bne.n	8005c36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 f89d 	bl	8006d68 <vPortFree>
				vPortFree( pxTCB );
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 f89a 	bl	8006d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c34:	e019      	b.n	8005c6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d103      	bne.n	8005c48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f891 	bl	8006d68 <vPortFree>
	}
 8005c46:	e010      	b.n	8005c6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d00b      	beq.n	8005c6a <prvDeleteTCB+0x62>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60fb      	str	r3, [r7, #12]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <prvDeleteTCB+0x5e>
	}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <prvResetNextTaskUnblockTime+0x38>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c8c:	e008      	b.n	8005ca0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8e:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <prvResetNextTaskUnblockTime+0x38>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4a04      	ldr	r2, [pc, #16]	@ (8005cb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c9e:	6013      	str	r3, [r2, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	20000d84 	.word	0x20000d84
 8005cb0:	20000dec 	.word	0x20000dec

08005cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce8 <xTaskGetSchedulerState+0x34>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d102      	bne.n	8005cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	e008      	b.n	8005cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc8:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <xTaskGetSchedulerState+0x38>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	e001      	b.n	8005cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cda:	687b      	ldr	r3, [r7, #4]
	}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20000dd8 	.word	0x20000dd8
 8005cec:	20000df4 	.word	0x20000df4

08005cf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d051      	beq.n	8005daa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005db4 <xTaskPriorityInherit+0xc4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d241      	bcs.n	8005d98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db06      	blt.n	8005d2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d1c:	4b25      	ldr	r3, [pc, #148]	@ (8005db4 <xTaskPriorityInherit+0xc4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6959      	ldr	r1, [r3, #20]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005db8 <xTaskPriorityInherit+0xc8>)
 8005d3c:	4413      	add	r3, r2
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	d122      	bne.n	8005d88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe f906 	bl	8003f58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d4c:	4b19      	ldr	r3, [pc, #100]	@ (8005db4 <xTaskPriorityInherit+0xc4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5a:	4b18      	ldr	r3, [pc, #96]	@ (8005dbc <xTaskPriorityInherit+0xcc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d903      	bls.n	8005d6a <xTaskPriorityInherit+0x7a>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	4a15      	ldr	r2, [pc, #84]	@ (8005dbc <xTaskPriorityInherit+0xcc>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a10      	ldr	r2, [pc, #64]	@ (8005db8 <xTaskPriorityInherit+0xc8>)
 8005d78:	441a      	add	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4610      	mov	r0, r2
 8005d82:	f7fe f88c 	bl	8003e9e <vListInsertEnd>
 8005d86:	e004      	b.n	8005d92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d88:	4b0a      	ldr	r3, [pc, #40]	@ (8005db4 <xTaskPriorityInherit+0xc4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e008      	b.n	8005daa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d9c:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <xTaskPriorityInherit+0xc4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d201      	bcs.n	8005daa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005daa:	68fb      	ldr	r3, [r7, #12]
	}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200008f8 	.word	0x200008f8
 8005db8:	200008fc 	.word	0x200008fc
 8005dbc:	20000dd4 	.word	0x20000dd4

08005dc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d058      	beq.n	8005e88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e94 <xTaskPriorityDisinherit+0xd4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d00b      	beq.n	8005df8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10b      	bne.n	8005e18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60bb      	str	r3, [r7, #8]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1c:	1e5a      	subs	r2, r3, #1
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d02c      	beq.n	8005e88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d128      	bne.n	8005e88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe f88c 	bl	8003f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e58:	4b0f      	ldr	r3, [pc, #60]	@ (8005e98 <xTaskPriorityDisinherit+0xd8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d903      	bls.n	8005e68 <xTaskPriorityDisinherit+0xa8>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	4a0c      	ldr	r2, [pc, #48]	@ (8005e98 <xTaskPriorityDisinherit+0xd8>)
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4a09      	ldr	r2, [pc, #36]	@ (8005e9c <xTaskPriorityDisinherit+0xdc>)
 8005e76:	441a      	add	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7fe f80d 	bl	8003e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e88:	697b      	ldr	r3, [r7, #20]
	}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200008f8 	.word	0x200008f8
 8005e98:	20000dd4 	.word	0x20000dd4
 8005e9c:	200008fc 	.word	0x200008fc

08005ea0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d06c      	beq.n	8005f92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d902      	bls.n	8005ee8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	61fb      	str	r3, [r7, #28]
 8005ee6:	e002      	b.n	8005eee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d04c      	beq.n	8005f92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d147      	bne.n	8005f92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f02:	4b26      	ldr	r3, [pc, #152]	@ (8005f9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d10b      	bne.n	8005f24 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	60bb      	str	r3, [r7, #8]
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	db04      	blt.n	8005f42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	6959      	ldr	r1, [r3, #20]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a13      	ldr	r2, [pc, #76]	@ (8005fa0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f52:	4413      	add	r3, r2
 8005f54:	4299      	cmp	r1, r3
 8005f56:	d11c      	bne.n	8005f92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fd fffb 	bl	8003f58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d903      	bls.n	8005f76 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a07      	ldr	r2, [pc, #28]	@ (8005fa0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f84:	441a      	add	r2, r3
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fd ff86 	bl	8003e9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f92:	bf00      	nop
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200008f8 	.word	0x200008f8
 8005fa0:	200008fc 	.word	0x200008fc
 8005fa4:	20000dd4 	.word	0x20000dd4

08005fa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fac:	4b07      	ldr	r3, [pc, #28]	@ (8005fcc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fb4:	4b05      	ldr	r3, [pc, #20]	@ (8005fcc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fba:	3201      	adds	r2, #1
 8005fbc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005fbe:	4b03      	ldr	r3, [pc, #12]	@ (8005fcc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
	}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	200008f8 	.word	0x200008f8

08005fd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fda:	4b21      	ldr	r3, [pc, #132]	@ (8006060 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fe0:	4b20      	ldr	r3, [pc, #128]	@ (8006064 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fd ffb6 	bl	8003f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ff2:	d10a      	bne.n	800600a <prvAddCurrentTaskToDelayedList+0x3a>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8006064 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4819      	ldr	r0, [pc, #100]	@ (8006068 <prvAddCurrentTaskToDelayedList+0x98>)
 8006004:	f7fd ff4b 	bl	8003e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006008:	e026      	b.n	8006058 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4413      	add	r3, r2
 8006010:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006012:	4b14      	ldr	r3, [pc, #80]	@ (8006064 <prvAddCurrentTaskToDelayedList+0x94>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	429a      	cmp	r2, r3
 8006020:	d209      	bcs.n	8006036 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006022:	4b12      	ldr	r3, [pc, #72]	@ (800606c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b0f      	ldr	r3, [pc, #60]	@ (8006064 <prvAddCurrentTaskToDelayedList+0x94>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f7fd ff59 	bl	8003ee6 <vListInsert>
}
 8006034:	e010      	b.n	8006058 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006036:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b0a      	ldr	r3, [pc, #40]	@ (8006064 <prvAddCurrentTaskToDelayedList+0x94>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fd ff4f 	bl	8003ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006048:	4b0a      	ldr	r3, [pc, #40]	@ (8006074 <prvAddCurrentTaskToDelayedList+0xa4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	d202      	bcs.n	8006058 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006052:	4a08      	ldr	r2, [pc, #32]	@ (8006074 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20000dd0 	.word	0x20000dd0
 8006064:	200008f8 	.word	0x200008f8
 8006068:	20000db8 	.word	0x20000db8
 800606c:	20000d88 	.word	0x20000d88
 8006070:	20000d84 	.word	0x20000d84
 8006074:	20000dec 	.word	0x20000dec

08006078 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	@ 0x28
 800607c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006082:	f000 fb13 	bl	80066ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006086:	4b1d      	ldr	r3, [pc, #116]	@ (80060fc <xTimerCreateTimerTask+0x84>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d021      	beq.n	80060d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006096:	1d3a      	adds	r2, r7, #4
 8006098:	f107 0108 	add.w	r1, r7, #8
 800609c:	f107 030c 	add.w	r3, r7, #12
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fd feb5 	bl	8003e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	9202      	str	r2, [sp, #8]
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	2302      	movs	r3, #2
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	460a      	mov	r2, r1
 80060b8:	4911      	ldr	r1, [pc, #68]	@ (8006100 <xTimerCreateTimerTask+0x88>)
 80060ba:	4812      	ldr	r0, [pc, #72]	@ (8006104 <xTimerCreateTimerTask+0x8c>)
 80060bc:	f7fe ffa2 	bl	8005004 <xTaskCreateStatic>
 80060c0:	4603      	mov	r3, r0
 80060c2:	4a11      	ldr	r2, [pc, #68]	@ (8006108 <xTimerCreateTimerTask+0x90>)
 80060c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060c6:	4b10      	ldr	r3, [pc, #64]	@ (8006108 <xTimerCreateTimerTask+0x90>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060ce:	2301      	movs	r3, #1
 80060d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10b      	bne.n	80060f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	613b      	str	r3, [r7, #16]
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	e7fd      	b.n	80060ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060f0:	697b      	ldr	r3, [r7, #20]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000e28 	.word	0x20000e28
 8006100:	080072d0 	.word	0x080072d0
 8006104:	08006245 	.word	0x08006245
 8006108:	20000e2c 	.word	0x20000e2c

0800610c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	@ 0x28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10b      	bne.n	800613c <xTimerGenericCommand+0x30>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	623b      	str	r3, [r7, #32]
}
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	e7fd      	b.n	8006138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800613c:	4b19      	ldr	r3, [pc, #100]	@ (80061a4 <xTimerGenericCommand+0x98>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d02a      	beq.n	800619a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b05      	cmp	r3, #5
 8006154:	dc18      	bgt.n	8006188 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006156:	f7ff fdad 	bl	8005cb4 <xTaskGetSchedulerState>
 800615a:	4603      	mov	r3, r0
 800615c:	2b02      	cmp	r3, #2
 800615e:	d109      	bne.n	8006174 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006160:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <xTimerGenericCommand+0x98>)
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	f107 0110 	add.w	r1, r7, #16
 8006168:	2300      	movs	r3, #0
 800616a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800616c:	f7fe f8d2 	bl	8004314 <xQueueGenericSend>
 8006170:	6278      	str	r0, [r7, #36]	@ 0x24
 8006172:	e012      	b.n	800619a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006174:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <xTimerGenericCommand+0x98>)
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	f107 0110 	add.w	r1, r7, #16
 800617c:	2300      	movs	r3, #0
 800617e:	2200      	movs	r2, #0
 8006180:	f7fe f8c8 	bl	8004314 <xQueueGenericSend>
 8006184:	6278      	str	r0, [r7, #36]	@ 0x24
 8006186:	e008      	b.n	800619a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <xTimerGenericCommand+0x98>)
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	f107 0110 	add.w	r1, r7, #16
 8006190:	2300      	movs	r3, #0
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	f7fe f9c0 	bl	8004518 <xQueueGenericSendFromISR>
 8006198:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800619c:	4618      	mov	r0, r3
 800619e:	3728      	adds	r7, #40	@ 0x28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000e28 	.word	0x20000e28

080061a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b2:	4b23      	ldr	r3, [pc, #140]	@ (8006240 <prvProcessExpiredTimer+0x98>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	3304      	adds	r3, #4
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fd fec9 	bl	8003f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d023      	beq.n	800621c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	699a      	ldr	r2, [r3, #24]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	18d1      	adds	r1, r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	6978      	ldr	r0, [r7, #20]
 80061e2:	f000 f8d5 	bl	8006390 <prvInsertTimerInActiveList>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d020      	beq.n	800622e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061ec:	2300      	movs	r3, #0
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2300      	movs	r3, #0
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	2100      	movs	r1, #0
 80061f6:	6978      	ldr	r0, [r7, #20]
 80061f8:	f7ff ff88 	bl	800610c <xTimerGenericCommand>
 80061fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d114      	bne.n	800622e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006222:	f023 0301 	bic.w	r3, r3, #1
 8006226:	b2da      	uxtb	r2, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	6978      	ldr	r0, [r7, #20]
 8006234:	4798      	blx	r3
}
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000e20 	.word	0x20000e20

08006244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800624c:	f107 0308 	add.w	r3, r7, #8
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f859 	bl	8006308 <prvGetNextExpireTime>
 8006256:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4619      	mov	r1, r3
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f805 	bl	800626c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006262:	f000 f8d7 	bl	8006414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006266:	bf00      	nop
 8006268:	e7f0      	b.n	800624c <prvTimerTask+0x8>
	...

0800626c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006276:	f7ff f929 	bl	80054cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f866 	bl	8006350 <prvSampleTimeNow>
 8006284:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d130      	bne.n	80062ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <prvProcessTimerOrBlockTask+0x3c>
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	429a      	cmp	r2, r3
 8006298:	d806      	bhi.n	80062a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800629a:	f7ff f925 	bl	80054e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ff81 	bl	80061a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062a6:	e024      	b.n	80062f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ae:	4b13      	ldr	r3, [pc, #76]	@ (80062fc <prvProcessTimerOrBlockTask+0x90>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <prvProcessTimerOrBlockTask+0x50>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <prvProcessTimerOrBlockTask+0x52>
 80062bc:	2300      	movs	r3, #0
 80062be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006300 <prvProcessTimerOrBlockTask+0x94>)
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	4619      	mov	r1, r3
 80062ce:	f7fe fe65 	bl	8004f9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062d2:	f7ff f909 	bl	80054e8 <xTaskResumeAll>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062dc:	4b09      	ldr	r3, [pc, #36]	@ (8006304 <prvProcessTimerOrBlockTask+0x98>)
 80062de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	f3bf 8f6f 	isb	sy
}
 80062ec:	e001      	b.n	80062f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062ee:	f7ff f8fb 	bl	80054e8 <xTaskResumeAll>
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000e24 	.word	0x20000e24
 8006300:	20000e28 	.word	0x20000e28
 8006304:	e000ed04 	.word	0xe000ed04

08006308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006310:	4b0e      	ldr	r3, [pc, #56]	@ (800634c <prvGetNextExpireTime+0x44>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <prvGetNextExpireTime+0x16>
 800631a:	2201      	movs	r2, #1
 800631c:	e000      	b.n	8006320 <prvGetNextExpireTime+0x18>
 800631e:	2200      	movs	r2, #0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800632c:	4b07      	ldr	r3, [pc, #28]	@ (800634c <prvGetNextExpireTime+0x44>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e001      	b.n	800633c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800633c:	68fb      	ldr	r3, [r7, #12]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000e20 	.word	0x20000e20

08006350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006358:	f7ff f964 	bl	8005624 <xTaskGetTickCount>
 800635c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800635e:	4b0b      	ldr	r3, [pc, #44]	@ (800638c <prvSampleTimeNow+0x3c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	429a      	cmp	r2, r3
 8006366:	d205      	bcs.n	8006374 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006368:	f000 f93a 	bl	80065e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e002      	b.n	800637a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800637a:	4a04      	ldr	r2, [pc, #16]	@ (800638c <prvSampleTimeNow+0x3c>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006380:	68fb      	ldr	r3, [r7, #12]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000e30 	.word	0x20000e30

08006390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d812      	bhi.n	80063dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d302      	bcc.n	80063ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	e01b      	b.n	8006402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ca:	4b10      	ldr	r3, [pc, #64]	@ (800640c <prvInsertTimerInActiveList+0x7c>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7fd fd86 	bl	8003ee6 <vListInsert>
 80063da:	e012      	b.n	8006402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d206      	bcs.n	80063f2 <prvInsertTimerInActiveList+0x62>
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d302      	bcc.n	80063f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e007      	b.n	8006402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063f2:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <prvInsertTimerInActiveList+0x80>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f7fd fd72 	bl	8003ee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006402:	697b      	ldr	r3, [r7, #20]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000e24 	.word	0x20000e24
 8006410:	20000e20 	.word	0x20000e20

08006414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08e      	sub	sp, #56	@ 0x38
 8006418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800641a:	e0ce      	b.n	80065ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	da19      	bge.n	8006456 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006422:	1d3b      	adds	r3, r7, #4
 8006424:	3304      	adds	r3, #4
 8006426:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	61fb      	str	r3, [r7, #28]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800644c:	6850      	ldr	r0, [r2, #4]
 800644e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006450:	6892      	ldr	r2, [r2, #8]
 8006452:	4611      	mov	r1, r2
 8006454:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f2c0 80ae 	blt.w	80065ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646c:	3304      	adds	r3, #4
 800646e:	4618      	mov	r0, r3
 8006470:	f7fd fd72 	bl	8003f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006474:	463b      	mov	r3, r7
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ff6a 	bl	8006350 <prvSampleTimeNow>
 800647c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b09      	cmp	r3, #9
 8006482:	f200 8097 	bhi.w	80065b4 <prvProcessReceivedCommands+0x1a0>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <prvProcessReceivedCommands+0x78>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064b5 	.word	0x080064b5
 8006490:	080064b5 	.word	0x080064b5
 8006494:	080064b5 	.word	0x080064b5
 8006498:	0800652b 	.word	0x0800652b
 800649c:	0800653f 	.word	0x0800653f
 80064a0:	0800658b 	.word	0x0800658b
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	080064b5 	.word	0x080064b5
 80064ac:	0800652b 	.word	0x0800652b
 80064b0:	0800653f 	.word	0x0800653f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	18d1      	adds	r1, r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064d4:	f7ff ff5c 	bl	8006390 <prvInsertTimerInActiveList>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d06c      	beq.n	80065b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d061      	beq.n	80065b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	441a      	add	r2, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	2300      	movs	r3, #0
 8006502:	2100      	movs	r1, #0
 8006504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006506:	f7ff fe01 	bl	800610c <xTimerGenericCommand>
 800650a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d152      	bne.n	80065b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	61bb      	str	r3, [r7, #24]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006530:	f023 0301 	bic.w	r3, r3, #1
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800653c:	e03d      	b.n	80065ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	b2da      	uxtb	r2, r3
 800654a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	617b      	str	r3, [r7, #20]
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	e7fd      	b.n	8006572 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	18d1      	adds	r1, r2, r3
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006584:	f7ff ff04 	bl	8006390 <prvInsertTimerInActiveList>
					break;
 8006588:	e017      	b.n	80065ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006598:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800659a:	f000 fbe5 	bl	8006d68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800659e:	e00c      	b.n	80065ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065a6:	f023 0301 	bic.w	r3, r3, #1
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065b2:	e002      	b.n	80065ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80065b4:	bf00      	nop
 80065b6:	e000      	b.n	80065ba <prvProcessReceivedCommands+0x1a6>
					break;
 80065b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ba:	4b08      	ldr	r3, [pc, #32]	@ (80065dc <prvProcessReceivedCommands+0x1c8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	1d39      	adds	r1, r7, #4
 80065c0:	2200      	movs	r2, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe f8d6 	bl	8004774 <xQueueReceive>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f47f af26 	bne.w	800641c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	3730      	adds	r7, #48	@ 0x30
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000e28 	.word	0x20000e28

080065e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065e6:	e049      	b.n	800667c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065e8:	4b2e      	ldr	r3, [pc, #184]	@ (80066a4 <prvSwitchTimerLists+0xc4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f2:	4b2c      	ldr	r3, [pc, #176]	@ (80066a4 <prvSwitchTimerLists+0xc4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7fd fca9 	bl	8003f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02f      	beq.n	800667c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	429a      	cmp	r2, r3
 800662c:	d90e      	bls.n	800664c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800663a:	4b1a      	ldr	r3, [pc, #104]	@ (80066a4 <prvSwitchTimerLists+0xc4>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f7fd fc4e 	bl	8003ee6 <vListInsert>
 800664a:	e017      	b.n	800667c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800664c:	2300      	movs	r3, #0
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	2100      	movs	r1, #0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff fd58 	bl	800610c <xTimerGenericCommand>
 800665c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	603b      	str	r3, [r7, #0]
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800667c:	4b09      	ldr	r3, [pc, #36]	@ (80066a4 <prvSwitchTimerLists+0xc4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1b0      	bne.n	80065e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006686:	4b07      	ldr	r3, [pc, #28]	@ (80066a4 <prvSwitchTimerLists+0xc4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <prvSwitchTimerLists+0xc8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a04      	ldr	r2, [pc, #16]	@ (80066a4 <prvSwitchTimerLists+0xc4>)
 8006692:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006694:	4a04      	ldr	r2, [pc, #16]	@ (80066a8 <prvSwitchTimerLists+0xc8>)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6013      	str	r3, [r2, #0]
}
 800669a:	bf00      	nop
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000e20 	.word	0x20000e20
 80066a8:	20000e24 	.word	0x20000e24

080066ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066b2:	f000 f969 	bl	8006988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066b6:	4b15      	ldr	r3, [pc, #84]	@ (800670c <prvCheckForValidListAndQueue+0x60>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d120      	bne.n	8006700 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066be:	4814      	ldr	r0, [pc, #80]	@ (8006710 <prvCheckForValidListAndQueue+0x64>)
 80066c0:	f7fd fbc0 	bl	8003e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066c4:	4813      	ldr	r0, [pc, #76]	@ (8006714 <prvCheckForValidListAndQueue+0x68>)
 80066c6:	f7fd fbbd 	bl	8003e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066ca:	4b13      	ldr	r3, [pc, #76]	@ (8006718 <prvCheckForValidListAndQueue+0x6c>)
 80066cc:	4a10      	ldr	r2, [pc, #64]	@ (8006710 <prvCheckForValidListAndQueue+0x64>)
 80066ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066d0:	4b12      	ldr	r3, [pc, #72]	@ (800671c <prvCheckForValidListAndQueue+0x70>)
 80066d2:	4a10      	ldr	r2, [pc, #64]	@ (8006714 <prvCheckForValidListAndQueue+0x68>)
 80066d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066d6:	2300      	movs	r3, #0
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <prvCheckForValidListAndQueue+0x74>)
 80066dc:	4a11      	ldr	r2, [pc, #68]	@ (8006724 <prvCheckForValidListAndQueue+0x78>)
 80066de:	2110      	movs	r1, #16
 80066e0:	200a      	movs	r0, #10
 80066e2:	f7fd fccd 	bl	8004080 <xQueueGenericCreateStatic>
 80066e6:	4603      	mov	r3, r0
 80066e8:	4a08      	ldr	r2, [pc, #32]	@ (800670c <prvCheckForValidListAndQueue+0x60>)
 80066ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066ec:	4b07      	ldr	r3, [pc, #28]	@ (800670c <prvCheckForValidListAndQueue+0x60>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066f4:	4b05      	ldr	r3, [pc, #20]	@ (800670c <prvCheckForValidListAndQueue+0x60>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	490b      	ldr	r1, [pc, #44]	@ (8006728 <prvCheckForValidListAndQueue+0x7c>)
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fbfa 	bl	8004ef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006700:	f000 f974 	bl	80069ec <vPortExitCritical>
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000e28 	.word	0x20000e28
 8006710:	20000df8 	.word	0x20000df8
 8006714:	20000e0c 	.word	0x20000e0c
 8006718:	20000e20 	.word	0x20000e20
 800671c:	20000e24 	.word	0x20000e24
 8006720:	20000ed4 	.word	0x20000ed4
 8006724:	20000e34 	.word	0x20000e34
 8006728:	080072d8 	.word	0x080072d8

0800672c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3b04      	subs	r3, #4
 800673c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3b04      	subs	r3, #4
 800674a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f023 0201 	bic.w	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3b04      	subs	r3, #4
 800675a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800675c:	4a0c      	ldr	r2, [pc, #48]	@ (8006790 <pxPortInitialiseStack+0x64>)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3b14      	subs	r3, #20
 8006766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3b04      	subs	r3, #4
 8006772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f06f 0202 	mvn.w	r2, #2
 800677a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3b20      	subs	r3, #32
 8006780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006782:	68fb      	ldr	r3, [r7, #12]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	08006795 	.word	0x08006795

08006794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800679e:	4b13      	ldr	r3, [pc, #76]	@ (80067ec <prvTaskExitError+0x58>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067a6:	d00b      	beq.n	80067c0 <prvTaskExitError+0x2c>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	60fb      	str	r3, [r7, #12]
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	e7fd      	b.n	80067bc <prvTaskExitError+0x28>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60bb      	str	r3, [r7, #8]
}
 80067d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067d4:	bf00      	nop
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0fc      	beq.n	80067d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	2000000c 	.word	0x2000000c

080067f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067f0:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <pxCurrentTCBConst2>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	f380 8809 	msr	PSP, r0
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	4770      	bx	lr
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst2>:
 8006810:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006818:	4808      	ldr	r0, [pc, #32]	@ (800683c <prvPortStartFirstTask+0x24>)
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f380 8808 	msr	MSP, r0
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8814 	msr	CONTROL, r0
 800682a:	b662      	cpsie	i
 800682c:	b661      	cpsie	f
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	df00      	svc	0
 8006838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800683a:	bf00      	nop
 800683c:	e000ed08 	.word	0xe000ed08

08006840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006846:	4b47      	ldr	r3, [pc, #284]	@ (8006964 <xPortStartScheduler+0x124>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a47      	ldr	r2, [pc, #284]	@ (8006968 <xPortStartScheduler+0x128>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10b      	bne.n	8006868 <xPortStartScheduler+0x28>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	613b      	str	r3, [r7, #16]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006868:	4b3e      	ldr	r3, [pc, #248]	@ (8006964 <xPortStartScheduler+0x124>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a3f      	ldr	r2, [pc, #252]	@ (800696c <xPortStartScheduler+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d10b      	bne.n	800688a <xPortStartScheduler+0x4a>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	60fb      	str	r3, [r7, #12]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800688a:	4b39      	ldr	r3, [pc, #228]	@ (8006970 <xPortStartScheduler+0x130>)
 800688c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	22ff      	movs	r2, #255	@ 0xff
 800689a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4b31      	ldr	r3, [pc, #196]	@ (8006974 <xPortStartScheduler+0x134>)
 80068b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068b2:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <xPortStartScheduler+0x138>)
 80068b4:	2207      	movs	r2, #7
 80068b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b8:	e009      	b.n	80068ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80068ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006978 <xPortStartScheduler+0x138>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3b01      	subs	r3, #1
 80068c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006978 <xPortStartScheduler+0x138>)
 80068c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d6:	2b80      	cmp	r3, #128	@ 0x80
 80068d8:	d0ef      	beq.n	80068ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068da:	4b27      	ldr	r3, [pc, #156]	@ (8006978 <xPortStartScheduler+0x138>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1c3 0307 	rsb	r3, r3, #7
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d00b      	beq.n	80068fe <xPortStartScheduler+0xbe>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60bb      	str	r3, [r7, #8]
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	e7fd      	b.n	80068fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006978 <xPortStartScheduler+0x138>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	4a1c      	ldr	r2, [pc, #112]	@ (8006978 <xPortStartScheduler+0x138>)
 8006906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006908:	4b1b      	ldr	r3, [pc, #108]	@ (8006978 <xPortStartScheduler+0x138>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006910:	4a19      	ldr	r2, [pc, #100]	@ (8006978 <xPortStartScheduler+0x138>)
 8006912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800691c:	4b17      	ldr	r3, [pc, #92]	@ (800697c <xPortStartScheduler+0x13c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a16      	ldr	r2, [pc, #88]	@ (800697c <xPortStartScheduler+0x13c>)
 8006922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006928:	4b14      	ldr	r3, [pc, #80]	@ (800697c <xPortStartScheduler+0x13c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a13      	ldr	r2, [pc, #76]	@ (800697c <xPortStartScheduler+0x13c>)
 800692e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006934:	f000 f8da 	bl	8006aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006938:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <xPortStartScheduler+0x140>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800693e:	f000 f8f9 	bl	8006b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006942:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <xPortStartScheduler+0x144>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a0f      	ldr	r2, [pc, #60]	@ (8006984 <xPortStartScheduler+0x144>)
 8006948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800694c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800694e:	f7ff ff63 	bl	8006818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006952:	f7fe ff31 	bl	80057b8 <vTaskSwitchContext>
	prvTaskExitError();
 8006956:	f7ff ff1d 	bl	8006794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	e000ed00 	.word	0xe000ed00
 8006968:	410fc271 	.word	0x410fc271
 800696c:	410fc270 	.word	0x410fc270
 8006970:	e000e400 	.word	0xe000e400
 8006974:	20000f24 	.word	0x20000f24
 8006978:	20000f28 	.word	0x20000f28
 800697c:	e000ed20 	.word	0xe000ed20
 8006980:	2000000c 	.word	0x2000000c
 8006984:	e000ef34 	.word	0xe000ef34

08006988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069a2:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a0e      	ldr	r2, [pc, #56]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ac:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d110      	bne.n	80069d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069b4:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <vPortEnterCritical+0x60>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	603b      	str	r3, [r7, #0]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <vPortEnterCritical+0x4a>
	}
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	2000000c 	.word	0x2000000c
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069f2:	4b12      	ldr	r3, [pc, #72]	@ (8006a3c <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <vPortExitCritical+0x26>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	607b      	str	r3, [r7, #4]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	4a08      	ldr	r2, [pc, #32]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a1c:	4b07      	ldr	r3, [pc, #28]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <vPortExitCritical+0x44>
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
}
 8006a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	2000000c 	.word	0x2000000c

08006a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a40:	f3ef 8009 	mrs	r0, PSP
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <pxCurrentTCBConst>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f01e 0f10 	tst.w	lr, #16
 8006a50:	bf08      	it	eq
 8006a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	6010      	str	r0, [r2, #0]
 8006a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a64:	f380 8811 	msr	BASEPRI, r0
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f7fe fea2 	bl	80057b8 <vTaskSwitchContext>
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f380 8811 	msr	BASEPRI, r0
 8006a7c:	bc09      	pop	{r0, r3}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a86:	f01e 0f10 	tst.w	lr, #16
 8006a8a:	bf08      	it	eq
 8006a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a90:	f380 8809 	msr	PSP, r0
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w

08006aa0 <pxCurrentTCBConst>:
 8006aa0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop

08006aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ac2:	f7fe fdbf 	bl	8005644 <xTaskIncrementTick>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006acc:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <xPortSysTickHandler+0x40>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f383 8811 	msr	BASEPRI, r3
}
 8006ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006af0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b24 <vPortSetupTimerInterrupt+0x38>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <vPortSetupTimerInterrupt+0x3c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <vPortSetupTimerInterrupt+0x40>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	4a09      	ldr	r2, [pc, #36]	@ (8006b30 <vPortSetupTimerInterrupt+0x44>)
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b0e:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	e000e010 	.word	0xe000e010
 8006b24:	e000e018 	.word	0xe000e018
 8006b28:	20000000 	.word	0x20000000
 8006b2c:	10624dd3 	.word	0x10624dd3
 8006b30:	e000e014 	.word	0xe000e014

08006b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b44 <vPortEnableVFP+0x10>
 8006b38:	6801      	ldr	r1, [r0, #0]
 8006b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b3e:	6001      	str	r1, [r0, #0]
 8006b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b42:	bf00      	nop
 8006b44:	e000ed88 	.word	0xe000ed88

08006b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b4e:	f3ef 8305 	mrs	r3, IPSR
 8006b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d915      	bls.n	8006b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b5a:	4a18      	ldr	r2, [pc, #96]	@ (8006bbc <vPortValidateInterruptPriority+0x74>)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b64:	4b16      	ldr	r3, [pc, #88]	@ (8006bc0 <vPortValidateInterruptPriority+0x78>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	7afa      	ldrb	r2, [r7, #11]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d20b      	bcs.n	8006b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	607b      	str	r3, [r7, #4]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b86:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc4 <vPortValidateInterruptPriority+0x7c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc8 <vPortValidateInterruptPriority+0x80>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d90b      	bls.n	8006bae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	603b      	str	r3, [r7, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	e7fd      	b.n	8006baa <vPortValidateInterruptPriority+0x62>
	}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	e000e3f0 	.word	0xe000e3f0
 8006bc0:	20000f24 	.word	0x20000f24
 8006bc4:	e000ed0c 	.word	0xe000ed0c
 8006bc8:	20000f28 	.word	0x20000f28

08006bcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	@ 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bd8:	f7fe fc78 	bl	80054cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8006d50 <pvPortMalloc+0x184>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006be4:	f000 f924 	bl	8006e30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006be8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d54 <pvPortMalloc+0x188>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f040 8095 	bne.w	8006d20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01e      	beq.n	8006c3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4413      	add	r3, r2
 8006c02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d015      	beq.n	8006c3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f023 0307 	bic.w	r3, r3, #7
 8006c14:	3308      	adds	r3, #8
 8006c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <pvPortMalloc+0x6e>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	617b      	str	r3, [r7, #20]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d06f      	beq.n	8006d20 <pvPortMalloc+0x154>
 8006c40:	4b45      	ldr	r3, [pc, #276]	@ (8006d58 <pvPortMalloc+0x18c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d86a      	bhi.n	8006d20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c4a:	4b44      	ldr	r3, [pc, #272]	@ (8006d5c <pvPortMalloc+0x190>)
 8006c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c4e:	4b43      	ldr	r3, [pc, #268]	@ (8006d5c <pvPortMalloc+0x190>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c54:	e004      	b.n	8006c60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d903      	bls.n	8006c72 <pvPortMalloc+0xa6>
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f1      	bne.n	8006c56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c72:	4b37      	ldr	r3, [pc, #220]	@ (8006d50 <pvPortMalloc+0x184>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d051      	beq.n	8006d20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2208      	movs	r2, #8
 8006c82:	4413      	add	r3, r2
 8006c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	2308      	movs	r3, #8
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d920      	bls.n	8006ce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <pvPortMalloc+0xfc>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	613b      	str	r3, [r7, #16]
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cda:	69b8      	ldr	r0, [r7, #24]
 8006cdc:	f000 f90a 	bl	8006ef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <pvPortMalloc+0x18c>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	4a1b      	ldr	r2, [pc, #108]	@ (8006d58 <pvPortMalloc+0x18c>)
 8006cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cee:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <pvPortMalloc+0x18c>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d60 <pvPortMalloc+0x194>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d203      	bcs.n	8006d02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cfa:	4b17      	ldr	r3, [pc, #92]	@ (8006d58 <pvPortMalloc+0x18c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	@ (8006d60 <pvPortMalloc+0x194>)
 8006d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	4b13      	ldr	r3, [pc, #76]	@ (8006d54 <pvPortMalloc+0x188>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <pvPortMalloc+0x198>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	4a11      	ldr	r2, [pc, #68]	@ (8006d64 <pvPortMalloc+0x198>)
 8006d1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d20:	f7fe fbe2 	bl	80054e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <pvPortMalloc+0x17a>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60fb      	str	r3, [r7, #12]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <pvPortMalloc+0x176>
	return pvReturn;
 8006d46:	69fb      	ldr	r3, [r7, #28]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3728      	adds	r7, #40	@ 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20001aec 	.word	0x20001aec
 8006d54:	20001b00 	.word	0x20001b00
 8006d58:	20001af0 	.word	0x20001af0
 8006d5c:	20001ae4 	.word	0x20001ae4
 8006d60:	20001af4 	.word	0x20001af4
 8006d64:	20001af8 	.word	0x20001af8

08006d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d04f      	beq.n	8006e1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	425b      	negs	r3, r3
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	4b25      	ldr	r3, [pc, #148]	@ (8006e24 <vPortFree+0xbc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <vPortFree+0x46>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60fb      	str	r3, [r7, #12]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00b      	beq.n	8006dce <vPortFree+0x66>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	60bb      	str	r3, [r7, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	e7fd      	b.n	8006dca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	4b14      	ldr	r3, [pc, #80]	@ (8006e24 <vPortFree+0xbc>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01e      	beq.n	8006e1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d11a      	bne.n	8006e1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e24 <vPortFree+0xbc>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	43db      	mvns	r3, r3
 8006dee:	401a      	ands	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006df4:	f7fe fb6a 	bl	80054cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <vPortFree+0xc0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4413      	add	r3, r2
 8006e02:	4a09      	ldr	r2, [pc, #36]	@ (8006e28 <vPortFree+0xc0>)
 8006e04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e06:	6938      	ldr	r0, [r7, #16]
 8006e08:	f000 f874 	bl	8006ef4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e0c:	4b07      	ldr	r3, [pc, #28]	@ (8006e2c <vPortFree+0xc4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3301      	adds	r3, #1
 8006e12:	4a06      	ldr	r2, [pc, #24]	@ (8006e2c <vPortFree+0xc4>)
 8006e14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e16:	f7fe fb67 	bl	80054e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e1a:	bf00      	nop
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20001b00 	.word	0x20001b00
 8006e28:	20001af0 	.word	0x20001af0
 8006e2c:	20001afc 	.word	0x20001afc

08006e30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e36:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006e3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e3c:	4b27      	ldr	r3, [pc, #156]	@ (8006edc <prvHeapInit+0xac>)
 8006e3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00c      	beq.n	8006e64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3307      	adds	r3, #7
 8006e4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0307 	bic.w	r3, r3, #7
 8006e56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006edc <prvHeapInit+0xac>)
 8006e60:	4413      	add	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee0 <prvHeapInit+0xb0>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee0 <prvHeapInit+0xb0>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	4413      	add	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e7c:	2208      	movs	r2, #8
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0307 	bic.w	r3, r3, #7
 8006e8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4a15      	ldr	r2, [pc, #84]	@ (8006ee4 <prvHeapInit+0xb4>)
 8006e90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e92:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <prvHeapInit+0xb4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ee4 <prvHeapInit+0xb4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	1ad2      	subs	r2, r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee4 <prvHeapInit+0xb4>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee8 <prvHeapInit+0xb8>)
 8006ebe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	4a09      	ldr	r2, [pc, #36]	@ (8006eec <prvHeapInit+0xbc>)
 8006ec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ec8:	4b09      	ldr	r3, [pc, #36]	@ (8006ef0 <prvHeapInit+0xc0>)
 8006eca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ece:	601a      	str	r2, [r3, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	20000f2c 	.word	0x20000f2c
 8006ee0:	20001ae4 	.word	0x20001ae4
 8006ee4:	20001aec 	.word	0x20001aec
 8006ee8:	20001af4 	.word	0x20001af4
 8006eec:	20001af0 	.word	0x20001af0
 8006ef0:	20001b00 	.word	0x20001b00

08006ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006efc:	4b28      	ldr	r3, [pc, #160]	@ (8006fa0 <prvInsertBlockIntoFreeList+0xac>)
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	e002      	b.n	8006f08 <prvInsertBlockIntoFreeList+0x14>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d8f7      	bhi.n	8006f02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d108      	bne.n	8006f36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	441a      	add	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	441a      	add	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d118      	bne.n	8006f7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4b15      	ldr	r3, [pc, #84]	@ (8006fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d00d      	beq.n	8006f72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	441a      	add	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	e008      	b.n	8006f84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f72:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	e003      	b.n	8006f84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d002      	beq.n	8006f92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20001ae4 	.word	0x20001ae4
 8006fa4:	20001aec 	.word	0x20001aec

08006fa8 <memset>:
 8006fa8:	4402      	add	r2, r0
 8006faa:	4603      	mov	r3, r0
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d100      	bne.n	8006fb2 <memset+0xa>
 8006fb0:	4770      	bx	lr
 8006fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb6:	e7f9      	b.n	8006fac <memset+0x4>

08006fb8 <_reclaim_reent>:
 8006fb8:	4b29      	ldr	r3, [pc, #164]	@ (8007060 <_reclaim_reent+0xa8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4283      	cmp	r3, r0
 8006fbe:	b570      	push	{r4, r5, r6, lr}
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	d04b      	beq.n	800705c <_reclaim_reent+0xa4>
 8006fc4:	69c3      	ldr	r3, [r0, #28]
 8006fc6:	b1ab      	cbz	r3, 8006ff4 <_reclaim_reent+0x3c>
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	b16b      	cbz	r3, 8006fe8 <_reclaim_reent+0x30>
 8006fcc:	2500      	movs	r5, #0
 8006fce:	69e3      	ldr	r3, [r4, #28]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	5959      	ldr	r1, [r3, r5]
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	d13b      	bne.n	8007050 <_reclaim_reent+0x98>
 8006fd8:	3504      	adds	r5, #4
 8006fda:	2d80      	cmp	r5, #128	@ 0x80
 8006fdc:	d1f7      	bne.n	8006fce <_reclaim_reent+0x16>
 8006fde:	69e3      	ldr	r3, [r4, #28]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	68d9      	ldr	r1, [r3, #12]
 8006fe4:	f000 f872 	bl	80070cc <_free_r>
 8006fe8:	69e3      	ldr	r3, [r4, #28]
 8006fea:	6819      	ldr	r1, [r3, #0]
 8006fec:	b111      	cbz	r1, 8006ff4 <_reclaim_reent+0x3c>
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 f86c 	bl	80070cc <_free_r>
 8006ff4:	6961      	ldr	r1, [r4, #20]
 8006ff6:	b111      	cbz	r1, 8006ffe <_reclaim_reent+0x46>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 f867 	bl	80070cc <_free_r>
 8006ffe:	69e1      	ldr	r1, [r4, #28]
 8007000:	b111      	cbz	r1, 8007008 <_reclaim_reent+0x50>
 8007002:	4620      	mov	r0, r4
 8007004:	f000 f862 	bl	80070cc <_free_r>
 8007008:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800700a:	b111      	cbz	r1, 8007012 <_reclaim_reent+0x5a>
 800700c:	4620      	mov	r0, r4
 800700e:	f000 f85d 	bl	80070cc <_free_r>
 8007012:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007014:	b111      	cbz	r1, 800701c <_reclaim_reent+0x64>
 8007016:	4620      	mov	r0, r4
 8007018:	f000 f858 	bl	80070cc <_free_r>
 800701c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800701e:	b111      	cbz	r1, 8007026 <_reclaim_reent+0x6e>
 8007020:	4620      	mov	r0, r4
 8007022:	f000 f853 	bl	80070cc <_free_r>
 8007026:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007028:	b111      	cbz	r1, 8007030 <_reclaim_reent+0x78>
 800702a:	4620      	mov	r0, r4
 800702c:	f000 f84e 	bl	80070cc <_free_r>
 8007030:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007032:	b111      	cbz	r1, 800703a <_reclaim_reent+0x82>
 8007034:	4620      	mov	r0, r4
 8007036:	f000 f849 	bl	80070cc <_free_r>
 800703a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800703c:	b111      	cbz	r1, 8007044 <_reclaim_reent+0x8c>
 800703e:	4620      	mov	r0, r4
 8007040:	f000 f844 	bl	80070cc <_free_r>
 8007044:	6a23      	ldr	r3, [r4, #32]
 8007046:	b14b      	cbz	r3, 800705c <_reclaim_reent+0xa4>
 8007048:	4620      	mov	r0, r4
 800704a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800704e:	4718      	bx	r3
 8007050:	680e      	ldr	r6, [r1, #0]
 8007052:	4620      	mov	r0, r4
 8007054:	f000 f83a 	bl	80070cc <_free_r>
 8007058:	4631      	mov	r1, r6
 800705a:	e7bb      	b.n	8006fd4 <_reclaim_reent+0x1c>
 800705c:	bd70      	pop	{r4, r5, r6, pc}
 800705e:	bf00      	nop
 8007060:	20000010 	.word	0x20000010

08007064 <__libc_init_array>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	4d0d      	ldr	r5, [pc, #52]	@ (800709c <__libc_init_array+0x38>)
 8007068:	4c0d      	ldr	r4, [pc, #52]	@ (80070a0 <__libc_init_array+0x3c>)
 800706a:	1b64      	subs	r4, r4, r5
 800706c:	10a4      	asrs	r4, r4, #2
 800706e:	2600      	movs	r6, #0
 8007070:	42a6      	cmp	r6, r4
 8007072:	d109      	bne.n	8007088 <__libc_init_array+0x24>
 8007074:	4d0b      	ldr	r5, [pc, #44]	@ (80070a4 <__libc_init_array+0x40>)
 8007076:	4c0c      	ldr	r4, [pc, #48]	@ (80070a8 <__libc_init_array+0x44>)
 8007078:	f000 f87e 	bl	8007178 <_init>
 800707c:	1b64      	subs	r4, r4, r5
 800707e:	10a4      	asrs	r4, r4, #2
 8007080:	2600      	movs	r6, #0
 8007082:	42a6      	cmp	r6, r4
 8007084:	d105      	bne.n	8007092 <__libc_init_array+0x2e>
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	f855 3b04 	ldr.w	r3, [r5], #4
 800708c:	4798      	blx	r3
 800708e:	3601      	adds	r6, #1
 8007090:	e7ee      	b.n	8007070 <__libc_init_array+0xc>
 8007092:	f855 3b04 	ldr.w	r3, [r5], #4
 8007096:	4798      	blx	r3
 8007098:	3601      	adds	r6, #1
 800709a:	e7f2      	b.n	8007082 <__libc_init_array+0x1e>
 800709c:	080073ac 	.word	0x080073ac
 80070a0:	080073ac 	.word	0x080073ac
 80070a4:	080073ac 	.word	0x080073ac
 80070a8:	080073b0 	.word	0x080073b0

080070ac <__retarget_lock_acquire_recursive>:
 80070ac:	4770      	bx	lr

080070ae <__retarget_lock_release_recursive>:
 80070ae:	4770      	bx	lr

080070b0 <memcpy>:
 80070b0:	440a      	add	r2, r1
 80070b2:	4291      	cmp	r1, r2
 80070b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80070b8:	d100      	bne.n	80070bc <memcpy+0xc>
 80070ba:	4770      	bx	lr
 80070bc:	b510      	push	{r4, lr}
 80070be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c6:	4291      	cmp	r1, r2
 80070c8:	d1f9      	bne.n	80070be <memcpy+0xe>
 80070ca:	bd10      	pop	{r4, pc}

080070cc <_free_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4605      	mov	r5, r0
 80070d0:	2900      	cmp	r1, #0
 80070d2:	d041      	beq.n	8007158 <_free_r+0x8c>
 80070d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d8:	1f0c      	subs	r4, r1, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bfb8      	it	lt
 80070de:	18e4      	addlt	r4, r4, r3
 80070e0:	f000 f83e 	bl	8007160 <__malloc_lock>
 80070e4:	4a1d      	ldr	r2, [pc, #116]	@ (800715c <_free_r+0x90>)
 80070e6:	6813      	ldr	r3, [r2, #0]
 80070e8:	b933      	cbnz	r3, 80070f8 <_free_r+0x2c>
 80070ea:	6063      	str	r3, [r4, #4]
 80070ec:	6014      	str	r4, [r2, #0]
 80070ee:	4628      	mov	r0, r5
 80070f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f4:	f000 b83a 	b.w	800716c <__malloc_unlock>
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	d908      	bls.n	800710e <_free_r+0x42>
 80070fc:	6820      	ldr	r0, [r4, #0]
 80070fe:	1821      	adds	r1, r4, r0
 8007100:	428b      	cmp	r3, r1
 8007102:	bf01      	itttt	eq
 8007104:	6819      	ldreq	r1, [r3, #0]
 8007106:	685b      	ldreq	r3, [r3, #4]
 8007108:	1809      	addeq	r1, r1, r0
 800710a:	6021      	streq	r1, [r4, #0]
 800710c:	e7ed      	b.n	80070ea <_free_r+0x1e>
 800710e:	461a      	mov	r2, r3
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	b10b      	cbz	r3, 8007118 <_free_r+0x4c>
 8007114:	42a3      	cmp	r3, r4
 8007116:	d9fa      	bls.n	800710e <_free_r+0x42>
 8007118:	6811      	ldr	r1, [r2, #0]
 800711a:	1850      	adds	r0, r2, r1
 800711c:	42a0      	cmp	r0, r4
 800711e:	d10b      	bne.n	8007138 <_free_r+0x6c>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	4401      	add	r1, r0
 8007124:	1850      	adds	r0, r2, r1
 8007126:	4283      	cmp	r3, r0
 8007128:	6011      	str	r1, [r2, #0]
 800712a:	d1e0      	bne.n	80070ee <_free_r+0x22>
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	6053      	str	r3, [r2, #4]
 8007132:	4408      	add	r0, r1
 8007134:	6010      	str	r0, [r2, #0]
 8007136:	e7da      	b.n	80070ee <_free_r+0x22>
 8007138:	d902      	bls.n	8007140 <_free_r+0x74>
 800713a:	230c      	movs	r3, #12
 800713c:	602b      	str	r3, [r5, #0]
 800713e:	e7d6      	b.n	80070ee <_free_r+0x22>
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	1821      	adds	r1, r4, r0
 8007144:	428b      	cmp	r3, r1
 8007146:	bf04      	itt	eq
 8007148:	6819      	ldreq	r1, [r3, #0]
 800714a:	685b      	ldreq	r3, [r3, #4]
 800714c:	6063      	str	r3, [r4, #4]
 800714e:	bf04      	itt	eq
 8007150:	1809      	addeq	r1, r1, r0
 8007152:	6021      	streq	r1, [r4, #0]
 8007154:	6054      	str	r4, [r2, #4]
 8007156:	e7ca      	b.n	80070ee <_free_r+0x22>
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	bf00      	nop
 800715c:	20001c40 	.word	0x20001c40

08007160 <__malloc_lock>:
 8007160:	4801      	ldr	r0, [pc, #4]	@ (8007168 <__malloc_lock+0x8>)
 8007162:	f7ff bfa3 	b.w	80070ac <__retarget_lock_acquire_recursive>
 8007166:	bf00      	nop
 8007168:	20001c3c 	.word	0x20001c3c

0800716c <__malloc_unlock>:
 800716c:	4801      	ldr	r0, [pc, #4]	@ (8007174 <__malloc_unlock+0x8>)
 800716e:	f7ff bf9e 	b.w	80070ae <__retarget_lock_release_recursive>
 8007172:	bf00      	nop
 8007174:	20001c3c 	.word	0x20001c3c

08007178 <_init>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr

08007184 <_fini>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr
