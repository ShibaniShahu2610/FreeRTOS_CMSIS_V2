
18_FreeRTOS_EventGroup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08007860  08007860  00008860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c4  080079c4  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080079c4  080079c4  000089c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079cc  080079cc  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079cc  080079cc  000089cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079d0  080079d0  000089d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080079d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  2000006c  08007a40  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08007a40  00009c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca58  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf4  00000000  00000000  00025af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  000296e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001290  00000000  00000000  0002aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d34  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e6f  00000000  00000000  00030e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f670  00000000  00000000  0004ad0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a37b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b10  00000000  00000000  0015a3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00160ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007848 	.word	0x08007848

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007848 	.word	0x08007848

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e4:	f000 fbf5 	bl	8000cd2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e8:	f000 f842 	bl	8000570 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ec:	f000 f8c0 	bl	8000670 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80004f0:	f000 f892 	bl	8000618 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004f4:	f003 fb30 	bl	8003b58 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of monitorTask */
	monitorTaskHandle = osThreadNew(StartMonitorTask, NULL,
 80004f8:	4a13      	ldr	r2, [pc, #76]	@ (8000548 <main+0x68>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4813      	ldr	r0, [pc, #76]	@ (800054c <main+0x6c>)
 80004fe:	f003 fb75 	bl	8003bec <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <main+0x70>)
 8000506:	6013      	str	r3, [r2, #0]
			&monitorTask_attributes);

	/* creation of Task1 */
	Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000508:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <main+0x74>)
 800050a:	2100      	movs	r1, #0
 800050c:	4812      	ldr	r0, [pc, #72]	@ (8000558 <main+0x78>)
 800050e:	f003 fb6d 	bl	8003bec <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a11      	ldr	r2, [pc, #68]	@ (800055c <main+0x7c>)
 8000516:	6013      	str	r3, [r2, #0]

	/* creation of Task2 */
	Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000518:	4a11      	ldr	r2, [pc, #68]	@ (8000560 <main+0x80>)
 800051a:	2100      	movs	r1, #0
 800051c:	4811      	ldr	r0, [pc, #68]	@ (8000564 <main+0x84>)
 800051e:	f003 fb65 	bl	8003bec <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a10      	ldr	r2, [pc, #64]	@ (8000568 <main+0x88>)
 8000526:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */

	/* Create a event group */
	event_group = osEventFlagsNew(NULL);
 8000528:	2000      	movs	r0, #0
 800052a:	f003 fc0c 	bl	8003d46 <osEventFlagsNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <main+0x8c>)
 8000532:	6013      	str	r3, [r2, #0]
	if (event_group == NULL) {
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <main+0x8c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d101      	bne.n	8000540 <main+0x60>
		Error_Handler();
 800053c:	f000 f9c2 	bl	80008c4 <Error_Handler>
	}
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000540:	f003 fb2e 	bl	8003ba0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x64>
 8000548:	08007910 	.word	0x08007910
 800054c:	08000769 	.word	0x08000769
 8000550:	20000110 	.word	0x20000110
 8000554:	08007934 	.word	0x08007934
 8000558:	08000839 	.word	0x08000839
 800055c:	20000114 	.word	0x20000114
 8000560:	08007958 	.word	0x08007958
 8000564:	0800087d 	.word	0x0800087d
 8000568:	20000118 	.word	0x20000118
 800056c:	2000011c 	.word	0x2000011c

08000570 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	@ 0x58
 8000574:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	@ 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f006 fe4a 	bl	8007218 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000592:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000596:	f000 fe89 	bl	80012ac <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80005a0:	f000 f990 	bl	80008c4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a4:	2310      	movs	r3, #16
 80005a6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b0:	2360      	movs	r3, #96	@ 0x60
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b8:	2301      	movs	r3, #1
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 71;
 80005c0:	2347      	movs	r3, #71	@ 0x47
 80005c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80005cc:	2306      	movs	r3, #6
 80005ce:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fecf 	bl	8001378 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x74>
		Error_Handler();
 80005e0:	f000 f970 	bl	80008c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2303      	movs	r3, #3
 80005ea:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005fa:	463b      	mov	r3, r7
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fad4 	bl	8001bac <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x9e>
		Error_Handler();
 800060a:	f000 f95b 	bl	80008c4 <Error_Handler>
	}
}
 800060e:	bf00      	nop
 8000610:	3758      	adds	r7, #88	@ 0x58
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	@ (800066c <MX_LPUART1_UART_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000656:	f002 fc8f 	bl	8002f78 <HAL_UART_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 8000660:	f000 f930 	bl	80008c4 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000088 	.word	0x20000088
 800066c:	40008000 	.word	0x40008000

08000670 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b35      	ldr	r3, [pc, #212]	@ (800075c <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a34      	ldr	r2, [pc, #208]	@ (800075c <MX_GPIO_Init+0xec>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b32      	ldr	r3, [pc, #200]	@ (800075c <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800069e:	4b2f      	ldr	r3, [pc, #188]	@ (800075c <MX_GPIO_Init+0xec>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a2e      	ldr	r2, [pc, #184]	@ (800075c <MX_GPIO_Init+0xec>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <MX_GPIO_Init+0xec>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
	HAL_PWREx_EnableVddIO2();
 80006b6:	f000 fe4f 	bl	8001358 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b28      	ldr	r3, [pc, #160]	@ (800075c <MX_GPIO_Init+0xec>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a27      	ldr	r2, [pc, #156]	@ (800075c <MX_GPIO_Init+0xec>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b25      	ldr	r3, [pc, #148]	@ (800075c <MX_GPIO_Init+0xec>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b22      	ldr	r3, [pc, #136]	@ (800075c <MX_GPIO_Init+0xec>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a21      	ldr	r2, [pc, #132]	@ (800075c <MX_GPIO_Init+0xec>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <MX_GPIO_Init+0xec>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_LED2_GPIO_Port, BSP_LED2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2180      	movs	r1, #128	@ 0x80
 80006ee:	481c      	ldr	r0, [pc, #112]	@ (8000760 <MX_GPIO_Init+0xf0>)
 80006f0:	f000 fd9c 	bl	800122c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	481a      	ldr	r0, [pc, #104]	@ (8000764 <MX_GPIO_Init+0xf4>)
 80006fa:	f000 fd97 	bl	800122c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BSP_BUTTON_Pin */
	GPIO_InitStruct.Pin = BSP_BUTTON_Pin;
 80006fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000702:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000704:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000708:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BSP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4812      	ldr	r0, [pc, #72]	@ (8000760 <MX_GPIO_Init+0xf0>)
 8000716:	f000 fbf7 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : BSP_LED2_Pin */
	GPIO_InitStruct.Pin = BSP_LED2_Pin;
 800071a:	2380      	movs	r3, #128	@ 0x80
 800071c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BSP_LED2_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	480b      	ldr	r0, [pc, #44]	@ (8000760 <MX_GPIO_Init+0xf0>)
 8000732:	f000 fbe9 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : BSP_LED_Pin */
	GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_GPIO_Init+0xf4>)
 800074e:	f000 fbdb 	bl	8000f08 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	@ 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000
 8000760:	48000800 	.word	0x48000800
 8000764:	48000400 	.word	0x48000400

08000768 <StartMonitorTask>:
 * @brief  Function implementing the monitorTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMonitorTask */
void StartMonitorTask(void *argument) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    uint32_t flags;

    /* Infinite loop */
    for (;;) {
        /* Wait for any events from Task1, Task2, Task3, Task4 */
        flags = osEventFlagsWait(event_group,
 8000770:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <StartMonitorTask+0xb4>)
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000778:	2200      	movs	r2, #0
 800077a:	210f      	movs	r1, #15
 800077c:	f003 fb64 	bl	8003e48 <osEventFlagsWait>
 8000780:	60b8      	str	r0, [r7, #8]
        		EVENT_FLAG_1 | EVENT_FLAG_2 | EVENT_FLAG_3 | EVENT_FLAG_4, osFlagsWaitAny, osWaitForever);

        // Handle Task1 event
        if (flags & EVENT_FLAG_1) {
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d007      	beq.n	800079c <StartMonitorTask+0x34>
            HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	4823      	ldr	r0, [pc, #140]	@ (8000820 <StartMonitorTask+0xb8>)
 8000792:	f000 fd4b 	bl	800122c <HAL_GPIO_WritePin>
            printf("Task1 produced an event. LED1 ON.\r\n");
 8000796:	4823      	ldr	r0, [pc, #140]	@ (8000824 <StartMonitorTask+0xbc>)
 8000798:	f006 fc5e 	bl	8007058 <puts>

        }

        // Handle Task2 event
        if (flags & EVENT_FLAG_2) {
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d007      	beq.n	80007b6 <StartMonitorTask+0x4e>
            HAL_GPIO_WritePin(BSP_LED2_GPIO_Port, BSP_LED2_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2180      	movs	r1, #128	@ 0x80
 80007aa:	481f      	ldr	r0, [pc, #124]	@ (8000828 <StartMonitorTask+0xc0>)
 80007ac:	f000 fd3e 	bl	800122c <HAL_GPIO_WritePin>
            printf("Task2 produced an event. LED2 ON.\r\n");
 80007b0:	481e      	ldr	r0, [pc, #120]	@ (800082c <StartMonitorTask+0xc4>)
 80007b2:	f006 fc51 	bl	8007058 <puts>

        }

        // Handle Task3 event
        if (flags & EVENT_FLAG_3) {
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d020      	beq.n	8000802 <StartMonitorTask+0x9a>

        	for(int i = 0; i<10; i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	e00d      	b.n	80007e2 <StartMonitorTask+0x7a>
        	{
        		HAL_GPIO_TogglePin(BSP_LED_GPIO_Port, BSP_LED_Pin);
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	4815      	ldr	r0, [pc, #84]	@ (8000820 <StartMonitorTask+0xb8>)
 80007ca:	f000 fd47 	bl	800125c <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(BSP_LED2_GPIO_Port, BSP_LED2_Pin);
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	4815      	ldr	r0, [pc, #84]	@ (8000828 <StartMonitorTask+0xc0>)
 80007d2:	f000 fd43 	bl	800125c <HAL_GPIO_TogglePin>
        		osDelay(200);
 80007d6:	20c8      	movs	r0, #200	@ 0xc8
 80007d8:	f003 fa9a 	bl	8003d10 <osDelay>
        	for(int i = 0; i<10; i++)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b09      	cmp	r3, #9
 80007e6:	ddee      	ble.n	80007c6 <StartMonitorTask+0x5e>
        	}
            HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2180      	movs	r1, #128	@ 0x80
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <StartMonitorTask+0xb8>)
 80007ee:	f000 fd1d 	bl	800122c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(BSP_LED2_GPIO_Port, BSP_LED2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	480c      	ldr	r0, [pc, #48]	@ (8000828 <StartMonitorTask+0xc0>)
 80007f8:	f000 fd18 	bl	800122c <HAL_GPIO_WritePin>
            printf("Task3 produced an event. LED OFF\r\n");
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <StartMonitorTask+0xc8>)
 80007fe:	f006 fc2b 	bl	8007058 <puts>

        }

        // Handle Task4 event
        if (flags & EVENT_FLAG_4) {
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <StartMonitorTask+0xaa>
        	/* do nothing */
        	printf("Event Flag 4\r\n");
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <StartMonitorTask+0xcc>)
 800080e:	f006 fc23 	bl	8007058 <puts>
        }

        // Small delay to avoid busy waiting
        osDelay(1000);
 8000812:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000816:	f003 fa7b 	bl	8003d10 <osDelay>
        flags = osEventFlagsWait(event_group,
 800081a:	e7a9      	b.n	8000770 <StartMonitorTask+0x8>
 800081c:	2000011c 	.word	0x2000011c
 8000820:	48000400 	.word	0x48000400
 8000824:	0800787c 	.word	0x0800787c
 8000828:	48000800 	.word	0x48000800
 800082c:	080078a0 	.word	0x080078a0
 8000830:	080078c4 	.word	0x080078c4
 8000834:	080078e8 	.word	0x080078e8

08000838 <StartTask1>:
 * @brief Function implementing the Task1 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask1 */

	uint8_t count = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		/* Set the event flag for Task1 to notify the consumer (monitorTask) */
		osEventFlagsSet(event_group, EVENT_FLAG_1 | EVENT_FLAG_4);
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <StartTask1+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2109      	movs	r1, #9
 800084a:	4618      	mov	r0, r3
 800084c:	f003 faba 	bl	8003dc4 <osEventFlagsSet>

		if(count == 10)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b0a      	cmp	r3, #10
 8000854:	d107      	bne.n	8000866 <StartTask1+0x2e>
		{
			osEventFlagsSet(event_group, EVENT_FLAG_3);
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <StartTask1+0x40>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2104      	movs	r1, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fab1 	bl	8003dc4 <osEventFlagsSet>
			count = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]
		}
		count++;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	3301      	adds	r3, #1
 800086a:	73fb      	strb	r3, [r7, #15]
		osDelay(2000); // Task1 produces an event every 1000ms
 800086c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000870:	f003 fa4e 	bl	8003d10 <osDelay>
		osEventFlagsSet(event_group, EVENT_FLAG_1 | EVENT_FLAG_4);
 8000874:	e7e6      	b.n	8000844 <StartTask1+0xc>
 8000876:	bf00      	nop
 8000878:	2000011c 	.word	0x2000011c

0800087c <StartTask2>:
 * @brief Function implementing the Task2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask2 */
	/* Infinite loop */
	for (;;) {
		/* Set the event flag for Task2 to notify the consumer (monitorTask) */
		osEventFlagsSet(event_group, EVENT_FLAG_2);
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <StartTask2+0x20>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2102      	movs	r1, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fa9a 	bl	8003dc4 <osEventFlagsSet>
		osDelay(5000); // Task2 produces an event every 5000ms
 8000890:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000894:	f003 fa3c 	bl	8003d10 <osDelay>
		osEventFlagsSet(event_group, EVENT_FLAG_2);
 8000898:	bf00      	nop
 800089a:	e7f3      	b.n	8000884 <StartTask2+0x8>
 800089c:	2000011c 	.word	0x2000011c

080008a0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008b2:	f000 fa27 	bl	8000d04 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40001000 	.word	0x40001000

080008c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_MspInit+0x4c>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008da:	4a10      	ldr	r2, [pc, #64]	@ (800091c <HAL_MspInit+0x4c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <HAL_MspInit+0x4c>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <HAL_MspInit+0x4c>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <HAL_MspInit+0x4c>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	f06f 0001 	mvn.w	r0, #1
 800090e:	f000 fad1 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0ac      	sub	sp, #176	@ 0xb0
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	228c      	movs	r2, #140	@ 0x8c
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f006 fc69 	bl	8007218 <memset>
  if(huart->Instance==LPUART1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <HAL_UART_MspInit+0xb4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d13d      	bne.n	80009cc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000950:	2320      	movs	r3, #32
 8000952:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000954:	2300      	movs	r3, #0
 8000956:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fb7b 	bl	8002058 <HAL_RCCEx_PeriphCLKConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000968:	f7ff ffac 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <HAL_UART_MspInit+0xb8>)
 800096e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000970:	4a19      	ldr	r2, [pc, #100]	@ (80009d8 <HAL_UART_MspInit+0xb8>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <HAL_UART_MspInit+0xb8>)
 800097a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <HAL_UART_MspInit+0xb8>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000988:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <HAL_UART_MspInit+0xb8>)
 800098a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_UART_MspInit+0xb8>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800099c:	f000 fcdc 	bl	8001358 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009a0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80009a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009ba:	2308      	movs	r3, #8
 80009bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <HAL_UART_MspInit+0xbc>)
 80009c8:	f000 fa9e 	bl	8000f08 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80009cc:	bf00      	nop
 80009ce:	37b0      	adds	r7, #176	@ 0xb0
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40008000 	.word	0x40008000
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48001800 	.word	0x48001800

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	@ 0x38
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009ee:	4b34      	ldr	r3, [pc, #208]	@ (8000ac0 <HAL_InitTick+0xe0>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f2:	4a33      	ldr	r2, [pc, #204]	@ (8000ac0 <HAL_InitTick+0xe0>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009fa:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <HAL_InitTick+0xe0>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a06:	f107 0210 	add.w	r2, r7, #16
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fa8f 	bl	8001f34 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d103      	bne.n	8000a28 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a20:	f001 fa5c 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8000a24:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a26:	e004      	b.n	8000a32 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a28:	f001 fa58 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a34:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <HAL_InitTick+0xe4>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	0c9b      	lsrs	r3, r3, #18
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a40:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <HAL_InitTick+0xe8>)
 8000a42:	4a22      	ldr	r2, [pc, #136]	@ (8000acc <HAL_InitTick+0xec>)
 8000a44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <HAL_InitTick+0xe8>)
 8000a48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac8 <HAL_InitTick+0xe8>)
 8000a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <HAL_InitTick+0xe8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <HAL_InitTick+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_InitTick+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a66:	4818      	ldr	r0, [pc, #96]	@ (8000ac8 <HAL_InitTick+0xe8>)
 8000a68:	f001 ffc0 	bl	80029ec <HAL_TIM_Base_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d11b      	bne.n	8000ab2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a7a:	4813      	ldr	r0, [pc, #76]	@ (8000ac8 <HAL_InitTick+0xe8>)
 8000a7c:	f002 f818 	bl	8002ab0 <HAL_TIM_Base_Start_IT>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d111      	bne.n	8000ab2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a8e:	2036      	movs	r0, #54	@ 0x36
 8000a90:	f000 fa2c 	bl	8000eec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	d808      	bhi.n	8000aac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	2036      	movs	r0, #54	@ 0x36
 8000aa0:	f000 fa08 	bl	8000eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <HAL_InitTick+0xf0>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e002      	b.n	8000ab2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ab2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3738      	adds	r7, #56	@ 0x38
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	431bde83 	.word	0x431bde83
 8000ac8:	20000120 	.word	0x20000120
 8000acc:	40001000 	.word	0x40001000
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <TIM6_DAC_IRQHandler+0x10>)
 8000b12:	f002 f83d 	bl	8002b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000120 	.word	0x20000120

08000b20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
  }

  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *)ptr, len, HAL_MAX_DELAY);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <_write+0x28>)
 8000b74:	f002 fa4e 	bl	8003014 <HAL_UART_Transmit>
  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000088 	.word	0x20000088

08000b88 <_close>:

int _close(int file)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bb0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_isatty>:

int _isatty(int file)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc8:	2301      	movs	r3, #1
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f006 fb9e 	bl	8007360 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20050000 	.word	0x20050000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	2000016c 	.word	0x2000016c
 8000c58:	20001c60 	.word	0x20001c60

08000c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c84:	f7ff ffea 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f006 fb5d 	bl	800736c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb2:	f7ff fc15 	bl	80004e0 <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cc4:	080079d4 	.word	0x080079d4
  ldr r2, =_sbss
 8000cc8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ccc:	20001c60 	.word	0x20001c60

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>

08000cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f8de 	bl	8000e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f7ff fe7c 	bl	80009e0 <HAL_InitTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	e001      	b.n	8000cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf4:	f7ff fdec 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000170 	.word	0x20000170

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000170 	.word	0x20000170

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	@ (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	@ (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff4c 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec6:	f7ff ff61 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000eca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	f7ff ffb1 	bl	8000e38 <NVIC_EncodePriority>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff80 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff54 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e166      	b.n	80011e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8158 	beq.w	80011e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d005      	beq.n	8000f48 <HAL_GPIO_Init+0x40>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d130      	bne.n	8000faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	f003 0201 	and.w	r2, r3, #1
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d017      	beq.n	8000fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d123      	bne.n	800103a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	6939      	ldr	r1, [r7, #16]
 8001036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0203 	and.w	r2, r3, #3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80b2 	beq.w	80011e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107c:	4b61      	ldr	r3, [pc, #388]	@ (8001204 <HAL_GPIO_Init+0x2fc>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001080:	4a60      	ldr	r2, [pc, #384]	@ (8001204 <HAL_GPIO_Init+0x2fc>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6613      	str	r3, [r2, #96]	@ 0x60
 8001088:	4b5e      	ldr	r3, [pc, #376]	@ (8001204 <HAL_GPIO_Init+0x2fc>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001094:	4a5c      	ldr	r2, [pc, #368]	@ (8001208 <HAL_GPIO_Init+0x300>)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	3302      	adds	r3, #2
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010be:	d02b      	beq.n	8001118 <HAL_GPIO_Init+0x210>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a52      	ldr	r2, [pc, #328]	@ (800120c <HAL_GPIO_Init+0x304>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d025      	beq.n	8001114 <HAL_GPIO_Init+0x20c>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a51      	ldr	r2, [pc, #324]	@ (8001210 <HAL_GPIO_Init+0x308>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d01f      	beq.n	8001110 <HAL_GPIO_Init+0x208>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a50      	ldr	r2, [pc, #320]	@ (8001214 <HAL_GPIO_Init+0x30c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d019      	beq.n	800110c <HAL_GPIO_Init+0x204>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a4f      	ldr	r2, [pc, #316]	@ (8001218 <HAL_GPIO_Init+0x310>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d013      	beq.n	8001108 <HAL_GPIO_Init+0x200>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a4e      	ldr	r2, [pc, #312]	@ (800121c <HAL_GPIO_Init+0x314>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d00d      	beq.n	8001104 <HAL_GPIO_Init+0x1fc>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001220 <HAL_GPIO_Init+0x318>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0x1f8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001224 <HAL_GPIO_Init+0x31c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d101      	bne.n	80010fc <HAL_GPIO_Init+0x1f4>
 80010f8:	2307      	movs	r3, #7
 80010fa:	e00e      	b.n	800111a <HAL_GPIO_Init+0x212>
 80010fc:	2308      	movs	r3, #8
 80010fe:	e00c      	b.n	800111a <HAL_GPIO_Init+0x212>
 8001100:	2306      	movs	r3, #6
 8001102:	e00a      	b.n	800111a <HAL_GPIO_Init+0x212>
 8001104:	2305      	movs	r3, #5
 8001106:	e008      	b.n	800111a <HAL_GPIO_Init+0x212>
 8001108:	2304      	movs	r3, #4
 800110a:	e006      	b.n	800111a <HAL_GPIO_Init+0x212>
 800110c:	2303      	movs	r3, #3
 800110e:	e004      	b.n	800111a <HAL_GPIO_Init+0x212>
 8001110:	2302      	movs	r3, #2
 8001112:	e002      	b.n	800111a <HAL_GPIO_Init+0x212>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <HAL_GPIO_Init+0x212>
 8001118:	2300      	movs	r3, #0
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	f002 0203 	and.w	r2, r2, #3
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4093      	lsls	r3, r2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800112a:	4937      	ldr	r1, [pc, #220]	@ (8001208 <HAL_GPIO_Init+0x300>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001138:	4b3b      	ldr	r3, [pc, #236]	@ (8001228 <HAL_GPIO_Init+0x320>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800115c:	4a32      	ldr	r2, [pc, #200]	@ (8001228 <HAL_GPIO_Init+0x320>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001162:	4b31      	ldr	r3, [pc, #196]	@ (8001228 <HAL_GPIO_Init+0x320>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001186:	4a28      	ldr	r2, [pc, #160]	@ (8001228 <HAL_GPIO_Init+0x320>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800118c:	4b26      	ldr	r3, [pc, #152]	@ (8001228 <HAL_GPIO_Init+0x320>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001228 <HAL_GPIO_Init+0x320>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <HAL_GPIO_Init+0x320>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011da:	4a13      	ldr	r2, [pc, #76]	@ (8001228 <HAL_GPIO_Init+0x320>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa22 f303 	lsr.w	r3, r2, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f47f ae91 	bne.w	8000f18 <HAL_GPIO_Init+0x10>
  }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000
 800120c:	48000400 	.word	0x48000400
 8001210:	48000800 	.word	0x48000800
 8001214:	48000c00 	.word	0x48000c00
 8001218:	48001000 	.word	0x48001000
 800121c:	48001400 	.word	0x48001400
 8001220:	48001800 	.word	0x48001800
 8001224:	48001c00 	.word	0x48001c00
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001248:	e002      	b.n	8001250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43d9      	mvns	r1, r3
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	400b      	ands	r3, r1
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40007000 	.word	0x40007000

080012ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012ba:	d130      	bne.n	800131e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c8:	d038      	beq.n	800133c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ca:	4b20      	ldr	r3, [pc, #128]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012d2:	4a1e      	ldr	r2, [pc, #120]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012da:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2232      	movs	r2, #50	@ 0x32
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9b      	lsrs	r3, r3, #18
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f0:	e002      	b.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001304:	d102      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f2      	bne.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001318:	d110      	bne.n	800133c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e00f      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800132a:	d007      	beq.n	800133c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001334:	4a05      	ldr	r2, [pc, #20]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800133a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40007000 	.word	0x40007000
 8001350:	20000000 	.word	0x20000000
 8001354:	431bde83 	.word	0x431bde83

08001358 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_PWREx_EnableVddIO2+0x1c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001362:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001366:	6053      	str	r3, [r2, #4]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40007000 	.word	0x40007000

08001378 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	f000 bc08 	b.w	8001b9c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138c:	4b96      	ldr	r3, [pc, #600]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001396:	4b94      	ldr	r3, [pc, #592]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80e4 	beq.w	8001576 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4c>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	f040 808b 	bne.w	80014d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	f040 8087 	bne.w	80014d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c4:	4b88      	ldr	r3, [pc, #544]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_OscConfig+0x64>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e3df      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1a      	ldr	r2, [r3, #32]
 80013e0:	4b81      	ldr	r3, [pc, #516]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <HAL_RCC_OscConfig+0x7e>
 80013ec:	4b7e      	ldr	r3, [pc, #504]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013f4:	e005      	b.n	8001402 <HAL_RCC_OscConfig+0x8a>
 80013f6:	4b7c      	ldr	r3, [pc, #496]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80013f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001402:	4293      	cmp	r3, r2
 8001404:	d223      	bcs.n	800144e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fdc4 	bl	8001f98 <RCC_SetFlashLatencyFromMSIRange>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e3c0      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141a:	4b73      	ldr	r3, [pc, #460]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a72      	ldr	r2, [pc, #456]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b70      	ldr	r3, [pc, #448]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	496d      	ldr	r1, [pc, #436]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001438:	4b6b      	ldr	r3, [pc, #428]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	4968      	ldr	r1, [pc, #416]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
 800144c:	e025      	b.n	800149a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144e:	4b66      	ldr	r3, [pc, #408]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a65      	ldr	r2, [pc, #404]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b63      	ldr	r3, [pc, #396]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4960      	ldr	r1, [pc, #384]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146c:	4b5e      	ldr	r3, [pc, #376]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	495b      	ldr	r1, [pc, #364]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fd84 	bl	8001f98 <RCC_SetFlashLatencyFromMSIRange>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e380      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800149a:	f000 fc87 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b51      	ldr	r3, [pc, #324]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	4950      	ldr	r1, [pc, #320]	@ (80015ec <HAL_RCC_OscConfig+0x274>)
 80014ac:	5ccb      	ldrb	r3, [r1, r3]
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	4a4e      	ldr	r2, [pc, #312]	@ (80015f0 <HAL_RCC_OscConfig+0x278>)
 80014b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ba:	4b4e      	ldr	r3, [pc, #312]	@ (80015f4 <HAL_RCC_OscConfig+0x27c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fa8e 	bl	80009e0 <HAL_InitTick>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d052      	beq.n	8001574 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	e364      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d032      	beq.n	8001540 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014da:	4b43      	ldr	r3, [pc, #268]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a42      	ldr	r2, [pc, #264]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fc21 	bl	8000d2c <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc1d 	bl	8000d2c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e34d      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001500:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150c:	4b36      	ldr	r3, [pc, #216]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a35      	ldr	r2, [pc, #212]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b33      	ldr	r3, [pc, #204]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4930      	ldr	r1, [pc, #192]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152a:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	492b      	ldr	r1, [pc, #172]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
 800153e:	e01a      	b.n	8001576 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001540:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a28      	ldr	r2, [pc, #160]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154c:	f7ff fbee 	bl	8000d2c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001554:	f7ff fbea 	bl	8000d2c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e31a      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x1dc>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001574:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d073      	beq.n	800166a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b08      	cmp	r3, #8
 8001586:	d005      	beq.n	8001594 <HAL_RCC_OscConfig+0x21c>
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d10e      	bne.n	80015ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d10b      	bne.n	80015ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d063      	beq.n	8001668 <HAL_RCC_OscConfig+0x2f0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d15f      	bne.n	8001668 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e2f7      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015b4:	d106      	bne.n	80015c4 <HAL_RCC_OscConfig+0x24c>
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e025      	b.n	8001610 <HAL_RCC_OscConfig+0x298>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015cc:	d114      	bne.n	80015f8 <HAL_RCC_OscConfig+0x280>
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a02      	ldr	r2, [pc, #8]	@ (80015e8 <HAL_RCC_OscConfig+0x270>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e013      	b.n	8001610 <HAL_RCC_OscConfig+0x298>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	0800797c 	.word	0x0800797c
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004
 80015f8:	4ba0      	ldr	r3, [pc, #640]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a9f      	ldr	r2, [pc, #636]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b9d      	ldr	r3, [pc, #628]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a9c      	ldr	r2, [pc, #624]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800160e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fb88 	bl	8000d2c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fb84 	bl	8000d2c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	@ 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e2b4      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001632:	4b92      	ldr	r3, [pc, #584]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x2a8>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fb74 	bl	8000d2c <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fb70 	bl	8000d2c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e2a0      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165a:	4b88      	ldr	r3, [pc, #544]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d0>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d060      	beq.n	8001738 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d005      	beq.n	8001688 <HAL_RCC_OscConfig+0x310>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d116      	bne.n	80016b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	4b7c      	ldr	r3, [pc, #496]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x328>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e27d      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b76      	ldr	r3, [pc, #472]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	4973      	ldr	r1, [pc, #460]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	e040      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d023      	beq.n	8001706 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016be:	4b6f      	ldr	r3, [pc, #444]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6e      	ldr	r2, [pc, #440]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb2f 	bl	8000d2c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb2b 	bl	8000d2c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e25b      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e4:	4b65      	ldr	r3, [pc, #404]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b62      	ldr	r3, [pc, #392]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	495f      	ldr	r1, [pc, #380]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e018      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001706:	4b5d      	ldr	r3, [pc, #372]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a5c      	ldr	r2, [pc, #368]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800170c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fb0b 	bl	8000d2c <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fb07 	bl	8000d2c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e237      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d03c      	beq.n	80017be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01c      	beq.n	8001786 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174c:	4b4b      	ldr	r3, [pc, #300]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001752:	4a4a      	ldr	r2, [pc, #296]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fae6 	bl	8000d2c <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fae2 	bl	8000d2c <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e212      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001776:	4b41      	ldr	r3, [pc, #260]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ef      	beq.n	8001764 <HAL_RCC_OscConfig+0x3ec>
 8001784:	e01b      	b.n	80017be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b3d      	ldr	r3, [pc, #244]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178c:	4a3b      	ldr	r2, [pc, #236]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff fac9 	bl	8000d2c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fac5 	bl	8000d2c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1f5      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b0:	4b32      	ldr	r3, [pc, #200]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ef      	bne.n	800179e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80a6 	beq.w	8001918 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	4a26      	ldr	r2, [pc, #152]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e8:	4b24      	ldr	r3, [pc, #144]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <HAL_RCC_OscConfig+0x508>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d118      	bne.n	8001836 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <HAL_RCC_OscConfig+0x508>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	@ (8001880 <HAL_RCC_OscConfig+0x508>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001810:	f7ff fa8c 	bl	8000d2c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001818:	f7ff fa88 	bl	8000d2c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1b8      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_RCC_OscConfig+0x508>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d108      	bne.n	8001850 <HAL_RCC_OscConfig+0x4d8>
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800184e:	e029      	b.n	80018a4 <HAL_RCC_OscConfig+0x52c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d115      	bne.n	8001884 <HAL_RCC_OscConfig+0x50c>
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185e:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186e:	4a03      	ldr	r2, [pc, #12]	@ (800187c <HAL_RCC_OscConfig+0x504>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001878:	e014      	b.n	80018a4 <HAL_RCC_OscConfig+0x52c>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	40007000 	.word	0x40007000
 8001884:	4b9d      	ldr	r3, [pc, #628]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188a:	4a9c      	ldr	r2, [pc, #624]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001894:	4b99      	ldr	r3, [pc, #612]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189a:	4a98      	ldr	r2, [pc, #608]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d016      	beq.n	80018da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fa3e 	bl	8000d2c <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff fa3a 	bl	8000d2c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e168      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ca:	4b8c      	ldr	r3, [pc, #560]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ed      	beq.n	80018b4 <HAL_RCC_OscConfig+0x53c>
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fa27 	bl	8000d2c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff fa23 	bl	8000d2c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e151      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f8:	4b80      	ldr	r3, [pc, #512]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ed      	bne.n	80018e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b7b      	ldr	r3, [pc, #492]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	4a7a      	ldr	r2, [pc, #488]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01c      	beq.n	8001966 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800192c:	4b73      	ldr	r3, [pc, #460]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 800192e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001932:	4a72      	ldr	r2, [pc, #456]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff f9f6 	bl	8000d2c <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001944:	f7ff f9f2 	bl	8000d2c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e122      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001956:	4b69      	ldr	r3, [pc, #420]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ef      	beq.n	8001944 <HAL_RCC_OscConfig+0x5cc>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001966:	4b65      	ldr	r3, [pc, #404]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800196c:	4a63      	ldr	r2, [pc, #396]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff f9d9 	bl	8000d2c <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197e:	f7ff f9d5 	bl	8000d2c <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e105      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001990:	4b5a      	ldr	r3, [pc, #360]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001992:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80f9 	beq.w	8001b9a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	f040 80cf 	bne.w	8001b50 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019b2:	4b52      	ldr	r3, [pc, #328]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0203 	and.w	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d12c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	3b01      	subs	r3, #1
 80019d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d123      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d11b      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d113      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d109      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	085b      	lsrs	r3, r3, #1
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d071      	beq.n	8001b04 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d068      	beq.n	8001af8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a26:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a32:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0ac      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a42:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a2d      	ldr	r2, [pc, #180]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a4e:	f7ff f96d 	bl	8000d2c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff f969 	bl	8000d2c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e099      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a74:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <HAL_RCC_OscConfig+0x788>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a84:	3a01      	subs	r2, #1
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a8e:	0212      	lsls	r2, r2, #8
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a96:	0852      	lsrs	r2, r2, #1
 8001a98:	3a01      	subs	r2, #1
 8001a9a:	0552      	lsls	r2, r2, #21
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001aa2:	0852      	lsrs	r2, r2, #1
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	0652      	lsls	r2, r2, #25
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aae:	06d2      	lsls	r2, r2, #27
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	4912      	ldr	r1, [pc, #72]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad0:	f7ff f92c 	bl	8000d2c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f928 	bl	8000d2c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e058      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <HAL_RCC_OscConfig+0x784>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af6:	e050      	b.n	8001b9a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e04f      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b04:	4b27      	ldr	r3, [pc, #156]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d144      	bne.n	8001b9a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b10:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a23      	ldr	r2, [pc, #140]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a20      	ldr	r2, [pc, #128]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b28:	f7ff f900 	bl	8000d2c <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff f8fc 	bl	8000d2c <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e02c      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x7b8>
 8001b4e:	e024      	b.n	8001b9a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d01f      	beq.n	8001b96 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff f8e3 	bl	8000d2c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff f8df 	bl	8000d2c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e00f      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4905      	ldr	r1, [pc, #20]	@ (8001ba4 <HAL_RCC_OscConfig+0x82c>)
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_RCC_OscConfig+0x830>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e001      	b.n	8001b9a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	feeefffc 	.word	0xfeeefffc

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0e7      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b75      	ldr	r3, [pc, #468]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d910      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b72      	ldr	r3, [pc, #456]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4970      	ldr	r1, [pc, #448]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b6e      	ldr	r3, [pc, #440]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0cf      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	4b66      	ldr	r3, [pc, #408]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d908      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b63      	ldr	r3, [pc, #396]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4960      	ldr	r1, [pc, #384]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d04c      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	4b5a      	ldr	r3, [pc, #360]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d121      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0a6      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4a:	4b54      	ldr	r3, [pc, #336]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e09a      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c62:	4b4e      	ldr	r3, [pc, #312]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e08e      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c72:	4b4a      	ldr	r3, [pc, #296]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e086      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b46      	ldr	r3, [pc, #280]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4943      	ldr	r1, [pc, #268]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c94:	f7ff f84a 	bl	8000d2c <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff f846 	bl	8000d2c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e06e      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d010      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b31      	ldr	r3, [pc, #196]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d208      	bcs.n	8001cf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	492b      	ldr	r1, [pc, #172]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf2:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d210      	bcs.n	8001d22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 0207 	bic.w	r2, r3, #7
 8001d08:	4923      	ldr	r1, [pc, #140]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d10:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_RCC_ClockConfig+0x1ec>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e036      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4918      	ldr	r1, [pc, #96]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4910      	ldr	r1, [pc, #64]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d60:	f000 f824 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	490b      	ldr	r1, [pc, #44]	@ (8001da0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	4a09      	ldr	r2, [pc, #36]	@ (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fe2b 	bl	80009e0 <HAL_InitTick>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	0800797c 	.word	0x0800797c
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dba:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d121      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d11e      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de0:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dec:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e08:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10d      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d102      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e24:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e004      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e30:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d134      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d003      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0xac>
 8001e50:	e005      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e54:	617b      	str	r3, [r7, #20]
      break;
 8001e56:	e005      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e58:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5a:	617b      	str	r3, [r7, #20]
      break;
 8001e5c:	e002      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	617b      	str	r3, [r7, #20]
      break;
 8001e62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	3301      	adds	r3, #1
 8001e70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	fb03 f202 	mul.w	r2, r3, r2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	0e5b      	lsrs	r3, r3, #25
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	3301      	adds	r3, #1
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08007994 	.word	0x08007994
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	007a1200 	.word	0x007a1200

08001ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	@ (8001ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4904      	ldr	r1, [pc, #16]	@ (8001f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	0800798c 	.word	0x0800798c

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f0c:	f7ff ffda 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0adb      	lsrs	r3, r3, #11
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4904      	ldr	r1, [pc, #16]	@ (8001f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	0800798c 	.word	0x0800798c

08001f34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	220f      	movs	r2, #15
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <HAL_RCC_GetClockConfig+0x60>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0207 	and.w	r2, r3, #7
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40022000 	.word	0x40022000

08001f98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fb0:	f7ff f96e 	bl	8001290 <HAL_PWREx_GetVoltageRange>
 8001fb4:	6178      	str	r0, [r7, #20]
 8001fb6:	e014      	b.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b25      	ldr	r3, [pc, #148]	@ (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc4:	4b22      	ldr	r3, [pc, #136]	@ (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fd0:	f7ff f95e 	bl	8001290 <HAL_PWREx_GetVoltageRange>
 8001fd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fe8:	d10b      	bne.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b80      	cmp	r3, #128	@ 0x80
 8001fee:	d919      	bls.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ff4:	d902      	bls.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e013      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e010      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b80      	cmp	r3, #128	@ 0x80
 8002006:	d902      	bls.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002008:	2303      	movs	r3, #3
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e00a      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b80      	cmp	r3, #128	@ 0x80
 8002012:	d102      	bne.n	800201a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002014:	2302      	movs	r3, #2
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e004      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b70      	cmp	r3, #112	@ 0x70
 800201e:	d101      	bne.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002020:	2301      	movs	r3, #1
 8002022:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 0207 	bic.w	r2, r3, #7
 800202c:	4909      	ldr	r1, [pc, #36]	@ (8002054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	429a      	cmp	r2, r3
 8002040:	d001      	beq.n	8002046 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	40022000 	.word	0x40022000

08002058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002060:	2300      	movs	r3, #0
 8002062:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002064:	2300      	movs	r3, #0
 8002066:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002070:	2b00      	cmp	r3, #0
 8002072:	d041      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002078:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800207c:	d02a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800207e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002082:	d824      	bhi.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002084:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002088:	d008      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800208a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800208e:	d81e      	bhi.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002098:	d010      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800209a:	e018      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800209c:	4b86      	ldr	r3, [pc, #536]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a85      	ldr	r2, [pc, #532]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a8:	e015      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 facd 	bl	8002650 <RCCEx_PLLSAI1_Config>
 80020b6:	4603      	mov	r3, r0
 80020b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020ba:	e00c      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3320      	adds	r3, #32
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fbb6 	bl	8002834 <RCCEx_PLLSAI2_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020cc:	e003      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	74fb      	strb	r3, [r7, #19]
      break;
 80020d2:	e000      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020dc:	4b76      	ldr	r3, [pc, #472]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020ea:	4973      	ldr	r1, [pc, #460]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020f2:	e001      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d041      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002108:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800210c:	d02a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800210e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002112:	d824      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002114:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002118:	d008      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800211a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800211e:	d81e      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002128:	d010      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800212a:	e018      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800212c:	4b62      	ldr	r3, [pc, #392]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a61      	ldr	r2, [pc, #388]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002136:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002138:	e015      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fa85 	bl	8002650 <RCCEx_PLLSAI1_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800214a:	e00c      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3320      	adds	r3, #32
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fb6e 	bl	8002834 <RCCEx_PLLSAI2_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800215c:	e003      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	74fb      	strb	r3, [r7, #19]
      break;
 8002162:	e000      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800216c:	4b52      	ldr	r3, [pc, #328]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800217a:	494f      	ldr	r1, [pc, #316]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002182:	e001      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80a0 	beq.w	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800219a:	4b47      	ldr	r3, [pc, #284]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021aa:	2300      	movs	r3, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b41      	ldr	r3, [pc, #260]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b4:	4a40      	ldr	r2, [pc, #256]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80021bc:	4b3e      	ldr	r3, [pc, #248]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021cc:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3a      	ldr	r2, [pc, #232]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fda8 	bl	8000d2c <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021de:	e009      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e0:	f7fe fda4 	bl	8000d2c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d902      	bls.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	74fb      	strb	r3, [r7, #19]
        break;
 80021f2:	e005      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021f4:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ef      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d15c      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002206:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002210:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01f      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	d019      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002224:	4b24      	ldr	r3, [pc, #144]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800222e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002230:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002236:	4a20      	ldr	r2, [pc, #128]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002240:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002246:	4a1c      	ldr	r2, [pc, #112]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002250:	4a19      	ldr	r2, [pc, #100]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe fd63 	bl	8000d2c <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002268:	e00b      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fd5f 	bl	8000d2c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d902      	bls.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	74fb      	strb	r3, [r7, #19]
            break;
 8002280:	e006      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002282:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0ec      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	4904      	ldr	r1, [pc, #16]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022ae:	e009      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
 80022b4:	e006      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c4:	7c7b      	ldrb	r3, [r7, #17]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	4aa5      	ldr	r2, [pc, #660]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e8:	f023 0203 	bic.w	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f0:	499c      	ldr	r1, [pc, #624]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002304:	4b97      	ldr	r3, [pc, #604]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f023 020c 	bic.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002312:	4994      	ldr	r1, [pc, #592]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002326:	4b8f      	ldr	r3, [pc, #572]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	498b      	ldr	r1, [pc, #556]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002348:	4b86      	ldr	r3, [pc, #536]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	4983      	ldr	r1, [pc, #524]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800236a:	4b7e      	ldr	r3, [pc, #504]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002378:	497a      	ldr	r1, [pc, #488]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800238c:	4b75      	ldr	r3, [pc, #468]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	4972      	ldr	r1, [pc, #456]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	4969      	ldr	r1, [pc, #420]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023d0:	4b64      	ldr	r3, [pc, #400]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023de:	4961      	ldr	r1, [pc, #388]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002400:	4958      	ldr	r1, [pc, #352]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002422:	4950      	ldr	r1, [pc, #320]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002436:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002444:	4947      	ldr	r1, [pc, #284]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002458:	4b42      	ldr	r3, [pc, #264]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	493f      	ldr	r1, [pc, #252]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d028      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800247a:	4b3a      	ldr	r3, [pc, #232]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002480:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002488:	4936      	ldr	r1, [pc, #216]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002498:	d106      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249a:	4b32      	ldr	r3, [pc, #200]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4a31      	ldr	r2, [pc, #196]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024a4:	60d3      	str	r3, [r2, #12]
 80024a6:	e011      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2101      	movs	r1, #1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f8c9 	bl	8002650 <RCCEx_PLLSAI1_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d028      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024d8:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e6:	491f      	ldr	r1, [pc, #124]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024f6:	d106      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002502:	60d3      	str	r3, [r2, #12]
 8002504:	e011      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800250e:	d10c      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f89a 	bl	8002650 <RCCEx_PLLSAI1_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002544:	4907      	ldr	r1, [pc, #28]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002550:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002554:	d108      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002556:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4a02      	ldr	r2, [pc, #8]	@ (8002564 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002560:	60d3      	str	r3, [r2, #12]
 8002562:	e013      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002564:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800256c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002570:	d10c      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f869 	bl	8002650 <RCCEx_PLLSAI1_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002598:	4b2c      	ldr	r3, [pc, #176]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025a6:	4929      	ldr	r1, [pc, #164]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025b6:	d10d      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2102      	movs	r1, #2
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f846 	bl	8002650 <RCCEx_PLLSAI1_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d014      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	74bb      	strb	r3, [r7, #18]
 80025d2:	e011      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3320      	adds	r3, #32
 80025e2:	2102      	movs	r1, #2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f925 	bl	8002834 <RCCEx_PLLSAI2_Config>
 80025ea:	4603      	mov	r3, r0
 80025ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00b      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002614:	490d      	ldr	r1, [pc, #52]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002628:	4b08      	ldr	r3, [pc, #32]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002638:	4904      	ldr	r1, [pc, #16]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002640:	7cbb      	ldrb	r3, [r7, #18]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000

08002650 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800265e:	4b74      	ldr	r3, [pc, #464]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d018      	beq.n	800269c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800266a:	4b71      	ldr	r3, [pc, #452]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0203 	and.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d10d      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
       ||
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002682:	4b6b      	ldr	r3, [pc, #428]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
       ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d047      	beq.n	8002726 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e044      	b.n	8002726 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d018      	beq.n	80026d6 <RCCEx_PLLSAI1_Config+0x86>
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d825      	bhi.n	80026f4 <RCCEx_PLLSAI1_Config+0xa4>
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d002      	beq.n	80026b2 <RCCEx_PLLSAI1_Config+0x62>
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d009      	beq.n	80026c4 <RCCEx_PLLSAI1_Config+0x74>
 80026b0:	e020      	b.n	80026f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11d      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c2:	e01a      	b.n	80026fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d116      	bne.n	80026fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d4:	e013      	b.n	80026fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026d6:	4b56      	ldr	r3, [pc, #344]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026e2:	4b53      	ldr	r3, [pc, #332]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026f2:	e006      	b.n	8002702 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e004      	b.n	8002704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026fa:	bf00      	nop
 80026fc:	e002      	b.n	8002704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002702:	bf00      	nop
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10d      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800270a:	4b49      	ldr	r3, [pc, #292]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	430b      	orrs	r3, r1
 8002720:	4943      	ldr	r1, [pc, #268]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d17c      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800272c:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a3f      	ldr	r2, [pc, #252]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002732:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fe faf8 	bl	8000d2c <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800273e:	e009      	b.n	8002754 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002740:	f7fe faf4 	bl	8000d2c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	73fb      	strb	r3, [r7, #15]
        break;
 8002752:	e005      	b.n	8002760 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002754:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ef      	bne.n	8002740 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d15f      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d110      	bne.n	800278e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800276c:	4b30      	ldr	r3, [pc, #192]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002774:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6892      	ldr	r2, [r2, #8]
 800277c:	0211      	lsls	r1, r2, #8
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	06d2      	lsls	r2, r2, #27
 8002784:	430a      	orrs	r2, r1
 8002786:	492a      	ldr	r1, [pc, #168]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	610b      	str	r3, [r1, #16]
 800278c:	e027      	b.n	80027de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d112      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002794:	4b26      	ldr	r3, [pc, #152]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800279c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6892      	ldr	r2, [r2, #8]
 80027a4:	0211      	lsls	r1, r2, #8
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6912      	ldr	r2, [r2, #16]
 80027aa:	0852      	lsrs	r2, r2, #1
 80027ac:	3a01      	subs	r2, #1
 80027ae:	0552      	lsls	r2, r2, #21
 80027b0:	430a      	orrs	r2, r1
 80027b2:	491f      	ldr	r1, [pc, #124]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	610b      	str	r3, [r1, #16]
 80027b8:	e011      	b.n	80027de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6892      	ldr	r2, [r2, #8]
 80027ca:	0211      	lsls	r1, r2, #8
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6952      	ldr	r2, [r2, #20]
 80027d0:	0852      	lsrs	r2, r2, #1
 80027d2:	3a01      	subs	r2, #1
 80027d4:	0652      	lsls	r2, r2, #25
 80027d6:	430a      	orrs	r2, r1
 80027d8:	4915      	ldr	r1, [pc, #84]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027de:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a13      	ldr	r2, [pc, #76]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe fa9f 	bl	8000d2c <HAL_GetTick>
 80027ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027f0:	e009      	b.n	8002806 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027f2:	f7fe fa9b 	bl	8000d2c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d902      	bls.n	8002806 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	73fb      	strb	r3, [r7, #15]
          break;
 8002804:	e005      	b.n	8002812 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0ef      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d106      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4903      	ldr	r1, [pc, #12]	@ (8002830 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000

08002834 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002842:	4b69      	ldr	r3, [pc, #420]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d018      	beq.n	8002880 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800284e:	4b66      	ldr	r3, [pc, #408]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d10d      	bne.n	800287a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
       ||
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002866:	4b60      	ldr	r3, [pc, #384]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
       ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d047      	beq.n	800290a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	e044      	b.n	800290a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d018      	beq.n	80028ba <RCCEx_PLLSAI2_Config+0x86>
 8002888:	2b03      	cmp	r3, #3
 800288a:	d825      	bhi.n	80028d8 <RCCEx_PLLSAI2_Config+0xa4>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d002      	beq.n	8002896 <RCCEx_PLLSAI2_Config+0x62>
 8002890:	2b02      	cmp	r3, #2
 8002892:	d009      	beq.n	80028a8 <RCCEx_PLLSAI2_Config+0x74>
 8002894:	e020      	b.n	80028d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002896:	4b54      	ldr	r3, [pc, #336]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11d      	bne.n	80028de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a6:	e01a      	b.n	80028de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028a8:	4b4f      	ldr	r3, [pc, #316]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e013      	b.n	80028e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ba:	4b4b      	ldr	r3, [pc, #300]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028c6:	4b48      	ldr	r3, [pc, #288]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028d6:	e006      	b.n	80028e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e004      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ee:	4b3e      	ldr	r3, [pc, #248]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	430b      	orrs	r3, r1
 8002904:	4938      	ldr	r1, [pc, #224]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d166      	bne.n	80029de <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002910:	4b35      	ldr	r3, [pc, #212]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a34      	ldr	r2, [pc, #208]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800291a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fa06 	bl	8000d2c <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002922:	e009      	b.n	8002938 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002924:	f7fe fa02 	bl	8000d2c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d902      	bls.n	8002938 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	73fb      	strb	r3, [r7, #15]
        break;
 8002936:	e005      	b.n	8002944 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ef      	bne.n	8002924 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d149      	bne.n	80029de <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d110      	bne.n	8002972 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002958:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	0211      	lsls	r1, r2, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	06d2      	lsls	r2, r2, #27
 8002968:	430a      	orrs	r2, r1
 800296a:	491f      	ldr	r1, [pc, #124]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	614b      	str	r3, [r1, #20]
 8002970:	e011      	b.n	8002996 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002972:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800297a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	0211      	lsls	r1, r2, #8
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6912      	ldr	r2, [r2, #16]
 8002988:	0852      	lsrs	r2, r2, #1
 800298a:	3a01      	subs	r2, #1
 800298c:	0652      	lsls	r2, r2, #25
 800298e:	430a      	orrs	r2, r1
 8002990:	4915      	ldr	r1, [pc, #84]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002996:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe f9c3 	bl	8000d2c <HAL_GetTick>
 80029a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029a8:	e009      	b.n	80029be <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029aa:	f7fe f9bf 	bl	8000d2c <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d902      	bls.n	80029be <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	73fb      	strb	r3, [r7, #15]
          break;
 80029bc:	e005      	b.n	80029ca <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ef      	beq.n	80029aa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029d0:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4903      	ldr	r1, [pc, #12]	@ (80029e8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e049      	b.n	8002a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f841 	bl	8002a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f000 f9e0 	bl	8002df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d001      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e04f      	b.n	8002b68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	@ (8002b74 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01d      	beq.n	8002b26 <HAL_TIM_Base_Start_IT+0x76>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af2:	d018      	beq.n	8002b26 <HAL_TIM_Base_Start_IT+0x76>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <HAL_TIM_Base_Start_IT+0xc8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_TIM_Base_Start_IT+0x76>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1e      	ldr	r2, [pc, #120]	@ (8002b7c <HAL_TIM_Base_Start_IT+0xcc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <HAL_TIM_Base_Start_IT+0x76>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_TIM_Base_Start_IT+0x76>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1b      	ldr	r2, [pc, #108]	@ (8002b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_TIM_Base_Start_IT+0x76>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a19      	ldr	r2, [pc, #100]	@ (8002b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d115      	bne.n	8002b52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b06      	cmp	r3, #6
 8002b36:	d015      	beq.n	8002b64 <HAL_TIM_Base_Start_IT+0xb4>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3e:	d011      	beq.n	8002b64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b50:	e008      	b.n	8002b64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0201 	orr.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e000      	b.n	8002b66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800
 8002b80:	40000c00 	.word	0x40000c00
 8002b84:	40013400 	.word	0x40013400
 8002b88:	40014000 	.word	0x40014000
 8002b8c:	00010007 	.word	0x00010007

08002b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d020      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0202 	mvn.w	r2, #2
 8002bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8e9 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8db 	bl	8002d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f8ec 	bl	8002dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d020      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01b      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0204 	mvn.w	r2, #4
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8c3 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8b5 	bl	8002d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f8c6 	bl	8002dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d020      	beq.n	8002c8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01b      	beq.n	8002c8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0208 	mvn.w	r2, #8
 8002c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2204      	movs	r2, #4
 8002c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f89d 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f88f 	bl	8002d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8a0 	bl	8002dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d020      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01b      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0210 	mvn.w	r2, #16
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2208      	movs	r2, #8
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f877 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f869 	bl	8002d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f87a 	bl	8002dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00c      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0201 	mvn.w	r2, #1
 8002cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fd fdd2 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f913 	bl	8002f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f90b 	bl	8002f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00c      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f834 	bl	8002dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00c      	beq.n	8002d96 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f06f 0220 	mvn.w	r2, #32
 8002d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f8d3 	bl	8002f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a46      	ldr	r2, [pc, #280]	@ (8002f1c <TIM_Base_SetConfig+0x12c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0e:	d00f      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a43      	ldr	r2, [pc, #268]	@ (8002f20 <TIM_Base_SetConfig+0x130>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00b      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a42      	ldr	r2, [pc, #264]	@ (8002f24 <TIM_Base_SetConfig+0x134>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a41      	ldr	r2, [pc, #260]	@ (8002f28 <TIM_Base_SetConfig+0x138>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a40      	ldr	r2, [pc, #256]	@ (8002f2c <TIM_Base_SetConfig+0x13c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d108      	bne.n	8002e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a35      	ldr	r2, [pc, #212]	@ (8002f1c <TIM_Base_SetConfig+0x12c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01f      	beq.n	8002e8a <TIM_Base_SetConfig+0x9a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e50:	d01b      	beq.n	8002e8a <TIM_Base_SetConfig+0x9a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <TIM_Base_SetConfig+0x130>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d017      	beq.n	8002e8a <TIM_Base_SetConfig+0x9a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a31      	ldr	r2, [pc, #196]	@ (8002f24 <TIM_Base_SetConfig+0x134>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <TIM_Base_SetConfig+0x9a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a30      	ldr	r2, [pc, #192]	@ (8002f28 <TIM_Base_SetConfig+0x138>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00f      	beq.n	8002e8a <TIM_Base_SetConfig+0x9a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f2c <TIM_Base_SetConfig+0x13c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00b      	beq.n	8002e8a <TIM_Base_SetConfig+0x9a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a2e      	ldr	r2, [pc, #184]	@ (8002f30 <TIM_Base_SetConfig+0x140>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <TIM_Base_SetConfig+0x9a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f34 <TIM_Base_SetConfig+0x144>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <TIM_Base_SetConfig+0x9a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2c      	ldr	r2, [pc, #176]	@ (8002f38 <TIM_Base_SetConfig+0x148>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d108      	bne.n	8002e9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <TIM_Base_SetConfig+0x12c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00f      	beq.n	8002ee8 <TIM_Base_SetConfig+0xf8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a18      	ldr	r2, [pc, #96]	@ (8002f2c <TIM_Base_SetConfig+0x13c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <TIM_Base_SetConfig+0xf8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a17      	ldr	r2, [pc, #92]	@ (8002f30 <TIM_Base_SetConfig+0x140>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <TIM_Base_SetConfig+0xf8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a16      	ldr	r2, [pc, #88]	@ (8002f34 <TIM_Base_SetConfig+0x144>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0xf8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a15      	ldr	r2, [pc, #84]	@ (8002f38 <TIM_Base_SetConfig+0x148>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d103      	bne.n	8002ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f023 0201 	bic.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800
 8002f28:	40000c00 	.word	0x40000c00
 8002f2c:	40013400 	.word	0x40013400
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40014400 	.word	0x40014400
 8002f38:	40014800 	.word	0x40014800

08002f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e040      	b.n	800300c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd fcc0 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	@ 0x24
 8002fa4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fb6a 	bl	8003698 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f8af 	bl	8003128 <UART_SetConfig>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e01b      	b.n	800300c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fbe9 	bl	80037dc <UART_CheckIdleState>
 800300a:	4603      	mov	r3, r0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	@ 0x28
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003028:	2b20      	cmp	r3, #32
 800302a:	d177      	bne.n	800311c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_UART_Transmit+0x24>
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e070      	b.n	800311e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2221      	movs	r2, #33	@ 0x21
 8003048:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800304a:	f7fd fe6f 	bl	8000d2c <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003068:	d108      	bne.n	800307c <HAL_UART_Transmit+0x68>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e003      	b.n	8003084 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003084:	e02f      	b.n	80030e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	@ 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fc4b 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e03b      	b.n	800311e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	881a      	ldrh	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b8:	b292      	uxth	r2, r2
 80030ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	3302      	adds	r3, #2
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e007      	b.n	80030d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3301      	adds	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1c9      	bne.n	8003086 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2140      	movs	r1, #64	@ 0x40
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fc15 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e005      	b.n	800311e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b08a      	sub	sp, #40	@ 0x28
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4313      	orrs	r3, r2
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4ba4      	ldr	r3, [pc, #656]	@ (80033e8 <UART_SetConfig+0x2c0>)
 8003158:	4013      	ands	r3, r2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003160:	430b      	orrs	r3, r1
 8003162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a99      	ldr	r2, [pc, #612]	@ (80033ec <UART_SetConfig+0x2c4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003190:	4313      	orrs	r3, r2
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a4:	430a      	orrs	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a90      	ldr	r2, [pc, #576]	@ (80033f0 <UART_SetConfig+0x2c8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d126      	bne.n	8003200 <UART_SetConfig+0xd8>
 80031b2:	4b90      	ldr	r3, [pc, #576]	@ (80033f4 <UART_SetConfig+0x2cc>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d81b      	bhi.n	80031f8 <UART_SetConfig+0xd0>
 80031c0:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <UART_SetConfig+0xa0>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031d9 	.word	0x080031d9
 80031cc:	080031e9 	.word	0x080031e9
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f1 	.word	0x080031f1
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031de:	e116      	b.n	800340e <UART_SetConfig+0x2e6>
 80031e0:	2302      	movs	r3, #2
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e6:	e112      	b.n	800340e <UART_SetConfig+0x2e6>
 80031e8:	2304      	movs	r3, #4
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ee:	e10e      	b.n	800340e <UART_SetConfig+0x2e6>
 80031f0:	2308      	movs	r3, #8
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f6:	e10a      	b.n	800340e <UART_SetConfig+0x2e6>
 80031f8:	2310      	movs	r3, #16
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e106      	b.n	800340e <UART_SetConfig+0x2e6>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a7c      	ldr	r2, [pc, #496]	@ (80033f8 <UART_SetConfig+0x2d0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d138      	bne.n	800327c <UART_SetConfig+0x154>
 800320a:	4b7a      	ldr	r3, [pc, #488]	@ (80033f4 <UART_SetConfig+0x2cc>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d82d      	bhi.n	8003274 <UART_SetConfig+0x14c>
 8003218:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <UART_SetConfig+0xf8>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003255 	.word	0x08003255
 8003224:	08003275 	.word	0x08003275
 8003228:	08003275 	.word	0x08003275
 800322c:	08003275 	.word	0x08003275
 8003230:	08003265 	.word	0x08003265
 8003234:	08003275 	.word	0x08003275
 8003238:	08003275 	.word	0x08003275
 800323c:	08003275 	.word	0x08003275
 8003240:	0800325d 	.word	0x0800325d
 8003244:	08003275 	.word	0x08003275
 8003248:	08003275 	.word	0x08003275
 800324c:	08003275 	.word	0x08003275
 8003250:	0800326d 	.word	0x0800326d
 8003254:	2300      	movs	r3, #0
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325a:	e0d8      	b.n	800340e <UART_SetConfig+0x2e6>
 800325c:	2302      	movs	r3, #2
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003262:	e0d4      	b.n	800340e <UART_SetConfig+0x2e6>
 8003264:	2304      	movs	r3, #4
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326a:	e0d0      	b.n	800340e <UART_SetConfig+0x2e6>
 800326c:	2308      	movs	r3, #8
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003272:	e0cc      	b.n	800340e <UART_SetConfig+0x2e6>
 8003274:	2310      	movs	r3, #16
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327a:	e0c8      	b.n	800340e <UART_SetConfig+0x2e6>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5e      	ldr	r2, [pc, #376]	@ (80033fc <UART_SetConfig+0x2d4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d125      	bne.n	80032d2 <UART_SetConfig+0x1aa>
 8003286:	4b5b      	ldr	r3, [pc, #364]	@ (80033f4 <UART_SetConfig+0x2cc>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003290:	2b30      	cmp	r3, #48	@ 0x30
 8003292:	d016      	beq.n	80032c2 <UART_SetConfig+0x19a>
 8003294:	2b30      	cmp	r3, #48	@ 0x30
 8003296:	d818      	bhi.n	80032ca <UART_SetConfig+0x1a2>
 8003298:	2b20      	cmp	r3, #32
 800329a:	d00a      	beq.n	80032b2 <UART_SetConfig+0x18a>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d814      	bhi.n	80032ca <UART_SetConfig+0x1a2>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <UART_SetConfig+0x182>
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d008      	beq.n	80032ba <UART_SetConfig+0x192>
 80032a8:	e00f      	b.n	80032ca <UART_SetConfig+0x1a2>
 80032aa:	2300      	movs	r3, #0
 80032ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b0:	e0ad      	b.n	800340e <UART_SetConfig+0x2e6>
 80032b2:	2302      	movs	r3, #2
 80032b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b8:	e0a9      	b.n	800340e <UART_SetConfig+0x2e6>
 80032ba:	2304      	movs	r3, #4
 80032bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c0:	e0a5      	b.n	800340e <UART_SetConfig+0x2e6>
 80032c2:	2308      	movs	r3, #8
 80032c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c8:	e0a1      	b.n	800340e <UART_SetConfig+0x2e6>
 80032ca:	2310      	movs	r3, #16
 80032cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d0:	e09d      	b.n	800340e <UART_SetConfig+0x2e6>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003400 <UART_SetConfig+0x2d8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d125      	bne.n	8003328 <UART_SetConfig+0x200>
 80032dc:	4b45      	ldr	r3, [pc, #276]	@ (80033f4 <UART_SetConfig+0x2cc>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80032e8:	d016      	beq.n	8003318 <UART_SetConfig+0x1f0>
 80032ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80032ec:	d818      	bhi.n	8003320 <UART_SetConfig+0x1f8>
 80032ee:	2b80      	cmp	r3, #128	@ 0x80
 80032f0:	d00a      	beq.n	8003308 <UART_SetConfig+0x1e0>
 80032f2:	2b80      	cmp	r3, #128	@ 0x80
 80032f4:	d814      	bhi.n	8003320 <UART_SetConfig+0x1f8>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <UART_SetConfig+0x1d8>
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	d008      	beq.n	8003310 <UART_SetConfig+0x1e8>
 80032fe:	e00f      	b.n	8003320 <UART_SetConfig+0x1f8>
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003306:	e082      	b.n	800340e <UART_SetConfig+0x2e6>
 8003308:	2302      	movs	r3, #2
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800330e:	e07e      	b.n	800340e <UART_SetConfig+0x2e6>
 8003310:	2304      	movs	r3, #4
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003316:	e07a      	b.n	800340e <UART_SetConfig+0x2e6>
 8003318:	2308      	movs	r3, #8
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800331e:	e076      	b.n	800340e <UART_SetConfig+0x2e6>
 8003320:	2310      	movs	r3, #16
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003326:	e072      	b.n	800340e <UART_SetConfig+0x2e6>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a35      	ldr	r2, [pc, #212]	@ (8003404 <UART_SetConfig+0x2dc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d12a      	bne.n	8003388 <UART_SetConfig+0x260>
 8003332:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <UART_SetConfig+0x2cc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800333c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003340:	d01a      	beq.n	8003378 <UART_SetConfig+0x250>
 8003342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003346:	d81b      	bhi.n	8003380 <UART_SetConfig+0x258>
 8003348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800334c:	d00c      	beq.n	8003368 <UART_SetConfig+0x240>
 800334e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003352:	d815      	bhi.n	8003380 <UART_SetConfig+0x258>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <UART_SetConfig+0x238>
 8003358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800335c:	d008      	beq.n	8003370 <UART_SetConfig+0x248>
 800335e:	e00f      	b.n	8003380 <UART_SetConfig+0x258>
 8003360:	2300      	movs	r3, #0
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003366:	e052      	b.n	800340e <UART_SetConfig+0x2e6>
 8003368:	2302      	movs	r3, #2
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800336e:	e04e      	b.n	800340e <UART_SetConfig+0x2e6>
 8003370:	2304      	movs	r3, #4
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003376:	e04a      	b.n	800340e <UART_SetConfig+0x2e6>
 8003378:	2308      	movs	r3, #8
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337e:	e046      	b.n	800340e <UART_SetConfig+0x2e6>
 8003380:	2310      	movs	r3, #16
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003386:	e042      	b.n	800340e <UART_SetConfig+0x2e6>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a17      	ldr	r2, [pc, #92]	@ (80033ec <UART_SetConfig+0x2c4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d13a      	bne.n	8003408 <UART_SetConfig+0x2e0>
 8003392:	4b18      	ldr	r3, [pc, #96]	@ (80033f4 <UART_SetConfig+0x2cc>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003398:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800339c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033a0:	d01a      	beq.n	80033d8 <UART_SetConfig+0x2b0>
 80033a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033a6:	d81b      	bhi.n	80033e0 <UART_SetConfig+0x2b8>
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ac:	d00c      	beq.n	80033c8 <UART_SetConfig+0x2a0>
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b2:	d815      	bhi.n	80033e0 <UART_SetConfig+0x2b8>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <UART_SetConfig+0x298>
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033bc:	d008      	beq.n	80033d0 <UART_SetConfig+0x2a8>
 80033be:	e00f      	b.n	80033e0 <UART_SetConfig+0x2b8>
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033c6:	e022      	b.n	800340e <UART_SetConfig+0x2e6>
 80033c8:	2302      	movs	r3, #2
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ce:	e01e      	b.n	800340e <UART_SetConfig+0x2e6>
 80033d0:	2304      	movs	r3, #4
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d6:	e01a      	b.n	800340e <UART_SetConfig+0x2e6>
 80033d8:	2308      	movs	r3, #8
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033de:	e016      	b.n	800340e <UART_SetConfig+0x2e6>
 80033e0:	2310      	movs	r3, #16
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e6:	e012      	b.n	800340e <UART_SetConfig+0x2e6>
 80033e8:	efff69f3 	.word	0xefff69f3
 80033ec:	40008000 	.word	0x40008000
 80033f0:	40013800 	.word	0x40013800
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40004400 	.word	0x40004400
 80033fc:	40004800 	.word	0x40004800
 8003400:	40004c00 	.word	0x40004c00
 8003404:	40005000 	.word	0x40005000
 8003408:	2310      	movs	r3, #16
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a9f      	ldr	r2, [pc, #636]	@ (8003690 <UART_SetConfig+0x568>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d17a      	bne.n	800350e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003418:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800341c:	2b08      	cmp	r3, #8
 800341e:	d824      	bhi.n	800346a <UART_SetConfig+0x342>
 8003420:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <UART_SetConfig+0x300>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800344d 	.word	0x0800344d
 800342c:	0800346b 	.word	0x0800346b
 8003430:	08003455 	.word	0x08003455
 8003434:	0800346b 	.word	0x0800346b
 8003438:	0800345b 	.word	0x0800345b
 800343c:	0800346b 	.word	0x0800346b
 8003440:	0800346b 	.word	0x0800346b
 8003444:	0800346b 	.word	0x0800346b
 8003448:	08003463 	.word	0x08003463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800344c:	f7fe fd46 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8003450:	61f8      	str	r0, [r7, #28]
        break;
 8003452:	e010      	b.n	8003476 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003454:	4b8f      	ldr	r3, [pc, #572]	@ (8003694 <UART_SetConfig+0x56c>)
 8003456:	61fb      	str	r3, [r7, #28]
        break;
 8003458:	e00d      	b.n	8003476 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345a:	f7fe fca7 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 800345e:	61f8      	str	r0, [r7, #28]
        break;
 8003460:	e009      	b.n	8003476 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003466:	61fb      	str	r3, [r7, #28]
        break;
 8003468:	e005      	b.n	8003476 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80fb 	beq.w	8003674 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	429a      	cmp	r2, r3
 800348c:	d305      	bcc.n	800349a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	429a      	cmp	r2, r3
 8003498:	d903      	bls.n	80034a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034a0:	e0e8      	b.n	8003674 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2200      	movs	r2, #0
 80034a6:	461c      	mov	r4, r3
 80034a8:	4615      	mov	r5, r2
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	022b      	lsls	r3, r5, #8
 80034b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034b8:	0222      	lsls	r2, r4, #8
 80034ba:	68f9      	ldr	r1, [r7, #12]
 80034bc:	6849      	ldr	r1, [r1, #4]
 80034be:	0849      	lsrs	r1, r1, #1
 80034c0:	2000      	movs	r0, #0
 80034c2:	4688      	mov	r8, r1
 80034c4:	4681      	mov	r9, r0
 80034c6:	eb12 0a08 	adds.w	sl, r2, r8
 80034ca:	eb43 0b09 	adc.w	fp, r3, r9
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034dc:	4650      	mov	r0, sl
 80034de:	4659      	mov	r1, fp
 80034e0:	f7fc fe86 	bl	80001f0 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4613      	mov	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034f2:	d308      	bcc.n	8003506 <UART_SetConfig+0x3de>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034fa:	d204      	bcs.n	8003506 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	e0b6      	b.n	8003674 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800350c:	e0b2      	b.n	8003674 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003516:	d15e      	bne.n	80035d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003518:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800351c:	2b08      	cmp	r3, #8
 800351e:	d828      	bhi.n	8003572 <UART_SetConfig+0x44a>
 8003520:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <UART_SetConfig+0x400>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003555 	.word	0x08003555
 8003530:	0800355d 	.word	0x0800355d
 8003534:	08003573 	.word	0x08003573
 8003538:	08003563 	.word	0x08003563
 800353c:	08003573 	.word	0x08003573
 8003540:	08003573 	.word	0x08003573
 8003544:	08003573 	.word	0x08003573
 8003548:	0800356b 	.word	0x0800356b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7fe fcc6 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8003550:	61f8      	str	r0, [r7, #28]
        break;
 8003552:	e014      	b.n	800357e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7fe fcd8 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8003558:	61f8      	str	r0, [r7, #28]
        break;
 800355a:	e010      	b.n	800357e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800355c:	4b4d      	ldr	r3, [pc, #308]	@ (8003694 <UART_SetConfig+0x56c>)
 800355e:	61fb      	str	r3, [r7, #28]
        break;
 8003560:	e00d      	b.n	800357e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7fe fc23 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8003566:	61f8      	str	r0, [r7, #28]
        break;
 8003568:	e009      	b.n	800357e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356e:	61fb      	str	r3, [r7, #28]
        break;
 8003570:	e005      	b.n	800357e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800357c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d077      	beq.n	8003674 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005a      	lsls	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	441a      	add	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d916      	bls.n	80035ce <UART_SetConfig+0x4a6>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a6:	d212      	bcs.n	80035ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f023 030f 	bic.w	r3, r3, #15
 80035b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	b29a      	uxth	r2, r3
 80035be:	8afb      	ldrh	r3, [r7, #22]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	8afa      	ldrh	r2, [r7, #22]
 80035ca:	60da      	str	r2, [r3, #12]
 80035cc:	e052      	b.n	8003674 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035d4:	e04e      	b.n	8003674 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d827      	bhi.n	800362e <UART_SetConfig+0x506>
 80035de:	a201      	add	r2, pc, #4	@ (adr r2, 80035e4 <UART_SetConfig+0x4bc>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	08003609 	.word	0x08003609
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003619 	.word	0x08003619
 80035f0:	0800362f 	.word	0x0800362f
 80035f4:	0800361f 	.word	0x0800361f
 80035f8:	0800362f 	.word	0x0800362f
 80035fc:	0800362f 	.word	0x0800362f
 8003600:	0800362f 	.word	0x0800362f
 8003604:	08003627 	.word	0x08003627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003608:	f7fe fc68 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 800360c:	61f8      	str	r0, [r7, #28]
        break;
 800360e:	e014      	b.n	800363a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003610:	f7fe fc7a 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8003614:	61f8      	str	r0, [r7, #28]
        break;
 8003616:	e010      	b.n	800363a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003618:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <UART_SetConfig+0x56c>)
 800361a:	61fb      	str	r3, [r7, #28]
        break;
 800361c:	e00d      	b.n	800363a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361e:	f7fe fbc5 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8003622:	61f8      	str	r0, [r7, #28]
        break;
 8003624:	e009      	b.n	800363a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800362a:	61fb      	str	r3, [r7, #28]
        break;
 800362c:	e005      	b.n	800363a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003638:	bf00      	nop
    }

    if (pclk != 0U)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d019      	beq.n	8003674 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	085a      	lsrs	r2, r3, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	441a      	add	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b0f      	cmp	r3, #15
 8003658:	d909      	bls.n	800366e <UART_SetConfig+0x546>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003660:	d205      	bcs.n	800366e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	e002      	b.n	8003674 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003680:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003684:	4618      	mov	r0, r3
 8003686:	3728      	adds	r7, #40	@ 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	40008000 	.word	0x40008000
 8003694:	00f42400 	.word	0x00f42400

08003698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01a      	beq.n	80037ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003796:	d10a      	bne.n	80037ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  }
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b098      	sub	sp, #96	@ 0x60
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037ec:	f7fd fa9e 	bl	8000d2c <HAL_GetTick>
 80037f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d12e      	bne.n	800385e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003800:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003808:	2200      	movs	r2, #0
 800380a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f88c 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d021      	beq.n	800385e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800382e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003838:	647b      	str	r3, [r7, #68]	@ 0x44
 800383a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800383e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e6      	bne.n	800381a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e062      	b.n	8003924 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d149      	bne.n	8003900 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800386c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	2200      	movs	r2, #0
 8003876:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f856 	bl	800392c <UART_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03c      	beq.n	8003900 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	623b      	str	r3, [r7, #32]
   return(result);
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800389a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e6      	bne.n	8003886 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3308      	adds	r3, #8
 80038be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3308      	adds	r3, #8
 80038d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d8:	61fa      	str	r2, [r7, #28]
 80038da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	617b      	str	r3, [r7, #20]
   return(result);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e5      	bne.n	80038b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e011      	b.n	8003924 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3758      	adds	r7, #88	@ 0x58
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393c:	e04f      	b.n	80039de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003944:	d04b      	beq.n	80039de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003946:	f7fd f9f1 	bl	8000d2c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <UART_WaitOnFlagUntilTimeout+0x30>
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e04e      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d037      	beq.n	80039de <UART_WaitOnFlagUntilTimeout+0xb2>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b80      	cmp	r3, #128	@ 0x80
 8003972:	d034      	beq.n	80039de <UART_WaitOnFlagUntilTimeout+0xb2>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b40      	cmp	r3, #64	@ 0x40
 8003978:	d031      	beq.n	80039de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b08      	cmp	r3, #8
 8003986:	d110      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f838 	bl	8003a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2208      	movs	r2, #8
 800399a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e029      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b8:	d111      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f81e 	bl	8003a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e00f      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d0a0      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b095      	sub	sp, #84	@ 0x54
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e6      	bne.n	8003a0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e5      	bne.n	8003a40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d118      	bne.n	8003aae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f023 0310 	bic.w	r3, r3, #16
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6979      	ldr	r1, [r7, #20]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e6      	bne.n	8003a7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ac2:	bf00      	nop
 8003ac4:	3754      	adds	r7, #84	@ 0x54
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <__NVIC_SetPriority>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db0a      	blt.n	8003afa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	490c      	ldr	r1, [pc, #48]	@ (8003b1c <__NVIC_SetPriority+0x4c>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003af8:	e00a      	b.n	8003b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4908      	ldr	r1, [pc, #32]	@ (8003b20 <__NVIC_SetPriority+0x50>)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	3b04      	subs	r3, #4
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	761a      	strb	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000e100 	.word	0xe000e100
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <SysTick_Handler+0x1c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b2c:	f002 f8c4 	bl	8005cb8 <xTaskGetSchedulerState>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d001      	beq.n	8003b3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b36:	f002 fef7 	bl	8006928 <xPortSysTickHandler>
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	e000e010 	.word	0xe000e010

08003b44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	f06f 0004 	mvn.w	r0, #4
 8003b4e:	f7ff ffbf 	bl	8003ad0 <__NVIC_SetPriority>
#endif
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b5e:	f3ef 8305 	mrs	r3, IPSR
 8003b62:	603b      	str	r3, [r7, #0]
  return(result);
 8003b64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b6a:	f06f 0305 	mvn.w	r3, #5
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	e00c      	b.n	8003b8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b72:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <osKernelInitialize+0x44>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <osKernelInitialize+0x44>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	e002      	b.n	8003b8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b8c:	687b      	ldr	r3, [r7, #4]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000174 	.word	0x20000174

08003ba0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba6:	f3ef 8305 	mrs	r3, IPSR
 8003baa:	603b      	str	r3, [r7, #0]
  return(result);
 8003bac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bb2:	f06f 0305 	mvn.w	r3, #5
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	e010      	b.n	8003bdc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <osKernelStart+0x48>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d109      	bne.n	8003bd6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bc2:	f7ff ffbf 	bl	8003b44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <osKernelStart+0x48>)
 8003bc8:	2202      	movs	r2, #2
 8003bca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003bcc:	f001 fb6e 	bl	80052ac <vTaskStartScheduler>
      stat = osOK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	e002      	b.n	8003bdc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bdc:	687b      	ldr	r3, [r7, #4]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000174 	.word	0x20000174

08003bec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08e      	sub	sp, #56	@ 0x38
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bfc:	f3ef 8305 	mrs	r3, IPSR
 8003c00:	617b      	str	r3, [r7, #20]
  return(result);
 8003c02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d17e      	bne.n	8003d06 <osThreadNew+0x11a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d07b      	beq.n	8003d06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c0e:	2380      	movs	r3, #128	@ 0x80
 8003c10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c12:	2318      	movs	r3, #24
 8003c14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d045      	beq.n	8003cb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <osThreadNew+0x48>
        name = attr->name;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <osThreadNew+0x6e>
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b38      	cmp	r3, #56	@ 0x38
 8003c4c:	d805      	bhi.n	8003c5a <osThreadNew+0x6e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <osThreadNew+0x72>
        return (NULL);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e054      	b.n	8003d08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <osThreadNew+0xa8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2ba7      	cmp	r3, #167	@ 0xa7
 8003c7c:	d90a      	bls.n	8003c94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <osThreadNew+0xa8>
        mem = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e010      	b.n	8003cb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10c      	bne.n	8003cb6 <osThreadNew+0xca>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <osThreadNew+0xca>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <osThreadNew+0xca>
          mem = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e001      	b.n	8003cb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d110      	bne.n	8003cde <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cc4:	9202      	str	r2, [sp, #8]
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	6a3a      	ldr	r2, [r7, #32]
 8003cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f001 f8f6 	bl	8004ec4 <xTaskCreateStatic>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	e013      	b.n	8003d06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d110      	bne.n	8003d06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	f107 0310 	add.w	r3, r7, #16
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f001 f944 	bl	8004f84 <xTaskCreate>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <osThreadNew+0x11a>
            hTask = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d06:	693b      	ldr	r3, [r7, #16]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3728      	adds	r7, #40	@ 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d18:	f3ef 8305 	mrs	r3, IPSR
 8003d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <osDelay+0x1c>
    stat = osErrorISR;
 8003d24:	f06f 0305 	mvn.w	r3, #5
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e007      	b.n	8003d3c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f001 fa82 	bl	8005240 <vTaskDelay>
    }
  }

  return (stat);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d52:	f3ef 8305 	mrs	r3, IPSR
 8003d56:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d58:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d12d      	bne.n	8003dba <osEventFlagsNew+0x74>
    mem = -1;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d62:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <osEventFlagsNew+0x3a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b1f      	cmp	r3, #31
 8003d78:	d902      	bls.n	8003d80 <osEventFlagsNew+0x3a>
        mem = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	e00c      	b.n	8003d9a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d108      	bne.n	8003d9a <osEventFlagsNew+0x54>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <osEventFlagsNew+0x54>
          mem = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	e001      	b.n	8003d9a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f8e9 	bl	8003f7c <xEventGroupCreateStatic>
 8003daa:	6178      	str	r0, [r7, #20]
 8003dac:	e005      	b.n	8003dba <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003db4:	f000 f91b 	bl	8003fee <xEventGroupCreate>
 8003db8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003dba:	697b      	ldr	r3, [r7, #20]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <osEventFlagsSet+0x1c>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dde:	d303      	bcc.n	8003de8 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8003de0:	f06f 0303 	mvn.w	r3, #3
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e028      	b.n	8003e3a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de8:	f3ef 8305 	mrs	r3, IPSR
 8003dec:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01d      	beq.n	8003e30 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	6839      	ldr	r1, [r7, #0]
 8003e00:	6938      	ldr	r0, [r7, #16]
 8003e02:	f000 fa9d 	bl	8004340 <xEventGroupSetBitsFromISR>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8003e0c:	f06f 0302 	mvn.w	r3, #2
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e012      	b.n	8003e3a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <osEventFlagsSet+0x76>
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <osEventFlagsSet+0x80>)
 8003e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	e004      	b.n	8003e3a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003e30:	6839      	ldr	r1, [r7, #0]
 8003e32:	6938      	ldr	r0, [r7, #16]
 8003e34:	f000 f9c8 	bl	80041c8 <xEventGroupSetBits>
 8003e38:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <osEventFlagsWait+0x20>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e66:	d303      	bcc.n	8003e70 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8003e68:	f06f 0303 	mvn.w	r3, #3
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	e04b      	b.n	8003f08 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e70:	f3ef 8305 	mrs	r3, IPSR
 8003e74:	617b      	str	r3, [r7, #20]
  return(result);
 8003e76:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8003e7c:	f06f 0305 	mvn.w	r3, #5
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e041      	b.n	8003f08 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e92:	e001      	b.n	8003e98 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	623b      	str	r3, [r7, #32]
 8003ea6:	e001      	b.n	8003eac <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	69b8      	ldr	r0, [r7, #24]
 8003eb8:	f000 f8b4 	bl	8004024 <xEventGroupWaitBits>
 8003ebc:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d010      	beq.n	8003eea <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d019      	beq.n	8003f08 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8003eda:	f06f 0301 	mvn.w	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e012      	b.n	8003f08 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003ee2:	f06f 0302 	mvn.w	r3, #2
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	e00e      	b.n	8003f08 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8003efa:	f06f 0301 	mvn.w	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	e002      	b.n	8003f08 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003f02:	f06f 0302 	mvn.w	r3, #2
 8003f06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8003f08:	69fb      	ldr	r3, [r7, #28]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3728      	adds	r7, #40	@ 0x28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a07      	ldr	r2, [pc, #28]	@ (8003f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4a06      	ldr	r2, [pc, #24]	@ (8003f44 <vApplicationGetIdleTaskMemory+0x30>)
 8003f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2280      	movs	r2, #128	@ 0x80
 8003f30:	601a      	str	r2, [r3, #0]
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000178 	.word	0x20000178
 8003f44:	20000220 	.word	0x20000220

08003f48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4a07      	ldr	r2, [pc, #28]	@ (8003f74 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4a06      	ldr	r2, [pc, #24]	@ (8003f78 <vApplicationGetTimerTaskMemory+0x30>)
 8003f5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f66:	601a      	str	r2, [r3, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20000420 	.word	0x20000420
 8003f78:	200004c8 	.word	0x200004c8

08003f7c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d00b      	beq.n	8003fc4 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60fb      	str	r3, [r7, #12]
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f9c5 	bl	8004368 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003fe4:	697b      	ldr	r3, [r7, #20]
	}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003ff4:	2020      	movs	r0, #32
 8003ff6:	f002 fd29 	bl	8006a4c <pvPortMalloc>
 8003ffa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f9ab 	bl	8004368 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004018:	687b      	ldr	r3, [r7, #4]
	}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b090      	sub	sp, #64	@ 0x40
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <xEventGroupWaitBits+0x38>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	623b      	str	r3, [r7, #32]
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004062:	d30b      	bcc.n	800407c <xEventGroupWaitBits+0x58>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	61fb      	str	r3, [r7, #28]
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	e7fd      	b.n	8004078 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <xEventGroupWaitBits+0x76>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	61bb      	str	r3, [r7, #24]
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	e7fd      	b.n	8004096 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800409a:	f001 fe0d 	bl	8005cb8 <xTaskGetSchedulerState>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <xEventGroupWaitBits+0x86>
 80040a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <xEventGroupWaitBits+0x8a>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <xEventGroupWaitBits+0x8c>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <xEventGroupWaitBits+0xa8>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	617b      	str	r3, [r7, #20]
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80040cc:	f001 f95e 	bl	800538c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80040d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040dc:	f000 f90d 	bl	80042fa <prvTestWaitCondition>
 80040e0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d028      	beq.n	8004148 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80040f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e020      	b.n	8004148 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800410c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004110:	2301      	movs	r3, #1
 8004112:	633b      	str	r3, [r7, #48]	@ 0x30
 8004114:	e018      	b.n	8004148 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800411c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004122:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800412a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004130:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004134:	1d18      	adds	r0, r3, #4
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800413a:	4313      	orrs	r3, r2
 800413c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800413e:	4619      	mov	r1, r3
 8004140:	f001 fb26 	bl	8005790 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004148:	f001 f92e 	bl	80053a8 <xTaskResumeAll>
 800414c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800414e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004150:	2b00      	cmp	r3, #0
 8004152:	d031      	beq.n	80041b8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800415a:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <xEventGroupWaitBits+0x1a0>)
 800415c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800416a:	f001 fe33 	bl	8005dd4 <uxTaskResetEventItemValue>
 800416e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d11a      	bne.n	80041b0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800417a:	f002 fb45 	bl	8006808 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800417e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800418a:	f000 f8b6 	bl	80042fa <prvTestWaitCondition>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800419a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	401a      	ands	r2, r3
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80041ac:	f002 fb5e 	bl	800686c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80041b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80041b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3740      	adds	r7, #64	@ 0x40
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	e000ed04 	.word	0xe000ed04

080041c8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08e      	sub	sp, #56	@ 0x38
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80041d2:	2300      	movs	r3, #0
 80041d4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <xEventGroupSetBits+0x34>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	613b      	str	r3, [r7, #16]
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004202:	d30b      	bcc.n	800421c <xEventGroupSetBits+0x54>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	3304      	adds	r3, #4
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	3308      	adds	r3, #8
 8004226:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004228:	f001 f8b0 	bl	800538c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	431a      	orrs	r2, r3
 800423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800423e:	e03c      	b.n	80042ba <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004256:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800425e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800427a:	e008      	b.n	800428e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	429a      	cmp	r2, r3
 8004288:	d101      	bne.n	800428e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800428e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d010      	beq.n	80042b6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800429e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042ae:	4619      	mov	r1, r3
 80042b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80042b2:	f001 fb3b 	bl	800592c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80042ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d1be      	bne.n	8004240 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	43db      	mvns	r3, r3
 80042ca:	401a      	ands	r2, r3
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80042d0:	f001 f86a 	bl	80053a8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3738      	adds	r7, #56	@ 0x38
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff6b 	bl	80041c8 <xEventGroupSetBits>
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80042fa:	b480      	push	{r7}
 80042fc:	b087      	sub	sp, #28
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800431a:	2301      	movs	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e007      	b.n	8004330 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d101      	bne.n	8004330 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800432c:	2301      	movs	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004330:	697b      	ldr	r3, [r7, #20]
}
 8004332:	4618      	mov	r0, r3
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	4804      	ldr	r0, [pc, #16]	@ (8004364 <xEventGroupSetBitsFromISR+0x24>)
 8004354:	f002 f904 	bl	8006560 <xTimerPendFunctionCallFromISR>
 8004358:	6178      	str	r0, [r7, #20]

		return xReturn;
 800435a:	697b      	ldr	r3, [r7, #20]
	}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	080042e1 	.word	0x080042e1

08004368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f103 0208 	add.w	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f103 0208 	add.w	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f103 0208 	add.w	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004420:	d103      	bne.n	800442a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e00c      	b.n	8004444 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3308      	adds	r3, #8
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e002      	b.n	8004438 <vListInsert+0x2e>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	429a      	cmp	r2, r3
 8004442:	d2f6      	bcs.n	8004432 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6852      	ldr	r2, [r2, #4]
 800449c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d103      	bne.n	80044b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <xQueueGenericReset+0x2c>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60bb      	str	r3, [r7, #8]
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044fc:	f002 f984 	bl	8006808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	3b01      	subs	r3, #1
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	441a      	add	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	22ff      	movs	r2, #255	@ 0xff
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	22ff      	movs	r2, #255	@ 0xff
 8004548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d114      	bne.n	800457c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01a      	beq.n	8004590 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3310      	adds	r3, #16
 800455e:	4618      	mov	r0, r3
 8004560:	f001 f980 	bl	8005864 <xTaskRemoveFromEventList>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d012      	beq.n	8004590 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <xQueueGenericReset+0xd0>)
 800456c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	e009      	b.n	8004590 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3310      	adds	r3, #16
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fef1 	bl	8004368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3324      	adds	r3, #36	@ 0x24
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff feec 	bl	8004368 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004590:	f002 f96c 	bl	800686c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004594:	2301      	movs	r3, #1
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	@ 0x38
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <xQueueGenericCreateStatic+0x56>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <xQueueGenericCreateStatic+0x5a>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericCreateStatic+0x5c>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	623b      	str	r3, [r7, #32]
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d102      	bne.n	8004628 <xQueueGenericCreateStatic+0x84>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <xQueueGenericCreateStatic+0x88>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <xQueueGenericCreateStatic+0x8a>
 800462c:	2300      	movs	r3, #0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	61fb      	str	r3, [r7, #28]
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	e7fd      	b.n	8004646 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800464a:	2350      	movs	r3, #80	@ 0x50
 800464c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b50      	cmp	r3, #80	@ 0x50
 8004652:	d00b      	beq.n	800466c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	61bb      	str	r3, [r7, #24]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800466c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00d      	beq.n	8004694 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004680:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f805 	bl	800469e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004696:	4618      	mov	r0, r3
 8004698:	3730      	adds	r7, #48	@ 0x30
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e002      	b.n	80046c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046cc:	2101      	movs	r1, #1
 80046ce:	69b8      	ldr	r0, [r7, #24]
 80046d0:	f7ff fefe 	bl	80044d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08e      	sub	sp, #56	@ 0x38
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046f2:	2300      	movs	r3, #0
 80046f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80046fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xQueueGenericSend+0x34>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <xQueueGenericSend+0x42>
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <xQueueGenericSend+0x46>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <xQueueGenericSend+0x48>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <xQueueGenericSend+0x64>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004742:	bf00      	nop
 8004744:	bf00      	nop
 8004746:	e7fd      	b.n	8004744 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d103      	bne.n	8004756 <xQueueGenericSend+0x72>
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <xQueueGenericSend+0x76>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <xQueueGenericSend+0x78>
 800475a:	2300      	movs	r3, #0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <xQueueGenericSend+0x94>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	623b      	str	r3, [r7, #32]
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	e7fd      	b.n	8004774 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004778:	f001 fa9e 	bl	8005cb8 <xTaskGetSchedulerState>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <xQueueGenericSend+0xa4>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <xQueueGenericSend+0xa8>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <xQueueGenericSend+0xaa>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <xQueueGenericSend+0xc6>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61fb      	str	r3, [r7, #28]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047aa:	f002 f82d 	bl	8006808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <xQueueGenericSend+0xdc>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d129      	bne.n	8004814 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047c6:	f000 fa0f 	bl	8004be8 <prvCopyDataToQueue>
 80047ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	3324      	adds	r3, #36	@ 0x24
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 f843 	bl	8005864 <xTaskRemoveFromEventList>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d013      	beq.n	800480c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047e4:	4b3f      	ldr	r3, [pc, #252]	@ (80048e4 <xQueueGenericSend+0x200>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	e00a      	b.n	800480c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047fc:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <xQueueGenericSend+0x200>)
 80047fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800480c:	f002 f82e 	bl	800686c <vPortExitCritical>
				return pdPASS;
 8004810:	2301      	movs	r3, #1
 8004812:	e063      	b.n	80048dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800481a:	f002 f827 	bl	800686c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800481e:	2300      	movs	r3, #0
 8004820:	e05c      	b.n	80048dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	4618      	mov	r0, r3
 800482e:	f001 f8e1 	bl	80059f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004836:	f002 f819 	bl	800686c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800483a:	f000 fda7 	bl	800538c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800483e:	f001 ffe3 	bl	8006808 <vPortEnterCritical>
 8004842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004848:	b25b      	sxtb	r3, r3
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800484e:	d103      	bne.n	8004858 <xQueueGenericSend+0x174>
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800485e:	b25b      	sxtb	r3, r3
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004864:	d103      	bne.n	800486e <xQueueGenericSend+0x18a>
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800486e:	f001 fffd 	bl	800686c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004872:	1d3a      	adds	r2, r7, #4
 8004874:	f107 0314 	add.w	r3, r7, #20
 8004878:	4611      	mov	r1, r2
 800487a:	4618      	mov	r0, r3
 800487c:	f001 f8d0 	bl	8005a20 <xTaskCheckForTimeOut>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d124      	bne.n	80048d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004886:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004888:	f000 faa6 	bl	8004dd8 <prvIsQueueFull>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004894:	3310      	adds	r3, #16
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 ff52 	bl	8005744 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048a2:	f000 fa31 	bl	8004d08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048a6:	f000 fd7f 	bl	80053a8 <xTaskResumeAll>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f af7c 	bne.w	80047aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048b2:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <xQueueGenericSend+0x200>)
 80048b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	e772      	b.n	80047aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048c6:	f000 fa1f 	bl	8004d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ca:	f000 fd6d 	bl	80053a8 <xTaskResumeAll>
 80048ce:	e76c      	b.n	80047aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048d2:	f000 fa19 	bl	8004d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048d6:	f000 fd67 	bl	80053a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3738      	adds	r7, #56	@ 0x38
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b090      	sub	sp, #64	@ 0x40
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <xQueueGenericSendFromISR+0x3e>
 800491e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <xQueueGenericSendFromISR+0x42>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <xQueueGenericSendFromISR+0x44>
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10b      	bne.n	8004948 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	e7fd      	b.n	8004944 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d103      	bne.n	8004956 <xQueueGenericSendFromISR+0x6e>
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <xQueueGenericSendFromISR+0x72>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <xQueueGenericSendFromISR+0x74>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004978:	f002 f826 	bl	80069c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800497c:	f3ef 8211 	mrs	r2, BASEPRI
 8004980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	61fa      	str	r2, [r7, #28]
 8004992:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004994:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800499c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d302      	bcc.n	80049aa <xQueueGenericSendFromISR+0xc2>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d12f      	bne.n	8004a0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049c0:	f000 f912 	bl	8004be8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049cc:	d112      	bne.n	80049f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d8:	3324      	adds	r3, #36	@ 0x24
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 ff42 	bl	8005864 <xTaskRemoveFromEventList>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e007      	b.n	8004a04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049f8:	3301      	adds	r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	b25a      	sxtb	r2, r3
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a04:	2301      	movs	r3, #1
 8004a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004a08:	e001      	b.n	8004a0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a10:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3740      	adds	r7, #64	@ 0x40
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	@ 0x30
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <xQueueReceive+0x32>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	623b      	str	r3, [r7, #32]
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	e7fd      	b.n	8004a52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <xQueueReceive+0x40>
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <xQueueReceive+0x44>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <xQueueReceive+0x46>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <xQueueReceive+0x62>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	61fb      	str	r3, [r7, #28]
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a86:	f001 f917 	bl	8005cb8 <xTaskGetSchedulerState>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <xQueueReceive+0x72>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueReceive+0x76>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueReceive+0x78>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <xQueueReceive+0x94>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61bb      	str	r3, [r7, #24]
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ab8:	f001 fea6 	bl	8006808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01f      	beq.n	8004b08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004acc:	f000 f8f6 	bl	8004cbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00f      	beq.n	8004b00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	3310      	adds	r3, #16
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 febd 	bl	8005864 <xTaskRemoveFromEventList>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004af0:	4b3c      	ldr	r3, [pc, #240]	@ (8004be4 <xQueueReceive+0x1c0>)
 8004af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b00:	f001 feb4 	bl	800686c <vPortExitCritical>
				return pdPASS;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e069      	b.n	8004bdc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b0e:	f001 fead 	bl	800686c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e062      	b.n	8004bdc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b1c:	f107 0310 	add.w	r3, r7, #16
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 ff67 	bl	80059f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b26:	2301      	movs	r3, #1
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b2a:	f001 fe9f 	bl	800686c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b2e:	f000 fc2d 	bl	800538c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b32:	f001 fe69 	bl	8006808 <vPortEnterCritical>
 8004b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b42:	d103      	bne.n	8004b4c <xQueueReceive+0x128>
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b52:	b25b      	sxtb	r3, r3
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b58:	d103      	bne.n	8004b62 <xQueueReceive+0x13e>
 8004b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b62:	f001 fe83 	bl	800686c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b66:	1d3a      	adds	r2, r7, #4
 8004b68:	f107 0310 	add.w	r3, r7, #16
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 ff56 	bl	8005a20 <xTaskCheckForTimeOut>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d123      	bne.n	8004bc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b7c:	f000 f916 	bl	8004dac <prvIsQueueEmpty>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d017      	beq.n	8004bb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	3324      	adds	r3, #36	@ 0x24
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fdd8 	bl	8005744 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b96:	f000 f8b7 	bl	8004d08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b9a:	f000 fc05 	bl	80053a8 <xTaskResumeAll>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d189      	bne.n	8004ab8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <xQueueReceive+0x1c0>)
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	e780      	b.n	8004ab8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bb8:	f000 f8a6 	bl	8004d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bbc:	f000 fbf4 	bl	80053a8 <xTaskResumeAll>
 8004bc0:	e77a      	b.n	8004ab8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bc4:	f000 f8a0 	bl	8004d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bc8:	f000 fbee 	bl	80053a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bce:	f000 f8ed 	bl	8004dac <prvIsQueueEmpty>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f43f af6f 	beq.w	8004ab8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3730      	adds	r7, #48	@ 0x30
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10d      	bne.n	8004c22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d14d      	bne.n	8004caa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 f86e 	bl	8005cf4 <xTaskPriorityDisinherit>
 8004c18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	e043      	b.n	8004caa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d119      	bne.n	8004c5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6858      	ldr	r0, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	461a      	mov	r2, r3
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	f002 fbc1 	bl	80073ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	441a      	add	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d32b      	bcc.n	8004caa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	e026      	b.n	8004caa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68d8      	ldr	r0, [r3, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	461a      	mov	r2, r3
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	f002 fba7 	bl	80073ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	425b      	negs	r3, r3
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d207      	bcs.n	8004c98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	425b      	negs	r3, r3
 8004c92:	441a      	add	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d105      	bne.n	8004caa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004cb2:	697b      	ldr	r3, [r7, #20]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	441a      	add	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d303      	bcc.n	8004cf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68d9      	ldr	r1, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6838      	ldr	r0, [r7, #0]
 8004cfc:	f002 fb5d 	bl	80073ba <memcpy>
	}
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d10:	f001 fd7a 	bl	8006808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d1c:	e011      	b.n	8004d42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d012      	beq.n	8004d4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3324      	adds	r3, #36	@ 0x24
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fd9a 	bl	8005864 <xTaskRemoveFromEventList>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d36:	f000 fed7 	bl	8005ae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dce9      	bgt.n	8004d1e <prvUnlockQueue+0x16>
 8004d4a:	e000      	b.n	8004d4e <prvUnlockQueue+0x46>
					break;
 8004d4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	22ff      	movs	r2, #255	@ 0xff
 8004d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004d56:	f001 fd89 	bl	800686c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d5a:	f001 fd55 	bl	8006808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d66:	e011      	b.n	8004d8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d012      	beq.n	8004d96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3310      	adds	r3, #16
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fd75 	bl	8005864 <xTaskRemoveFromEventList>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d80:	f000 feb2 	bl	8005ae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	dce9      	bgt.n	8004d68 <prvUnlockQueue+0x60>
 8004d94:	e000      	b.n	8004d98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	22ff      	movs	r2, #255	@ 0xff
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004da0:	f001 fd64 	bl	800686c <vPortExitCritical>
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004db4:	f001 fd28 	bl	8006808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e001      	b.n	8004dca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dca:	f001 fd4f 	bl	800686c <vPortExitCritical>

	return xReturn;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004de0:	f001 fd12 	bl	8006808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d102      	bne.n	8004df6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e001      	b.n	8004dfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dfa:	f001 fd37 	bl	800686c <vPortExitCritical>

	return xReturn;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	e014      	b.n	8004e42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e18:	4a0f      	ldr	r2, [pc, #60]	@ (8004e58 <vQueueAddToRegistry+0x50>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e24:	490c      	ldr	r1, [pc, #48]	@ (8004e58 <vQueueAddToRegistry+0x50>)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <vQueueAddToRegistry+0x50>)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e3a:	e006      	b.n	8004e4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b07      	cmp	r3, #7
 8004e46:	d9e7      	bls.n	8004e18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	200008c8 	.word	0x200008c8

08004e5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e6c:	f001 fccc 	bl	8006808 <vPortEnterCritical>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e76:	b25b      	sxtb	r3, r3
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e7c:	d103      	bne.n	8004e86 <vQueueWaitForMessageRestricted+0x2a>
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e8c:	b25b      	sxtb	r3, r3
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e92:	d103      	bne.n	8004e9c <vQueueWaitForMessageRestricted+0x40>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e9c:	f001 fce6 	bl	800686c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	3324      	adds	r3, #36	@ 0x24
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fcab 	bl	800580c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004eb6:	6978      	ldr	r0, [r7, #20]
 8004eb8:	f7ff ff26 	bl	8004d08 <prvUnlockQueue>
	}
 8004ebc:	bf00      	nop
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	@ 0x38
 8004ec8:	af04      	add	r7, sp, #16
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	623b      	str	r3, [r7, #32]
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	e7fd      	b.n	8004eec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	61fb      	str	r3, [r7, #28]
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	e7fd      	b.n	8004f0a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f0e:	23a8      	movs	r3, #168	@ 0xa8
 8004f10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2ba8      	cmp	r3, #168	@ 0xa8
 8004f16:	d00b      	beq.n	8004f30 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	61bb      	str	r3, [r7, #24]
}
 8004f2a:	bf00      	nop
 8004f2c:	bf00      	nop
 8004f2e:	e7fd      	b.n	8004f2c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01e      	beq.n	8004f76 <xTaskCreateStatic+0xb2>
 8004f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01b      	beq.n	8004f76 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f50:	2300      	movs	r3, #0
 8004f52:	9303      	str	r3, [sp, #12]
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	f107 0314 	add.w	r3, r7, #20
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f851 	bl	8005010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f70:	f000 f8f6 	bl	8005160 <prvAddNewTaskToReadyList>
 8004f74:	e001      	b.n	8004f7a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f7a:	697b      	ldr	r3, [r7, #20]
	}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3728      	adds	r7, #40	@ 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08c      	sub	sp, #48	@ 0x30
 8004f88:	af04      	add	r7, sp, #16
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 fd57 	bl	8006a4c <pvPortMalloc>
 8004f9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00e      	beq.n	8004fc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fa6:	20a8      	movs	r0, #168	@ 0xa8
 8004fa8:	f001 fd50 	bl	8006a4c <pvPortMalloc>
 8004fac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fba:	e005      	b.n	8004fc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fbc:	6978      	ldr	r0, [r7, #20]
 8004fbe:	f001 fe13 	bl	8006be8 <vPortFree>
 8004fc2:	e001      	b.n	8004fc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d017      	beq.n	8004ffe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9303      	str	r3, [sp, #12]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	9302      	str	r3, [sp, #8]
 8004fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f80f 	bl	8005010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ff2:	69f8      	ldr	r0, [r7, #28]
 8004ff4:	f000 f8b4 	bl	8005160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	e002      	b.n	8005004 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005002:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005004:	69bb      	ldr	r3, [r7, #24]
	}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	461a      	mov	r2, r3
 8005028:	21a5      	movs	r1, #165	@ 0xa5
 800502a:	f002 f8f5 	bl	8007218 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005038:	3b01      	subs	r3, #1
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	617b      	str	r3, [r7, #20]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01f      	beq.n	80050b0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e012      	b.n	800509c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	7819      	ldrb	r1, [r3, #0]
 800507e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	3334      	adds	r3, #52	@ 0x34
 8005086:	460a      	mov	r2, r1
 8005088:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d006      	beq.n	80050a4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3301      	adds	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b0f      	cmp	r3, #15
 80050a0:	d9e9      	bls.n	8005076 <prvInitialiseNewTask+0x66>
 80050a2:	e000      	b.n	80050a6 <prvInitialiseNewTask+0x96>
			{
				break;
 80050a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050ae:	e003      	b.n	80050b8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	2b37      	cmp	r3, #55	@ 0x37
 80050bc:	d901      	bls.n	80050c2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050be:	2337      	movs	r3, #55	@ 0x37
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	2200      	movs	r2, #0
 80050d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff f965 	bl	80043a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	3318      	adds	r3, #24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff f960 	bl	80043a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	2200      	movs	r2, #0
 8005102:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	2200      	movs	r2, #0
 800510a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	3354      	adds	r3, #84	@ 0x54
 8005112:	224c      	movs	r2, #76	@ 0x4c
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f002 f87e 	bl	8007218 <memset>
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	4a0d      	ldr	r2, [pc, #52]	@ (8005154 <prvInitialiseNewTask+0x144>)
 8005120:	659a      	str	r2, [r3, #88]	@ 0x58
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	4a0c      	ldr	r2, [pc, #48]	@ (8005158 <prvInitialiseNewTask+0x148>)
 8005126:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	4a0c      	ldr	r2, [pc, #48]	@ (800515c <prvInitialiseNewTask+0x14c>)
 800512c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	68f9      	ldr	r1, [r7, #12]
 8005132:	69b8      	ldr	r0, [r7, #24]
 8005134:	f001 fa34 	bl	80065a0 <pxPortInitialiseStack>
 8005138:	4602      	mov	r2, r0
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800513e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005148:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800514a:	bf00      	nop
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20001b14 	.word	0x20001b14
 8005158:	20001b7c 	.word	0x20001b7c
 800515c:	20001be4 	.word	0x20001be4

08005160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005168:	f001 fb4e 	bl	8006808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800516c:	4b2d      	ldr	r3, [pc, #180]	@ (8005224 <prvAddNewTaskToReadyList+0xc4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3301      	adds	r3, #1
 8005172:	4a2c      	ldr	r2, [pc, #176]	@ (8005224 <prvAddNewTaskToReadyList+0xc4>)
 8005174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005176:	4b2c      	ldr	r3, [pc, #176]	@ (8005228 <prvAddNewTaskToReadyList+0xc8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800517e:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <prvAddNewTaskToReadyList+0xc8>)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005184:	4b27      	ldr	r3, [pc, #156]	@ (8005224 <prvAddNewTaskToReadyList+0xc4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d110      	bne.n	80051ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800518c:	f000 fcd0 	bl	8005b30 <prvInitialiseTaskLists>
 8005190:	e00d      	b.n	80051ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005192:	4b26      	ldr	r3, [pc, #152]	@ (800522c <prvAddNewTaskToReadyList+0xcc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800519a:	4b23      	ldr	r3, [pc, #140]	@ (8005228 <prvAddNewTaskToReadyList+0xc8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d802      	bhi.n	80051ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005228 <prvAddNewTaskToReadyList+0xc8>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051ae:	4b20      	ldr	r3, [pc, #128]	@ (8005230 <prvAddNewTaskToReadyList+0xd0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005230 <prvAddNewTaskToReadyList+0xd0>)
 80051b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005230 <prvAddNewTaskToReadyList+0xd0>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005234 <prvAddNewTaskToReadyList+0xd4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d903      	bls.n	80051d4 <prvAddNewTaskToReadyList+0x74>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	4a18      	ldr	r2, [pc, #96]	@ (8005234 <prvAddNewTaskToReadyList+0xd4>)
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4a15      	ldr	r2, [pc, #84]	@ (8005238 <prvAddNewTaskToReadyList+0xd8>)
 80051e2:	441a      	add	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f7ff f8e9 	bl	80043c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051f0:	f001 fb3c 	bl	800686c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051f4:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <prvAddNewTaskToReadyList+0xcc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00e      	beq.n	800521a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <prvAddNewTaskToReadyList+0xc8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	429a      	cmp	r2, r3
 8005208:	d207      	bcs.n	800521a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800520a:	4b0c      	ldr	r3, [pc, #48]	@ (800523c <prvAddNewTaskToReadyList+0xdc>)
 800520c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000ddc 	.word	0x20000ddc
 8005228:	20000908 	.word	0x20000908
 800522c:	20000de8 	.word	0x20000de8
 8005230:	20000df8 	.word	0x20000df8
 8005234:	20000de4 	.word	0x20000de4
 8005238:	2000090c 	.word	0x2000090c
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d018      	beq.n	8005284 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005252:	4b14      	ldr	r3, [pc, #80]	@ (80052a4 <vTaskDelay+0x64>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <vTaskDelay+0x32>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	60bb      	str	r3, [r7, #8]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005272:	f000 f88b 	bl	800538c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005276:	2100      	movs	r1, #0
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fdc3 	bl	8005e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800527e:	f000 f893 	bl	80053a8 <xTaskResumeAll>
 8005282:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d107      	bne.n	800529a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800528a:	4b07      	ldr	r3, [pc, #28]	@ (80052a8 <vTaskDelay+0x68>)
 800528c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000e04 	.word	0x20000e04
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08a      	sub	sp, #40	@ 0x28
 80052b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052ba:	463a      	mov	r2, r7
 80052bc:	1d39      	adds	r1, r7, #4
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fe26 	bl	8003f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	9202      	str	r2, [sp, #8]
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	2300      	movs	r3, #0
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2300      	movs	r3, #0
 80052d8:	460a      	mov	r2, r1
 80052da:	4924      	ldr	r1, [pc, #144]	@ (800536c <vTaskStartScheduler+0xc0>)
 80052dc:	4824      	ldr	r0, [pc, #144]	@ (8005370 <vTaskStartScheduler+0xc4>)
 80052de:	f7ff fdf1 	bl	8004ec4 <xTaskCreateStatic>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a23      	ldr	r2, [pc, #140]	@ (8005374 <vTaskStartScheduler+0xc8>)
 80052e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052e8:	4b22      	ldr	r3, [pc, #136]	@ (8005374 <vTaskStartScheduler+0xc8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052f0:	2301      	movs	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e001      	b.n	80052fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d102      	bne.n	8005306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005300:	f000 fdd4 	bl	8005eac <xTimerCreateTimerTask>
 8005304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d11b      	bne.n	8005344 <vTaskStartScheduler+0x98>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	613b      	str	r3, [r7, #16]
}
 800531e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005320:	4b15      	ldr	r3, [pc, #84]	@ (8005378 <vTaskStartScheduler+0xcc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3354      	adds	r3, #84	@ 0x54
 8005326:	4a15      	ldr	r2, [pc, #84]	@ (800537c <vTaskStartScheduler+0xd0>)
 8005328:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800532a:	4b15      	ldr	r3, [pc, #84]	@ (8005380 <vTaskStartScheduler+0xd4>)
 800532c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005330:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005332:	4b14      	ldr	r3, [pc, #80]	@ (8005384 <vTaskStartScheduler+0xd8>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005338:	4b13      	ldr	r3, [pc, #76]	@ (8005388 <vTaskStartScheduler+0xdc>)
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800533e:	f001 f9bf 	bl	80066c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005342:	e00f      	b.n	8005364 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800534a:	d10b      	bne.n	8005364 <vTaskStartScheduler+0xb8>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	60fb      	str	r3, [r7, #12]
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <vTaskStartScheduler+0xb4>
}
 8005364:	bf00      	nop
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	080078f8 	.word	0x080078f8
 8005370:	08005b01 	.word	0x08005b01
 8005374:	20000e00 	.word	0x20000e00
 8005378:	20000908 	.word	0x20000908
 800537c:	2000001c 	.word	0x2000001c
 8005380:	20000dfc 	.word	0x20000dfc
 8005384:	20000de8 	.word	0x20000de8
 8005388:	20000de0 	.word	0x20000de0

0800538c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005390:	4b04      	ldr	r3, [pc, #16]	@ (80053a4 <vTaskSuspendAll+0x18>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	4a03      	ldr	r2, [pc, #12]	@ (80053a4 <vTaskSuspendAll+0x18>)
 8005398:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	20000e04 	.word	0x20000e04

080053a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053b6:	4b42      	ldr	r3, [pc, #264]	@ (80054c0 <xTaskResumeAll+0x118>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	603b      	str	r3, [r7, #0]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053d6:	f001 fa17 	bl	8006808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053da:	4b39      	ldr	r3, [pc, #228]	@ (80054c0 <xTaskResumeAll+0x118>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3b01      	subs	r3, #1
 80053e0:	4a37      	ldr	r2, [pc, #220]	@ (80054c0 <xTaskResumeAll+0x118>)
 80053e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e4:	4b36      	ldr	r3, [pc, #216]	@ (80054c0 <xTaskResumeAll+0x118>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d162      	bne.n	80054b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053ec:	4b35      	ldr	r3, [pc, #212]	@ (80054c4 <xTaskResumeAll+0x11c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05e      	beq.n	80054b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053f4:	e02f      	b.n	8005456 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f6:	4b34      	ldr	r3, [pc, #208]	@ (80054c8 <xTaskResumeAll+0x120>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3318      	adds	r3, #24
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff f83a 	bl	800447c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3304      	adds	r3, #4
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff f835 	bl	800447c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005416:	4b2d      	ldr	r3, [pc, #180]	@ (80054cc <xTaskResumeAll+0x124>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d903      	bls.n	8005426 <xTaskResumeAll+0x7e>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005422:	4a2a      	ldr	r2, [pc, #168]	@ (80054cc <xTaskResumeAll+0x124>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4a27      	ldr	r2, [pc, #156]	@ (80054d0 <xTaskResumeAll+0x128>)
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f7fe ffc0 	bl	80043c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005446:	4b23      	ldr	r3, [pc, #140]	@ (80054d4 <xTaskResumeAll+0x12c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005450:	4b21      	ldr	r3, [pc, #132]	@ (80054d8 <xTaskResumeAll+0x130>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005456:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <xTaskResumeAll+0x120>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1cb      	bne.n	80053f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005464:	f000 fc08 	bl	8005c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005468:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <xTaskResumeAll+0x134>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d010      	beq.n	8005496 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005474:	f000 f846 	bl	8005504 <xTaskIncrementTick>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800547e:	4b16      	ldr	r3, [pc, #88]	@ (80054d8 <xTaskResumeAll+0x130>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3b01      	subs	r3, #1
 8005488:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f1      	bne.n	8005474 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005490:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <xTaskResumeAll+0x134>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005496:	4b10      	ldr	r3, [pc, #64]	@ (80054d8 <xTaskResumeAll+0x130>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054a2:	4b0f      	ldr	r3, [pc, #60]	@ (80054e0 <xTaskResumeAll+0x138>)
 80054a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054b2:	f001 f9db 	bl	800686c <vPortExitCritical>

	return xAlreadyYielded;
 80054b6:	68bb      	ldr	r3, [r7, #8]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000e04 	.word	0x20000e04
 80054c4:	20000ddc 	.word	0x20000ddc
 80054c8:	20000d9c 	.word	0x20000d9c
 80054cc:	20000de4 	.word	0x20000de4
 80054d0:	2000090c 	.word	0x2000090c
 80054d4:	20000908 	.word	0x20000908
 80054d8:	20000df0 	.word	0x20000df0
 80054dc:	20000dec 	.word	0x20000dec
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054ea:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <xTaskGetTickCount+0x1c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054f0:	687b      	ldr	r3, [r7, #4]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000de0 	.word	0x20000de0

08005504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800550e:	4b4f      	ldr	r3, [pc, #316]	@ (800564c <xTaskIncrementTick+0x148>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f040 8090 	bne.w	8005638 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005518:	4b4d      	ldr	r3, [pc, #308]	@ (8005650 <xTaskIncrementTick+0x14c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005520:	4a4b      	ldr	r2, [pc, #300]	@ (8005650 <xTaskIncrementTick+0x14c>)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d121      	bne.n	8005570 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800552c:	4b49      	ldr	r3, [pc, #292]	@ (8005654 <xTaskIncrementTick+0x150>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	603b      	str	r3, [r7, #0]
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <xTaskIncrementTick+0x46>
 800554e:	4b41      	ldr	r3, [pc, #260]	@ (8005654 <xTaskIncrementTick+0x150>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	4b40      	ldr	r3, [pc, #256]	@ (8005658 <xTaskIncrementTick+0x154>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a3e      	ldr	r2, [pc, #248]	@ (8005654 <xTaskIncrementTick+0x150>)
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	4a3e      	ldr	r2, [pc, #248]	@ (8005658 <xTaskIncrementTick+0x154>)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b3e      	ldr	r3, [pc, #248]	@ (800565c <xTaskIncrementTick+0x158>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3301      	adds	r3, #1
 8005568:	4a3c      	ldr	r2, [pc, #240]	@ (800565c <xTaskIncrementTick+0x158>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	f000 fb84 	bl	8005c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005570:	4b3b      	ldr	r3, [pc, #236]	@ (8005660 <xTaskIncrementTick+0x15c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	429a      	cmp	r2, r3
 8005578:	d349      	bcc.n	800560e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800557a:	4b36      	ldr	r3, [pc, #216]	@ (8005654 <xTaskIncrementTick+0x150>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005584:	4b36      	ldr	r3, [pc, #216]	@ (8005660 <xTaskIncrementTick+0x15c>)
 8005586:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800558a:	601a      	str	r2, [r3, #0]
					break;
 800558c:	e03f      	b.n	800560e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558e:	4b31      	ldr	r3, [pc, #196]	@ (8005654 <xTaskIncrementTick+0x150>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d203      	bcs.n	80055ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <xTaskIncrementTick+0x15c>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055ac:	e02f      	b.n	800560e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe ff62 	bl	800447c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	3318      	adds	r3, #24
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fe ff59 	bl	800447c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	4b25      	ldr	r3, [pc, #148]	@ (8005664 <xTaskIncrementTick+0x160>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d903      	bls.n	80055de <xTaskIncrementTick+0xda>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	4a22      	ldr	r2, [pc, #136]	@ (8005664 <xTaskIncrementTick+0x160>)
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005668 <xTaskIncrementTick+0x164>)
 80055ec:	441a      	add	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f7fe fee4 	bl	80043c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fe:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <xTaskIncrementTick+0x168>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d3b8      	bcc.n	800557a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800560c:	e7b5      	b.n	800557a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800560e:	4b17      	ldr	r3, [pc, #92]	@ (800566c <xTaskIncrementTick+0x168>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005614:	4914      	ldr	r1, [pc, #80]	@ (8005668 <xTaskIncrementTick+0x164>)
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d901      	bls.n	800562a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005626:	2301      	movs	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800562a:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <xTaskIncrementTick+0x16c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005632:	2301      	movs	r3, #1
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e004      	b.n	8005642 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005638:	4b0e      	ldr	r3, [pc, #56]	@ (8005674 <xTaskIncrementTick+0x170>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3301      	adds	r3, #1
 800563e:	4a0d      	ldr	r2, [pc, #52]	@ (8005674 <xTaskIncrementTick+0x170>)
 8005640:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005642:	697b      	ldr	r3, [r7, #20]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000e04 	.word	0x20000e04
 8005650:	20000de0 	.word	0x20000de0
 8005654:	20000d94 	.word	0x20000d94
 8005658:	20000d98 	.word	0x20000d98
 800565c:	20000df4 	.word	0x20000df4
 8005660:	20000dfc 	.word	0x20000dfc
 8005664:	20000de4 	.word	0x20000de4
 8005668:	2000090c 	.word	0x2000090c
 800566c:	20000908 	.word	0x20000908
 8005670:	20000df0 	.word	0x20000df0
 8005674:	20000dec 	.word	0x20000dec

08005678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800567e:	4b2b      	ldr	r3, [pc, #172]	@ (800572c <vTaskSwitchContext+0xb4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005686:	4b2a      	ldr	r3, [pc, #168]	@ (8005730 <vTaskSwitchContext+0xb8>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800568c:	e047      	b.n	800571e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800568e:	4b28      	ldr	r3, [pc, #160]	@ (8005730 <vTaskSwitchContext+0xb8>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005694:	4b27      	ldr	r3, [pc, #156]	@ (8005734 <vTaskSwitchContext+0xbc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e011      	b.n	80056c0 <vTaskSwitchContext+0x48>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <vTaskSwitchContext+0x42>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	607b      	str	r3, [r7, #4]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <vTaskSwitchContext+0x3e>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3b01      	subs	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	491d      	ldr	r1, [pc, #116]	@ (8005738 <vTaskSwitchContext+0xc0>)
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0e3      	beq.n	800569c <vTaskSwitchContext+0x24>
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <vTaskSwitchContext+0xc0>)
 80056e0:	4413      	add	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	3308      	adds	r3, #8
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d104      	bne.n	8005704 <vTaskSwitchContext+0x8c>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	605a      	str	r2, [r3, #4]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	4a0c      	ldr	r2, [pc, #48]	@ (800573c <vTaskSwitchContext+0xc4>)
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4a09      	ldr	r2, [pc, #36]	@ (8005734 <vTaskSwitchContext+0xbc>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005714:	4b09      	ldr	r3, [pc, #36]	@ (800573c <vTaskSwitchContext+0xc4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3354      	adds	r3, #84	@ 0x54
 800571a:	4a09      	ldr	r2, [pc, #36]	@ (8005740 <vTaskSwitchContext+0xc8>)
 800571c:	6013      	str	r3, [r2, #0]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000e04 	.word	0x20000e04
 8005730:	20000df0 	.word	0x20000df0
 8005734:	20000de4 	.word	0x20000de4
 8005738:	2000090c 	.word	0x2000090c
 800573c:	20000908 	.word	0x20000908
 8005740:	2000001c 	.word	0x2000001c

08005744 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10b      	bne.n	800576c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	60fb      	str	r3, [r7, #12]
}
 8005766:	bf00      	nop
 8005768:	bf00      	nop
 800576a:	e7fd      	b.n	8005768 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800576c:	4b07      	ldr	r3, [pc, #28]	@ (800578c <vTaskPlaceOnEventList+0x48>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3318      	adds	r3, #24
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fe fe48 	bl	800440a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800577a:	2101      	movs	r1, #1
 800577c:	6838      	ldr	r0, [r7, #0]
 800577e:	f000 fb41 	bl	8005e04 <prvAddCurrentTaskToDelayedList>
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000908 	.word	0x20000908

08005790 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	617b      	str	r3, [r7, #20]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <vTaskPlaceOnUnorderedEventList+0x74>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	613b      	str	r3, [r7, #16]
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	e7fd      	b.n	80057d6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80057da:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <vTaskPlaceOnUnorderedEventList+0x78>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80057e4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <vTaskPlaceOnUnorderedEventList+0x78>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3318      	adds	r3, #24
 80057ec:	4619      	mov	r1, r3
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7fe fde7 	bl	80043c2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057f4:	2101      	movs	r1, #1
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fb04 	bl	8005e04 <prvAddCurrentTaskToDelayedList>
}
 80057fc:	bf00      	nop
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000e04 	.word	0x20000e04
 8005808:	20000908 	.word	0x20000908

0800580c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10b      	bne.n	8005836 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	617b      	str	r3, [r7, #20]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005836:	4b0a      	ldr	r3, [pc, #40]	@ (8005860 <vTaskPlaceOnEventListRestricted+0x54>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3318      	adds	r3, #24
 800583c:	4619      	mov	r1, r3
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7fe fdbf 	bl	80043c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800584a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800584e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	68b8      	ldr	r0, [r7, #8]
 8005854:	f000 fad6 	bl	8005e04 <prvAddCurrentTaskToDelayedList>
	}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000908 	.word	0x20000908

08005864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	60fb      	str	r3, [r7, #12]
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	e7fd      	b.n	800588e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3318      	adds	r3, #24
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fdf0 	bl	800447c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589c:	4b1d      	ldr	r3, [pc, #116]	@ (8005914 <xTaskRemoveFromEventList+0xb0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11d      	bne.n	80058e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe fde7 	bl	800447c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b2:	4b19      	ldr	r3, [pc, #100]	@ (8005918 <xTaskRemoveFromEventList+0xb4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d903      	bls.n	80058c2 <xTaskRemoveFromEventList+0x5e>
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	4a16      	ldr	r2, [pc, #88]	@ (8005918 <xTaskRemoveFromEventList+0xb4>)
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4a13      	ldr	r2, [pc, #76]	@ (800591c <xTaskRemoveFromEventList+0xb8>)
 80058d0:	441a      	add	r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7fe fd72 	bl	80043c2 <vListInsertEnd>
 80058de:	e005      	b.n	80058ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3318      	adds	r3, #24
 80058e4:	4619      	mov	r1, r3
 80058e6:	480e      	ldr	r0, [pc, #56]	@ (8005920 <xTaskRemoveFromEventList+0xbc>)
 80058e8:	f7fe fd6b 	bl	80043c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005924 <xTaskRemoveFromEventList+0xc0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d905      	bls.n	8005906 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058fa:	2301      	movs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005928 <xTaskRemoveFromEventList+0xc4>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e001      	b.n	800590a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800590a:	697b      	ldr	r3, [r7, #20]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000e04 	.word	0x20000e04
 8005918:	20000de4 	.word	0x20000de4
 800591c:	2000090c 	.word	0x2000090c
 8005920:	20000d9c 	.word	0x20000d9c
 8005924:	20000908 	.word	0x20000908
 8005928:	20000df0 	.word	0x20000df0

0800592c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005936:	4b2a      	ldr	r3, [pc, #168]	@ (80059e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	613b      	str	r3, [r7, #16]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	60fb      	str	r3, [r7, #12]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fe fd79 	bl	800447c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fd74 	bl	800447c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005998:	4b12      	ldr	r3, [pc, #72]	@ (80059e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d903      	bls.n	80059a8 <vTaskRemoveFromUnorderedEventList+0x7c>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	4a0f      	ldr	r2, [pc, #60]	@ (80059e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4a0c      	ldr	r2, [pc, #48]	@ (80059e8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80059b6:	441a      	add	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7fe fcff 	bl	80043c2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c8:	4b08      	ldr	r3, [pc, #32]	@ (80059ec <vTaskRemoveFromUnorderedEventList+0xc0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d902      	bls.n	80059d8 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80059d2:	4b07      	ldr	r3, [pc, #28]	@ (80059f0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
	}
}
 80059d8:	bf00      	nop
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000e04 	.word	0x20000e04
 80059e4:	20000de4 	.word	0x20000de4
 80059e8:	2000090c 	.word	0x2000090c
 80059ec:	20000908 	.word	0x20000908
 80059f0:	20000df0 	.word	0x20000df0

080059f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <vTaskInternalSetTimeOutState+0x24>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a04:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <vTaskInternalSetTimeOutState+0x28>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	605a      	str	r2, [r3, #4]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	20000df4 	.word	0x20000df4
 8005a1c:	20000de0 	.word	0x20000de0

08005a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	613b      	str	r3, [r7, #16]
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	60fb      	str	r3, [r7, #12]
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	e7fd      	b.n	8005a62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a66:	f000 fecf 	bl	8006808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae0 <xTaskCheckForTimeOut+0xc0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a82:	d102      	bne.n	8005a8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e023      	b.n	8005ad2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ae4 <xTaskCheckForTimeOut+0xc4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d007      	beq.n	8005aa6 <xTaskCheckForTimeOut+0x86>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d302      	bcc.n	8005aa6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	e015      	b.n	8005ad2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d20b      	bcs.n	8005ac8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff ff99 	bl	80059f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	e004      	b.n	8005ad2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ad2:	f000 fecb 	bl	800686c <vPortExitCritical>

	return xReturn;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000de0 	.word	0x20000de0
 8005ae4:	20000df4 	.word	0x20000df4

08005ae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005aec:	4b03      	ldr	r3, [pc, #12]	@ (8005afc <vTaskMissedYield+0x14>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
}
 8005af2:	bf00      	nop
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	20000df0 	.word	0x20000df0

08005b00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b08:	f000 f852 	bl	8005bb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b0c:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <prvIdleTask+0x28>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d9f9      	bls.n	8005b08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b14:	4b05      	ldr	r3, [pc, #20]	@ (8005b2c <prvIdleTask+0x2c>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b24:	e7f0      	b.n	8005b08 <prvIdleTask+0x8>
 8005b26:	bf00      	nop
 8005b28:	2000090c 	.word	0x2000090c
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	e00c      	b.n	8005b56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4a12      	ldr	r2, [pc, #72]	@ (8005b90 <prvInitialiseTaskLists+0x60>)
 8005b48:	4413      	add	r3, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fc0c 	bl	8004368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3301      	adds	r3, #1
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b37      	cmp	r3, #55	@ 0x37
 8005b5a:	d9ef      	bls.n	8005b3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b5c:	480d      	ldr	r0, [pc, #52]	@ (8005b94 <prvInitialiseTaskLists+0x64>)
 8005b5e:	f7fe fc03 	bl	8004368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b62:	480d      	ldr	r0, [pc, #52]	@ (8005b98 <prvInitialiseTaskLists+0x68>)
 8005b64:	f7fe fc00 	bl	8004368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b68:	480c      	ldr	r0, [pc, #48]	@ (8005b9c <prvInitialiseTaskLists+0x6c>)
 8005b6a:	f7fe fbfd 	bl	8004368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b6e:	480c      	ldr	r0, [pc, #48]	@ (8005ba0 <prvInitialiseTaskLists+0x70>)
 8005b70:	f7fe fbfa 	bl	8004368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b74:	480b      	ldr	r0, [pc, #44]	@ (8005ba4 <prvInitialiseTaskLists+0x74>)
 8005b76:	f7fe fbf7 	bl	8004368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba8 <prvInitialiseTaskLists+0x78>)
 8005b7c:	4a05      	ldr	r2, [pc, #20]	@ (8005b94 <prvInitialiseTaskLists+0x64>)
 8005b7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b80:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <prvInitialiseTaskLists+0x7c>)
 8005b82:	4a05      	ldr	r2, [pc, #20]	@ (8005b98 <prvInitialiseTaskLists+0x68>)
 8005b84:	601a      	str	r2, [r3, #0]
}
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000090c 	.word	0x2000090c
 8005b94:	20000d6c 	.word	0x20000d6c
 8005b98:	20000d80 	.word	0x20000d80
 8005b9c:	20000d9c 	.word	0x20000d9c
 8005ba0:	20000db0 	.word	0x20000db0
 8005ba4:	20000dc8 	.word	0x20000dc8
 8005ba8:	20000d94 	.word	0x20000d94
 8005bac:	20000d98 	.word	0x20000d98

08005bb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb6:	e019      	b.n	8005bec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bb8:	f000 fe26 	bl	8006808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bbc:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <prvCheckTasksWaitingTermination+0x50>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fe fc57 	bl	800447c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <prvCheckTasksWaitingTermination+0x54>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8005c04 <prvCheckTasksWaitingTermination+0x54>)
 8005bd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <prvCheckTasksWaitingTermination+0x58>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	4a0a      	ldr	r2, [pc, #40]	@ (8005c08 <prvCheckTasksWaitingTermination+0x58>)
 8005be0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005be2:	f000 fe43 	bl	800686c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f810 	bl	8005c0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bec:	4b06      	ldr	r3, [pc, #24]	@ (8005c08 <prvCheckTasksWaitingTermination+0x58>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e1      	bne.n	8005bb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000db0 	.word	0x20000db0
 8005c04:	20000ddc 	.word	0x20000ddc
 8005c08:	20000dc4 	.word	0x20000dc4

08005c0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3354      	adds	r3, #84	@ 0x54
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fb15 	bl	8007248 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d108      	bne.n	8005c3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 ffdb 	bl	8006be8 <vPortFree>
				vPortFree( pxTCB );
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 ffd8 	bl	8006be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c38:	e019      	b.n	8005c6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d103      	bne.n	8005c4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 ffcf 	bl	8006be8 <vPortFree>
	}
 8005c4a:	e010      	b.n	8005c6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d00b      	beq.n	8005c6e <prvDeleteTCB+0x62>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60fb      	str	r3, [r7, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <prvDeleteTCB+0x5e>
	}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb0 <prvResetNextTaskUnblockTime+0x38>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c90:	e008      	b.n	8005ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c92:	4b07      	ldr	r3, [pc, #28]	@ (8005cb0 <prvResetNextTaskUnblockTime+0x38>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a04      	ldr	r2, [pc, #16]	@ (8005cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000d94 	.word	0x20000d94
 8005cb4:	20000dfc 	.word	0x20000dfc

08005cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <xTaskGetSchedulerState+0x34>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	e008      	b.n	8005cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ccc:	4b08      	ldr	r3, [pc, #32]	@ (8005cf0 <xTaskGetSchedulerState+0x38>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	607b      	str	r3, [r7, #4]
 8005cd8:	e001      	b.n	8005cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cde:	687b      	ldr	r3, [r7, #4]
	}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000de8 	.word	0x20000de8
 8005cf0:	20000e04 	.word	0x20000e04

08005cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d058      	beq.n	8005dbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc8 <xTaskPriorityDisinherit+0xd4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d00b      	beq.n	8005d2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	60bb      	str	r3, [r7, #8]
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d50:	1e5a      	subs	r2, r3, #1
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d02c      	beq.n	8005dbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d128      	bne.n	8005dbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe fb84 	bl	800447c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dcc <xTaskPriorityDisinherit+0xd8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d903      	bls.n	8005d9c <xTaskPriorityDisinherit+0xa8>
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	4a0c      	ldr	r2, [pc, #48]	@ (8005dcc <xTaskPriorityDisinherit+0xd8>)
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4a09      	ldr	r2, [pc, #36]	@ (8005dd0 <xTaskPriorityDisinherit+0xdc>)
 8005daa:	441a      	add	r2, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f7fe fb05 	bl	80043c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dbc:	697b      	ldr	r3, [r7, #20]
	}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000908 	.word	0x20000908
 8005dcc:	20000de4 	.word	0x20000de4
 8005dd0:	2000090c 	.word	0x2000090c

08005dd4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005dda:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <uxTaskResetEventItemValue+0x2c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <uxTaskResetEventItemValue+0x2c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de8:	4b05      	ldr	r3, [pc, #20]	@ (8005e00 <uxTaskResetEventItemValue+0x2c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8005df0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005df2:	687b      	ldr	r3, [r7, #4]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000908 	.word	0x20000908

08005e04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e0e:	4b21      	ldr	r3, [pc, #132]	@ (8005e94 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e14:	4b20      	ldr	r3, [pc, #128]	@ (8005e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fb2e 	bl	800447c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e26:	d10a      	bne.n	8005e3e <prvAddCurrentTaskToDelayedList+0x3a>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4819      	ldr	r0, [pc, #100]	@ (8005e9c <prvAddCurrentTaskToDelayedList+0x98>)
 8005e38:	f7fe fac3 	bl	80043c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e3c:	e026      	b.n	8005e8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e46:	4b14      	ldr	r3, [pc, #80]	@ (8005e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d209      	bcs.n	8005e6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e56:	4b12      	ldr	r3, [pc, #72]	@ (8005ea0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f7fe fad1 	bl	800440a <vListInsert>
}
 8005e68:	e010      	b.n	8005e8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f7fe fac7 	bl	800440a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d202      	bcs.n	8005e8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e86:	4a08      	ldr	r2, [pc, #32]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6013      	str	r3, [r2, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000de0 	.word	0x20000de0
 8005e98:	20000908 	.word	0x20000908
 8005e9c:	20000dc8 	.word	0x20000dc8
 8005ea0:	20000d98 	.word	0x20000d98
 8005ea4:	20000d94 	.word	0x20000d94
 8005ea8:	20000dfc 	.word	0x20000dfc

08005eac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	@ 0x28
 8005eb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005eb6:	f000 fb13 	bl	80064e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005eba:	4b1d      	ldr	r3, [pc, #116]	@ (8005f30 <xTimerCreateTimerTask+0x84>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d021      	beq.n	8005f06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005eca:	1d3a      	adds	r2, r7, #4
 8005ecc:	f107 0108 	add.w	r1, r7, #8
 8005ed0:	f107 030c 	add.w	r3, r7, #12
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe f837 	bl	8003f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	9202      	str	r2, [sp, #8]
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	460a      	mov	r2, r1
 8005eec:	4911      	ldr	r1, [pc, #68]	@ (8005f34 <xTimerCreateTimerTask+0x88>)
 8005eee:	4812      	ldr	r0, [pc, #72]	@ (8005f38 <xTimerCreateTimerTask+0x8c>)
 8005ef0:	f7fe ffe8 	bl	8004ec4 <xTaskCreateStatic>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	4a11      	ldr	r2, [pc, #68]	@ (8005f3c <xTimerCreateTimerTask+0x90>)
 8005ef8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005efa:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <xTimerCreateTimerTask+0x90>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f02:	2301      	movs	r3, #1
 8005f04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	613b      	str	r3, [r7, #16]
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f24:	697b      	ldr	r3, [r7, #20]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000e38 	.word	0x20000e38
 8005f34:	08007900 	.word	0x08007900
 8005f38:	08006079 	.word	0x08006079
 8005f3c:	20000e3c 	.word	0x20000e3c

08005f40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	@ 0x28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	623b      	str	r3, [r7, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f70:	4b19      	ldr	r3, [pc, #100]	@ (8005fd8 <xTimerGenericCommand+0x98>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02a      	beq.n	8005fce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	dc18      	bgt.n	8005fbc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f8a:	f7ff fe95 	bl	8005cb8 <xTaskGetSchedulerState>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d109      	bne.n	8005fa8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f94:	4b10      	ldr	r3, [pc, #64]	@ (8005fd8 <xTimerGenericCommand+0x98>)
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	f107 0110 	add.w	r1, r7, #16
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa0:	f7fe fba0 	bl	80046e4 <xQueueGenericSend>
 8005fa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fa6:	e012      	b.n	8005fce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <xTimerGenericCommand+0x98>)
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	f107 0110 	add.w	r1, r7, #16
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f7fe fb96 	bl	80046e4 <xQueueGenericSend>
 8005fb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fba:	e008      	b.n	8005fce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fbc:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <xTimerGenericCommand+0x98>)
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	f107 0110 	add.w	r1, r7, #16
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	f7fe fc8e 	bl	80048e8 <xQueueGenericSendFromISR>
 8005fcc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3728      	adds	r7, #40	@ 0x28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000e38 	.word	0x20000e38

08005fdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe6:	4b23      	ldr	r3, [pc, #140]	@ (8006074 <prvProcessExpiredTimer+0x98>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe fa41 	bl	800447c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d023      	beq.n	8006050 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	18d1      	adds	r1, r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	6978      	ldr	r0, [r7, #20]
 8006016:	f000 f8d5 	bl	80061c4 <prvInsertTimerInActiveList>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d020      	beq.n	8006062 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006020:	2300      	movs	r3, #0
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	2300      	movs	r3, #0
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	2100      	movs	r1, #0
 800602a:	6978      	ldr	r0, [r7, #20]
 800602c:	f7ff ff88 	bl	8005f40 <xTimerGenericCommand>
 8006030:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d114      	bne.n	8006062 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60fb      	str	r3, [r7, #12]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	b2da      	uxtb	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	6978      	ldr	r0, [r7, #20]
 8006068:	4798      	blx	r3
}
 800606a:	bf00      	nop
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000e30 	.word	0x20000e30

08006078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006080:	f107 0308 	add.w	r3, r7, #8
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f859 	bl	800613c <prvGetNextExpireTime>
 800608a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4619      	mov	r1, r3
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f805 	bl	80060a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006096:	f000 f8d7 	bl	8006248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800609a:	bf00      	nop
 800609c:	e7f0      	b.n	8006080 <prvTimerTask+0x8>
	...

080060a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060aa:	f7ff f96f 	bl	800538c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ae:	f107 0308 	add.w	r3, r7, #8
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f866 	bl	8006184 <prvSampleTimeNow>
 80060b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d130      	bne.n	8006122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <prvProcessTimerOrBlockTask+0x3c>
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d806      	bhi.n	80060dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060ce:	f7ff f96b 	bl	80053a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff ff81 	bl	8005fdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060da:	e024      	b.n	8006126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060e2:	4b13      	ldr	r3, [pc, #76]	@ (8006130 <prvProcessTimerOrBlockTask+0x90>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <prvProcessTimerOrBlockTask+0x50>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <prvProcessTimerOrBlockTask+0x52>
 80060f0:	2300      	movs	r3, #0
 80060f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006134 <prvProcessTimerOrBlockTask+0x94>)
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	4619      	mov	r1, r3
 8006102:	f7fe feab 	bl	8004e5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006106:	f7ff f94f 	bl	80053a8 <xTaskResumeAll>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006110:	4b09      	ldr	r3, [pc, #36]	@ (8006138 <prvProcessTimerOrBlockTask+0x98>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
}
 8006120:	e001      	b.n	8006126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006122:	f7ff f941 	bl	80053a8 <xTaskResumeAll>
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000e34 	.word	0x20000e34
 8006134:	20000e38 	.word	0x20000e38
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006144:	4b0e      	ldr	r3, [pc, #56]	@ (8006180 <prvGetNextExpireTime+0x44>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <prvGetNextExpireTime+0x16>
 800614e:	2201      	movs	r2, #1
 8006150:	e000      	b.n	8006154 <prvGetNextExpireTime+0x18>
 8006152:	2200      	movs	r2, #0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006160:	4b07      	ldr	r3, [pc, #28]	@ (8006180 <prvGetNextExpireTime+0x44>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e001      	b.n	8006170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006170:	68fb      	ldr	r3, [r7, #12]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20000e30 	.word	0x20000e30

08006184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800618c:	f7ff f9aa 	bl	80054e4 <xTaskGetTickCount>
 8006190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006192:	4b0b      	ldr	r3, [pc, #44]	@ (80061c0 <prvSampleTimeNow+0x3c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	429a      	cmp	r2, r3
 800619a:	d205      	bcs.n	80061a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800619c:	f000 f93a 	bl	8006414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e002      	b.n	80061ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061ae:	4a04      	ldr	r2, [pc, #16]	@ (80061c0 <prvSampleTimeNow+0x3c>)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061b4:	68fb      	ldr	r3, [r7, #12]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000e40 	.word	0x20000e40

080061c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d812      	bhi.n	8006210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d302      	bcc.n	80061fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e01b      	b.n	8006236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061fe:	4b10      	ldr	r3, [pc, #64]	@ (8006240 <prvInsertTimerInActiveList+0x7c>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f7fe f8fe 	bl	800440a <vListInsert>
 800620e:	e012      	b.n	8006236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d206      	bcs.n	8006226 <prvInsertTimerInActiveList+0x62>
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d302      	bcc.n	8006226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e007      	b.n	8006236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006226:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <prvInsertTimerInActiveList+0x80>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fe f8ea 	bl	800440a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006236:	697b      	ldr	r3, [r7, #20]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000e34 	.word	0x20000e34
 8006244:	20000e30 	.word	0x20000e30

08006248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08e      	sub	sp, #56	@ 0x38
 800624c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800624e:	e0ce      	b.n	80063ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	da19      	bge.n	800628a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	3304      	adds	r3, #4
 800625a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800625c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10b      	bne.n	800627a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	61fb      	str	r3, [r7, #28]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006280:	6850      	ldr	r0, [r2, #4]
 8006282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006284:	6892      	ldr	r2, [r2, #8]
 8006286:	4611      	mov	r1, r2
 8006288:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f2c0 80ae 	blt.w	80063ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	3304      	adds	r3, #4
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe f8ea 	bl	800447c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062a8:	463b      	mov	r3, r7
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff ff6a 	bl	8006184 <prvSampleTimeNow>
 80062b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b09      	cmp	r3, #9
 80062b6:	f200 8097 	bhi.w	80063e8 <prvProcessReceivedCommands+0x1a0>
 80062ba:	a201      	add	r2, pc, #4	@ (adr r2, 80062c0 <prvProcessReceivedCommands+0x78>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	080062e9 	.word	0x080062e9
 80062cc:	0800635f 	.word	0x0800635f
 80062d0:	08006373 	.word	0x08006373
 80062d4:	080063bf 	.word	0x080063bf
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	080062e9 	.word	0x080062e9
 80062e0:	0800635f 	.word	0x0800635f
 80062e4:	08006373 	.word	0x08006373
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	18d1      	adds	r1, r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006308:	f7ff ff5c 	bl	80061c4 <prvInsertTimerInActiveList>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d06c      	beq.n	80063ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006318:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d061      	beq.n	80063ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	441a      	add	r2, r3
 8006330:	2300      	movs	r3, #0
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	2100      	movs	r1, #0
 8006338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800633a:	f7ff fe01 	bl	8005f40 <xTimerGenericCommand>
 800633e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d152      	bne.n	80063ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	61bb      	str	r3, [r7, #24]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006364:	f023 0301 	bic.w	r3, r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006370:	e03d      	b.n	80063ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006380:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800638a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	617b      	str	r3, [r7, #20]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	18d1      	adds	r1, r2, r3
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b8:	f7ff ff04 	bl	80061c4 <prvInsertTimerInActiveList>
					break;
 80063bc:	e017      	b.n	80063ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d103      	bne.n	80063d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80063cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063ce:	f000 fc0b 	bl	8006be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063d2:	e00c      	b.n	80063ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063da:	f023 0301 	bic.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063e6:	e002      	b.n	80063ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <prvProcessReceivedCommands+0x1a6>
					break;
 80063ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063ee:	4b08      	ldr	r3, [pc, #32]	@ (8006410 <prvProcessReceivedCommands+0x1c8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	1d39      	adds	r1, r7, #4
 80063f4:	2200      	movs	r2, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fb14 	bl	8004a24 <xQueueReceive>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f47f af26 	bne.w	8006250 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	3730      	adds	r7, #48	@ 0x30
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000e38 	.word	0x20000e38

08006414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800641a:	e049      	b.n	80064b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800641c:	4b2e      	ldr	r3, [pc, #184]	@ (80064d8 <prvSwitchTimerLists+0xc4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006426:	4b2c      	ldr	r3, [pc, #176]	@ (80064d8 <prvSwitchTimerLists+0xc4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3304      	adds	r3, #4
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe f821 	bl	800447c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d02f      	beq.n	80064b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4413      	add	r3, r2
 8006458:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	429a      	cmp	r2, r3
 8006460:	d90e      	bls.n	8006480 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800646e:	4b1a      	ldr	r3, [pc, #104]	@ (80064d8 <prvSwitchTimerLists+0xc4>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3304      	adds	r3, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7fd ffc6 	bl	800440a <vListInsert>
 800647e:	e017      	b.n	80064b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006480:	2300      	movs	r3, #0
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	2300      	movs	r3, #0
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	2100      	movs	r1, #0
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fd58 	bl	8005f40 <xTimerGenericCommand>
 8006490:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10b      	bne.n	80064b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	603b      	str	r3, [r7, #0]
}
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	e7fd      	b.n	80064ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064b0:	4b09      	ldr	r3, [pc, #36]	@ (80064d8 <prvSwitchTimerLists+0xc4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1b0      	bne.n	800641c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064ba:	4b07      	ldr	r3, [pc, #28]	@ (80064d8 <prvSwitchTimerLists+0xc4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064c0:	4b06      	ldr	r3, [pc, #24]	@ (80064dc <prvSwitchTimerLists+0xc8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a04      	ldr	r2, [pc, #16]	@ (80064d8 <prvSwitchTimerLists+0xc4>)
 80064c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064c8:	4a04      	ldr	r2, [pc, #16]	@ (80064dc <prvSwitchTimerLists+0xc8>)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	6013      	str	r3, [r2, #0]
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000e30 	.word	0x20000e30
 80064dc:	20000e34 	.word	0x20000e34

080064e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064e6:	f000 f98f 	bl	8006808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064ea:	4b15      	ldr	r3, [pc, #84]	@ (8006540 <prvCheckForValidListAndQueue+0x60>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d120      	bne.n	8006534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064f2:	4814      	ldr	r0, [pc, #80]	@ (8006544 <prvCheckForValidListAndQueue+0x64>)
 80064f4:	f7fd ff38 	bl	8004368 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064f8:	4813      	ldr	r0, [pc, #76]	@ (8006548 <prvCheckForValidListAndQueue+0x68>)
 80064fa:	f7fd ff35 	bl	8004368 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064fe:	4b13      	ldr	r3, [pc, #76]	@ (800654c <prvCheckForValidListAndQueue+0x6c>)
 8006500:	4a10      	ldr	r2, [pc, #64]	@ (8006544 <prvCheckForValidListAndQueue+0x64>)
 8006502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006504:	4b12      	ldr	r3, [pc, #72]	@ (8006550 <prvCheckForValidListAndQueue+0x70>)
 8006506:	4a10      	ldr	r2, [pc, #64]	@ (8006548 <prvCheckForValidListAndQueue+0x68>)
 8006508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800650a:	2300      	movs	r3, #0
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	4b11      	ldr	r3, [pc, #68]	@ (8006554 <prvCheckForValidListAndQueue+0x74>)
 8006510:	4a11      	ldr	r2, [pc, #68]	@ (8006558 <prvCheckForValidListAndQueue+0x78>)
 8006512:	2110      	movs	r1, #16
 8006514:	200a      	movs	r0, #10
 8006516:	f7fe f845 	bl	80045a4 <xQueueGenericCreateStatic>
 800651a:	4603      	mov	r3, r0
 800651c:	4a08      	ldr	r2, [pc, #32]	@ (8006540 <prvCheckForValidListAndQueue+0x60>)
 800651e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006520:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <prvCheckForValidListAndQueue+0x60>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006528:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <prvCheckForValidListAndQueue+0x60>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	490b      	ldr	r1, [pc, #44]	@ (800655c <prvCheckForValidListAndQueue+0x7c>)
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fc6a 	bl	8004e08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006534:	f000 f99a 	bl	800686c <vPortExitCritical>
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000e38 	.word	0x20000e38
 8006544:	20000e08 	.word	0x20000e08
 8006548:	20000e1c 	.word	0x20000e1c
 800654c:	20000e30 	.word	0x20000e30
 8006550:	20000e34 	.word	0x20000e34
 8006554:	20000ee4 	.word	0x20000ee4
 8006558:	20000e44 	.word	0x20000e44
 800655c:	08007908 	.word	0x08007908

08006560 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	@ 0x28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800656e:	f06f 0301 	mvn.w	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006580:	4b06      	ldr	r3, [pc, #24]	@ (800659c <xTimerPendFunctionCallFromISR+0x3c>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	f107 0114 	add.w	r1, r7, #20
 8006588:	2300      	movs	r3, #0
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	f7fe f9ac 	bl	80048e8 <xQueueGenericSendFromISR>
 8006590:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006594:	4618      	mov	r0, r3
 8006596:	3728      	adds	r7, #40	@ 0x28
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000e38 	.word	0x20000e38

080065a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3b04      	subs	r3, #4
 80065b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3b04      	subs	r3, #4
 80065be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3b04      	subs	r3, #4
 80065ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006604 <pxPortInitialiseStack+0x64>)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b14      	subs	r3, #20
 80065da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3b04      	subs	r3, #4
 80065e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f06f 0202 	mvn.w	r2, #2
 80065ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3b20      	subs	r3, #32
 80065f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	08006609 	.word	0x08006609

08006608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006612:	4b13      	ldr	r3, [pc, #76]	@ (8006660 <prvTaskExitError+0x58>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800661a:	d00b      	beq.n	8006634 <prvTaskExitError+0x2c>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	bf00      	nop
 8006632:	e7fd      	b.n	8006630 <prvTaskExitError+0x28>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	60bb      	str	r3, [r7, #8]
}
 8006646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006648:	bf00      	nop
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0fc      	beq.n	800664a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	2000000c 	.word	0x2000000c
	...

08006670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <pxCurrentTCBConst2>)
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	6808      	ldr	r0, [r1, #0]
 8006676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	f380 8809 	msr	PSP, r0
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	4770      	bx	lr
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst2>:
 8006690:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006698:	4808      	ldr	r0, [pc, #32]	@ (80066bc <prvPortStartFirstTask+0x24>)
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f380 8808 	msr	MSP, r0
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8814 	msr	CONTROL, r0
 80066aa:	b662      	cpsie	i
 80066ac:	b661      	cpsie	f
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	df00      	svc	0
 80066b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ba:	bf00      	nop
 80066bc:	e000ed08 	.word	0xe000ed08

080066c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066c6:	4b47      	ldr	r3, [pc, #284]	@ (80067e4 <xPortStartScheduler+0x124>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a47      	ldr	r2, [pc, #284]	@ (80067e8 <xPortStartScheduler+0x128>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10b      	bne.n	80066e8 <xPortStartScheduler+0x28>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066e8:	4b3e      	ldr	r3, [pc, #248]	@ (80067e4 <xPortStartScheduler+0x124>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3f      	ldr	r2, [pc, #252]	@ (80067ec <xPortStartScheduler+0x12c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10b      	bne.n	800670a <xPortStartScheduler+0x4a>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60fb      	str	r3, [r7, #12]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800670a:	4b39      	ldr	r3, [pc, #228]	@ (80067f0 <xPortStartScheduler+0x130>)
 800670c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	22ff      	movs	r2, #255	@ 0xff
 800671a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4b31      	ldr	r3, [pc, #196]	@ (80067f4 <xPortStartScheduler+0x134>)
 8006730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006732:	4b31      	ldr	r3, [pc, #196]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006734:	2207      	movs	r2, #7
 8006736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006738:	e009      	b.n	800674e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800673a:	4b2f      	ldr	r3, [pc, #188]	@ (80067f8 <xPortStartScheduler+0x138>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3b01      	subs	r3, #1
 8006740:	4a2d      	ldr	r2, [pc, #180]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006756:	2b80      	cmp	r3, #128	@ 0x80
 8006758:	d0ef      	beq.n	800673a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800675a:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <xPortStartScheduler+0x138>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1c3 0307 	rsb	r3, r3, #7
 8006762:	2b04      	cmp	r3, #4
 8006764:	d00b      	beq.n	800677e <xPortStartScheduler+0xbe>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60bb      	str	r3, [r7, #8]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800677e:	4b1e      	ldr	r3, [pc, #120]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006788:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <xPortStartScheduler+0x138>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006790:	4a19      	ldr	r2, [pc, #100]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800679c:	4b17      	ldr	r3, [pc, #92]	@ (80067fc <xPortStartScheduler+0x13c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a16      	ldr	r2, [pc, #88]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067a8:	4b14      	ldr	r3, [pc, #80]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a13      	ldr	r2, [pc, #76]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067b4:	f000 f8da 	bl	800696c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067b8:	4b11      	ldr	r3, [pc, #68]	@ (8006800 <xPortStartScheduler+0x140>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067be:	f000 f8f9 	bl	80069b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067c2:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <xPortStartScheduler+0x144>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006804 <xPortStartScheduler+0x144>)
 80067c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067ce:	f7ff ff63 	bl	8006698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067d2:	f7fe ff51 	bl	8005678 <vTaskSwitchContext>
	prvTaskExitError();
 80067d6:	f7ff ff17 	bl	8006608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	e000ed00 	.word	0xe000ed00
 80067e8:	410fc271 	.word	0x410fc271
 80067ec:	410fc270 	.word	0x410fc270
 80067f0:	e000e400 	.word	0xe000e400
 80067f4:	20000f34 	.word	0x20000f34
 80067f8:	20000f38 	.word	0x20000f38
 80067fc:	e000ed20 	.word	0xe000ed20
 8006800:	2000000c 	.word	0x2000000c
 8006804:	e000ef34 	.word	0xe000ef34

08006808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006822:	4b10      	ldr	r3, [pc, #64]	@ (8006864 <vPortEnterCritical+0x5c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3301      	adds	r3, #1
 8006828:	4a0e      	ldr	r2, [pc, #56]	@ (8006864 <vPortEnterCritical+0x5c>)
 800682a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800682c:	4b0d      	ldr	r3, [pc, #52]	@ (8006864 <vPortEnterCritical+0x5c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d110      	bne.n	8006856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <vPortEnterCritical+0x60>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <vPortEnterCritical+0x4e>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	603b      	str	r3, [r7, #0]
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <vPortEnterCritical+0x4a>
	}
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000000c 	.word	0x2000000c
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006872:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <vPortExitCritical+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <vPortExitCritical+0x26>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	607b      	str	r3, [r7, #4]
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	e7fd      	b.n	800688e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006892:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <vPortExitCritical+0x50>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3b01      	subs	r3, #1
 8006898:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <vPortExitCritical+0x50>)
 800689a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800689c:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <vPortExitCritical+0x50>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <vPortExitCritical+0x44>
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	2000000c 	.word	0x2000000c

080068c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068c0:	f3ef 8009 	mrs	r0, PSP
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4b15      	ldr	r3, [pc, #84]	@ (8006920 <pxCurrentTCBConst>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f01e 0f10 	tst.w	lr, #16
 80068d0:	bf08      	it	eq
 80068d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	6010      	str	r0, [r2, #0]
 80068dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068e4:	f380 8811 	msr	BASEPRI, r0
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f7fe fec2 	bl	8005678 <vTaskSwitchContext>
 80068f4:	f04f 0000 	mov.w	r0, #0
 80068f8:	f380 8811 	msr	BASEPRI, r0
 80068fc:	bc09      	pop	{r0, r3}
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	6808      	ldr	r0, [r1, #0]
 8006902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	f01e 0f10 	tst.w	lr, #16
 800690a:	bf08      	it	eq
 800690c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006910:	f380 8809 	msr	PSP, r0
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w

08006920 <pxCurrentTCBConst>:
 8006920:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop

08006928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006942:	f7fe fddf 	bl	8005504 <xTaskIncrementTick>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <xPortSysTickHandler+0x40>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f383 8811 	msr	BASEPRI, r3
}
 800695e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <vPortSetupTimerInterrupt+0x38>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800697c:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <vPortSetupTimerInterrupt+0x3c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <vPortSetupTimerInterrupt+0x40>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	4a09      	ldr	r2, [pc, #36]	@ (80069b0 <vPortSetupTimerInterrupt+0x44>)
 800698a:	3b01      	subs	r3, #1
 800698c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800698e:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	e000e010 	.word	0xe000e010
 80069a4:	e000e018 	.word	0xe000e018
 80069a8:	20000000 	.word	0x20000000
 80069ac:	10624dd3 	.word	0x10624dd3
 80069b0:	e000e014 	.word	0xe000e014

080069b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069c4 <vPortEnableVFP+0x10>
 80069b8:	6801      	ldr	r1, [r0, #0]
 80069ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069be:	6001      	str	r1, [r0, #0]
 80069c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069c2:	bf00      	nop
 80069c4:	e000ed88 	.word	0xe000ed88

080069c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ce:	f3ef 8305 	mrs	r3, IPSR
 80069d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d915      	bls.n	8006a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069da:	4a18      	ldr	r2, [pc, #96]	@ (8006a3c <vPortValidateInterruptPriority+0x74>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069e4:	4b16      	ldr	r3, [pc, #88]	@ (8006a40 <vPortValidateInterruptPriority+0x78>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	7afa      	ldrb	r2, [r7, #11]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d20b      	bcs.n	8006a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a06:	4b0f      	ldr	r3, [pc, #60]	@ (8006a44 <vPortValidateInterruptPriority+0x7c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a48 <vPortValidateInterruptPriority+0x80>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90b      	bls.n	8006a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	603b      	str	r3, [r7, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <vPortValidateInterruptPriority+0x62>
	}
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	e000e3f0 	.word	0xe000e3f0
 8006a40:	20000f34 	.word	0x20000f34
 8006a44:	e000ed0c 	.word	0xe000ed0c
 8006a48:	20000f38 	.word	0x20000f38

08006a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	@ 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a58:	f7fe fc98 	bl	800538c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8006bd0 <pvPortMalloc+0x184>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a64:	f000 f924 	bl	8006cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a68:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd4 <pvPortMalloc+0x188>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 8095 	bne.w	8006ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01e      	beq.n	8006aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f023 0307 	bic.w	r3, r3, #7
 8006a94:	3308      	adds	r3, #8
 8006a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <pvPortMalloc+0x6e>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	617b      	str	r3, [r7, #20]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d06f      	beq.n	8006ba0 <pvPortMalloc+0x154>
 8006ac0:	4b45      	ldr	r3, [pc, #276]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d86a      	bhi.n	8006ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aca:	4b44      	ldr	r3, [pc, #272]	@ (8006bdc <pvPortMalloc+0x190>)
 8006acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ace:	4b43      	ldr	r3, [pc, #268]	@ (8006bdc <pvPortMalloc+0x190>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ad4:	e004      	b.n	8006ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d903      	bls.n	8006af2 <pvPortMalloc+0xa6>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f1      	bne.n	8006ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006af2:	4b37      	ldr	r3, [pc, #220]	@ (8006bd0 <pvPortMalloc+0x184>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d051      	beq.n	8006ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2208      	movs	r2, #8
 8006b02:	4413      	add	r3, r2
 8006b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	1ad2      	subs	r2, r2, r3
 8006b16:	2308      	movs	r3, #8
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d920      	bls.n	8006b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <pvPortMalloc+0xfc>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b5a:	69b8      	ldr	r0, [r7, #24]
 8006b5c:	f000 f90a 	bl	8006d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b60:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b1b      	ldr	r3, [pc, #108]	@ (8006be0 <pvPortMalloc+0x194>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d203      	bcs.n	8006b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b7a:	4b17      	ldr	r3, [pc, #92]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a18      	ldr	r2, [pc, #96]	@ (8006be0 <pvPortMalloc+0x194>)
 8006b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4b13      	ldr	r3, [pc, #76]	@ (8006bd4 <pvPortMalloc+0x188>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b96:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <pvPortMalloc+0x198>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	4a11      	ldr	r2, [pc, #68]	@ (8006be4 <pvPortMalloc+0x198>)
 8006b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ba0:	f7fe fc02 	bl	80053a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	60fb      	str	r3, [r7, #12]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3728      	adds	r7, #40	@ 0x28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20001afc 	.word	0x20001afc
 8006bd4:	20001b10 	.word	0x20001b10
 8006bd8:	20001b00 	.word	0x20001b00
 8006bdc:	20001af4 	.word	0x20001af4
 8006be0:	20001b04 	.word	0x20001b04
 8006be4:	20001b08 	.word	0x20001b08

08006be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d04f      	beq.n	8006c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	425b      	negs	r3, r3
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4413      	add	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	4b25      	ldr	r3, [pc, #148]	@ (8006ca4 <vPortFree+0xbc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <vPortFree+0x46>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60fb      	str	r3, [r7, #12]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <vPortFree+0x66>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	60bb      	str	r3, [r7, #8]
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	e7fd      	b.n	8006c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	4b14      	ldr	r3, [pc, #80]	@ (8006ca4 <vPortFree+0xbc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01e      	beq.n	8006c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11a      	bne.n	8006c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca4 <vPortFree+0xbc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	401a      	ands	r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c74:	f7fe fb8a 	bl	800538c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <vPortFree+0xc0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4413      	add	r3, r2
 8006c82:	4a09      	ldr	r2, [pc, #36]	@ (8006ca8 <vPortFree+0xc0>)
 8006c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c86:	6938      	ldr	r0, [r7, #16]
 8006c88:	f000 f874 	bl	8006d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c8c:	4b07      	ldr	r3, [pc, #28]	@ (8006cac <vPortFree+0xc4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	4a06      	ldr	r2, [pc, #24]	@ (8006cac <vPortFree+0xc4>)
 8006c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c96:	f7fe fb87 	bl	80053a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20001b10 	.word	0x20001b10
 8006ca8:	20001b00 	.word	0x20001b00
 8006cac:	20001b0c 	.word	0x20001b0c

08006cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cbc:	4b27      	ldr	r3, [pc, #156]	@ (8006d5c <prvHeapInit+0xac>)
 8006cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3307      	adds	r3, #7
 8006cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0307 	bic.w	r3, r3, #7
 8006cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <prvHeapInit+0xac>)
 8006ce0:	4413      	add	r3, r2
 8006ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <prvHeapInit+0xb0>)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cee:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <prvHeapInit+0xb0>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a15      	ldr	r2, [pc, #84]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d12:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d1a:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	1ad2      	subs	r2, r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d30:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d68 <prvHeapInit+0xb8>)
 8006d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a09      	ldr	r2, [pc, #36]	@ (8006d6c <prvHeapInit+0xbc>)
 8006d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d48:	4b09      	ldr	r3, [pc, #36]	@ (8006d70 <prvHeapInit+0xc0>)
 8006d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d4e:	601a      	str	r2, [r3, #0]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000f3c 	.word	0x20000f3c
 8006d60:	20001af4 	.word	0x20001af4
 8006d64:	20001afc 	.word	0x20001afc
 8006d68:	20001b04 	.word	0x20001b04
 8006d6c:	20001b00 	.word	0x20001b00
 8006d70:	20001b10 	.word	0x20001b10

08006d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d7c:	4b28      	ldr	r3, [pc, #160]	@ (8006e20 <prvInsertBlockIntoFreeList+0xac>)
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e002      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x14>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d8f7      	bhi.n	8006d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d108      	bne.n	8006db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	441a      	add	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d118      	bne.n	8006dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b15      	ldr	r3, [pc, #84]	@ (8006e24 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d00d      	beq.n	8006df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	e008      	b.n	8006e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006df2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <prvInsertBlockIntoFreeList+0xb0>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	e003      	b.n	8006e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d002      	beq.n	8006e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20001af4 	.word	0x20001af4
 8006e24:	20001afc 	.word	0x20001afc

08006e28 <std>:
 8006e28:	2300      	movs	r3, #0
 8006e2a:	b510      	push	{r4, lr}
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e36:	6083      	str	r3, [r0, #8]
 8006e38:	8181      	strh	r1, [r0, #12]
 8006e3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e3c:	81c2      	strh	r2, [r0, #14]
 8006e3e:	6183      	str	r3, [r0, #24]
 8006e40:	4619      	mov	r1, r3
 8006e42:	2208      	movs	r2, #8
 8006e44:	305c      	adds	r0, #92	@ 0x5c
 8006e46:	f000 f9e7 	bl	8007218 <memset>
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e80 <std+0x58>)
 8006e4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <std+0x5c>)
 8006e50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e52:	4b0d      	ldr	r3, [pc, #52]	@ (8006e88 <std+0x60>)
 8006e54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e56:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <std+0x64>)
 8006e58:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <std+0x68>)
 8006e5c:	6224      	str	r4, [r4, #32]
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	d006      	beq.n	8006e70 <std+0x48>
 8006e62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e66:	4294      	cmp	r4, r2
 8006e68:	d002      	beq.n	8006e70 <std+0x48>
 8006e6a:	33d0      	adds	r3, #208	@ 0xd0
 8006e6c:	429c      	cmp	r4, r3
 8006e6e:	d105      	bne.n	8006e7c <std+0x54>
 8006e70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e78:	f000 ba9c 	b.w	80073b4 <__retarget_lock_init_recursive>
 8006e7c:	bd10      	pop	{r4, pc}
 8006e7e:	bf00      	nop
 8006e80:	08007069 	.word	0x08007069
 8006e84:	0800708b 	.word	0x0800708b
 8006e88:	080070c3 	.word	0x080070c3
 8006e8c:	080070e7 	.word	0x080070e7
 8006e90:	20001b14 	.word	0x20001b14

08006e94 <stdio_exit_handler>:
 8006e94:	4a02      	ldr	r2, [pc, #8]	@ (8006ea0 <stdio_exit_handler+0xc>)
 8006e96:	4903      	ldr	r1, [pc, #12]	@ (8006ea4 <stdio_exit_handler+0x10>)
 8006e98:	4803      	ldr	r0, [pc, #12]	@ (8006ea8 <stdio_exit_handler+0x14>)
 8006e9a:	f000 b869 	b.w	8006f70 <_fwalk_sglue>
 8006e9e:	bf00      	nop
 8006ea0:	20000010 	.word	0x20000010
 8006ea4:	080076d1 	.word	0x080076d1
 8006ea8:	20000020 	.word	0x20000020

08006eac <cleanup_stdio>:
 8006eac:	6841      	ldr	r1, [r0, #4]
 8006eae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <cleanup_stdio+0x34>)
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	d001      	beq.n	8006ebc <cleanup_stdio+0x10>
 8006eb8:	f000 fc0a 	bl	80076d0 <_fflush_r>
 8006ebc:	68a1      	ldr	r1, [r4, #8]
 8006ebe:	4b09      	ldr	r3, [pc, #36]	@ (8006ee4 <cleanup_stdio+0x38>)
 8006ec0:	4299      	cmp	r1, r3
 8006ec2:	d002      	beq.n	8006eca <cleanup_stdio+0x1e>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fc03 	bl	80076d0 <_fflush_r>
 8006eca:	68e1      	ldr	r1, [r4, #12]
 8006ecc:	4b06      	ldr	r3, [pc, #24]	@ (8006ee8 <cleanup_stdio+0x3c>)
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	d004      	beq.n	8006edc <cleanup_stdio+0x30>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed8:	f000 bbfa 	b.w	80076d0 <_fflush_r>
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	bf00      	nop
 8006ee0:	20001b14 	.word	0x20001b14
 8006ee4:	20001b7c 	.word	0x20001b7c
 8006ee8:	20001be4 	.word	0x20001be4

08006eec <global_stdio_init.part.0>:
 8006eec:	b510      	push	{r4, lr}
 8006eee:	4b0b      	ldr	r3, [pc, #44]	@ (8006f1c <global_stdio_init.part.0+0x30>)
 8006ef0:	4c0b      	ldr	r4, [pc, #44]	@ (8006f20 <global_stdio_init.part.0+0x34>)
 8006ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f24 <global_stdio_init.part.0+0x38>)
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2104      	movs	r1, #4
 8006efc:	f7ff ff94 	bl	8006e28 <std>
 8006f00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f04:	2201      	movs	r2, #1
 8006f06:	2109      	movs	r1, #9
 8006f08:	f7ff ff8e 	bl	8006e28 <std>
 8006f0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f10:	2202      	movs	r2, #2
 8006f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f16:	2112      	movs	r1, #18
 8006f18:	f7ff bf86 	b.w	8006e28 <std>
 8006f1c:	20001c4c 	.word	0x20001c4c
 8006f20:	20001b14 	.word	0x20001b14
 8006f24:	08006e95 	.word	0x08006e95

08006f28 <__sfp_lock_acquire>:
 8006f28:	4801      	ldr	r0, [pc, #4]	@ (8006f30 <__sfp_lock_acquire+0x8>)
 8006f2a:	f000 ba44 	b.w	80073b6 <__retarget_lock_acquire_recursive>
 8006f2e:	bf00      	nop
 8006f30:	20001c55 	.word	0x20001c55

08006f34 <__sfp_lock_release>:
 8006f34:	4801      	ldr	r0, [pc, #4]	@ (8006f3c <__sfp_lock_release+0x8>)
 8006f36:	f000 ba3f 	b.w	80073b8 <__retarget_lock_release_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20001c55 	.word	0x20001c55

08006f40 <__sinit>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	4604      	mov	r4, r0
 8006f44:	f7ff fff0 	bl	8006f28 <__sfp_lock_acquire>
 8006f48:	6a23      	ldr	r3, [r4, #32]
 8006f4a:	b11b      	cbz	r3, 8006f54 <__sinit+0x14>
 8006f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f50:	f7ff bff0 	b.w	8006f34 <__sfp_lock_release>
 8006f54:	4b04      	ldr	r3, [pc, #16]	@ (8006f68 <__sinit+0x28>)
 8006f56:	6223      	str	r3, [r4, #32]
 8006f58:	4b04      	ldr	r3, [pc, #16]	@ (8006f6c <__sinit+0x2c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f5      	bne.n	8006f4c <__sinit+0xc>
 8006f60:	f7ff ffc4 	bl	8006eec <global_stdio_init.part.0>
 8006f64:	e7f2      	b.n	8006f4c <__sinit+0xc>
 8006f66:	bf00      	nop
 8006f68:	08006ead 	.word	0x08006ead
 8006f6c:	20001c4c 	.word	0x20001c4c

08006f70 <_fwalk_sglue>:
 8006f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f74:	4607      	mov	r7, r0
 8006f76:	4688      	mov	r8, r1
 8006f78:	4614      	mov	r4, r2
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f80:	f1b9 0901 	subs.w	r9, r9, #1
 8006f84:	d505      	bpl.n	8006f92 <_fwalk_sglue+0x22>
 8006f86:	6824      	ldr	r4, [r4, #0]
 8006f88:	2c00      	cmp	r4, #0
 8006f8a:	d1f7      	bne.n	8006f7c <_fwalk_sglue+0xc>
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f92:	89ab      	ldrh	r3, [r5, #12]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d907      	bls.n	8006fa8 <_fwalk_sglue+0x38>
 8006f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	d003      	beq.n	8006fa8 <_fwalk_sglue+0x38>
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	47c0      	blx	r8
 8006fa6:	4306      	orrs	r6, r0
 8006fa8:	3568      	adds	r5, #104	@ 0x68
 8006faa:	e7e9      	b.n	8006f80 <_fwalk_sglue+0x10>

08006fac <_puts_r>:
 8006fac:	6a03      	ldr	r3, [r0, #32]
 8006fae:	b570      	push	{r4, r5, r6, lr}
 8006fb0:	6884      	ldr	r4, [r0, #8]
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	b90b      	cbnz	r3, 8006fbc <_puts_r+0x10>
 8006fb8:	f7ff ffc2 	bl	8006f40 <__sinit>
 8006fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fbe:	07db      	lsls	r3, r3, #31
 8006fc0:	d405      	bmi.n	8006fce <_puts_r+0x22>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	0598      	lsls	r0, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_puts_r+0x22>
 8006fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fca:	f000 f9f4 	bl	80073b6 <__retarget_lock_acquire_recursive>
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	0719      	lsls	r1, r3, #28
 8006fd2:	d502      	bpl.n	8006fda <_puts_r+0x2e>
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d135      	bne.n	8007046 <_puts_r+0x9a>
 8006fda:	4621      	mov	r1, r4
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f000 f8c5 	bl	800716c <__swsetup_r>
 8006fe2:	b380      	cbz	r0, 8007046 <_puts_r+0x9a>
 8006fe4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006fe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fea:	07da      	lsls	r2, r3, #31
 8006fec:	d405      	bmi.n	8006ffa <_puts_r+0x4e>
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	059b      	lsls	r3, r3, #22
 8006ff2:	d402      	bmi.n	8006ffa <_puts_r+0x4e>
 8006ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ff6:	f000 f9df 	bl	80073b8 <__retarget_lock_release_recursive>
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da04      	bge.n	800700c <_puts_r+0x60>
 8007002:	69a2      	ldr	r2, [r4, #24]
 8007004:	429a      	cmp	r2, r3
 8007006:	dc17      	bgt.n	8007038 <_puts_r+0x8c>
 8007008:	290a      	cmp	r1, #10
 800700a:	d015      	beq.n	8007038 <_puts_r+0x8c>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	6022      	str	r2, [r4, #0]
 8007012:	7019      	strb	r1, [r3, #0]
 8007014:	68a3      	ldr	r3, [r4, #8]
 8007016:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800701a:	3b01      	subs	r3, #1
 800701c:	60a3      	str	r3, [r4, #8]
 800701e:	2900      	cmp	r1, #0
 8007020:	d1ed      	bne.n	8006ffe <_puts_r+0x52>
 8007022:	2b00      	cmp	r3, #0
 8007024:	da11      	bge.n	800704a <_puts_r+0x9e>
 8007026:	4622      	mov	r2, r4
 8007028:	210a      	movs	r1, #10
 800702a:	4628      	mov	r0, r5
 800702c:	f000 f85f 	bl	80070ee <__swbuf_r>
 8007030:	3001      	adds	r0, #1
 8007032:	d0d7      	beq.n	8006fe4 <_puts_r+0x38>
 8007034:	250a      	movs	r5, #10
 8007036:	e7d7      	b.n	8006fe8 <_puts_r+0x3c>
 8007038:	4622      	mov	r2, r4
 800703a:	4628      	mov	r0, r5
 800703c:	f000 f857 	bl	80070ee <__swbuf_r>
 8007040:	3001      	adds	r0, #1
 8007042:	d1e7      	bne.n	8007014 <_puts_r+0x68>
 8007044:	e7ce      	b.n	8006fe4 <_puts_r+0x38>
 8007046:	3e01      	subs	r6, #1
 8007048:	e7e4      	b.n	8007014 <_puts_r+0x68>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	6022      	str	r2, [r4, #0]
 8007050:	220a      	movs	r2, #10
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e7ee      	b.n	8007034 <_puts_r+0x88>
	...

08007058 <puts>:
 8007058:	4b02      	ldr	r3, [pc, #8]	@ (8007064 <puts+0xc>)
 800705a:	4601      	mov	r1, r0
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	f7ff bfa5 	b.w	8006fac <_puts_r>
 8007062:	bf00      	nop
 8007064:	2000001c 	.word	0x2000001c

08007068 <__sread>:
 8007068:	b510      	push	{r4, lr}
 800706a:	460c      	mov	r4, r1
 800706c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007070:	f000 f952 	bl	8007318 <_read_r>
 8007074:	2800      	cmp	r0, #0
 8007076:	bfab      	itete	ge
 8007078:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800707a:	89a3      	ldrhlt	r3, [r4, #12]
 800707c:	181b      	addge	r3, r3, r0
 800707e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007082:	bfac      	ite	ge
 8007084:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007086:	81a3      	strhlt	r3, [r4, #12]
 8007088:	bd10      	pop	{r4, pc}

0800708a <__swrite>:
 800708a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708e:	461f      	mov	r7, r3
 8007090:	898b      	ldrh	r3, [r1, #12]
 8007092:	05db      	lsls	r3, r3, #23
 8007094:	4605      	mov	r5, r0
 8007096:	460c      	mov	r4, r1
 8007098:	4616      	mov	r6, r2
 800709a:	d505      	bpl.n	80070a8 <__swrite+0x1e>
 800709c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a0:	2302      	movs	r3, #2
 80070a2:	2200      	movs	r2, #0
 80070a4:	f000 f926 	bl	80072f4 <_lseek_r>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	4632      	mov	r2, r6
 80070b6:	463b      	mov	r3, r7
 80070b8:	4628      	mov	r0, r5
 80070ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070be:	f000 b93d 	b.w	800733c <_write_r>

080070c2 <__sseek>:
 80070c2:	b510      	push	{r4, lr}
 80070c4:	460c      	mov	r4, r1
 80070c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ca:	f000 f913 	bl	80072f4 <_lseek_r>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	bf15      	itete	ne
 80070d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070de:	81a3      	strheq	r3, [r4, #12]
 80070e0:	bf18      	it	ne
 80070e2:	81a3      	strhne	r3, [r4, #12]
 80070e4:	bd10      	pop	{r4, pc}

080070e6 <__sclose>:
 80070e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ea:	f000 b89d 	b.w	8007228 <_close_r>

080070ee <__swbuf_r>:
 80070ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f0:	460e      	mov	r6, r1
 80070f2:	4614      	mov	r4, r2
 80070f4:	4605      	mov	r5, r0
 80070f6:	b118      	cbz	r0, 8007100 <__swbuf_r+0x12>
 80070f8:	6a03      	ldr	r3, [r0, #32]
 80070fa:	b90b      	cbnz	r3, 8007100 <__swbuf_r+0x12>
 80070fc:	f7ff ff20 	bl	8006f40 <__sinit>
 8007100:	69a3      	ldr	r3, [r4, #24]
 8007102:	60a3      	str	r3, [r4, #8]
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	071a      	lsls	r2, r3, #28
 8007108:	d501      	bpl.n	800710e <__swbuf_r+0x20>
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	b943      	cbnz	r3, 8007120 <__swbuf_r+0x32>
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 f82b 	bl	800716c <__swsetup_r>
 8007116:	b118      	cbz	r0, 8007120 <__swbuf_r+0x32>
 8007118:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800711c:	4638      	mov	r0, r7
 800711e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	6922      	ldr	r2, [r4, #16]
 8007124:	1a98      	subs	r0, r3, r2
 8007126:	6963      	ldr	r3, [r4, #20]
 8007128:	b2f6      	uxtb	r6, r6
 800712a:	4283      	cmp	r3, r0
 800712c:	4637      	mov	r7, r6
 800712e:	dc05      	bgt.n	800713c <__swbuf_r+0x4e>
 8007130:	4621      	mov	r1, r4
 8007132:	4628      	mov	r0, r5
 8007134:	f000 facc 	bl	80076d0 <_fflush_r>
 8007138:	2800      	cmp	r0, #0
 800713a:	d1ed      	bne.n	8007118 <__swbuf_r+0x2a>
 800713c:	68a3      	ldr	r3, [r4, #8]
 800713e:	3b01      	subs	r3, #1
 8007140:	60a3      	str	r3, [r4, #8]
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	6022      	str	r2, [r4, #0]
 8007148:	701e      	strb	r6, [r3, #0]
 800714a:	6962      	ldr	r2, [r4, #20]
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	429a      	cmp	r2, r3
 8007150:	d004      	beq.n	800715c <__swbuf_r+0x6e>
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	07db      	lsls	r3, r3, #31
 8007156:	d5e1      	bpl.n	800711c <__swbuf_r+0x2e>
 8007158:	2e0a      	cmp	r6, #10
 800715a:	d1df      	bne.n	800711c <__swbuf_r+0x2e>
 800715c:	4621      	mov	r1, r4
 800715e:	4628      	mov	r0, r5
 8007160:	f000 fab6 	bl	80076d0 <_fflush_r>
 8007164:	2800      	cmp	r0, #0
 8007166:	d0d9      	beq.n	800711c <__swbuf_r+0x2e>
 8007168:	e7d6      	b.n	8007118 <__swbuf_r+0x2a>
	...

0800716c <__swsetup_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4b29      	ldr	r3, [pc, #164]	@ (8007214 <__swsetup_r+0xa8>)
 8007170:	4605      	mov	r5, r0
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	460c      	mov	r4, r1
 8007176:	b118      	cbz	r0, 8007180 <__swsetup_r+0x14>
 8007178:	6a03      	ldr	r3, [r0, #32]
 800717a:	b90b      	cbnz	r3, 8007180 <__swsetup_r+0x14>
 800717c:	f7ff fee0 	bl	8006f40 <__sinit>
 8007180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007184:	0719      	lsls	r1, r3, #28
 8007186:	d422      	bmi.n	80071ce <__swsetup_r+0x62>
 8007188:	06da      	lsls	r2, r3, #27
 800718a:	d407      	bmi.n	800719c <__swsetup_r+0x30>
 800718c:	2209      	movs	r2, #9
 800718e:	602a      	str	r2, [r5, #0]
 8007190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800719a:	e033      	b.n	8007204 <__swsetup_r+0x98>
 800719c:	0758      	lsls	r0, r3, #29
 800719e:	d512      	bpl.n	80071c6 <__swsetup_r+0x5a>
 80071a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071a2:	b141      	cbz	r1, 80071b6 <__swsetup_r+0x4a>
 80071a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071a8:	4299      	cmp	r1, r3
 80071aa:	d002      	beq.n	80071b2 <__swsetup_r+0x46>
 80071ac:	4628      	mov	r0, r5
 80071ae:	f000 f913 	bl	80073d8 <_free_r>
 80071b2:	2300      	movs	r3, #0
 80071b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071bc:	81a3      	strh	r3, [r4, #12]
 80071be:	2300      	movs	r3, #0
 80071c0:	6063      	str	r3, [r4, #4]
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	f043 0308 	orr.w	r3, r3, #8
 80071cc:	81a3      	strh	r3, [r4, #12]
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	b94b      	cbnz	r3, 80071e6 <__swsetup_r+0x7a>
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071dc:	d003      	beq.n	80071e6 <__swsetup_r+0x7a>
 80071de:	4621      	mov	r1, r4
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 fac3 	bl	800776c <__smakebuf_r>
 80071e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ea:	f013 0201 	ands.w	r2, r3, #1
 80071ee:	d00a      	beq.n	8007206 <__swsetup_r+0x9a>
 80071f0:	2200      	movs	r2, #0
 80071f2:	60a2      	str	r2, [r4, #8]
 80071f4:	6962      	ldr	r2, [r4, #20]
 80071f6:	4252      	negs	r2, r2
 80071f8:	61a2      	str	r2, [r4, #24]
 80071fa:	6922      	ldr	r2, [r4, #16]
 80071fc:	b942      	cbnz	r2, 8007210 <__swsetup_r+0xa4>
 80071fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007202:	d1c5      	bne.n	8007190 <__swsetup_r+0x24>
 8007204:	bd38      	pop	{r3, r4, r5, pc}
 8007206:	0799      	lsls	r1, r3, #30
 8007208:	bf58      	it	pl
 800720a:	6962      	ldrpl	r2, [r4, #20]
 800720c:	60a2      	str	r2, [r4, #8]
 800720e:	e7f4      	b.n	80071fa <__swsetup_r+0x8e>
 8007210:	2000      	movs	r0, #0
 8007212:	e7f7      	b.n	8007204 <__swsetup_r+0x98>
 8007214:	2000001c 	.word	0x2000001c

08007218 <memset>:
 8007218:	4402      	add	r2, r0
 800721a:	4603      	mov	r3, r0
 800721c:	4293      	cmp	r3, r2
 800721e:	d100      	bne.n	8007222 <memset+0xa>
 8007220:	4770      	bx	lr
 8007222:	f803 1b01 	strb.w	r1, [r3], #1
 8007226:	e7f9      	b.n	800721c <memset+0x4>

08007228 <_close_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d06      	ldr	r5, [pc, #24]	@ (8007244 <_close_r+0x1c>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7f9 fca8 	bl	8000b88 <_close>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_close_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_close_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20001c50 	.word	0x20001c50

08007248 <_reclaim_reent>:
 8007248:	4b29      	ldr	r3, [pc, #164]	@ (80072f0 <_reclaim_reent+0xa8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4283      	cmp	r3, r0
 800724e:	b570      	push	{r4, r5, r6, lr}
 8007250:	4604      	mov	r4, r0
 8007252:	d04b      	beq.n	80072ec <_reclaim_reent+0xa4>
 8007254:	69c3      	ldr	r3, [r0, #28]
 8007256:	b1ab      	cbz	r3, 8007284 <_reclaim_reent+0x3c>
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	b16b      	cbz	r3, 8007278 <_reclaim_reent+0x30>
 800725c:	2500      	movs	r5, #0
 800725e:	69e3      	ldr	r3, [r4, #28]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	5959      	ldr	r1, [r3, r5]
 8007264:	2900      	cmp	r1, #0
 8007266:	d13b      	bne.n	80072e0 <_reclaim_reent+0x98>
 8007268:	3504      	adds	r5, #4
 800726a:	2d80      	cmp	r5, #128	@ 0x80
 800726c:	d1f7      	bne.n	800725e <_reclaim_reent+0x16>
 800726e:	69e3      	ldr	r3, [r4, #28]
 8007270:	4620      	mov	r0, r4
 8007272:	68d9      	ldr	r1, [r3, #12]
 8007274:	f000 f8b0 	bl	80073d8 <_free_r>
 8007278:	69e3      	ldr	r3, [r4, #28]
 800727a:	6819      	ldr	r1, [r3, #0]
 800727c:	b111      	cbz	r1, 8007284 <_reclaim_reent+0x3c>
 800727e:	4620      	mov	r0, r4
 8007280:	f000 f8aa 	bl	80073d8 <_free_r>
 8007284:	6961      	ldr	r1, [r4, #20]
 8007286:	b111      	cbz	r1, 800728e <_reclaim_reent+0x46>
 8007288:	4620      	mov	r0, r4
 800728a:	f000 f8a5 	bl	80073d8 <_free_r>
 800728e:	69e1      	ldr	r1, [r4, #28]
 8007290:	b111      	cbz	r1, 8007298 <_reclaim_reent+0x50>
 8007292:	4620      	mov	r0, r4
 8007294:	f000 f8a0 	bl	80073d8 <_free_r>
 8007298:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800729a:	b111      	cbz	r1, 80072a2 <_reclaim_reent+0x5a>
 800729c:	4620      	mov	r0, r4
 800729e:	f000 f89b 	bl	80073d8 <_free_r>
 80072a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072a4:	b111      	cbz	r1, 80072ac <_reclaim_reent+0x64>
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 f896 	bl	80073d8 <_free_r>
 80072ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80072ae:	b111      	cbz	r1, 80072b6 <_reclaim_reent+0x6e>
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f891 	bl	80073d8 <_free_r>
 80072b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80072b8:	b111      	cbz	r1, 80072c0 <_reclaim_reent+0x78>
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 f88c 	bl	80073d8 <_free_r>
 80072c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80072c2:	b111      	cbz	r1, 80072ca <_reclaim_reent+0x82>
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 f887 	bl	80073d8 <_free_r>
 80072ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80072cc:	b111      	cbz	r1, 80072d4 <_reclaim_reent+0x8c>
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f882 	bl	80073d8 <_free_r>
 80072d4:	6a23      	ldr	r3, [r4, #32]
 80072d6:	b14b      	cbz	r3, 80072ec <_reclaim_reent+0xa4>
 80072d8:	4620      	mov	r0, r4
 80072da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072de:	4718      	bx	r3
 80072e0:	680e      	ldr	r6, [r1, #0]
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 f878 	bl	80073d8 <_free_r>
 80072e8:	4631      	mov	r1, r6
 80072ea:	e7bb      	b.n	8007264 <_reclaim_reent+0x1c>
 80072ec:	bd70      	pop	{r4, r5, r6, pc}
 80072ee:	bf00      	nop
 80072f0:	2000001c 	.word	0x2000001c

080072f4 <_lseek_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d07      	ldr	r5, [pc, #28]	@ (8007314 <_lseek_r+0x20>)
 80072f8:	4604      	mov	r4, r0
 80072fa:	4608      	mov	r0, r1
 80072fc:	4611      	mov	r1, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	602a      	str	r2, [r5, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	f7f9 fc67 	bl	8000bd6 <_lseek>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_lseek_r+0x1e>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_lseek_r+0x1e>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	20001c50 	.word	0x20001c50

08007318 <_read_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d07      	ldr	r5, [pc, #28]	@ (8007338 <_read_r+0x20>)
 800731c:	4604      	mov	r4, r0
 800731e:	4608      	mov	r0, r1
 8007320:	4611      	mov	r1, r2
 8007322:	2200      	movs	r2, #0
 8007324:	602a      	str	r2, [r5, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	f7f9 fbfa 	bl	8000b20 <_read>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_read_r+0x1e>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_read_r+0x1e>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	20001c50 	.word	0x20001c50

0800733c <_write_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d07      	ldr	r5, [pc, #28]	@ (800735c <_write_r+0x20>)
 8007340:	4604      	mov	r4, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7f9 fc06 	bl	8000b5c <_write>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_write_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_write_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20001c50 	.word	0x20001c50

08007360 <__errno>:
 8007360:	4b01      	ldr	r3, [pc, #4]	@ (8007368 <__errno+0x8>)
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	2000001c 	.word	0x2000001c

0800736c <__libc_init_array>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4d0d      	ldr	r5, [pc, #52]	@ (80073a4 <__libc_init_array+0x38>)
 8007370:	4c0d      	ldr	r4, [pc, #52]	@ (80073a8 <__libc_init_array+0x3c>)
 8007372:	1b64      	subs	r4, r4, r5
 8007374:	10a4      	asrs	r4, r4, #2
 8007376:	2600      	movs	r6, #0
 8007378:	42a6      	cmp	r6, r4
 800737a:	d109      	bne.n	8007390 <__libc_init_array+0x24>
 800737c:	4d0b      	ldr	r5, [pc, #44]	@ (80073ac <__libc_init_array+0x40>)
 800737e:	4c0c      	ldr	r4, [pc, #48]	@ (80073b0 <__libc_init_array+0x44>)
 8007380:	f000 fa62 	bl	8007848 <_init>
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	2600      	movs	r6, #0
 800738a:	42a6      	cmp	r6, r4
 800738c:	d105      	bne.n	800739a <__libc_init_array+0x2e>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	f855 3b04 	ldr.w	r3, [r5], #4
 8007394:	4798      	blx	r3
 8007396:	3601      	adds	r6, #1
 8007398:	e7ee      	b.n	8007378 <__libc_init_array+0xc>
 800739a:	f855 3b04 	ldr.w	r3, [r5], #4
 800739e:	4798      	blx	r3
 80073a0:	3601      	adds	r6, #1
 80073a2:	e7f2      	b.n	800738a <__libc_init_array+0x1e>
 80073a4:	080079cc 	.word	0x080079cc
 80073a8:	080079cc 	.word	0x080079cc
 80073ac:	080079cc 	.word	0x080079cc
 80073b0:	080079d0 	.word	0x080079d0

080073b4 <__retarget_lock_init_recursive>:
 80073b4:	4770      	bx	lr

080073b6 <__retarget_lock_acquire_recursive>:
 80073b6:	4770      	bx	lr

080073b8 <__retarget_lock_release_recursive>:
 80073b8:	4770      	bx	lr

080073ba <memcpy>:
 80073ba:	440a      	add	r2, r1
 80073bc:	4291      	cmp	r1, r2
 80073be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80073c2:	d100      	bne.n	80073c6 <memcpy+0xc>
 80073c4:	4770      	bx	lr
 80073c6:	b510      	push	{r4, lr}
 80073c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d0:	4291      	cmp	r1, r2
 80073d2:	d1f9      	bne.n	80073c8 <memcpy+0xe>
 80073d4:	bd10      	pop	{r4, pc}
	...

080073d8 <_free_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4605      	mov	r5, r0
 80073dc:	2900      	cmp	r1, #0
 80073de:	d041      	beq.n	8007464 <_free_r+0x8c>
 80073e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e4:	1f0c      	subs	r4, r1, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bfb8      	it	lt
 80073ea:	18e4      	addlt	r4, r4, r3
 80073ec:	f000 f8e0 	bl	80075b0 <__malloc_lock>
 80073f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007468 <_free_r+0x90>)
 80073f2:	6813      	ldr	r3, [r2, #0]
 80073f4:	b933      	cbnz	r3, 8007404 <_free_r+0x2c>
 80073f6:	6063      	str	r3, [r4, #4]
 80073f8:	6014      	str	r4, [r2, #0]
 80073fa:	4628      	mov	r0, r5
 80073fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007400:	f000 b8dc 	b.w	80075bc <__malloc_unlock>
 8007404:	42a3      	cmp	r3, r4
 8007406:	d908      	bls.n	800741a <_free_r+0x42>
 8007408:	6820      	ldr	r0, [r4, #0]
 800740a:	1821      	adds	r1, r4, r0
 800740c:	428b      	cmp	r3, r1
 800740e:	bf01      	itttt	eq
 8007410:	6819      	ldreq	r1, [r3, #0]
 8007412:	685b      	ldreq	r3, [r3, #4]
 8007414:	1809      	addeq	r1, r1, r0
 8007416:	6021      	streq	r1, [r4, #0]
 8007418:	e7ed      	b.n	80073f6 <_free_r+0x1e>
 800741a:	461a      	mov	r2, r3
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	b10b      	cbz	r3, 8007424 <_free_r+0x4c>
 8007420:	42a3      	cmp	r3, r4
 8007422:	d9fa      	bls.n	800741a <_free_r+0x42>
 8007424:	6811      	ldr	r1, [r2, #0]
 8007426:	1850      	adds	r0, r2, r1
 8007428:	42a0      	cmp	r0, r4
 800742a:	d10b      	bne.n	8007444 <_free_r+0x6c>
 800742c:	6820      	ldr	r0, [r4, #0]
 800742e:	4401      	add	r1, r0
 8007430:	1850      	adds	r0, r2, r1
 8007432:	4283      	cmp	r3, r0
 8007434:	6011      	str	r1, [r2, #0]
 8007436:	d1e0      	bne.n	80073fa <_free_r+0x22>
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	6053      	str	r3, [r2, #4]
 800743e:	4408      	add	r0, r1
 8007440:	6010      	str	r0, [r2, #0]
 8007442:	e7da      	b.n	80073fa <_free_r+0x22>
 8007444:	d902      	bls.n	800744c <_free_r+0x74>
 8007446:	230c      	movs	r3, #12
 8007448:	602b      	str	r3, [r5, #0]
 800744a:	e7d6      	b.n	80073fa <_free_r+0x22>
 800744c:	6820      	ldr	r0, [r4, #0]
 800744e:	1821      	adds	r1, r4, r0
 8007450:	428b      	cmp	r3, r1
 8007452:	bf04      	itt	eq
 8007454:	6819      	ldreq	r1, [r3, #0]
 8007456:	685b      	ldreq	r3, [r3, #4]
 8007458:	6063      	str	r3, [r4, #4]
 800745a:	bf04      	itt	eq
 800745c:	1809      	addeq	r1, r1, r0
 800745e:	6021      	streq	r1, [r4, #0]
 8007460:	6054      	str	r4, [r2, #4]
 8007462:	e7ca      	b.n	80073fa <_free_r+0x22>
 8007464:	bd38      	pop	{r3, r4, r5, pc}
 8007466:	bf00      	nop
 8007468:	20001c5c 	.word	0x20001c5c

0800746c <sbrk_aligned>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	4e0f      	ldr	r6, [pc, #60]	@ (80074ac <sbrk_aligned+0x40>)
 8007470:	460c      	mov	r4, r1
 8007472:	6831      	ldr	r1, [r6, #0]
 8007474:	4605      	mov	r5, r0
 8007476:	b911      	cbnz	r1, 800747e <sbrk_aligned+0x12>
 8007478:	f000 f9d6 	bl	8007828 <_sbrk_r>
 800747c:	6030      	str	r0, [r6, #0]
 800747e:	4621      	mov	r1, r4
 8007480:	4628      	mov	r0, r5
 8007482:	f000 f9d1 	bl	8007828 <_sbrk_r>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	d103      	bne.n	8007492 <sbrk_aligned+0x26>
 800748a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800748e:	4620      	mov	r0, r4
 8007490:	bd70      	pop	{r4, r5, r6, pc}
 8007492:	1cc4      	adds	r4, r0, #3
 8007494:	f024 0403 	bic.w	r4, r4, #3
 8007498:	42a0      	cmp	r0, r4
 800749a:	d0f8      	beq.n	800748e <sbrk_aligned+0x22>
 800749c:	1a21      	subs	r1, r4, r0
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 f9c2 	bl	8007828 <_sbrk_r>
 80074a4:	3001      	adds	r0, #1
 80074a6:	d1f2      	bne.n	800748e <sbrk_aligned+0x22>
 80074a8:	e7ef      	b.n	800748a <sbrk_aligned+0x1e>
 80074aa:	bf00      	nop
 80074ac:	20001c58 	.word	0x20001c58

080074b0 <_malloc_r>:
 80074b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b4:	1ccd      	adds	r5, r1, #3
 80074b6:	f025 0503 	bic.w	r5, r5, #3
 80074ba:	3508      	adds	r5, #8
 80074bc:	2d0c      	cmp	r5, #12
 80074be:	bf38      	it	cc
 80074c0:	250c      	movcc	r5, #12
 80074c2:	2d00      	cmp	r5, #0
 80074c4:	4606      	mov	r6, r0
 80074c6:	db01      	blt.n	80074cc <_malloc_r+0x1c>
 80074c8:	42a9      	cmp	r1, r5
 80074ca:	d904      	bls.n	80074d6 <_malloc_r+0x26>
 80074cc:	230c      	movs	r3, #12
 80074ce:	6033      	str	r3, [r6, #0]
 80074d0:	2000      	movs	r0, #0
 80074d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075ac <_malloc_r+0xfc>
 80074da:	f000 f869 	bl	80075b0 <__malloc_lock>
 80074de:	f8d8 3000 	ldr.w	r3, [r8]
 80074e2:	461c      	mov	r4, r3
 80074e4:	bb44      	cbnz	r4, 8007538 <_malloc_r+0x88>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff ffbf 	bl	800746c <sbrk_aligned>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	4604      	mov	r4, r0
 80074f2:	d158      	bne.n	80075a6 <_malloc_r+0xf6>
 80074f4:	f8d8 4000 	ldr.w	r4, [r8]
 80074f8:	4627      	mov	r7, r4
 80074fa:	2f00      	cmp	r7, #0
 80074fc:	d143      	bne.n	8007586 <_malloc_r+0xd6>
 80074fe:	2c00      	cmp	r4, #0
 8007500:	d04b      	beq.n	800759a <_malloc_r+0xea>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	4639      	mov	r1, r7
 8007506:	4630      	mov	r0, r6
 8007508:	eb04 0903 	add.w	r9, r4, r3
 800750c:	f000 f98c 	bl	8007828 <_sbrk_r>
 8007510:	4581      	cmp	r9, r0
 8007512:	d142      	bne.n	800759a <_malloc_r+0xea>
 8007514:	6821      	ldr	r1, [r4, #0]
 8007516:	1a6d      	subs	r5, r5, r1
 8007518:	4629      	mov	r1, r5
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff ffa6 	bl	800746c <sbrk_aligned>
 8007520:	3001      	adds	r0, #1
 8007522:	d03a      	beq.n	800759a <_malloc_r+0xea>
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	442b      	add	r3, r5
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	f8d8 3000 	ldr.w	r3, [r8]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	bb62      	cbnz	r2, 800758c <_malloc_r+0xdc>
 8007532:	f8c8 7000 	str.w	r7, [r8]
 8007536:	e00f      	b.n	8007558 <_malloc_r+0xa8>
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	1b52      	subs	r2, r2, r5
 800753c:	d420      	bmi.n	8007580 <_malloc_r+0xd0>
 800753e:	2a0b      	cmp	r2, #11
 8007540:	d917      	bls.n	8007572 <_malloc_r+0xc2>
 8007542:	1961      	adds	r1, r4, r5
 8007544:	42a3      	cmp	r3, r4
 8007546:	6025      	str	r5, [r4, #0]
 8007548:	bf18      	it	ne
 800754a:	6059      	strne	r1, [r3, #4]
 800754c:	6863      	ldr	r3, [r4, #4]
 800754e:	bf08      	it	eq
 8007550:	f8c8 1000 	streq.w	r1, [r8]
 8007554:	5162      	str	r2, [r4, r5]
 8007556:	604b      	str	r3, [r1, #4]
 8007558:	4630      	mov	r0, r6
 800755a:	f000 f82f 	bl	80075bc <__malloc_unlock>
 800755e:	f104 000b 	add.w	r0, r4, #11
 8007562:	1d23      	adds	r3, r4, #4
 8007564:	f020 0007 	bic.w	r0, r0, #7
 8007568:	1ac2      	subs	r2, r0, r3
 800756a:	bf1c      	itt	ne
 800756c:	1a1b      	subne	r3, r3, r0
 800756e:	50a3      	strne	r3, [r4, r2]
 8007570:	e7af      	b.n	80074d2 <_malloc_r+0x22>
 8007572:	6862      	ldr	r2, [r4, #4]
 8007574:	42a3      	cmp	r3, r4
 8007576:	bf0c      	ite	eq
 8007578:	f8c8 2000 	streq.w	r2, [r8]
 800757c:	605a      	strne	r2, [r3, #4]
 800757e:	e7eb      	b.n	8007558 <_malloc_r+0xa8>
 8007580:	4623      	mov	r3, r4
 8007582:	6864      	ldr	r4, [r4, #4]
 8007584:	e7ae      	b.n	80074e4 <_malloc_r+0x34>
 8007586:	463c      	mov	r4, r7
 8007588:	687f      	ldr	r7, [r7, #4]
 800758a:	e7b6      	b.n	80074fa <_malloc_r+0x4a>
 800758c:	461a      	mov	r2, r3
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	42a3      	cmp	r3, r4
 8007592:	d1fb      	bne.n	800758c <_malloc_r+0xdc>
 8007594:	2300      	movs	r3, #0
 8007596:	6053      	str	r3, [r2, #4]
 8007598:	e7de      	b.n	8007558 <_malloc_r+0xa8>
 800759a:	230c      	movs	r3, #12
 800759c:	6033      	str	r3, [r6, #0]
 800759e:	4630      	mov	r0, r6
 80075a0:	f000 f80c 	bl	80075bc <__malloc_unlock>
 80075a4:	e794      	b.n	80074d0 <_malloc_r+0x20>
 80075a6:	6005      	str	r5, [r0, #0]
 80075a8:	e7d6      	b.n	8007558 <_malloc_r+0xa8>
 80075aa:	bf00      	nop
 80075ac:	20001c5c 	.word	0x20001c5c

080075b0 <__malloc_lock>:
 80075b0:	4801      	ldr	r0, [pc, #4]	@ (80075b8 <__malloc_lock+0x8>)
 80075b2:	f7ff bf00 	b.w	80073b6 <__retarget_lock_acquire_recursive>
 80075b6:	bf00      	nop
 80075b8:	20001c54 	.word	0x20001c54

080075bc <__malloc_unlock>:
 80075bc:	4801      	ldr	r0, [pc, #4]	@ (80075c4 <__malloc_unlock+0x8>)
 80075be:	f7ff befb 	b.w	80073b8 <__retarget_lock_release_recursive>
 80075c2:	bf00      	nop
 80075c4:	20001c54 	.word	0x20001c54

080075c8 <__sflush_r>:
 80075c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	0716      	lsls	r6, r2, #28
 80075d2:	4605      	mov	r5, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	d454      	bmi.n	8007682 <__sflush_r+0xba>
 80075d8:	684b      	ldr	r3, [r1, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dc02      	bgt.n	80075e4 <__sflush_r+0x1c>
 80075de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dd48      	ble.n	8007676 <__sflush_r+0xae>
 80075e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	d045      	beq.n	8007676 <__sflush_r+0xae>
 80075ea:	2300      	movs	r3, #0
 80075ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075f0:	682f      	ldr	r7, [r5, #0]
 80075f2:	6a21      	ldr	r1, [r4, #32]
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	d030      	beq.n	800765a <__sflush_r+0x92>
 80075f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	0759      	lsls	r1, r3, #29
 80075fe:	d505      	bpl.n	800760c <__sflush_r+0x44>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007606:	b10b      	cbz	r3, 800760c <__sflush_r+0x44>
 8007608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007610:	6a21      	ldr	r1, [r4, #32]
 8007612:	4628      	mov	r0, r5
 8007614:	47b0      	blx	r6
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	d106      	bne.n	800762a <__sflush_r+0x62>
 800761c:	6829      	ldr	r1, [r5, #0]
 800761e:	291d      	cmp	r1, #29
 8007620:	d82b      	bhi.n	800767a <__sflush_r+0xb2>
 8007622:	4a2a      	ldr	r2, [pc, #168]	@ (80076cc <__sflush_r+0x104>)
 8007624:	410a      	asrs	r2, r1
 8007626:	07d6      	lsls	r6, r2, #31
 8007628:	d427      	bmi.n	800767a <__sflush_r+0xb2>
 800762a:	2200      	movs	r2, #0
 800762c:	6062      	str	r2, [r4, #4]
 800762e:	04d9      	lsls	r1, r3, #19
 8007630:	6922      	ldr	r2, [r4, #16]
 8007632:	6022      	str	r2, [r4, #0]
 8007634:	d504      	bpl.n	8007640 <__sflush_r+0x78>
 8007636:	1c42      	adds	r2, r0, #1
 8007638:	d101      	bne.n	800763e <__sflush_r+0x76>
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	b903      	cbnz	r3, 8007640 <__sflush_r+0x78>
 800763e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007642:	602f      	str	r7, [r5, #0]
 8007644:	b1b9      	cbz	r1, 8007676 <__sflush_r+0xae>
 8007646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800764a:	4299      	cmp	r1, r3
 800764c:	d002      	beq.n	8007654 <__sflush_r+0x8c>
 800764e:	4628      	mov	r0, r5
 8007650:	f7ff fec2 	bl	80073d8 <_free_r>
 8007654:	2300      	movs	r3, #0
 8007656:	6363      	str	r3, [r4, #52]	@ 0x34
 8007658:	e00d      	b.n	8007676 <__sflush_r+0xae>
 800765a:	2301      	movs	r3, #1
 800765c:	4628      	mov	r0, r5
 800765e:	47b0      	blx	r6
 8007660:	4602      	mov	r2, r0
 8007662:	1c50      	adds	r0, r2, #1
 8007664:	d1c9      	bne.n	80075fa <__sflush_r+0x32>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0c6      	beq.n	80075fa <__sflush_r+0x32>
 800766c:	2b1d      	cmp	r3, #29
 800766e:	d001      	beq.n	8007674 <__sflush_r+0xac>
 8007670:	2b16      	cmp	r3, #22
 8007672:	d11e      	bne.n	80076b2 <__sflush_r+0xea>
 8007674:	602f      	str	r7, [r5, #0]
 8007676:	2000      	movs	r0, #0
 8007678:	e022      	b.n	80076c0 <__sflush_r+0xf8>
 800767a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800767e:	b21b      	sxth	r3, r3
 8007680:	e01b      	b.n	80076ba <__sflush_r+0xf2>
 8007682:	690f      	ldr	r7, [r1, #16]
 8007684:	2f00      	cmp	r7, #0
 8007686:	d0f6      	beq.n	8007676 <__sflush_r+0xae>
 8007688:	0793      	lsls	r3, r2, #30
 800768a:	680e      	ldr	r6, [r1, #0]
 800768c:	bf08      	it	eq
 800768e:	694b      	ldreq	r3, [r1, #20]
 8007690:	600f      	str	r7, [r1, #0]
 8007692:	bf18      	it	ne
 8007694:	2300      	movne	r3, #0
 8007696:	eba6 0807 	sub.w	r8, r6, r7
 800769a:	608b      	str	r3, [r1, #8]
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	dde9      	ble.n	8007676 <__sflush_r+0xae>
 80076a2:	6a21      	ldr	r1, [r4, #32]
 80076a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076a6:	4643      	mov	r3, r8
 80076a8:	463a      	mov	r2, r7
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b0      	blx	r6
 80076ae:	2800      	cmp	r0, #0
 80076b0:	dc08      	bgt.n	80076c4 <__sflush_r+0xfc>
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	4407      	add	r7, r0
 80076c6:	eba8 0800 	sub.w	r8, r8, r0
 80076ca:	e7e7      	b.n	800769c <__sflush_r+0xd4>
 80076cc:	dfbffffe 	.word	0xdfbffffe

080076d0 <_fflush_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	690b      	ldr	r3, [r1, #16]
 80076d4:	4605      	mov	r5, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	b913      	cbnz	r3, 80076e0 <_fflush_r+0x10>
 80076da:	2500      	movs	r5, #0
 80076dc:	4628      	mov	r0, r5
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	b118      	cbz	r0, 80076ea <_fflush_r+0x1a>
 80076e2:	6a03      	ldr	r3, [r0, #32]
 80076e4:	b90b      	cbnz	r3, 80076ea <_fflush_r+0x1a>
 80076e6:	f7ff fc2b 	bl	8006f40 <__sinit>
 80076ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f3      	beq.n	80076da <_fflush_r+0xa>
 80076f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076f4:	07d0      	lsls	r0, r2, #31
 80076f6:	d404      	bmi.n	8007702 <_fflush_r+0x32>
 80076f8:	0599      	lsls	r1, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_fflush_r+0x32>
 80076fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076fe:	f7ff fe5a 	bl	80073b6 <__retarget_lock_acquire_recursive>
 8007702:	4628      	mov	r0, r5
 8007704:	4621      	mov	r1, r4
 8007706:	f7ff ff5f 	bl	80075c8 <__sflush_r>
 800770a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800770c:	07da      	lsls	r2, r3, #31
 800770e:	4605      	mov	r5, r0
 8007710:	d4e4      	bmi.n	80076dc <_fflush_r+0xc>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	059b      	lsls	r3, r3, #22
 8007716:	d4e1      	bmi.n	80076dc <_fflush_r+0xc>
 8007718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800771a:	f7ff fe4d 	bl	80073b8 <__retarget_lock_release_recursive>
 800771e:	e7dd      	b.n	80076dc <_fflush_r+0xc>

08007720 <__swhatbuf_r>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	2900      	cmp	r1, #0
 800772a:	b096      	sub	sp, #88	@ 0x58
 800772c:	4615      	mov	r5, r2
 800772e:	461e      	mov	r6, r3
 8007730:	da0d      	bge.n	800774e <__swhatbuf_r+0x2e>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007738:	f04f 0100 	mov.w	r1, #0
 800773c:	bf14      	ite	ne
 800773e:	2340      	movne	r3, #64	@ 0x40
 8007740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007744:	2000      	movs	r0, #0
 8007746:	6031      	str	r1, [r6, #0]
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	b016      	add	sp, #88	@ 0x58
 800774c:	bd70      	pop	{r4, r5, r6, pc}
 800774e:	466a      	mov	r2, sp
 8007750:	f000 f848 	bl	80077e4 <_fstat_r>
 8007754:	2800      	cmp	r0, #0
 8007756:	dbec      	blt.n	8007732 <__swhatbuf_r+0x12>
 8007758:	9901      	ldr	r1, [sp, #4]
 800775a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800775e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007762:	4259      	negs	r1, r3
 8007764:	4159      	adcs	r1, r3
 8007766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800776a:	e7eb      	b.n	8007744 <__swhatbuf_r+0x24>

0800776c <__smakebuf_r>:
 800776c:	898b      	ldrh	r3, [r1, #12]
 800776e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007770:	079d      	lsls	r5, r3, #30
 8007772:	4606      	mov	r6, r0
 8007774:	460c      	mov	r4, r1
 8007776:	d507      	bpl.n	8007788 <__smakebuf_r+0x1c>
 8007778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	6123      	str	r3, [r4, #16]
 8007780:	2301      	movs	r3, #1
 8007782:	6163      	str	r3, [r4, #20]
 8007784:	b003      	add	sp, #12
 8007786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007788:	ab01      	add	r3, sp, #4
 800778a:	466a      	mov	r2, sp
 800778c:	f7ff ffc8 	bl	8007720 <__swhatbuf_r>
 8007790:	9f00      	ldr	r7, [sp, #0]
 8007792:	4605      	mov	r5, r0
 8007794:	4639      	mov	r1, r7
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff fe8a 	bl	80074b0 <_malloc_r>
 800779c:	b948      	cbnz	r0, 80077b2 <__smakebuf_r+0x46>
 800779e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a2:	059a      	lsls	r2, r3, #22
 80077a4:	d4ee      	bmi.n	8007784 <__smakebuf_r+0x18>
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	f043 0302 	orr.w	r3, r3, #2
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	e7e2      	b.n	8007778 <__smakebuf_r+0xc>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	6020      	str	r0, [r4, #0]
 80077b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	9b01      	ldr	r3, [sp, #4]
 80077be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077c2:	b15b      	cbz	r3, 80077dc <__smakebuf_r+0x70>
 80077c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 f81d 	bl	8007808 <_isatty_r>
 80077ce:	b128      	cbz	r0, 80077dc <__smakebuf_r+0x70>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	f043 0301 	orr.w	r3, r3, #1
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	431d      	orrs	r5, r3
 80077e0:	81a5      	strh	r5, [r4, #12]
 80077e2:	e7cf      	b.n	8007784 <__smakebuf_r+0x18>

080077e4 <_fstat_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d07      	ldr	r5, [pc, #28]	@ (8007804 <_fstat_r+0x20>)
 80077e8:	2300      	movs	r3, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	4611      	mov	r1, r2
 80077f0:	602b      	str	r3, [r5, #0]
 80077f2:	f7f9 f9d5 	bl	8000ba0 <_fstat>
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	d102      	bne.n	8007800 <_fstat_r+0x1c>
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	b103      	cbz	r3, 8007800 <_fstat_r+0x1c>
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	bd38      	pop	{r3, r4, r5, pc}
 8007802:	bf00      	nop
 8007804:	20001c50 	.word	0x20001c50

08007808 <_isatty_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d06      	ldr	r5, [pc, #24]	@ (8007824 <_isatty_r+0x1c>)
 800780c:	2300      	movs	r3, #0
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	f7f9 f9d4 	bl	8000bc0 <_isatty>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_isatty_r+0x1a>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_isatty_r+0x1a>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20001c50 	.word	0x20001c50

08007828 <_sbrk_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d06      	ldr	r5, [pc, #24]	@ (8007844 <_sbrk_r+0x1c>)
 800782c:	2300      	movs	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7f9 f9dc 	bl	8000bf0 <_sbrk>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_sbrk_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_sbrk_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	20001c50 	.word	0x20001c50

08007848 <_init>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr

08007854 <_fini>:
 8007854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007856:	bf00      	nop
 8007858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785a:	bc08      	pop	{r3}
 800785c:	469e      	mov	lr, r3
 800785e:	4770      	bx	lr
