
10_FreeRTOS_Binary_Semaphore_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007b60  08007b60  00008b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d74  08007d74  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d74  08007d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d7c  08007d7c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d7c  08007d7c  00008d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d80  08007d80  00008d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007d84  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  2000006c  08007df0  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  08007df0  00009c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1b3  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c1  00000000  00000000  0002524f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00028b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001231  00000000  00000000  0002a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004978  00000000  00000000  0002b4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193ac  00000000  00000000  0002fe29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f3dc  00000000  00000000  000491d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001585b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006914  00000000  00000000  001585f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015ef08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b48 	.word	0x08007b48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007b48 	.word	0x08007b48

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fbdf 	bl	8000ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f840 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8bc 	bl	8000668 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f0:	f000 f88e 	bl	8000610 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f003 fb18 	bl	8003b28 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem */
  BinarySemHandle = osSemaphoreNew(1, 1, &BinarySem_attributes);
 80004f8:	4a11      	ldr	r2, [pc, #68]	@ (8000540 <main+0x60>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	2001      	movs	r0, #1
 80004fe:	f003 fc0a 	bl	8003d16 <osSemaphoreNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a0f      	ldr	r2, [pc, #60]	@ (8000544 <main+0x64>)
 8000506:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Normal_Task */
  Normal_TaskHandle = osThreadNew(Start_Normal_Task, NULL, &Normal_Task_attributes);
 8000508:	4a0f      	ldr	r2, [pc, #60]	@ (8000548 <main+0x68>)
 800050a:	2100      	movs	r1, #0
 800050c:	480f      	ldr	r0, [pc, #60]	@ (800054c <main+0x6c>)
 800050e:	f003 fb55 	bl	8003bbc <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <main+0x70>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of High_Task */
  High_TaskHandle = osThreadNew(Start_High_Task, NULL, &High_Task_attributes);
 8000518:	4a0e      	ldr	r2, [pc, #56]	@ (8000554 <main+0x74>)
 800051a:	2100      	movs	r1, #0
 800051c:	480e      	ldr	r0, [pc, #56]	@ (8000558 <main+0x78>)
 800051e:	f003 fb4d 	bl	8003bbc <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <main+0x7c>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of Low_Task */
  Low_TaskHandle = osThreadNew(Start_Low_Task, NULL, &Low_Task_attributes);
 8000528:	4a0d      	ldr	r2, [pc, #52]	@ (8000560 <main+0x80>)
 800052a:	2100      	movs	r1, #0
 800052c:	480d      	ldr	r0, [pc, #52]	@ (8000564 <main+0x84>)
 800052e:	f003 fb45 	bl	8003bbc <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <main+0x88>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f003 fb1a 	bl	8003b70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <main+0x5c>
 8000540:	08007d1c 	.word	0x08007d1c
 8000544:	2000011c 	.word	0x2000011c
 8000548:	08007cb0 	.word	0x08007cb0
 800054c:	08000799 	.word	0x08000799
 8000550:	20000110 	.word	0x20000110
 8000554:	08007cd4 	.word	0x08007cd4
 8000558:	080007e1 	.word	0x080007e1
 800055c:	20000114 	.word	0x20000114
 8000560:	08007cf8 	.word	0x08007cf8
 8000564:	0800083d 	.word	0x0800083d
 8000568:	20000118 	.word	0x20000118

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	@ 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	@ 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 ffcc 	bl	8007518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000592:	f000 fe73 	bl	800127c <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f974 	bl	8000888 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2340      	movs	r3, #64	@ 0x40
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ba:	230a      	movs	r3, #10
 80005bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 feba 	bl	8001348 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005da:	f000 f955 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	2104      	movs	r1, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fabf 	bl	8001b7c <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000604:	f000 f940 	bl	8000888 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3758      	adds	r7, #88	@ 0x58
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_LPUART1_UART_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_LPUART1_UART_Init+0x50>)
 800064e:	f002 fc7b 	bl	8002f48 <HAL_UART_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f916 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000088 	.word	0x20000088
 8000664:	40008000 	.word	0x40008000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <MX_GPIO_Init+0xd4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a2e      	ldr	r2, [pc, #184]	@ (800073c <MX_GPIO_Init+0xd4>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <MX_GPIO_Init+0xd4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_GPIO_Init+0xd4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	4a28      	ldr	r2, [pc, #160]	@ (800073c <MX_GPIO_Init+0xd4>)
 800069c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80006ae:	f000 fe3b 	bl	8001328 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b22      	ldr	r3, [pc, #136]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a21      	ldr	r2, [pc, #132]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	4816      	ldr	r0, [pc, #88]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006e8:	f000 fd8a 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_BUTTON_Pin */
  GPIO_InitStruct.Pin = BSP_BUTTON_Pin;
 80006ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	4810      	ldr	r0, [pc, #64]	@ (8000744 <MX_GPIO_Init+0xdc>)
 8000704:	f000 fbea 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000708:	2380      	movs	r3, #128	@ 0x80
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4808      	ldr	r0, [pc, #32]	@ (8000740 <MX_GPIO_Init+0xd8>)
 8000720:	f000 fbdc 	bl	8000edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2105      	movs	r1, #5
 8000728:	2028      	movs	r0, #40	@ 0x28
 800072a:	f000 fbad 	bl	8000e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800072e:	2028      	movs	r0, #40	@ 0x28
 8000730:	f000 fbc6 	bl	8000ec0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	@ 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	48000400 	.word	0x48000400
 8000744:	48000800 	.word	0x48000800

08000748 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000758:	d114      	bne.n	8000784 <HAL_GPIO_EXTI_Callback+0x3c>
  {
	  uint32_t current_time = HAL_GetTick(); // Get the current time in milliseconds
 800075a:	f000 fad1 	bl	8000d00 <HAL_GetTick>
 800075e:	60f8      	str	r0, [r7, #12]

	      // Check if the debounce time has passed
	      if ((current_time - last_debounce_time) >= debounce_delay)
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <HAL_GPIO_EXTI_Callback+0x44>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	22c8      	movs	r2, #200	@ 0xc8
 800076a:	4293      	cmp	r3, r2
 800076c:	d30a      	bcc.n	8000784 <HAL_GPIO_EXTI_Callback+0x3c>
	      {
	        osSemaphoreRelease(BinarySemHandle);
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_GPIO_EXTI_Callback+0x48>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fbaa 	bl	8003ecc <osSemaphoreRelease>
	        printf("\r\nNormal Task: Semaphore released, task completed.\r\n");
 8000778:	4806      	ldr	r0, [pc, #24]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x4c>)
 800077a:	f006 fded 	bl	8007358 <puts>
	        // Update the last debounce time
	        last_debounce_time = current_time;
 800077e:	4a03      	ldr	r2, [pc, #12]	@ (800078c <HAL_GPIO_EXTI_Callback+0x44>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6013      	str	r3, [r2, #0]
	      }
  }
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000120 	.word	0x20000120
 8000790:	2000011c 	.word	0x2000011c
 8000794:	08007b90 	.word	0x08007b90

08000798 <Start_Normal_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Normal_Task */
void Start_Normal_Task(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <Start_Normal_Task+0x3c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fb3d 	bl	8003e28 <osSemaphoreAcquire>

	    printf("\r\nNormal Task: Semaphore acquired, performing task...\r\n");
 80007ae:	480a      	ldr	r0, [pc, #40]	@ (80007d8 <Start_Normal_Task+0x40>)
 80007b0:	f006 fdd2 	bl	8007358 <puts>

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2180      	movs	r1, #128	@ 0x80
 80007b8:	4808      	ldr	r0, [pc, #32]	@ (80007dc <Start_Normal_Task+0x44>)
 80007ba:	f000 fd21 	bl	8001200 <HAL_GPIO_WritePin>
	    osDelay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c2:	f003 fa8d 	bl	8003ce0 <osDelay>
	    // for high task and continue to execute the low task

//	    osSemaphoreRelease(BinarySemHandle);
//	    printf("\r\nNormal Task: Semaphore released, task completed.\r\n");

	    osDelay(1000);  // Ensure some delay to avoid busy looping
 80007c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ca:	f003 fa89 	bl	8003ce0 <osDelay>
	    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 80007ce:	bf00      	nop
 80007d0:	e7e6      	b.n	80007a0 <Start_Normal_Task+0x8>
 80007d2:	bf00      	nop
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	08007bc4 	.word	0x08007bc4
 80007dc:	48000400 	.word	0x48000400

080007e0 <Start_High_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_High_Task */
void Start_High_Task(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_High_Task */
  /* Infinite loop */
  for(;;)
  {

	    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <Start_High_Task+0x4c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fb19 	bl	8003e28 <osSemaphoreAcquire>

	    printf("\r\nHigh Task: Semaphore acquired, performing task...\r\n");
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <Start_High_Task+0x50>)
 80007f8:	f006 fdae 	bl	8007358 <puts>

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2180      	movs	r1, #128	@ 0x80
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <Start_High_Task+0x54>)
 8000802:	f000 fcfd 	bl	8001200 <HAL_GPIO_WritePin>
	    osDelay(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080a:	f003 fa69 	bl	8003ce0 <osDelay>

	    // below line that release the semaphore
	    // if i comment this line it will not allow to acquire semaphore
	    // for normal task and continue to execute the low task

	    osSemaphoreRelease(BinarySemHandle);
 800080e:	4b07      	ldr	r3, [pc, #28]	@ (800082c <Start_High_Task+0x4c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fb5a 	bl	8003ecc <osSemaphoreRelease>
	    printf("\r\nHigh Task: Semaphore released, task completed.\r\n");
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <Start_High_Task+0x58>)
 800081a:	f006 fd9d 	bl	8007358 <puts>

	    osDelay(1000);
 800081e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000822:	f003 fa5d 	bl	8003ce0 <osDelay>
	    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 8000826:	bf00      	nop
 8000828:	e7de      	b.n	80007e8 <Start_High_Task+0x8>
 800082a:	bf00      	nop
 800082c:	2000011c 	.word	0x2000011c
 8000830:	08007bfc 	.word	0x08007bfc
 8000834:	48000400 	.word	0x48000400
 8000838:	08007c34 	.word	0x08007c34

0800083c <Start_Low_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Low_Task */
void Start_Low_Task(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Low_Task */
  /* Infinite loop */
  for(;;)
  {
	    printf("\r\nEntered into LOW TASK\r\n");
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <Start_Low_Task+0x20>)
 8000846:	f006 fd87 	bl	8007358 <puts>

	    printf("Leaving LOW TASK\r\n");
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <Start_Low_Task+0x24>)
 800084c:	f006 fd84 	bl	8007358 <puts>

	    osDelay(1000);
 8000850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000854:	f003 fa44 	bl	8003ce0 <osDelay>
	    printf("\r\nEntered into LOW TASK\r\n");
 8000858:	bf00      	nop
 800085a:	e7f3      	b.n	8000844 <Start_Low_Task+0x8>
 800085c:	08007c68 	.word	0x08007c68
 8000860:	08007c84 	.word	0x08007c84

08000864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d101      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000876:	f000 fa2f 	bl	8000cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40001000 	.word	0x40001000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <HAL_MspInit+0x4c>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	4a10      	ldr	r2, [pc, #64]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	210f      	movs	r1, #15
 80008ce:	f06f 0001 	mvn.w	r0, #1
 80008d2:	f000 fad9 	bl	8000e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0ac      	sub	sp, #176	@ 0xb0
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	228c      	movs	r2, #140	@ 0x8c
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f006 fe07 	bl	8007518 <memset>
  if(huart->Instance==LPUART1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a22      	ldr	r2, [pc, #136]	@ (8000998 <HAL_UART_MspInit+0xb4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d13d      	bne.n	8000990 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000914:	2320      	movs	r3, #32
 8000916:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000918:	2300      	movs	r3, #0
 800091a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fb81 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800092c:	f7ff ffac 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <HAL_UART_MspInit+0xb8>)
 8000932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000934:	4a19      	ldr	r2, [pc, #100]	@ (800099c <HAL_UART_MspInit+0xb8>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_UART_MspInit+0xb8>)
 800093e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_UART_MspInit+0xb8>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094c:	4a13      	ldr	r2, [pc, #76]	@ (800099c <HAL_UART_MspInit+0xb8>)
 800094e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_UART_MspInit+0xb8>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000960:	f000 fce2 	bl	8001328 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000964:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000968:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800097e:	2308      	movs	r3, #8
 8000980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000984:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <HAL_UART_MspInit+0xbc>)
 800098c:	f000 faa6 	bl	8000edc <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000990:	bf00      	nop
 8000992:	37b0      	adds	r7, #176	@ 0xb0
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40008000 	.word	0x40008000
 800099c:	40021000 	.word	0x40021000
 80009a0:	48001800 	.word	0x48001800

080009a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b2:	4b34      	ldr	r3, [pc, #208]	@ (8000a84 <HAL_InitTick+0xe0>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	4a33      	ldr	r2, [pc, #204]	@ (8000a84 <HAL_InitTick+0xe0>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009be:	4b31      	ldr	r3, [pc, #196]	@ (8000a84 <HAL_InitTick+0xe0>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ca:	f107 0210 	add.w	r2, r7, #16
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fa95 	bl	8001f04 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d103      	bne.n	80009ec <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e4:	f001 fa62 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 80009e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80009ea:	e004      	b.n	80009f6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ec:	f001 fa5e 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 80009f0:	4603      	mov	r3, r0
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f8:	4a23      	ldr	r2, [pc, #140]	@ (8000a88 <HAL_InitTick+0xe4>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0c9b      	lsrs	r3, r3, #18
 8000a00:	3b01      	subs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a06:	4a22      	ldr	r2, [pc, #136]	@ (8000a90 <HAL_InitTick+0xec>)
 8000a08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a0a:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a12:	4a1e      	ldr	r2, [pc, #120]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a2a:	4818      	ldr	r0, [pc, #96]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a2c:	f001 ffc6 	bl	80029bc <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d11b      	bne.n	8000a76 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a3e:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <HAL_InitTick+0xe8>)
 8000a40:	f002 f81e 	bl	8002a80 <HAL_TIM_Base_Start_IT>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d111      	bne.n	8000a76 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a52:	2036      	movs	r0, #54	@ 0x36
 8000a54:	f000 fa34 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d808      	bhi.n	8000a70 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	2036      	movs	r0, #54	@ 0x36
 8000a64:	f000 fa10 	bl	8000e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_InitTick+0xf0>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e002      	b.n	8000a76 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3738      	adds	r7, #56	@ 0x38
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	431bde83 	.word	0x431bde83
 8000a8c:	20000124 	.word	0x20000124
 8000a90:	40001000 	.word	0x40001000
 8000a94:	20000004 	.word	0x20000004

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <MemManage_Handler+0x4>

08000ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <UsageFault_Handler+0x4>

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_BUTTON_Pin);
 8000ad2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ad6:	f000 fbab 	bl	8001230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <TIM6_DAC_IRQHandler+0x10>)
 8000ae6:	f002 f83b 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000124 	.word	0x20000124

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *)ptr, len, HAL_MAX_DELAY);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <_write+0x28>)
 8000b48:	f002 fa4c 	bl	8002fe4 <HAL_UART_Transmit>
  return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000088 	.word	0x20000088

08000b5c <_close>:

int _close(int file)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b84:	605a      	str	r2, [r3, #4]
  return 0;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_isatty>:

int _isatty(int file)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b085      	sub	sp, #20
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f006 fd34 	bl	8007660 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20050000 	.word	0x20050000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000170 	.word	0x20000170
 8000c2c:	20001c68 	.word	0x20001c68

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f006 fcf3 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fc2b 	bl	80004e0 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c98:	08007d84 	.word	0x08007d84
  ldr r2, =_sbss
 8000c9c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ca0:	20001c64 	.word	0x20001c64

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8de 	bl	8000e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f7ff fe74 	bl	80009a4 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff fde4 	bl	8000894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000174 	.word	0x20000174

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000174 	.word	0x20000174

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	@ (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	@ (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	@ (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	@ 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff4c 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9a:	f7ff ff61 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000e9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff ffb1 	bl	8000e0c <NVIC_EncodePriority>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff80 	bl	8000db8 <__NVIC_SetPriority>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff54 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	e166      	b.n	80011ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8158 	beq.w	80011b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <HAL_GPIO_Init+0x40>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 0201 	and.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d017      	beq.n	8000fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	6939      	ldr	r1, [r7, #16]
 800100a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0203 	and.w	r2, r3, #3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80b2 	beq.w	80011b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b61      	ldr	r3, [pc, #388]	@ (80011d8 <HAL_GPIO_Init+0x2fc>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001054:	4a60      	ldr	r2, [pc, #384]	@ (80011d8 <HAL_GPIO_Init+0x2fc>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6613      	str	r3, [r2, #96]	@ 0x60
 800105c:	4b5e      	ldr	r3, [pc, #376]	@ (80011d8 <HAL_GPIO_Init+0x2fc>)
 800105e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001068:	4a5c      	ldr	r2, [pc, #368]	@ (80011dc <HAL_GPIO_Init+0x300>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001092:	d02b      	beq.n	80010ec <HAL_GPIO_Init+0x210>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a52      	ldr	r2, [pc, #328]	@ (80011e0 <HAL_GPIO_Init+0x304>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d025      	beq.n	80010e8 <HAL_GPIO_Init+0x20c>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a51      	ldr	r2, [pc, #324]	@ (80011e4 <HAL_GPIO_Init+0x308>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d01f      	beq.n	80010e4 <HAL_GPIO_Init+0x208>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a50      	ldr	r2, [pc, #320]	@ (80011e8 <HAL_GPIO_Init+0x30c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d019      	beq.n	80010e0 <HAL_GPIO_Init+0x204>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a4f      	ldr	r2, [pc, #316]	@ (80011ec <HAL_GPIO_Init+0x310>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x200>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a4e      	ldr	r2, [pc, #312]	@ (80011f0 <HAL_GPIO_Init+0x314>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1fc>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a4d      	ldr	r2, [pc, #308]	@ (80011f4 <HAL_GPIO_Init+0x318>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4c      	ldr	r2, [pc, #304]	@ (80011f8 <HAL_GPIO_Init+0x31c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1f4>
 80010cc:	2307      	movs	r3, #7
 80010ce:	e00e      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010d0:	2308      	movs	r3, #8
 80010d2:	e00c      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010d4:	2306      	movs	r3, #6
 80010d6:	e00a      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010d8:	2305      	movs	r3, #5
 80010da:	e008      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010dc:	2304      	movs	r3, #4
 80010de:	e006      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010e0:	2303      	movs	r3, #3
 80010e2:	e004      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e002      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010ec:	2300      	movs	r3, #0
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	f002 0203 	and.w	r2, r2, #3
 80010f4:	0092      	lsls	r2, r2, #2
 80010f6:	4093      	lsls	r3, r2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010fe:	4937      	ldr	r1, [pc, #220]	@ (80011dc <HAL_GPIO_Init+0x300>)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800110c:	4b3b      	ldr	r3, [pc, #236]	@ (80011fc <HAL_GPIO_Init+0x320>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001130:	4a32      	ldr	r2, [pc, #200]	@ (80011fc <HAL_GPIO_Init+0x320>)
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001136:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <HAL_GPIO_Init+0x320>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800115a:	4a28      	ldr	r2, [pc, #160]	@ (80011fc <HAL_GPIO_Init+0x320>)
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001160:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <HAL_GPIO_Init+0x320>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001184:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_GPIO_Init+0x320>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_GPIO_Init+0x320>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ae:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <HAL_GPIO_Init+0x320>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f47f ae91 	bne.w	8000eec <HAL_GPIO_Init+0x10>
  }
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	371c      	adds	r7, #28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000800 	.word	0x48000800
 80011e8:	48000c00 	.word	0x48000c00
 80011ec:	48001000 	.word	0x48001000
 80011f0:	48001400 	.word	0x48001400
 80011f4:	48001800 	.word	0x48001800
 80011f8:	48001c00 	.word	0x48001c00
 80011fc:	40010400 	.word	0x40010400

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800121c:	e002      	b.n	8001224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fa7a 	bl	8000748 <HAL_GPIO_EXTI_Callback>
  }
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <HAL_PWREx_GetVoltageRange+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40007000 	.word	0x40007000

0800127c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800128a:	d130      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800128c:	4b23      	ldr	r3, [pc, #140]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001298:	d038      	beq.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012a2:	4a1e      	ldr	r2, [pc, #120]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2232      	movs	r2, #50	@ 0x32
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3301      	adds	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c0:	e002      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d4:	d102      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f2      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e8:	d110      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e00f      	b.n	800130e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012fa:	d007      	beq.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001304:	4a05      	ldr	r2, [pc, #20]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40007000 	.word	0x40007000
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_PWREx_EnableVddIO2+0x1c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001332:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001336:	6053      	str	r3, [r2, #4]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40007000 	.word	0x40007000

08001348 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	f000 bc08 	b.w	8001b6c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135c:	4b96      	ldr	r3, [pc, #600]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001366:	4b94      	ldr	r3, [pc, #592]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80e4 	beq.w	8001546 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <HAL_RCC_OscConfig+0x4c>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b0c      	cmp	r3, #12
 8001388:	f040 808b 	bne.w	80014a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 8087 	bne.w	80014a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001394:	4b88      	ldr	r3, [pc, #544]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_OscConfig+0x64>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e3df      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	4b81      	ldr	r3, [pc, #516]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <HAL_RCC_OscConfig+0x7e>
 80013bc:	4b7e      	ldr	r3, [pc, #504]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013c4:	e005      	b.n	80013d2 <HAL_RCC_OscConfig+0x8a>
 80013c6:	4b7c      	ldr	r3, [pc, #496]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d223      	bcs.n	800141e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fdc4 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e3c0      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ea:	4b73      	ldr	r3, [pc, #460]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a72      	ldr	r2, [pc, #456]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b70      	ldr	r3, [pc, #448]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	496d      	ldr	r1, [pc, #436]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001408:	4b6b      	ldr	r3, [pc, #428]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	4968      	ldr	r1, [pc, #416]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e025      	b.n	800146a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141e:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a65      	ldr	r2, [pc, #404]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b63      	ldr	r3, [pc, #396]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4960      	ldr	r1, [pc, #384]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143c:	4b5e      	ldr	r3, [pc, #376]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	495b      	ldr	r1, [pc, #364]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fd84 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e380      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800146a:	f000 fc87 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 800146e:	4602      	mov	r2, r0
 8001470:	4b51      	ldr	r3, [pc, #324]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4950      	ldr	r1, [pc, #320]	@ (80015bc <HAL_RCC_OscConfig+0x274>)
 800147c:	5ccb      	ldrb	r3, [r1, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	4a4e      	ldr	r2, [pc, #312]	@ (80015c0 <HAL_RCC_OscConfig+0x278>)
 8001488:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800148a:	4b4e      	ldr	r3, [pc, #312]	@ (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fa88 	bl	80009a4 <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d052      	beq.n	8001544 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	e364      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d032      	beq.n	8001510 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014aa:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a42      	ldr	r2, [pc, #264]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fc23 	bl	8000d00 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014be:	f7ff fc1f 	bl	8000d00 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e34d      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014d0:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014dc:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a35      	ldr	r2, [pc, #212]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b33      	ldr	r3, [pc, #204]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4930      	ldr	r1, [pc, #192]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fa:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	492b      	ldr	r1, [pc, #172]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
 800150e:	e01a      	b.n	8001546 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001510:	4b29      	ldr	r3, [pc, #164]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a28      	ldr	r2, [pc, #160]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151c:	f7ff fbf0 	bl	8000d00 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001524:	f7ff fbec 	bl	8000d00 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e31a      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x1dc>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d073      	beq.n	800163a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x21c>
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d10e      	bne.n	800157c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d063      	beq.n	8001638 <HAL_RCC_OscConfig+0x2f0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d15f      	bne.n	8001638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e2f7      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x24c>
 8001586:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e025      	b.n	80015e0 <HAL_RCC_OscConfig+0x298>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800159c:	d114      	bne.n	80015c8 <HAL_RCC_OscConfig+0x280>
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a02      	ldr	r2, [pc, #8]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e013      	b.n	80015e0 <HAL_RCC_OscConfig+0x298>
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08007d2c 	.word	0x08007d2c
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004
 80015c8:	4ba0      	ldr	r3, [pc, #640]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a9f      	ldr	r2, [pc, #636]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b9d      	ldr	r3, [pc, #628]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a9c      	ldr	r2, [pc, #624]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb8a 	bl	8000d00 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fb86 	bl	8000d00 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	@ 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e2b4      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	4b92      	ldr	r3, [pc, #584]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2a8>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fb76 	bl	8000d00 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fb72 	bl	8000d00 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	@ 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e2a0      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162a:	4b88      	ldr	r3, [pc, #544]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x2d0>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d060      	beq.n	8001708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b04      	cmp	r3, #4
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x310>
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d119      	bne.n	8001686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d116      	bne.n	8001686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	4b7c      	ldr	r3, [pc, #496]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x328>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e27d      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b76      	ldr	r3, [pc, #472]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	4973      	ldr	r1, [pc, #460]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	e040      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d023      	beq.n	80016d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168e:	4b6f      	ldr	r3, [pc, #444]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fb31 	bl	8000d00 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fb2d 	bl	8000d00 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e25b      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	4b65      	ldr	r3, [pc, #404]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b62      	ldr	r3, [pc, #392]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	495f      	ldr	r1, [pc, #380]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
 80016d4:	e018      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b5d      	ldr	r3, [pc, #372]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5c      	ldr	r2, [pc, #368]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb0d 	bl	8000d00 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fb09 	bl	8000d00 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e237      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fc:	4b53      	ldr	r3, [pc, #332]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d03c      	beq.n	800178e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01c      	beq.n	8001756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171c:	4b4b      	ldr	r3, [pc, #300]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	4a4a      	ldr	r2, [pc, #296]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff fae8 	bl	8000d00 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff fae4 	bl	8000d00 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e212      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ef      	beq.n	8001734 <HAL_RCC_OscConfig+0x3ec>
 8001754:	e01b      	b.n	800178e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175c:	4a3b      	ldr	r2, [pc, #236]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff facb 	bl	8000d00 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fac7 	bl	8000d00 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1f5      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001780:	4b32      	ldr	r3, [pc, #200]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ef      	bne.n	800176e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80a6 	beq.w	80018e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017a0:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10d      	bne.n	80017c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	4a26      	ldr	r2, [pc, #152]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b8:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d118      	bne.n	8001806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fa8e 	bl	8000d00 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e8:	f7ff fa8a 	bl	8000d00 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1b8      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d108      	bne.n	8001820 <HAL_RCC_OscConfig+0x4d8>
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001814:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800181e:	e029      	b.n	8001874 <HAL_RCC_OscConfig+0x52c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d115      	bne.n	8001854 <HAL_RCC_OscConfig+0x50c>
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182e:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	4a03      	ldr	r2, [pc, #12]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x52c>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	4b9d      	ldr	r3, [pc, #628]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185a:	4a9c      	ldr	r2, [pc, #624]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001864:	4b99      	ldr	r3, [pc, #612]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	4a98      	ldr	r2, [pc, #608]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d016      	beq.n	80018aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fa40 	bl	8000d00 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	e00a      	b.n	800189a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fa3c 	bl	8000d00 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e168      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189a:	4b8c      	ldr	r3, [pc, #560]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ed      	beq.n	8001884 <HAL_RCC_OscConfig+0x53c>
 80018a8:	e015      	b.n	80018d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa29 	bl	8000d00 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fa25 	bl	8000d00 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e151      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c8:	4b80      	ldr	r3, [pc, #512]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ed      	bne.n	80018b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b7b      	ldr	r3, [pc, #492]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	4a7a      	ldr	r2, [pc, #488]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 80018e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018fc:	4b73      	ldr	r3, [pc, #460]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 80018fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001902:	4a72      	ldr	r2, [pc, #456]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff f9f8 	bl	8000d00 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001914:	f7ff f9f4 	bl	8000d00 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e122      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001926:	4b69      	ldr	r3, [pc, #420]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001928:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ef      	beq.n	8001914 <HAL_RCC_OscConfig+0x5cc>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001936:	4b65      	ldr	r3, [pc, #404]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800193c:	4a63      	ldr	r2, [pc, #396]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f9db 	bl	8000d00 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194e:	f7ff f9d7 	bl	8000d00 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e105      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001960:	4b5a      	ldr	r3, [pc, #360]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001962:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80f9 	beq.w	8001b6a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	2b02      	cmp	r3, #2
 800197e:	f040 80cf 	bne.w	8001b20 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001982:	4b52      	ldr	r3, [pc, #328]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0203 	and.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001992:	429a      	cmp	r2, r3
 8001994:	d12c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a0:	3b01      	subs	r3, #1
 80019a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d123      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d11b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d113      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d109      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d071      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d068      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f6:	4b35      	ldr	r3, [pc, #212]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a02:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0ac      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a12:	4b2e      	ldr	r3, [pc, #184]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a2d      	ldr	r2, [pc, #180]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a1e:	f7ff f96f 	bl	8000d00 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f96b 	bl	8000d00 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e099      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <HAL_RCC_OscConfig+0x788>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a54:	3a01      	subs	r2, #1
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a66:	0852      	lsrs	r2, r2, #1
 8001a68:	3a01      	subs	r2, #1
 8001a6a:	0552      	lsls	r2, r2, #21
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a72:	0852      	lsrs	r2, r2, #1
 8001a74:	3a01      	subs	r2, #1
 8001a76:	0652      	lsls	r2, r2, #25
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a7e:	06d2      	lsls	r2, r2, #27
 8001a80:	430a      	orrs	r2, r1
 8001a82:	4912      	ldr	r1, [pc, #72]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a88:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa0:	f7ff f92e 	bl	8000d00 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f92a 	bl	8000d00 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e058      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac6:	e050      	b.n	8001b6a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e04f      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d144      	bne.n	8001b6a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a23      	ldr	r2, [pc, #140]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aec:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a20      	ldr	r2, [pc, #128]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001af8:	f7ff f902 	bl	8000d00 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f8fe 	bl	8000d00 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e02c      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x7b8>
 8001b1e:	e024      	b.n	8001b6a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d01f      	beq.n	8001b66 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a12      	ldr	r2, [pc, #72]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001b2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff f8e5 	bl	8000d00 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff f8e1 	bl	8000d00 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e00f      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4905      	ldr	r1, [pc, #20]	@ (8001b74 <HAL_RCC_OscConfig+0x82c>)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_RCC_OscConfig+0x830>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
 8001b64:	e001      	b.n	8001b6a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	feeefffc 	.word	0xfeeefffc

08001b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0e7      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b75      	ldr	r3, [pc, #468]	@ (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d910      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b72      	ldr	r3, [pc, #456]	@ (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0207 	bic.w	r2, r3, #7
 8001ba6:	4970      	ldr	r1, [pc, #448]	@ (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b6e      	ldr	r3, [pc, #440]	@ (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0cf      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d010      	beq.n	8001bee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b66      	ldr	r3, [pc, #408]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d908      	bls.n	8001bee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b63      	ldr	r3, [pc, #396]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4960      	ldr	r1, [pc, #384]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d04c      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	4b5a      	ldr	r3, [pc, #360]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0a6      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	4b54      	ldr	r3, [pc, #336]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e09a      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c32:	4b4e      	ldr	r3, [pc, #312]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08e      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c42:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e086      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b46      	ldr	r3, [pc, #280]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4943      	ldr	r1, [pc, #268]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c64:	f7ff f84c 	bl	8000d00 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f848 	bl	8000d00 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e06e      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b3a      	ldr	r3, [pc, #232]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d010      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d208      	bcs.n	8001cc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	492b      	ldr	r1, [pc, #172]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc2:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d210      	bcs.n	8001cf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	4923      	ldr	r1, [pc, #140]	@ (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce0:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e036      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4918      	ldr	r1, [pc, #96]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4910      	ldr	r1, [pc, #64]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d30:	f000 f824 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	490b      	ldr	r1, [pc, #44]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f4>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	4a09      	ldr	r2, [pc, #36]	@ (8001d74 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x1fc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fe25 	bl	80009a4 <HAL_InitTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08007d2c 	.word	0x08007d2c
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d94:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x34>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d121      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d11e      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db0:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dbc:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e005      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e004      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e00:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d134      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d003      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0xac>
 8001e20:	e005      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e24:	617b      	str	r3, [r7, #20]
      break;
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2a:	617b      	str	r3, [r7, #20]
      break;
 8001e2c:	e002      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	617b      	str	r3, [r7, #20]
      break;
 8001e32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e34:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	3301      	adds	r3, #1
 8001e40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	fb03 f202 	mul.w	r2, r3, r2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	0e5b      	lsrs	r3, r3, #25
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	3301      	adds	r3, #1
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e74:	69bb      	ldr	r3, [r7, #24]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08007d44 	.word	0x08007d44
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4904      	ldr	r1, [pc, #16]	@ (8001ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08007d3c 	.word	0x08007d3c

08001ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001edc:	f7ff ffda 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0adb      	lsrs	r3, r3, #11
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4904      	ldr	r1, [pc, #16]	@ (8001f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08007d3c 	.word	0x08007d3c

08001f04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	220f      	movs	r2, #15
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f20:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	08db      	lsrs	r3, r3, #3
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <HAL_RCC_GetClockConfig+0x60>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0207 	and.w	r2, r3, #7
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	601a      	str	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40022000 	.word	0x40022000

08001f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f74:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f80:	f7ff f96e 	bl	8001260 <HAL_PWREx_GetVoltageRange>
 8001f84:	6178      	str	r0, [r7, #20]
 8001f86:	e014      	b.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b25      	ldr	r3, [pc, #148]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	4a24      	ldr	r2, [pc, #144]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f94:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa0:	f7ff f95e 	bl	8001260 <HAL_PWREx_GetVoltageRange>
 8001fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	4a1d      	ldr	r2, [pc, #116]	@ (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb8:	d10b      	bne.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	@ 0x80
 8001fbe:	d919      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fc4:	d902      	bls.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e013      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e010      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	@ 0x80
 8001fd6:	d902      	bls.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd8:	2303      	movs	r3, #3
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e00a      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	@ 0x80
 8001fe2:	d102      	bne.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e004      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b70      	cmp	r3, #112	@ 0x70
 8001fee:	d101      	bne.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4909      	ldr	r1, [pc, #36]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002004:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40022000 	.word	0x40022000

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002030:	2300      	movs	r3, #0
 8002032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002034:	2300      	movs	r3, #0
 8002036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002040:	2b00      	cmp	r3, #0
 8002042:	d041      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002048:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800204c:	d02a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800204e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002052:	d824      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002054:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002058:	d008      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800205a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800205e:	d81e      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002068:	d010      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800206a:	e018      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800206c:	4b86      	ldr	r3, [pc, #536]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a85      	ldr	r2, [pc, #532]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002076:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002078:	e015      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f000 facd 	bl	8002620 <RCCEx_PLLSAI1_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208a:	e00c      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3320      	adds	r3, #32
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fbb6 	bl	8002804 <RCCEx_PLLSAI2_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800209c:	e003      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	74fb      	strb	r3, [r7, #19]
      break;
 80020a2:	e000      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ac:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020ba:	4973      	ldr	r1, [pc, #460]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020c2:	e001      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d041      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020dc:	d02a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020e2:	d824      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020e8:	d008      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020ee:	d81e      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f8:	d010      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020fa:	e018      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020fc:	4b62      	ldr	r3, [pc, #392]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a61      	ldr	r2, [pc, #388]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002106:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002108:	e015      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fa85 	bl	8002620 <RCCEx_PLLSAI1_Config>
 8002116:	4603      	mov	r3, r0
 8002118:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800211a:	e00c      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3320      	adds	r3, #32
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fb6e 	bl	8002804 <RCCEx_PLLSAI2_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800212c:	e003      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	74fb      	strb	r3, [r7, #19]
      break;
 8002132:	e000      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800213c:	4b52      	ldr	r3, [pc, #328]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214a:	494f      	ldr	r1, [pc, #316]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002152:	e001      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a0 	beq.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800216a:	4b47      	ldr	r3, [pc, #284]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	@ 0x58
 800218c:	4b3e      	ldr	r3, [pc, #248]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002198:	2301      	movs	r3, #1
 800219a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219c:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a3a      	ldr	r2, [pc, #232]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fdaa 	bl	8000d00 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ae:	e009      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7fe fda6 	bl	8000d00 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d902      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	74fb      	strb	r3, [r7, #19]
        break;
 80021c2:	e005      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021c4:	4b31      	ldr	r3, [pc, #196]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ef      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d15c      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01f      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d019      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f4:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002206:	4a20      	ldr	r2, [pc, #128]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002210:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002220:	4a19      	ldr	r2, [pc, #100]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d016      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fd65 	bl	8000d00 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	e00b      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fd61 	bl	8000d00 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d902      	bls.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	74fb      	strb	r3, [r7, #19]
            break;
 8002250:	e006      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ec      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	4904      	ldr	r1, [pc, #16]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800227e:	e009      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
 8002284:	e006      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002294:	7c7b      	ldrb	r3, [r7, #17]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4ba6      	ldr	r3, [pc, #664]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	4aa5      	ldr	r2, [pc, #660]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b2:	4ba0      	ldr	r3, [pc, #640]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f023 0203 	bic.w	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c0:	499c      	ldr	r1, [pc, #624]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d4:	4b97      	ldr	r3, [pc, #604]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	f023 020c 	bic.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e2:	4994      	ldr	r1, [pc, #592]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	498b      	ldr	r1, [pc, #556]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002318:	4b86      	ldr	r3, [pc, #536]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	4983      	ldr	r1, [pc, #524]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800233a:	4b7e      	ldr	r3, [pc, #504]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002348:	497a      	ldr	r1, [pc, #488]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800235c:	4b75      	ldr	r3, [pc, #468]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236a:	4972      	ldr	r1, [pc, #456]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800237e:	4b6d      	ldr	r3, [pc, #436]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002384:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238c:	4969      	ldr	r1, [pc, #420]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a0:	4b64      	ldr	r3, [pc, #400]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023ae:	4961      	ldr	r1, [pc, #388]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d0:	4958      	ldr	r1, [pc, #352]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e4:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f2:	4950      	ldr	r1, [pc, #320]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002406:	4b4b      	ldr	r3, [pc, #300]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4947      	ldr	r1, [pc, #284]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002428:	4b42      	ldr	r3, [pc, #264]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002436:	493f      	ldr	r1, [pc, #252]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d028      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800244a:	4b3a      	ldr	r3, [pc, #232]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002450:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	4936      	ldr	r1, [pc, #216]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002468:	d106      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246a:	4b32      	ldr	r3, [pc, #200]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a31      	ldr	r2, [pc, #196]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002470:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002474:	60d3      	str	r3, [r2, #12]
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f8c9 	bl	8002620 <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d028      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024a8:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b6:	491f      	ldr	r1, [pc, #124]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a19      	ldr	r2, [pc, #100]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
 80024d4:	e011      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024de:	d10c      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f89a 	bl	8002620 <RCCEx_PLLSAI1_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d02a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002514:	4907      	ldr	r1, [pc, #28]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002524:	d108      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002526:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a02      	ldr	r2, [pc, #8]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800252c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002530:	60d3      	str	r3, [r2, #12]
 8002532:	e013      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002534:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002540:	d10c      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	2101      	movs	r1, #1
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f869 	bl	8002620 <RCCEx_PLLSAI1_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02f      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002568:	4b2c      	ldr	r3, [pc, #176]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002576:	4929      	ldr	r1, [pc, #164]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002586:	d10d      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	2102      	movs	r1, #2
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f846 	bl	8002620 <RCCEx_PLLSAI1_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d014      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	74bb      	strb	r3, [r7, #18]
 80025a2:	e011      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3320      	adds	r3, #32
 80025b2:	2102      	movs	r1, #2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f925 	bl	8002804 <RCCEx_PLLSAI2_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025e4:	490d      	ldr	r1, [pc, #52]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025f8:	4b08      	ldr	r3, [pc, #32]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002608:	4904      	ldr	r1, [pc, #16]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002610:	7cbb      	ldrb	r3, [r7, #18]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000

08002620 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800262e:	4b74      	ldr	r3, [pc, #464]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800263a:	4b71      	ldr	r3, [pc, #452]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0203 	and.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d10d      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
       ||
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002652:	4b6b      	ldr	r3, [pc, #428]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
       ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d047      	beq.n	80026f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	e044      	b.n	80026f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d018      	beq.n	80026a6 <RCCEx_PLLSAI1_Config+0x86>
 8002674:	2b03      	cmp	r3, #3
 8002676:	d825      	bhi.n	80026c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002678:	2b01      	cmp	r3, #1
 800267a:	d002      	beq.n	8002682 <RCCEx_PLLSAI1_Config+0x62>
 800267c:	2b02      	cmp	r3, #2
 800267e:	d009      	beq.n	8002694 <RCCEx_PLLSAI1_Config+0x74>
 8002680:	e020      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002682:	4b5f      	ldr	r3, [pc, #380]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11d      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002692:	e01a      	b.n	80026ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002694:	4b5a      	ldr	r3, [pc, #360]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d116      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a4:	e013      	b.n	80026ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026a6:	4b56      	ldr	r3, [pc, #344]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026b2:	4b53      	ldr	r3, [pc, #332]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026c2:	e006      	b.n	80026d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      break;
 80026c8:	e004      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ca:	bf00      	nop
 80026cc:	e002      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026da:	4b49      	ldr	r3, [pc, #292]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	430b      	orrs	r3, r1
 80026f0:	4943      	ldr	r1, [pc, #268]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d17c      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026fc:	4b40      	ldr	r3, [pc, #256]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3f      	ldr	r2, [pc, #252]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002708:	f7fe fafa 	bl	8000d00 <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800270e:	e009      	b.n	8002724 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002710:	f7fe faf6 	bl	8000d00 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d902      	bls.n	8002724 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	73fb      	strb	r3, [r7, #15]
        break;
 8002722:	e005      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002724:	4b36      	ldr	r3, [pc, #216]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ef      	bne.n	8002710 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d15f      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d110      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800273c:	4b30      	ldr	r3, [pc, #192]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002744:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6892      	ldr	r2, [r2, #8]
 800274c:	0211      	lsls	r1, r2, #8
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	06d2      	lsls	r2, r2, #27
 8002754:	430a      	orrs	r2, r1
 8002756:	492a      	ldr	r1, [pc, #168]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	610b      	str	r3, [r1, #16]
 800275c:	e027      	b.n	80027ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d112      	bne.n	800278a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002764:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800276c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6892      	ldr	r2, [r2, #8]
 8002774:	0211      	lsls	r1, r2, #8
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6912      	ldr	r2, [r2, #16]
 800277a:	0852      	lsrs	r2, r2, #1
 800277c:	3a01      	subs	r2, #1
 800277e:	0552      	lsls	r2, r2, #21
 8002780:	430a      	orrs	r2, r1
 8002782:	491f      	ldr	r1, [pc, #124]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002784:	4313      	orrs	r3, r2
 8002786:	610b      	str	r3, [r1, #16]
 8002788:	e011      	b.n	80027ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800278a:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002792:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6892      	ldr	r2, [r2, #8]
 800279a:	0211      	lsls	r1, r2, #8
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6952      	ldr	r2, [r2, #20]
 80027a0:	0852      	lsrs	r2, r2, #1
 80027a2:	3a01      	subs	r2, #1
 80027a4:	0652      	lsls	r2, r2, #25
 80027a6:	430a      	orrs	r2, r1
 80027a8:	4915      	ldr	r1, [pc, #84]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027ae:	4b14      	ldr	r3, [pc, #80]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a13      	ldr	r2, [pc, #76]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7fe faa1 	bl	8000d00 <HAL_GetTick>
 80027be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c0:	e009      	b.n	80027d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c2:	f7fe fa9d 	bl	8000d00 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d902      	bls.n	80027d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	73fb      	strb	r3, [r7, #15]
          break;
 80027d4:	e005      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ef      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4903      	ldr	r1, [pc, #12]	@ (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000

08002804 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002812:	4b69      	ldr	r3, [pc, #420]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d018      	beq.n	8002850 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800281e:	4b66      	ldr	r3, [pc, #408]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0203 	and.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d10d      	bne.n	800284a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
       ||
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002836:	4b60      	ldr	r3, [pc, #384]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
       ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d047      	beq.n	80028da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	e044      	b.n	80028da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d018      	beq.n	800288a <RCCEx_PLLSAI2_Config+0x86>
 8002858:	2b03      	cmp	r3, #3
 800285a:	d825      	bhi.n	80028a8 <RCCEx_PLLSAI2_Config+0xa4>
 800285c:	2b01      	cmp	r3, #1
 800285e:	d002      	beq.n	8002866 <RCCEx_PLLSAI2_Config+0x62>
 8002860:	2b02      	cmp	r3, #2
 8002862:	d009      	beq.n	8002878 <RCCEx_PLLSAI2_Config+0x74>
 8002864:	e020      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002866:	4b54      	ldr	r3, [pc, #336]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d11d      	bne.n	80028ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002876:	e01a      	b.n	80028ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002878:	4b4f      	ldr	r3, [pc, #316]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d116      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002888:	e013      	b.n	80028b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800288a:	4b4b      	ldr	r3, [pc, #300]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002896:	4b48      	ldr	r3, [pc, #288]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028a6:	e006      	b.n	80028b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      break;
 80028ac:	e004      	b.n	80028b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ae:	bf00      	nop
 80028b0:	e002      	b.n	80028b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028be:	4b3e      	ldr	r3, [pc, #248]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6819      	ldr	r1, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	430b      	orrs	r3, r1
 80028d4:	4938      	ldr	r1, [pc, #224]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d166      	bne.n	80029ae <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028e0:	4b35      	ldr	r3, [pc, #212]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a34      	ldr	r2, [pc, #208]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe fa08 	bl	8000d00 <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028f2:	e009      	b.n	8002908 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028f4:	f7fe fa04 	bl	8000d00 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d902      	bls.n	8002908 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	73fb      	strb	r3, [r7, #15]
        break;
 8002906:	e005      	b.n	8002914 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002908:	4b2b      	ldr	r3, [pc, #172]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ef      	bne.n	80028f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d149      	bne.n	80029ae <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d110      	bne.n	8002942 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002920:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002928:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6892      	ldr	r2, [r2, #8]
 8002930:	0211      	lsls	r1, r2, #8
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68d2      	ldr	r2, [r2, #12]
 8002936:	06d2      	lsls	r2, r2, #27
 8002938:	430a      	orrs	r2, r1
 800293a:	491f      	ldr	r1, [pc, #124]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	614b      	str	r3, [r1, #20]
 8002940:	e011      	b.n	8002966 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002942:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800294a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6892      	ldr	r2, [r2, #8]
 8002952:	0211      	lsls	r1, r2, #8
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6912      	ldr	r2, [r2, #16]
 8002958:	0852      	lsrs	r2, r2, #1
 800295a:	3a01      	subs	r2, #1
 800295c:	0652      	lsls	r2, r2, #25
 800295e:	430a      	orrs	r2, r1
 8002960:	4915      	ldr	r1, [pc, #84]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002966:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a13      	ldr	r2, [pc, #76]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002970:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe f9c5 	bl	8000d00 <HAL_GetTick>
 8002976:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002978:	e009      	b.n	800298e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800297a:	f7fe f9c1 	bl	8000d00 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d902      	bls.n	800298e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	73fb      	strb	r3, [r7, #15]
          break;
 800298c:	e005      	b.n	800299a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800298e:	4b0a      	ldr	r3, [pc, #40]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ef      	beq.n	800297a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d106      	bne.n	80029ae <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	4903      	ldr	r1, [pc, #12]	@ (80029b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e049      	b.n	8002a62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f841 	bl	8002a6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 f9e0 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d001      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e04f      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01d      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x76>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac2:	d018      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x76>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x76>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x76>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x76>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x76>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a19      	ldr	r2, [pc, #100]	@ (8002b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d115      	bne.n	8002b22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d015      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0xb4>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b0e:	d011      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b20:	e008      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e000      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	40013400 	.word	0x40013400
 8002b58:	40014000 	.word	0x40014000
 8002b5c:	00010007 	.word	0x00010007

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d020      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0202 	mvn.w	r2, #2
 8002b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8e9 	bl	8002d82 <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8db 	bl	8002d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f8ec 	bl	8002d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d020      	beq.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01b      	beq.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8c3 	bl	8002d82 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8b5 	bl	8002d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f8c6 	bl	8002d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d020      	beq.n	8002c5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01b      	beq.n	8002c5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0208 	mvn.w	r2, #8
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f89d 	bl	8002d82 <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f88f 	bl	8002d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f8a0 	bl	8002d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d020      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01b      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0210 	mvn.w	r2, #16
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f877 	bl	8002d82 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f869 	bl	8002d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f87a 	bl	8002d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0201 	mvn.w	r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fdcc 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00c      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f913 	bl	8002f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f90b 	bl	8002f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f834 	bl	8002daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00c      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 0220 	mvn.w	r2, #32
 8002d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8d3 	bl	8002f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a46      	ldr	r2, [pc, #280]	@ (8002eec <TIM_Base_SetConfig+0x12c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dde:	d00f      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a43      	ldr	r2, [pc, #268]	@ (8002ef0 <TIM_Base_SetConfig+0x130>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00b      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a42      	ldr	r2, [pc, #264]	@ (8002ef4 <TIM_Base_SetConfig+0x134>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a41      	ldr	r2, [pc, #260]	@ (8002ef8 <TIM_Base_SetConfig+0x138>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a40      	ldr	r2, [pc, #256]	@ (8002efc <TIM_Base_SetConfig+0x13c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d108      	bne.n	8002e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a35      	ldr	r2, [pc, #212]	@ (8002eec <TIM_Base_SetConfig+0x12c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <TIM_Base_SetConfig+0x9a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e20:	d01b      	beq.n	8002e5a <TIM_Base_SetConfig+0x9a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a32      	ldr	r2, [pc, #200]	@ (8002ef0 <TIM_Base_SetConfig+0x130>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d017      	beq.n	8002e5a <TIM_Base_SetConfig+0x9a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <TIM_Base_SetConfig+0x134>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <TIM_Base_SetConfig+0x9a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a30      	ldr	r2, [pc, #192]	@ (8002ef8 <TIM_Base_SetConfig+0x138>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00f      	beq.n	8002e5a <TIM_Base_SetConfig+0x9a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002efc <TIM_Base_SetConfig+0x13c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_Base_SetConfig+0x9a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <TIM_Base_SetConfig+0x140>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0x9a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f04 <TIM_Base_SetConfig+0x144>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0x9a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2c      	ldr	r2, [pc, #176]	@ (8002f08 <TIM_Base_SetConfig+0x148>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a16      	ldr	r2, [pc, #88]	@ (8002eec <TIM_Base_SetConfig+0x12c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00f      	beq.n	8002eb8 <TIM_Base_SetConfig+0xf8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <TIM_Base_SetConfig+0x13c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00b      	beq.n	8002eb8 <TIM_Base_SetConfig+0xf8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a17      	ldr	r2, [pc, #92]	@ (8002f00 <TIM_Base_SetConfig+0x140>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <TIM_Base_SetConfig+0xf8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <TIM_Base_SetConfig+0x144>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_Base_SetConfig+0xf8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a15      	ldr	r2, [pc, #84]	@ (8002f08 <TIM_Base_SetConfig+0x148>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40013400 	.word	0x40013400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40014400 	.word	0x40014400
 8002f08:	40014800 	.word	0x40014800

08002f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e040      	b.n	8002fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fcba 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	@ 0x24
 8002f74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fb6a 	bl	8003668 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8af 	bl	80030f8 <UART_SetConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e01b      	b.n	8002fdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fbe9 	bl	80037ac <UART_CheckIdleState>
 8002fda:	4603      	mov	r3, r0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	@ 0x28
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d177      	bne.n	80030ec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Transmit+0x24>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e070      	b.n	80030ee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2221      	movs	r2, #33	@ 0x21
 8003018:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800301a:	f7fd fe71 	bl	8000d00 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003038:	d108      	bne.n	800304c <HAL_UART_Transmit+0x68>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d104      	bne.n	800304c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	e003      	b.n	8003054 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003054:	e02f      	b.n	80030b6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2200      	movs	r2, #0
 800305e:	2180      	movs	r1, #128	@ 0x80
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fc4b 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e03b      	b.n	80030ee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003088:	b292      	uxth	r2, r2
 800308a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	3302      	adds	r3, #2
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e007      	b.n	80030a4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1c9      	bne.n	8003056 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2140      	movs	r1, #64	@ 0x40
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fc15 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e005      	b.n	80030ee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030fc:	b08a      	sub	sp, #40	@ 0x28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	431a      	orrs	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	431a      	orrs	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	4313      	orrs	r3, r2
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4ba4      	ldr	r3, [pc, #656]	@ (80033b8 <UART_SetConfig+0x2c0>)
 8003128:	4013      	ands	r3, r2
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003130:	430b      	orrs	r3, r1
 8003132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a99      	ldr	r2, [pc, #612]	@ (80033bc <UART_SetConfig+0x2c4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003160:	4313      	orrs	r3, r2
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a90      	ldr	r2, [pc, #576]	@ (80033c0 <UART_SetConfig+0x2c8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d126      	bne.n	80031d0 <UART_SetConfig+0xd8>
 8003182:	4b90      	ldr	r3, [pc, #576]	@ (80033c4 <UART_SetConfig+0x2cc>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b03      	cmp	r3, #3
 800318e:	d81b      	bhi.n	80031c8 <UART_SetConfig+0xd0>
 8003190:	a201      	add	r2, pc, #4	@ (adr r2, 8003198 <UART_SetConfig+0xa0>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	080031b1 	.word	0x080031b1
 80031a4:	080031c1 	.word	0x080031c1
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ae:	e116      	b.n	80033de <UART_SetConfig+0x2e6>
 80031b0:	2302      	movs	r3, #2
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b6:	e112      	b.n	80033de <UART_SetConfig+0x2e6>
 80031b8:	2304      	movs	r3, #4
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031be:	e10e      	b.n	80033de <UART_SetConfig+0x2e6>
 80031c0:	2308      	movs	r3, #8
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c6:	e10a      	b.n	80033de <UART_SetConfig+0x2e6>
 80031c8:	2310      	movs	r3, #16
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ce:	e106      	b.n	80033de <UART_SetConfig+0x2e6>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a7c      	ldr	r2, [pc, #496]	@ (80033c8 <UART_SetConfig+0x2d0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d138      	bne.n	800324c <UART_SetConfig+0x154>
 80031da:	4b7a      	ldr	r3, [pc, #488]	@ (80033c4 <UART_SetConfig+0x2cc>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d82d      	bhi.n	8003244 <UART_SetConfig+0x14c>
 80031e8:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <UART_SetConfig+0xf8>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003225 	.word	0x08003225
 80031f4:	08003245 	.word	0x08003245
 80031f8:	08003245 	.word	0x08003245
 80031fc:	08003245 	.word	0x08003245
 8003200:	08003235 	.word	0x08003235
 8003204:	08003245 	.word	0x08003245
 8003208:	08003245 	.word	0x08003245
 800320c:	08003245 	.word	0x08003245
 8003210:	0800322d 	.word	0x0800322d
 8003214:	08003245 	.word	0x08003245
 8003218:	08003245 	.word	0x08003245
 800321c:	08003245 	.word	0x08003245
 8003220:	0800323d 	.word	0x0800323d
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322a:	e0d8      	b.n	80033de <UART_SetConfig+0x2e6>
 800322c:	2302      	movs	r3, #2
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003232:	e0d4      	b.n	80033de <UART_SetConfig+0x2e6>
 8003234:	2304      	movs	r3, #4
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323a:	e0d0      	b.n	80033de <UART_SetConfig+0x2e6>
 800323c:	2308      	movs	r3, #8
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003242:	e0cc      	b.n	80033de <UART_SetConfig+0x2e6>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324a:	e0c8      	b.n	80033de <UART_SetConfig+0x2e6>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5e      	ldr	r2, [pc, #376]	@ (80033cc <UART_SetConfig+0x2d4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d125      	bne.n	80032a2 <UART_SetConfig+0x1aa>
 8003256:	4b5b      	ldr	r3, [pc, #364]	@ (80033c4 <UART_SetConfig+0x2cc>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003260:	2b30      	cmp	r3, #48	@ 0x30
 8003262:	d016      	beq.n	8003292 <UART_SetConfig+0x19a>
 8003264:	2b30      	cmp	r3, #48	@ 0x30
 8003266:	d818      	bhi.n	800329a <UART_SetConfig+0x1a2>
 8003268:	2b20      	cmp	r3, #32
 800326a:	d00a      	beq.n	8003282 <UART_SetConfig+0x18a>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d814      	bhi.n	800329a <UART_SetConfig+0x1a2>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <UART_SetConfig+0x182>
 8003274:	2b10      	cmp	r3, #16
 8003276:	d008      	beq.n	800328a <UART_SetConfig+0x192>
 8003278:	e00f      	b.n	800329a <UART_SetConfig+0x1a2>
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003280:	e0ad      	b.n	80033de <UART_SetConfig+0x2e6>
 8003282:	2302      	movs	r3, #2
 8003284:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003288:	e0a9      	b.n	80033de <UART_SetConfig+0x2e6>
 800328a:	2304      	movs	r3, #4
 800328c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003290:	e0a5      	b.n	80033de <UART_SetConfig+0x2e6>
 8003292:	2308      	movs	r3, #8
 8003294:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003298:	e0a1      	b.n	80033de <UART_SetConfig+0x2e6>
 800329a:	2310      	movs	r3, #16
 800329c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a0:	e09d      	b.n	80033de <UART_SetConfig+0x2e6>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4a      	ldr	r2, [pc, #296]	@ (80033d0 <UART_SetConfig+0x2d8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d125      	bne.n	80032f8 <UART_SetConfig+0x200>
 80032ac:	4b45      	ldr	r3, [pc, #276]	@ (80033c4 <UART_SetConfig+0x2cc>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80032b8:	d016      	beq.n	80032e8 <UART_SetConfig+0x1f0>
 80032ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80032bc:	d818      	bhi.n	80032f0 <UART_SetConfig+0x1f8>
 80032be:	2b80      	cmp	r3, #128	@ 0x80
 80032c0:	d00a      	beq.n	80032d8 <UART_SetConfig+0x1e0>
 80032c2:	2b80      	cmp	r3, #128	@ 0x80
 80032c4:	d814      	bhi.n	80032f0 <UART_SetConfig+0x1f8>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <UART_SetConfig+0x1d8>
 80032ca:	2b40      	cmp	r3, #64	@ 0x40
 80032cc:	d008      	beq.n	80032e0 <UART_SetConfig+0x1e8>
 80032ce:	e00f      	b.n	80032f0 <UART_SetConfig+0x1f8>
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d6:	e082      	b.n	80033de <UART_SetConfig+0x2e6>
 80032d8:	2302      	movs	r3, #2
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032de:	e07e      	b.n	80033de <UART_SetConfig+0x2e6>
 80032e0:	2304      	movs	r3, #4
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e6:	e07a      	b.n	80033de <UART_SetConfig+0x2e6>
 80032e8:	2308      	movs	r3, #8
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ee:	e076      	b.n	80033de <UART_SetConfig+0x2e6>
 80032f0:	2310      	movs	r3, #16
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032f6:	e072      	b.n	80033de <UART_SetConfig+0x2e6>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a35      	ldr	r2, [pc, #212]	@ (80033d4 <UART_SetConfig+0x2dc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d12a      	bne.n	8003358 <UART_SetConfig+0x260>
 8003302:	4b30      	ldr	r3, [pc, #192]	@ (80033c4 <UART_SetConfig+0x2cc>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003308:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800330c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003310:	d01a      	beq.n	8003348 <UART_SetConfig+0x250>
 8003312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003316:	d81b      	bhi.n	8003350 <UART_SetConfig+0x258>
 8003318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800331c:	d00c      	beq.n	8003338 <UART_SetConfig+0x240>
 800331e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003322:	d815      	bhi.n	8003350 <UART_SetConfig+0x258>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <UART_SetConfig+0x238>
 8003328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800332c:	d008      	beq.n	8003340 <UART_SetConfig+0x248>
 800332e:	e00f      	b.n	8003350 <UART_SetConfig+0x258>
 8003330:	2300      	movs	r3, #0
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003336:	e052      	b.n	80033de <UART_SetConfig+0x2e6>
 8003338:	2302      	movs	r3, #2
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333e:	e04e      	b.n	80033de <UART_SetConfig+0x2e6>
 8003340:	2304      	movs	r3, #4
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003346:	e04a      	b.n	80033de <UART_SetConfig+0x2e6>
 8003348:	2308      	movs	r3, #8
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334e:	e046      	b.n	80033de <UART_SetConfig+0x2e6>
 8003350:	2310      	movs	r3, #16
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003356:	e042      	b.n	80033de <UART_SetConfig+0x2e6>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <UART_SetConfig+0x2c4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d13a      	bne.n	80033d8 <UART_SetConfig+0x2e0>
 8003362:	4b18      	ldr	r3, [pc, #96]	@ (80033c4 <UART_SetConfig+0x2cc>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003368:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800336c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003370:	d01a      	beq.n	80033a8 <UART_SetConfig+0x2b0>
 8003372:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003376:	d81b      	bhi.n	80033b0 <UART_SetConfig+0x2b8>
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800337c:	d00c      	beq.n	8003398 <UART_SetConfig+0x2a0>
 800337e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003382:	d815      	bhi.n	80033b0 <UART_SetConfig+0x2b8>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <UART_SetConfig+0x298>
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338c:	d008      	beq.n	80033a0 <UART_SetConfig+0x2a8>
 800338e:	e00f      	b.n	80033b0 <UART_SetConfig+0x2b8>
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003396:	e022      	b.n	80033de <UART_SetConfig+0x2e6>
 8003398:	2302      	movs	r3, #2
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800339e:	e01e      	b.n	80033de <UART_SetConfig+0x2e6>
 80033a0:	2304      	movs	r3, #4
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a6:	e01a      	b.n	80033de <UART_SetConfig+0x2e6>
 80033a8:	2308      	movs	r3, #8
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ae:	e016      	b.n	80033de <UART_SetConfig+0x2e6>
 80033b0:	2310      	movs	r3, #16
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033b6:	e012      	b.n	80033de <UART_SetConfig+0x2e6>
 80033b8:	efff69f3 	.word	0xefff69f3
 80033bc:	40008000 	.word	0x40008000
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40004800 	.word	0x40004800
 80033d0:	40004c00 	.word	0x40004c00
 80033d4:	40005000 	.word	0x40005000
 80033d8:	2310      	movs	r3, #16
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a9f      	ldr	r2, [pc, #636]	@ (8003660 <UART_SetConfig+0x568>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d17a      	bne.n	80034de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d824      	bhi.n	800343a <UART_SetConfig+0x342>
 80033f0:	a201      	add	r2, pc, #4	@ (adr r2, 80033f8 <UART_SetConfig+0x300>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	0800343b 	.word	0x0800343b
 8003400:	08003425 	.word	0x08003425
 8003404:	0800343b 	.word	0x0800343b
 8003408:	0800342b 	.word	0x0800342b
 800340c:	0800343b 	.word	0x0800343b
 8003410:	0800343b 	.word	0x0800343b
 8003414:	0800343b 	.word	0x0800343b
 8003418:	08003433 	.word	0x08003433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800341c:	f7fe fd46 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003420:	61f8      	str	r0, [r7, #28]
        break;
 8003422:	e010      	b.n	8003446 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003424:	4b8f      	ldr	r3, [pc, #572]	@ (8003664 <UART_SetConfig+0x56c>)
 8003426:	61fb      	str	r3, [r7, #28]
        break;
 8003428:	e00d      	b.n	8003446 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342a:	f7fe fca7 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 800342e:	61f8      	str	r0, [r7, #28]
        break;
 8003430:	e009      	b.n	8003446 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003436:	61fb      	str	r3, [r7, #28]
        break;
 8003438:	e005      	b.n	8003446 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003444:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80fb 	beq.w	8003644 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	429a      	cmp	r2, r3
 800345c:	d305      	bcc.n	800346a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	429a      	cmp	r2, r3
 8003468:	d903      	bls.n	8003472 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003470:	e0e8      	b.n	8003644 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2200      	movs	r2, #0
 8003476:	461c      	mov	r4, r3
 8003478:	4615      	mov	r5, r2
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	022b      	lsls	r3, r5, #8
 8003484:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003488:	0222      	lsls	r2, r4, #8
 800348a:	68f9      	ldr	r1, [r7, #12]
 800348c:	6849      	ldr	r1, [r1, #4]
 800348e:	0849      	lsrs	r1, r1, #1
 8003490:	2000      	movs	r0, #0
 8003492:	4688      	mov	r8, r1
 8003494:	4681      	mov	r9, r0
 8003496:	eb12 0a08 	adds.w	sl, r2, r8
 800349a:	eb43 0b09 	adc.w	fp, r3, r9
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ac:	4650      	mov	r0, sl
 80034ae:	4659      	mov	r1, fp
 80034b0:	f7fc fe9e 	bl	80001f0 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4613      	mov	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034c2:	d308      	bcc.n	80034d6 <UART_SetConfig+0x3de>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ca:	d204      	bcs.n	80034d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	e0b6      	b.n	8003644 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034dc:	e0b2      	b.n	8003644 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034e6:	d15e      	bne.n	80035a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80034e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d828      	bhi.n	8003542 <UART_SetConfig+0x44a>
 80034f0:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <UART_SetConfig+0x400>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	08003525 	.word	0x08003525
 8003500:	0800352d 	.word	0x0800352d
 8003504:	08003543 	.word	0x08003543
 8003508:	08003533 	.word	0x08003533
 800350c:	08003543 	.word	0x08003543
 8003510:	08003543 	.word	0x08003543
 8003514:	08003543 	.word	0x08003543
 8003518:	0800353b 	.word	0x0800353b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7fe fcc6 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003520:	61f8      	str	r0, [r7, #28]
        break;
 8003522:	e014      	b.n	800354e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7fe fcd8 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 8003528:	61f8      	str	r0, [r7, #28]
        break;
 800352a:	e010      	b.n	800354e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800352c:	4b4d      	ldr	r3, [pc, #308]	@ (8003664 <UART_SetConfig+0x56c>)
 800352e:	61fb      	str	r3, [r7, #28]
        break;
 8003530:	e00d      	b.n	800354e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003532:	f7fe fc23 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8003536:	61f8      	str	r0, [r7, #28]
        break;
 8003538:	e009      	b.n	800354e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800353e:	61fb      	str	r3, [r7, #28]
        break;
 8003540:	e005      	b.n	800354e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800354c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d077      	beq.n	8003644 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005a      	lsls	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	441a      	add	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0f      	cmp	r3, #15
 800356e:	d916      	bls.n	800359e <UART_SetConfig+0x4a6>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003576:	d212      	bcs.n	800359e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f023 030f 	bic.w	r3, r3, #15
 8003580:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	b29b      	uxth	r3, r3
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	b29a      	uxth	r2, r3
 800358e:	8afb      	ldrh	r3, [r7, #22]
 8003590:	4313      	orrs	r3, r2
 8003592:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	8afa      	ldrh	r2, [r7, #22]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e052      	b.n	8003644 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035a4:	e04e      	b.n	8003644 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d827      	bhi.n	80035fe <UART_SetConfig+0x506>
 80035ae:	a201      	add	r2, pc, #4	@ (adr r2, 80035b4 <UART_SetConfig+0x4bc>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	080035ef 	.word	0x080035ef
 80035c8:	080035ff 	.word	0x080035ff
 80035cc:	080035ff 	.word	0x080035ff
 80035d0:	080035ff 	.word	0x080035ff
 80035d4:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7fe fc68 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 80035dc:	61f8      	str	r0, [r7, #28]
        break;
 80035de:	e014      	b.n	800360a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7fe fc7a 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 80035e4:	61f8      	str	r0, [r7, #28]
        break;
 80035e6:	e010      	b.n	800360a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003664 <UART_SetConfig+0x56c>)
 80035ea:	61fb      	str	r3, [r7, #28]
        break;
 80035ec:	e00d      	b.n	800360a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7fe fbc5 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 80035f2:	61f8      	str	r0, [r7, #28]
        break;
 80035f4:	e009      	b.n	800360a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fa:	61fb      	str	r3, [r7, #28]
        break;
 80035fc:	e005      	b.n	800360a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003608:	bf00      	nop
    }

    if (pclk != 0U)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d019      	beq.n	8003644 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	085a      	lsrs	r2, r3, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	441a      	add	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b0f      	cmp	r3, #15
 8003628:	d909      	bls.n	800363e <UART_SetConfig+0x546>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003630:	d205      	bcs.n	800363e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	e002      	b.n	8003644 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003650:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003654:	4618      	mov	r0, r3
 8003656:	3728      	adds	r7, #40	@ 0x28
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365e:	bf00      	nop
 8003660:	40008000 	.word	0x40008000
 8003664:	00f42400 	.word	0x00f42400

08003668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01a      	beq.n	800377e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003766:	d10a      	bne.n	800377e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b098      	sub	sp, #96	@ 0x60
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037bc:	f7fd faa0 	bl	8000d00 <HAL_GetTick>
 80037c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d12e      	bne.n	800382e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f88c 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d021      	beq.n	800382e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003808:	647b      	str	r3, [r7, #68]	@ 0x44
 800380a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800380e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e6      	bne.n	80037ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e062      	b.n	80038f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d149      	bne.n	80038d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800383c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	2200      	movs	r2, #0
 8003846:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f856 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d03c      	beq.n	80038d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	623b      	str	r3, [r7, #32]
   return(result);
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800386a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003874:	633b      	str	r3, [r7, #48]	@ 0x30
 8003876:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800387a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e6      	bne.n	8003856 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	60fb      	str	r3, [r7, #12]
   return(result);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038a8:	61fa      	str	r2, [r7, #28]
 80038aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	69b9      	ldr	r1, [r7, #24]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	617b      	str	r3, [r7, #20]
   return(result);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e5      	bne.n	8003888 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e011      	b.n	80038f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3758      	adds	r7, #88	@ 0x58
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390c:	e04f      	b.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003914:	d04b      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fd f9f3 	bl	8000d00 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <UART_WaitOnFlagUntilTimeout+0x30>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e04e      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d037      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b80      	cmp	r3, #128	@ 0x80
 8003942:	d034      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d031      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d110      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2208      	movs	r2, #8
 800395e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f838 	bl	80039d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2208      	movs	r2, #8
 800396a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e029      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003988:	d111      	bne.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f81e 	bl	80039d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e00f      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0a0      	beq.n	800390e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b095      	sub	sp, #84	@ 0x54
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80039fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e6      	bne.n	80039de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e5      	bne.n	8003a10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d118      	bne.n	8003a7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f023 0310 	bic.w	r3, r3, #16
 8003a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6979      	ldr	r1, [r7, #20]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	613b      	str	r3, [r7, #16]
   return(result);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e6      	bne.n	8003a4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a92:	bf00      	nop
 8003a94:	3754      	adds	r7, #84	@ 0x54
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <__NVIC_SetPriority>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	6039      	str	r1, [r7, #0]
 8003aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	db0a      	blt.n	8003aca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	490c      	ldr	r1, [pc, #48]	@ (8003aec <__NVIC_SetPriority+0x4c>)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	0112      	lsls	r2, r2, #4
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ac8:	e00a      	b.n	8003ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	4908      	ldr	r1, [pc, #32]	@ (8003af0 <__NVIC_SetPriority+0x50>)
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	3b04      	subs	r3, #4
 8003ad8:	0112      	lsls	r2, r2, #4
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	440b      	add	r3, r1
 8003ade:	761a      	strb	r2, [r3, #24]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000e100 	.word	0xe000e100
 8003af0:	e000ed00 	.word	0xe000ed00

08003af4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <SysTick_Handler+0x1c>)
 8003afa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003afc:	f002 f996 	bl	8005e2c <xTaskGetSchedulerState>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b06:	f003 f88f 	bl	8006c28 <xPortSysTickHandler>
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	e000e010 	.word	0xe000e010

08003b14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f06f 0004 	mvn.w	r0, #4
 8003b1e:	f7ff ffbf 	bl	8003aa0 <__NVIC_SetPriority>
#endif
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b2e:	f3ef 8305 	mrs	r3, IPSR
 8003b32:	603b      	str	r3, [r7, #0]
  return(result);
 8003b34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b3a:	f06f 0305 	mvn.w	r3, #5
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	e00c      	b.n	8003b5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b42:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <osKernelInitialize+0x44>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <osKernelInitialize+0x44>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	e002      	b.n	8003b5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b5c:	687b      	ldr	r3, [r7, #4]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000178 	.word	0x20000178

08003b70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b76:	f3ef 8305 	mrs	r3, IPSR
 8003b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b82:	f06f 0305 	mvn.w	r3, #5
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	e010      	b.n	8003bac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <osKernelStart+0x48>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d109      	bne.n	8003ba6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b92:	f7ff ffbf 	bl	8003b14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b96:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <osKernelStart+0x48>)
 8003b98:	2202      	movs	r2, #2
 8003b9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b9c:	f001 fce2 	bl	8005564 <vTaskStartScheduler>
      stat = osOK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	e002      	b.n	8003bac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003baa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bac:	687b      	ldr	r3, [r7, #4]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000178 	.word	0x20000178

08003bbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08e      	sub	sp, #56	@ 0x38
 8003bc0:	af04      	add	r7, sp, #16
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bcc:	f3ef 8305 	mrs	r3, IPSR
 8003bd0:	617b      	str	r3, [r7, #20]
  return(result);
 8003bd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d17e      	bne.n	8003cd6 <osThreadNew+0x11a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d07b      	beq.n	8003cd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003bde:	2380      	movs	r3, #128	@ 0x80
 8003be0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003be2:	2318      	movs	r3, #24
 8003be4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d045      	beq.n	8003c82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <osThreadNew+0x48>
        name = attr->name;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <osThreadNew+0x6e>
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b38      	cmp	r3, #56	@ 0x38
 8003c1c:	d805      	bhi.n	8003c2a <osThreadNew+0x6e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <osThreadNew+0x72>
        return (NULL);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e054      	b.n	8003cd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00e      	beq.n	8003c64 <osThreadNew+0xa8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2ba7      	cmp	r3, #167	@ 0xa7
 8003c4c:	d90a      	bls.n	8003c64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d006      	beq.n	8003c64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <osThreadNew+0xa8>
        mem = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e010      	b.n	8003c86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10c      	bne.n	8003c86 <osThreadNew+0xca>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <osThreadNew+0xca>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <osThreadNew+0xca>
          mem = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	e001      	b.n	8003c86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d110      	bne.n	8003cae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c94:	9202      	str	r2, [sp, #8]
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f001 fa6a 	bl	800517c <xTaskCreateStatic>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e013      	b.n	8003cd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d110      	bne.n	8003cd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	f107 0310 	add.w	r3, r7, #16
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f001 fab8 	bl	800523c <xTaskCreate>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <osThreadNew+0x11a>
            hTask = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003cd6:	693b      	ldr	r3, [r7, #16]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3728      	adds	r7, #40	@ 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce8:	f3ef 8305 	mrs	r3, IPSR
 8003cec:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <osDelay+0x1c>
    stat = osErrorISR;
 8003cf4:	f06f 0305 	mvn.w	r3, #5
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e007      	b.n	8003d0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f001 fbf6 	bl	80054f8 <vTaskDelay>
    }
  }

  return (stat);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b08a      	sub	sp, #40	@ 0x28
 8003d1a:	af02      	add	r7, sp, #8
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d26:	f3ef 8305 	mrs	r3, IPSR
 8003d2a:	613b      	str	r3, [r7, #16]
  return(result);
 8003d2c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d175      	bne.n	8003e1e <osSemaphoreNew+0x108>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d072      	beq.n	8003e1e <osSemaphoreNew+0x108>
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d86e      	bhi.n	8003e1e <osSemaphoreNew+0x108>
    mem = -1;
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d015      	beq.n	8003d78 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <osSemaphoreNew+0x4c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b4f      	cmp	r3, #79	@ 0x4f
 8003d5a:	d902      	bls.n	8003d62 <osSemaphoreNew+0x4c>
        mem = 1;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	e00c      	b.n	8003d7c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <osSemaphoreNew+0x66>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <osSemaphoreNew+0x66>
          mem = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e001      	b.n	8003d7c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d82:	d04c      	beq.n	8003e1e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d128      	bne.n	8003ddc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10a      	bne.n	8003da6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2203      	movs	r2, #3
 8003d96:	9200      	str	r2, [sp, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f000 fa2b 	bl	80041f8 <xQueueGenericCreateStatic>
 8003da2:	61f8      	str	r0, [r7, #28]
 8003da4:	e005      	b.n	8003db2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003da6:	2203      	movs	r2, #3
 8003da8:	2100      	movs	r1, #0
 8003daa:	2001      	movs	r0, #1
 8003dac:	f000 faa1 	bl	80042f2 <xQueueGenericCreate>
 8003db0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d022      	beq.n	8003dfe <osSemaphoreNew+0xe8>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01f      	beq.n	8003dfe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	69f8      	ldr	r0, [r7, #28]
 8003dc6:	f000 fb61 	bl	800448c <xQueueGenericSend>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d016      	beq.n	8003dfe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003dd0:	69f8      	ldr	r0, [r7, #28]
 8003dd2:	f000 ffff 	bl	8004dd4 <vQueueDelete>
            hSemaphore = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e010      	b.n	8003dfe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d108      	bne.n	8003df4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fadf 	bl	80043ae <xQueueCreateCountingSemaphoreStatic>
 8003df0:	61f8      	str	r0, [r7, #28]
 8003df2:	e004      	b.n	8003dfe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fb12 	bl	8004420 <xQueueCreateCountingSemaphore>
 8003dfc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e001      	b.n	8003e16 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	69f8      	ldr	r0, [r7, #28]
 8003e1a:	f001 f927 	bl	800506c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003e1e:	69fb      	ldr	r3, [r7, #28]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003e40:	f06f 0303 	mvn.w	r3, #3
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e039      	b.n	8003ebc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e48:	f3ef 8305 	mrs	r3, IPSR
 8003e4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d022      	beq.n	8003e9a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003e5a:	f06f 0303 	mvn.w	r3, #3
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e02c      	b.n	8003ebc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	6938      	ldr	r0, [r7, #16]
 8003e70:	f000 ff2e 	bl	8004cd0 <xQueueReceiveFromISR>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d003      	beq.n	8003e82 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003e7a:	f06f 0302 	mvn.w	r3, #2
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e01c      	b.n	8003ebc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <osSemaphoreAcquire+0x94>
 8003e88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec8 <osSemaphoreAcquire+0xa0>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	e010      	b.n	8003ebc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	6938      	ldr	r0, [r7, #16]
 8003e9e:	f000 fe07 	bl	8004ab0 <xQueueSemaphoreTake>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d009      	beq.n	8003ebc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003eae:	f06f 0301 	mvn.w	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e002      	b.n	8003ebc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003eb6:	f06f 0302 	mvn.w	r3, #2
 8003eba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003ebc:	697b      	ldr	r3, [r7, #20]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003ee2:	f06f 0303 	mvn.w	r3, #3
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e02c      	b.n	8003f44 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eea:	f3ef 8305 	mrs	r3, IPSR
 8003eee:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01a      	beq.n	8003f2c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	4619      	mov	r1, r3
 8003f00:	6938      	ldr	r0, [r7, #16]
 8003f02:	f000 fc63 	bl	80047cc <xQueueGiveFromISR>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d003      	beq.n	8003f14 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003f0c:	f06f 0302 	mvn.w	r3, #2
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	e017      	b.n	8003f44 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d014      	beq.n	8003f44 <osSemaphoreRelease+0x78>
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <osSemaphoreRelease+0x84>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	e00b      	b.n	8003f44 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	6938      	ldr	r0, [r7, #16]
 8003f34:	f000 faaa 	bl	800448c <xQueueGenericSend>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d002      	beq.n	8003f44 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003f3e:	f06f 0302 	mvn.w	r3, #2
 8003f42:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003f44:	697b      	ldr	r3, [r7, #20]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a07      	ldr	r2, [pc, #28]	@ (8003f80 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4a06      	ldr	r2, [pc, #24]	@ (8003f84 <vApplicationGetIdleTaskMemory+0x30>)
 8003f6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2280      	movs	r2, #128	@ 0x80
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	2000017c 	.word	0x2000017c
 8003f84:	20000224 	.word	0x20000224

08003f88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a07      	ldr	r2, [pc, #28]	@ (8003fb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4a06      	ldr	r2, [pc, #24]	@ (8003fb8 <vApplicationGetTimerTaskMemory+0x30>)
 8003f9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20000424 	.word	0x20000424
 8003fb8:	200004cc 	.word	0x200004cc

08003fbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f103 0208 	add.w	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f103 0208 	add.w	r2, r3, #8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f103 0208 	add.w	r2, r3, #8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	601a      	str	r2, [r3, #0]
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004074:	d103      	bne.n	800407e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e00c      	b.n	8004098 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3308      	adds	r3, #8
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e002      	b.n	800408c <vListInsert+0x2e>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	429a      	cmp	r2, r3
 8004096:	d2f6      	bcs.n	8004086 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6852      	ldr	r2, [r2, #4]
 80040f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d103      	bne.n	8004104 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1e5a      	subs	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800414a:	bf00      	nop
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004150:	f002 fcda 	bl	8006b08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	441a      	add	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	3b01      	subs	r3, #1
 8004182:	68f9      	ldr	r1, [r7, #12]
 8004184:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	441a      	add	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	22ff      	movs	r2, #255	@ 0xff
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	22ff      	movs	r2, #255	@ 0xff
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d114      	bne.n	80041d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3310      	adds	r3, #16
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fc74 	bl	8005aa0 <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <xQueueGenericReset+0xd0>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	e009      	b.n	80041e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3310      	adds	r3, #16
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fef1 	bl	8003fbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3324      	adds	r3, #36	@ 0x24
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff feec 	bl	8003fbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041e4:	f002 fcc2 	bl	8006b6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041e8:	2301      	movs	r3, #1
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	e000ed04 	.word	0xe000ed04

080041f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08e      	sub	sp, #56	@ 0x38
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	e7fd      	b.n	800423e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <xQueueGenericCreateStatic+0x56>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <xQueueGenericCreateStatic+0x5a>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <xQueueGenericCreateStatic+0x5c>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	623b      	str	r3, [r7, #32]
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <xQueueGenericCreateStatic+0x84>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <xQueueGenericCreateStatic+0x88>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <xQueueGenericCreateStatic+0x8a>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	61fb      	str	r3, [r7, #28]
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	e7fd      	b.n	800429a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800429e:	2350      	movs	r3, #80	@ 0x50
 80042a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b50      	cmp	r3, #80	@ 0x50
 80042a6:	d00b      	beq.n	80042c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	61bb      	str	r3, [r7, #24]
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f840 	bl	8004368 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3730      	adds	r7, #48	@ 0x30
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	@ 0x28
 80042f6:	af02      	add	r7, sp, #8
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	613b      	str	r3, [r7, #16]
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	3350      	adds	r3, #80	@ 0x50
 800432c:	4618      	mov	r0, r3
 800432e:	f002 fd0d 	bl	8006d4c <pvPortMalloc>
 8004332:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d011      	beq.n	800435e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3350      	adds	r3, #80	@ 0x50
 8004342:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800434c:	79fa      	ldrb	r2, [r7, #7]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f805 	bl	8004368 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800435e:	69bb      	ldr	r3, [r7, #24]
	}
 8004360:	4618      	mov	r0, r3
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e002      	b.n	800438a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004396:	2101      	movs	r1, #1
 8004398:	69b8      	ldr	r0, [r7, #24]
 800439a:	f7ff fec3 	bl	8004124 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08a      	sub	sp, #40	@ 0x28
 80043b2:	af02      	add	r7, sp, #8
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	61bb      	str	r3, [r7, #24]
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d90b      	bls.n	80043f8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	617b      	str	r3, [r7, #20]
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	e7fd      	b.n	80043f4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80043f8:	2302      	movs	r3, #2
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	2100      	movs	r1, #0
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7ff fef8 	bl	80041f8 <xQueueGenericCreateStatic>
 8004408:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004416:	69fb      	ldr	r3, [r7, #28]
	}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	613b      	str	r3, [r7, #16]
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d90b      	bls.n	8004468 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	60fb      	str	r3, [r7, #12]
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004468:	2202      	movs	r2, #2
 800446a:	2100      	movs	r1, #0
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ff40 	bl	80042f2 <xQueueGenericCreate>
 8004472:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004480:	697b      	ldr	r3, [r7, #20]
	}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08e      	sub	sp, #56	@ 0x38
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800449a:	2300      	movs	r3, #0
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <xQueueGenericSend+0x34>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	e7fd      	b.n	80044bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <xQueueGenericSend+0x42>
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <xQueueGenericSend+0x46>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <xQueueGenericSend+0x48>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10b      	bne.n	80044f0 <xQueueGenericSend+0x64>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d103      	bne.n	80044fe <xQueueGenericSend+0x72>
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <xQueueGenericSend+0x76>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <xQueueGenericSend+0x78>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10b      	bne.n	8004520 <xQueueGenericSend+0x94>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	623b      	str	r3, [r7, #32]
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004520:	f001 fc84 	bl	8005e2c <xTaskGetSchedulerState>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <xQueueGenericSend+0xa4>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <xQueueGenericSend+0xa8>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <xQueueGenericSend+0xaa>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <xQueueGenericSend+0xc6>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	61fb      	str	r3, [r7, #28]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004552:	f002 fad9 	bl	8006b08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <xQueueGenericSend+0xdc>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d129      	bne.n	80045bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800456e:	f000 fc6d 	bl	8004e4c <prvCopyDataToQueue>
 8004572:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	3324      	adds	r3, #36	@ 0x24
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fa8d 	bl	8005aa0 <xTaskRemoveFromEventList>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800458c:	4b3f      	ldr	r3, [pc, #252]	@ (800468c <xQueueGenericSend+0x200>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	e00a      	b.n	80045b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045a4:	4b39      	ldr	r3, [pc, #228]	@ (800468c <xQueueGenericSend+0x200>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045b4:	f002 fada 	bl	8006b6c <vPortExitCritical>
				return pdPASS;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e063      	b.n	8004684 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045c2:	f002 fad3 	bl	8006b6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e05c      	b.n	8004684 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fac7 	bl	8005b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045da:	2301      	movs	r3, #1
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045de:	f002 fac5 	bl	8006b6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045e2:	f001 f82f 	bl	8005644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045e6:	f002 fa8f 	bl	8006b08 <vPortEnterCritical>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f6:	d103      	bne.n	8004600 <xQueueGenericSend+0x174>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004606:	b25b      	sxtb	r3, r3
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800460c:	d103      	bne.n	8004616 <xQueueGenericSend+0x18a>
 800460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004616:	f002 faa9 	bl	8006b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800461a:	1d3a      	adds	r2, r7, #4
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f001 fab6 	bl	8005b94 <xTaskCheckForTimeOut>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d124      	bne.n	8004678 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800462e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004630:	f000 fd04 	bl	800503c <prvIsQueueFull>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463c:	3310      	adds	r3, #16
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f9da 	bl	80059fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800464a:	f000 fc8f 	bl	8004f6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800464e:	f001 f807 	bl	8005660 <xTaskResumeAll>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	f47f af7c 	bne.w	8004552 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800465a:	4b0c      	ldr	r3, [pc, #48]	@ (800468c <xQueueGenericSend+0x200>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	e772      	b.n	8004552 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800466c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800466e:	f000 fc7d 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004672:	f000 fff5 	bl	8005660 <xTaskResumeAll>
 8004676:	e76c      	b.n	8004552 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800467a:	f000 fc77 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800467e:	f000 ffef 	bl	8005660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004682:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004684:	4618      	mov	r0, r3
 8004686:	3738      	adds	r7, #56	@ 0x38
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b090      	sub	sp, #64	@ 0x40
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80046a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <xQueueGenericSendFromISR+0x3e>
 80046c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <xQueueGenericSendFromISR+0x42>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <xQueueGenericSendFromISR+0x44>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d103      	bne.n	80046fe <xQueueGenericSendFromISR+0x6e>
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <xQueueGenericSendFromISR+0x72>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <xQueueGenericSendFromISR+0x74>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	623b      	str	r3, [r7, #32]
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004720:	f002 fad2 	bl	8006cc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004724:	f3ef 8211 	mrs	r2, BASEPRI
 8004728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	61fa      	str	r2, [r7, #28]
 800473a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800473c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800473e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <xQueueGenericSendFromISR+0xc2>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d12f      	bne.n	80047b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004754:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004758:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800475c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004768:	f000 fb70 	bl	8004e4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800476c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004774:	d112      	bne.n	800479c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800477e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004780:	3324      	adds	r3, #36	@ 0x24
 8004782:	4618      	mov	r0, r3
 8004784:	f001 f98c 	bl	8005aa0 <xTaskRemoveFromEventList>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00e      	beq.n	80047ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e007      	b.n	80047ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800479c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80047a0:	3301      	adds	r3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	b25a      	sxtb	r2, r3
 80047a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80047ac:	2301      	movs	r3, #1
 80047ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80047b0:	e001      	b.n	80047b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3740      	adds	r7, #64	@ 0x40
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08e      	sub	sp, #56	@ 0x38
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	623b      	str	r3, [r7, #32]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	61fb      	str	r3, [r7, #28]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <xQueueGiveFromISR+0x5c>
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <xQueueGiveFromISR+0x60>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <xQueueGiveFromISR+0x62>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	61bb      	str	r3, [r7, #24]
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800484a:	f002 fa3d 	bl	8006cc8 <vPortValidateInterruptPriority>
	__asm volatile
 800484e:	f3ef 8211 	mrs	r2, BASEPRI
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	617a      	str	r2, [r7, #20]
 8004864:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004866:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004868:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004876:	429a      	cmp	r2, r3
 8004878:	d22b      	bcs.n	80048d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800488c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004894:	d112      	bne.n	80048bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	3324      	adds	r3, #36	@ 0x24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 f8fc 	bl	8005aa0 <xTaskRemoveFromEventList>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00e      	beq.n	80048cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e007      	b.n	80048cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048c0:	3301      	adds	r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	b25a      	sxtb	r2, r3
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80048cc:	2301      	movs	r3, #1
 80048ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d0:	e001      	b.n	80048d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f383 8811 	msr	BASEPRI, r3
}
 80048e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3738      	adds	r7, #56	@ 0x38
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08c      	sub	sp, #48	@ 0x30
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <xQueueReceive+0x32>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	623b      	str	r3, [r7, #32]
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <xQueueReceive+0x40>
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <xQueueReceive+0x44>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xQueueReceive+0x46>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <xQueueReceive+0x62>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61fb      	str	r3, [r7, #28]
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	e7fd      	b.n	800494a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800494e:	f001 fa6d 	bl	8005e2c <xTaskGetSchedulerState>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <xQueueReceive+0x72>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <xQueueReceive+0x76>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <xQueueReceive+0x78>
 8004962:	2300      	movs	r3, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10b      	bne.n	8004980 <xQueueReceive+0x94>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004980:	f002 f8c2 	bl	8006b08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01f      	beq.n	80049d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004994:	f000 fac4 	bl	8004f20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00f      	beq.n	80049c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049aa:	3310      	adds	r3, #16
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f877 	bl	8005aa0 <xTaskRemoveFromEventList>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049b8:	4b3c      	ldr	r3, [pc, #240]	@ (8004aac <xQueueReceive+0x1c0>)
 80049ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049c8:	f002 f8d0 	bl	8006b6c <vPortExitCritical>
				return pdPASS;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e069      	b.n	8004aa4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049d6:	f002 f8c9 	bl	8006b6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049da:	2300      	movs	r3, #0
 80049dc:	e062      	b.n	8004aa4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049e4:	f107 0310 	add.w	r3, r7, #16
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 f8bd 	bl	8005b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049f2:	f002 f8bb 	bl	8006b6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049f6:	f000 fe25 	bl	8005644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049fa:	f002 f885 	bl	8006b08 <vPortEnterCritical>
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a04:	b25b      	sxtb	r3, r3
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a0a:	d103      	bne.n	8004a14 <xQueueReceive+0x128>
 8004a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a20:	d103      	bne.n	8004a2a <xQueueReceive+0x13e>
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a2a:	f002 f89f 	bl	8006b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a2e:	1d3a      	adds	r2, r7, #4
 8004a30:	f107 0310 	add.w	r3, r7, #16
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 f8ac 	bl	8005b94 <xTaskCheckForTimeOut>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d123      	bne.n	8004a8a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a44:	f000 fae4 	bl	8005010 <prvIsQueueEmpty>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a50:	3324      	adds	r3, #36	@ 0x24
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 ffd0 	bl	80059fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a5e:	f000 fa85 	bl	8004f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a62:	f000 fdfd 	bl	8005660 <xTaskResumeAll>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d189      	bne.n	8004980 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <xQueueReceive+0x1c0>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	e780      	b.n	8004980 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a80:	f000 fa74 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a84:	f000 fdec 	bl	8005660 <xTaskResumeAll>
 8004a88:	e77a      	b.n	8004980 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a8c:	f000 fa6e 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a90:	f000 fde6 	bl	8005660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a96:	f000 fabb 	bl	8005010 <prvIsQueueEmpty>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f43f af6f 	beq.w	8004980 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004aa2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3730      	adds	r7, #48	@ 0x30
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08e      	sub	sp, #56	@ 0x38
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10b      	bne.n	8004ae4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	623b      	str	r3, [r7, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	e7fd      	b.n	8004ae0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	61fb      	str	r3, [r7, #28]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b04:	f001 f992 	bl	8005e2c <xTaskGetSchedulerState>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <xQueueSemaphoreTake+0x64>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <xQueueSemaphoreTake+0x68>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <xQueueSemaphoreTake+0x6a>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	61bb      	str	r3, [r7, #24]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b36:	f001 ffe7 	bl	8006b08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d024      	beq.n	8004b90 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d104      	bne.n	8004b60 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b56:	f001 fae3 	bl	8006120 <pvTaskIncrementMutexHeldCount>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00f      	beq.n	8004b88 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	3310      	adds	r3, #16
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 ff97 	bl	8005aa0 <xTaskRemoveFromEventList>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b78:	4b54      	ldr	r3, [pc, #336]	@ (8004ccc <xQueueSemaphoreTake+0x21c>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b88:	f001 fff0 	bl	8006b6c <vPortExitCritical>
				return pdPASS;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e098      	b.n	8004cc2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d112      	bne.n	8004bbc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00b      	beq.n	8004bb4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	617b      	str	r3, [r7, #20]
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	e7fd      	b.n	8004bb0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004bb4:	f001 ffda 	bl	8006b6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e082      	b.n	8004cc2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bc2:	f107 030c 	add.w	r3, r7, #12
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 ffce 	bl	8005b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bd0:	f001 ffcc 	bl	8006b6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bd4:	f000 fd36 	bl	8005644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bd8:	f001 ff96 	bl	8006b08 <vPortEnterCritical>
 8004bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004be2:	b25b      	sxtb	r3, r3
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004be8:	d103      	bne.n	8004bf2 <xQueueSemaphoreTake+0x142>
 8004bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bf8:	b25b      	sxtb	r3, r3
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bfe:	d103      	bne.n	8004c08 <xQueueSemaphoreTake+0x158>
 8004c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c08:	f001 ffb0 	bl	8006b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c0c:	463a      	mov	r2, r7
 8004c0e:	f107 030c 	add.w	r3, r7, #12
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 ffbd 	bl	8005b94 <xTaskCheckForTimeOut>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d132      	bne.n	8004c86 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c22:	f000 f9f5 	bl	8005010 <prvIsQueueEmpty>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d026      	beq.n	8004c7a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004c34:	f001 ff68 	bl	8006b08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f913 	bl	8005e68 <xTaskPriorityInherit>
 8004c42:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004c44:	f001 ff92 	bl	8006b6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4a:	3324      	adds	r3, #36	@ 0x24
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fed3 	bl	80059fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c58:	f000 f988 	bl	8004f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c5c:	f000 fd00 	bl	8005660 <xTaskResumeAll>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f47f af67 	bne.w	8004b36 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004c68:	4b18      	ldr	r3, [pc, #96]	@ (8004ccc <xQueueSemaphoreTake+0x21c>)
 8004c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	e75d      	b.n	8004b36 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c7c:	f000 f976 	bl	8004f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c80:	f000 fcee 	bl	8005660 <xTaskResumeAll>
 8004c84:	e757      	b.n	8004b36 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c88:	f000 f970 	bl	8004f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c8c:	f000 fce8 	bl	8005660 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c92:	f000 f9bd 	bl	8005010 <prvIsQueueEmpty>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f43f af4c 	beq.w	8004b36 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004ca4:	f001 ff30 	bl	8006b08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004caa:	f000 f8b7 	bl	8004e1c <prvGetDisinheritPriorityAfterTimeout>
 8004cae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 f9ae 	bl	8006018 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004cbc:	f001 ff56 	bl	8006b6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3738      	adds	r7, #56	@ 0x38
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08e      	sub	sp, #56	@ 0x38
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	623b      	str	r3, [r7, #32]
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	e7fd      	b.n	8004cfa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <xQueueReceiveFromISR+0x3c>
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <xQueueReceiveFromISR+0x40>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <xQueueReceiveFromISR+0x42>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	61fb      	str	r3, [r7, #28]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d2e:	f001 ffcb 	bl	8006cc8 <vPortValidateInterruptPriority>
	__asm volatile
 8004d32:	f3ef 8211 	mrs	r2, BASEPRI
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	61ba      	str	r2, [r7, #24]
 8004d48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02f      	beq.n	8004dba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d68:	f000 f8da 	bl	8004f20 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	1e5a      	subs	r2, r3, #1
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d7c:	d112      	bne.n	8004da4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	3310      	adds	r3, #16
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fe88 	bl	8005aa0 <xTaskRemoveFromEventList>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00e      	beq.n	8004db4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00b      	beq.n	8004db4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e007      	b.n	8004db4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004da8:	3301      	adds	r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	b25a      	sxtb	r2, r3
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004db4:	2301      	movs	r3, #1
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db8:	e001      	b.n	8004dbe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f383 8811 	msr	BASEPRI, r3
}
 8004dc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3738      	adds	r7, #56	@ 0x38
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <vQueueDelete+0x2a>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	60bb      	str	r3, [r7, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	e7fd      	b.n	8004dfa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f95e 	bl	80050c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f002 f86a 	bl	8006ee8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d006      	beq.n	8004e3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	e001      	b.n	8004e3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d14d      	bne.n	8004f0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 f85e 	bl	8005f38 <xTaskPriorityDisinherit>
 8004e7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	e043      	b.n	8004f0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d119      	bne.n	8004ec0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6858      	ldr	r0, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e94:	461a      	mov	r2, r3
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	f002 fc0f 	bl	80076ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	441a      	add	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d32b      	bcc.n	8004f0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	e026      	b.n	8004f0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68d8      	ldr	r0, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	f002 fbf5 	bl	80076ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	425b      	negs	r3, r3
 8004eda:	441a      	add	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d207      	bcs.n	8004efc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	425b      	negs	r3, r3
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d105      	bne.n	8004f0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f16:	697b      	ldr	r3, [r7, #20]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	441a      	add	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d303      	bcc.n	8004f54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68d9      	ldr	r1, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6838      	ldr	r0, [r7, #0]
 8004f60:	f002 fbab 	bl	80076ba <memcpy>
	}
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f74:	f001 fdc8 	bl	8006b08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f80:	e011      	b.n	8004fa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	@ 0x24
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fd86 	bl	8005aa0 <xTaskRemoveFromEventList>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f9a:	f000 fe5f 	bl	8005c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	dce9      	bgt.n	8004f82 <prvUnlockQueue+0x16>
 8004fae:	e000      	b.n	8004fb2 <prvUnlockQueue+0x46>
					break;
 8004fb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	22ff      	movs	r2, #255	@ 0xff
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fba:	f001 fdd7 	bl	8006b6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fbe:	f001 fda3 	bl	8006b08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fca:	e011      	b.n	8004ff0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d012      	beq.n	8004ffa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fd61 	bl	8005aa0 <xTaskRemoveFromEventList>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fe4:	f000 fe3a 	bl	8005c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	dce9      	bgt.n	8004fcc <prvUnlockQueue+0x60>
 8004ff8:	e000      	b.n	8004ffc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ffa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	22ff      	movs	r2, #255	@ 0xff
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005004:	f001 fdb2 	bl	8006b6c <vPortExitCritical>
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005018:	f001 fd76 	bl	8006b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e001      	b.n	800502e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800502e:	f001 fd9d 	bl	8006b6c <vPortExitCritical>

	return xReturn;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005044:	f001 fd60 	bl	8006b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	429a      	cmp	r2, r3
 8005052:	d102      	bne.n	800505a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e001      	b.n	800505e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800505e:	f001 fd85 	bl	8006b6c <vPortExitCritical>

	return xReturn;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e014      	b.n	80050a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800507c:	4a0f      	ldr	r2, [pc, #60]	@ (80050bc <vQueueAddToRegistry+0x50>)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10b      	bne.n	80050a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005088:	490c      	ldr	r1, [pc, #48]	@ (80050bc <vQueueAddToRegistry+0x50>)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005092:	4a0a      	ldr	r2, [pc, #40]	@ (80050bc <vQueueAddToRegistry+0x50>)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800509e:	e006      	b.n	80050ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b07      	cmp	r3, #7
 80050aa:	d9e7      	bls.n	800507c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	200008cc 	.word	0x200008cc

080050c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e016      	b.n	80050fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80050ce:	4a10      	ldr	r2, [pc, #64]	@ (8005110 <vQueueUnregisterQueue+0x50>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d10b      	bne.n	80050f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80050de:	4a0c      	ldr	r2, [pc, #48]	@ (8005110 <vQueueUnregisterQueue+0x50>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2100      	movs	r1, #0
 80050e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80050e8:	4a09      	ldr	r2, [pc, #36]	@ (8005110 <vQueueUnregisterQueue+0x50>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4413      	add	r3, r2
 80050f0:	2200      	movs	r2, #0
 80050f2:	605a      	str	r2, [r3, #4]
				break;
 80050f4:	e006      	b.n	8005104 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b07      	cmp	r3, #7
 8005100:	d9e5      	bls.n	80050ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	200008cc 	.word	0x200008cc

08005114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005124:	f001 fcf0 	bl	8006b08 <vPortEnterCritical>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800512e:	b25b      	sxtb	r3, r3
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005134:	d103      	bne.n	800513e <vQueueWaitForMessageRestricted+0x2a>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005144:	b25b      	sxtb	r3, r3
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800514a:	d103      	bne.n	8005154 <vQueueWaitForMessageRestricted+0x40>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005154:	f001 fd0a 	bl	8006b6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3324      	adds	r3, #36	@ 0x24
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fc6d 	bl	8005a48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800516e:	6978      	ldr	r0, [r7, #20]
 8005170:	f7ff fefc 	bl	8004f6c <prvUnlockQueue>
	}
 8005174:	bf00      	nop
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08e      	sub	sp, #56	@ 0x38
 8005180:	af04      	add	r7, sp, #16
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800518a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	623b      	str	r3, [r7, #32]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	61fb      	str	r3, [r7, #28]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051c6:	23a8      	movs	r3, #168	@ 0xa8
 80051c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2ba8      	cmp	r3, #168	@ 0xa8
 80051ce:	d00b      	beq.n	80051e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61bb      	str	r3, [r7, #24]
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01e      	beq.n	800522e <xTaskCreateStatic+0xb2>
 80051f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01b      	beq.n	800522e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	2202      	movs	r2, #2
 8005204:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005208:	2300      	movs	r3, #0
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f851 	bl	80052c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005228:	f000 f8f6 	bl	8005418 <prvAddNewTaskToReadyList>
 800522c:	e001      	b.n	8005232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005232:	697b      	ldr	r3, [r7, #20]
	}
 8005234:	4618      	mov	r0, r3
 8005236:	3728      	adds	r7, #40	@ 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	@ 0x30
 8005240:	af04      	add	r7, sp, #16
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fd7b 	bl	8006d4c <pvPortMalloc>
 8005256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800525e:	20a8      	movs	r0, #168	@ 0xa8
 8005260:	f001 fd74 	bl	8006d4c <pvPortMalloc>
 8005264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	631a      	str	r2, [r3, #48]	@ 0x30
 8005272:	e005      	b.n	8005280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005274:	6978      	ldr	r0, [r7, #20]
 8005276:	f001 fe37 	bl	8006ee8 <vPortFree>
 800527a:	e001      	b.n	8005280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d017      	beq.n	80052b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	2300      	movs	r3, #0
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	9302      	str	r3, [sp, #8]
 8005298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f80f 	bl	80052c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052aa:	69f8      	ldr	r0, [r7, #28]
 80052ac:	f000 f8b4 	bl	8005418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	e002      	b.n	80052bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052bc:	69bb      	ldr	r3, [r7, #24]
	}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	461a      	mov	r2, r3
 80052e0:	21a5      	movs	r1, #165	@ 0xa5
 80052e2:	f002 f919 	bl	8007518 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052f0:	3b01      	subs	r3, #1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f023 0307 	bic.w	r3, r3, #7
 80052fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	617b      	str	r3, [r7, #20]
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	e7fd      	b.n	800531e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01f      	beq.n	8005368 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	e012      	b.n	8005354 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	7819      	ldrb	r1, [r3, #0]
 8005336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	3334      	adds	r3, #52	@ 0x34
 800533e:	460a      	mov	r2, r1
 8005340:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d006      	beq.n	800535c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	3301      	adds	r3, #1
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b0f      	cmp	r3, #15
 8005358:	d9e9      	bls.n	800532e <prvInitialiseNewTask+0x66>
 800535a:	e000      	b.n	800535e <prvInitialiseNewTask+0x96>
			{
				break;
 800535c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005366:	e003      	b.n	8005370 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	2b37      	cmp	r3, #55	@ 0x37
 8005374:	d901      	bls.n	800537a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005376:	2337      	movs	r3, #55	@ 0x37
 8005378:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800537e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005384:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	2200      	movs	r2, #0
 800538a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	3304      	adds	r3, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f7fe fe33 	bl	8003ffc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	3318      	adds	r3, #24
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fe2e 	bl	8003ffc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	3354      	adds	r3, #84	@ 0x54
 80053ca:	224c      	movs	r2, #76	@ 0x4c
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f002 f8a2 	bl	8007518 <memset>
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	4a0d      	ldr	r2, [pc, #52]	@ (800540c <prvInitialiseNewTask+0x144>)
 80053d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80053da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005410 <prvInitialiseNewTask+0x148>)
 80053de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005414 <prvInitialiseNewTask+0x14c>)
 80053e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	69b8      	ldr	r0, [r7, #24]
 80053ec:	f001 fa5a 	bl	80068a4 <pxPortInitialiseStack>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005402:	bf00      	nop
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20001b18 	.word	0x20001b18
 8005410:	20001b80 	.word	0x20001b80
 8005414:	20001be8 	.word	0x20001be8

08005418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005420:	f001 fb72 	bl	8006b08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005424:	4b2d      	ldr	r3, [pc, #180]	@ (80054dc <prvAddNewTaskToReadyList+0xc4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3301      	adds	r3, #1
 800542a:	4a2c      	ldr	r2, [pc, #176]	@ (80054dc <prvAddNewTaskToReadyList+0xc4>)
 800542c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800542e:	4b2c      	ldr	r3, [pc, #176]	@ (80054e0 <prvAddNewTaskToReadyList+0xc8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005436:	4a2a      	ldr	r2, [pc, #168]	@ (80054e0 <prvAddNewTaskToReadyList+0xc8>)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800543c:	4b27      	ldr	r3, [pc, #156]	@ (80054dc <prvAddNewTaskToReadyList+0xc4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d110      	bne.n	8005466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005444:	f000 fc2e 	bl	8005ca4 <prvInitialiseTaskLists>
 8005448:	e00d      	b.n	8005466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800544a:	4b26      	ldr	r3, [pc, #152]	@ (80054e4 <prvAddNewTaskToReadyList+0xcc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005452:	4b23      	ldr	r3, [pc, #140]	@ (80054e0 <prvAddNewTaskToReadyList+0xc8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	429a      	cmp	r2, r3
 800545e:	d802      	bhi.n	8005466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005460:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <prvAddNewTaskToReadyList+0xc8>)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005466:	4b20      	ldr	r3, [pc, #128]	@ (80054e8 <prvAddNewTaskToReadyList+0xd0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	4a1e      	ldr	r2, [pc, #120]	@ (80054e8 <prvAddNewTaskToReadyList+0xd0>)
 800546e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005470:	4b1d      	ldr	r3, [pc, #116]	@ (80054e8 <prvAddNewTaskToReadyList+0xd0>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547c:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <prvAddNewTaskToReadyList+0xd4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <prvAddNewTaskToReadyList+0x74>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	4a18      	ldr	r2, [pc, #96]	@ (80054ec <prvAddNewTaskToReadyList+0xd4>)
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4a15      	ldr	r2, [pc, #84]	@ (80054f0 <prvAddNewTaskToReadyList+0xd8>)
 800549a:	441a      	add	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f7fe fdb7 	bl	8004016 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054a8:	f001 fb60 	bl	8006b6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ac:	4b0d      	ldr	r3, [pc, #52]	@ (80054e4 <prvAddNewTaskToReadyList+0xcc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00e      	beq.n	80054d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054b4:	4b0a      	ldr	r3, [pc, #40]	@ (80054e0 <prvAddNewTaskToReadyList+0xc8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	429a      	cmp	r2, r3
 80054c0:	d207      	bcs.n	80054d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054c2:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <prvAddNewTaskToReadyList+0xdc>)
 80054c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000de0 	.word	0x20000de0
 80054e0:	2000090c 	.word	0x2000090c
 80054e4:	20000dec 	.word	0x20000dec
 80054e8:	20000dfc 	.word	0x20000dfc
 80054ec:	20000de8 	.word	0x20000de8
 80054f0:	20000910 	.word	0x20000910
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d018      	beq.n	800553c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800550a:	4b14      	ldr	r3, [pc, #80]	@ (800555c <vTaskDelay+0x64>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <vTaskDelay+0x32>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	60bb      	str	r3, [r7, #8]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800552a:	f000 f88b 	bl	8005644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800552e:	2100      	movs	r1, #0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fe09 	bl	8006148 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005536:	f000 f893 	bl	8005660 <xTaskResumeAll>
 800553a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005542:	4b07      	ldr	r3, [pc, #28]	@ (8005560 <vTaskDelay+0x68>)
 8005544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000e08 	.word	0x20000e08
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	@ 0x28
 8005568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005572:	463a      	mov	r2, r7
 8005574:	1d39      	adds	r1, r7, #4
 8005576:	f107 0308 	add.w	r3, r7, #8
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fcea 	bl	8003f54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	9202      	str	r2, [sp, #8]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	2300      	movs	r3, #0
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	2300      	movs	r3, #0
 8005590:	460a      	mov	r2, r1
 8005592:	4924      	ldr	r1, [pc, #144]	@ (8005624 <vTaskStartScheduler+0xc0>)
 8005594:	4824      	ldr	r0, [pc, #144]	@ (8005628 <vTaskStartScheduler+0xc4>)
 8005596:	f7ff fdf1 	bl	800517c <xTaskCreateStatic>
 800559a:	4603      	mov	r3, r0
 800559c:	4a23      	ldr	r2, [pc, #140]	@ (800562c <vTaskStartScheduler+0xc8>)
 800559e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055a0:	4b22      	ldr	r3, [pc, #136]	@ (800562c <vTaskStartScheduler+0xc8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e001      	b.n	80055b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d102      	bne.n	80055be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055b8:	f000 fe1a 	bl	80061f0 <xTimerCreateTimerTask>
 80055bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d11b      	bne.n	80055fc <vTaskStartScheduler+0x98>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	613b      	str	r3, [r7, #16]
}
 80055d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055d8:	4b15      	ldr	r3, [pc, #84]	@ (8005630 <vTaskStartScheduler+0xcc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3354      	adds	r3, #84	@ 0x54
 80055de:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <vTaskStartScheduler+0xd0>)
 80055e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055e2:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <vTaskStartScheduler+0xd4>)
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055ea:	4b14      	ldr	r3, [pc, #80]	@ (800563c <vTaskStartScheduler+0xd8>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055f0:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <vTaskStartScheduler+0xdc>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055f6:	f001 f9e3 	bl	80069c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055fa:	e00f      	b.n	800561c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005602:	d10b      	bne.n	800561c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	60fb      	str	r3, [r7, #12]
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <vTaskStartScheduler+0xb4>
}
 800561c:	bf00      	nop
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	08007c98 	.word	0x08007c98
 8005628:	08005c75 	.word	0x08005c75
 800562c:	20000e04 	.word	0x20000e04
 8005630:	2000090c 	.word	0x2000090c
 8005634:	2000001c 	.word	0x2000001c
 8005638:	20000e00 	.word	0x20000e00
 800563c:	20000dec 	.word	0x20000dec
 8005640:	20000de4 	.word	0x20000de4

08005644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005648:	4b04      	ldr	r3, [pc, #16]	@ (800565c <vTaskSuspendAll+0x18>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3301      	adds	r3, #1
 800564e:	4a03      	ldr	r2, [pc, #12]	@ (800565c <vTaskSuspendAll+0x18>)
 8005650:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005652:	bf00      	nop
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	20000e08 	.word	0x20000e08

08005660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800566e:	4b42      	ldr	r3, [pc, #264]	@ (8005778 <xTaskResumeAll+0x118>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <xTaskResumeAll+0x2e>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	603b      	str	r3, [r7, #0]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800568e:	f001 fa3b 	bl	8006b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005692:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <xTaskResumeAll+0x118>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3b01      	subs	r3, #1
 8005698:	4a37      	ldr	r2, [pc, #220]	@ (8005778 <xTaskResumeAll+0x118>)
 800569a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800569c:	4b36      	ldr	r3, [pc, #216]	@ (8005778 <xTaskResumeAll+0x118>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d162      	bne.n	800576a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056a4:	4b35      	ldr	r3, [pc, #212]	@ (800577c <xTaskResumeAll+0x11c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d05e      	beq.n	800576a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ac:	e02f      	b.n	800570e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ae:	4b34      	ldr	r3, [pc, #208]	@ (8005780 <xTaskResumeAll+0x120>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3318      	adds	r3, #24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fd08 	bl	80040d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fd03 	bl	80040d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005784 <xTaskResumeAll+0x124>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d903      	bls.n	80056de <xTaskResumeAll+0x7e>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	4a2a      	ldr	r2, [pc, #168]	@ (8005784 <xTaskResumeAll+0x124>)
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4a27      	ldr	r2, [pc, #156]	@ (8005788 <xTaskResumeAll+0x128>)
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f7fe fc8e 	bl	8004016 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fe:	4b23      	ldr	r3, [pc, #140]	@ (800578c <xTaskResumeAll+0x12c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005708:	4b21      	ldr	r3, [pc, #132]	@ (8005790 <xTaskResumeAll+0x130>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800570e:	4b1c      	ldr	r3, [pc, #112]	@ (8005780 <xTaskResumeAll+0x120>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1cb      	bne.n	80056ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800571c:	f000 fb66 	bl	8005dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005720:	4b1c      	ldr	r3, [pc, #112]	@ (8005794 <xTaskResumeAll+0x134>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d010      	beq.n	800574e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800572c:	f000 f846 	bl	80057bc <xTaskIncrementTick>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005736:	4b16      	ldr	r3, [pc, #88]	@ (8005790 <xTaskResumeAll+0x130>)
 8005738:	2201      	movs	r2, #1
 800573a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f1      	bne.n	800572c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005748:	4b12      	ldr	r3, [pc, #72]	@ (8005794 <xTaskResumeAll+0x134>)
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800574e:	4b10      	ldr	r3, [pc, #64]	@ (8005790 <xTaskResumeAll+0x130>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800575a:	4b0f      	ldr	r3, [pc, #60]	@ (8005798 <xTaskResumeAll+0x138>)
 800575c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800576a:	f001 f9ff 	bl	8006b6c <vPortExitCritical>

	return xAlreadyYielded;
 800576e:	68bb      	ldr	r3, [r7, #8]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20000e08 	.word	0x20000e08
 800577c:	20000de0 	.word	0x20000de0
 8005780:	20000da0 	.word	0x20000da0
 8005784:	20000de8 	.word	0x20000de8
 8005788:	20000910 	.word	0x20000910
 800578c:	2000090c 	.word	0x2000090c
 8005790:	20000df4 	.word	0x20000df4
 8005794:	20000df0 	.word	0x20000df0
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057a2:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <xTaskGetTickCount+0x1c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057a8:	687b      	ldr	r3, [r7, #4]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000de4 	.word	0x20000de4

080057bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005904 <xTaskIncrementTick+0x148>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 8090 	bne.w	80058f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005908 <xTaskIncrementTick+0x14c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005908 <xTaskIncrementTick+0x14c>)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d121      	bne.n	8005828 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057e4:	4b49      	ldr	r3, [pc, #292]	@ (800590c <xTaskIncrementTick+0x150>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <xTaskIncrementTick+0x4a>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	603b      	str	r3, [r7, #0]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <xTaskIncrementTick+0x46>
 8005806:	4b41      	ldr	r3, [pc, #260]	@ (800590c <xTaskIncrementTick+0x150>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	4b40      	ldr	r3, [pc, #256]	@ (8005910 <xTaskIncrementTick+0x154>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3e      	ldr	r2, [pc, #248]	@ (800590c <xTaskIncrementTick+0x150>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	4a3e      	ldr	r2, [pc, #248]	@ (8005910 <xTaskIncrementTick+0x154>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	4b3e      	ldr	r3, [pc, #248]	@ (8005914 <xTaskIncrementTick+0x158>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3301      	adds	r3, #1
 8005820:	4a3c      	ldr	r2, [pc, #240]	@ (8005914 <xTaskIncrementTick+0x158>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	f000 fae2 	bl	8005dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005828:	4b3b      	ldr	r3, [pc, #236]	@ (8005918 <xTaskIncrementTick+0x15c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	429a      	cmp	r2, r3
 8005830:	d349      	bcc.n	80058c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005832:	4b36      	ldr	r3, [pc, #216]	@ (800590c <xTaskIncrementTick+0x150>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800583c:	4b36      	ldr	r3, [pc, #216]	@ (8005918 <xTaskIncrementTick+0x15c>)
 800583e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005842:	601a      	str	r2, [r3, #0]
					break;
 8005844:	e03f      	b.n	80058c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005846:	4b31      	ldr	r3, [pc, #196]	@ (800590c <xTaskIncrementTick+0x150>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d203      	bcs.n	8005866 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800585e:	4a2e      	ldr	r2, [pc, #184]	@ (8005918 <xTaskIncrementTick+0x15c>)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005864:	e02f      	b.n	80058c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fc30 	bl	80040d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	3318      	adds	r3, #24
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fc27 	bl	80040d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005886:	4b25      	ldr	r3, [pc, #148]	@ (800591c <xTaskIncrementTick+0x160>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d903      	bls.n	8005896 <xTaskIncrementTick+0xda>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005892:	4a22      	ldr	r2, [pc, #136]	@ (800591c <xTaskIncrementTick+0x160>)
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <xTaskIncrementTick+0x164>)
 80058a4:	441a      	add	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fe fbb2 	bl	8004016 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005924 <xTaskIncrementTick+0x168>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3b8      	bcc.n	8005832 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058c0:	2301      	movs	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c4:	e7b5      	b.n	8005832 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058c6:	4b17      	ldr	r3, [pc, #92]	@ (8005924 <xTaskIncrementTick+0x168>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058cc:	4914      	ldr	r1, [pc, #80]	@ (8005920 <xTaskIncrementTick+0x164>)
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d901      	bls.n	80058e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80058de:	2301      	movs	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058e2:	4b11      	ldr	r3, [pc, #68]	@ (8005928 <xTaskIncrementTick+0x16c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	e004      	b.n	80058fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058f0:	4b0e      	ldr	r3, [pc, #56]	@ (800592c <xTaskIncrementTick+0x170>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	4a0d      	ldr	r2, [pc, #52]	@ (800592c <xTaskIncrementTick+0x170>)
 80058f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058fa:	697b      	ldr	r3, [r7, #20]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000e08 	.word	0x20000e08
 8005908:	20000de4 	.word	0x20000de4
 800590c:	20000d98 	.word	0x20000d98
 8005910:	20000d9c 	.word	0x20000d9c
 8005914:	20000df8 	.word	0x20000df8
 8005918:	20000e00 	.word	0x20000e00
 800591c:	20000de8 	.word	0x20000de8
 8005920:	20000910 	.word	0x20000910
 8005924:	2000090c 	.word	0x2000090c
 8005928:	20000df4 	.word	0x20000df4
 800592c:	20000df0 	.word	0x20000df0

08005930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005936:	4b2b      	ldr	r3, [pc, #172]	@ (80059e4 <vTaskSwitchContext+0xb4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800593e:	4b2a      	ldr	r3, [pc, #168]	@ (80059e8 <vTaskSwitchContext+0xb8>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005944:	e047      	b.n	80059d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005946:	4b28      	ldr	r3, [pc, #160]	@ (80059e8 <vTaskSwitchContext+0xb8>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800594c:	4b27      	ldr	r3, [pc, #156]	@ (80059ec <vTaskSwitchContext+0xbc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e011      	b.n	8005978 <vTaskSwitchContext+0x48>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <vTaskSwitchContext+0x42>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	607b      	str	r3, [r7, #4]
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	e7fd      	b.n	800596e <vTaskSwitchContext+0x3e>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3b01      	subs	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	491d      	ldr	r1, [pc, #116]	@ (80059f0 <vTaskSwitchContext+0xc0>)
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0e3      	beq.n	8005954 <vTaskSwitchContext+0x24>
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <vTaskSwitchContext+0xc0>)
 8005998:	4413      	add	r3, r2
 800599a:	60bb      	str	r3, [r7, #8]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	3308      	adds	r3, #8
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d104      	bne.n	80059bc <vTaskSwitchContext+0x8c>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	4a0c      	ldr	r2, [pc, #48]	@ (80059f4 <vTaskSwitchContext+0xc4>)
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	4a09      	ldr	r2, [pc, #36]	@ (80059ec <vTaskSwitchContext+0xbc>)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059cc:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <vTaskSwitchContext+0xc4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3354      	adds	r3, #84	@ 0x54
 80059d2:	4a09      	ldr	r2, [pc, #36]	@ (80059f8 <vTaskSwitchContext+0xc8>)
 80059d4:	6013      	str	r3, [r2, #0]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000e08 	.word	0x20000e08
 80059e8:	20000df4 	.word	0x20000df4
 80059ec:	20000de8 	.word	0x20000de8
 80059f0:	20000910 	.word	0x20000910
 80059f4:	2000090c 	.word	0x2000090c
 80059f8:	2000001c 	.word	0x2000001c

080059fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	60fb      	str	r3, [r7, #12]
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a24:	4b07      	ldr	r3, [pc, #28]	@ (8005a44 <vTaskPlaceOnEventList+0x48>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3318      	adds	r3, #24
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7fe fb16 	bl	800405e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a32:	2101      	movs	r1, #1
 8005a34:	6838      	ldr	r0, [r7, #0]
 8005a36:	f000 fb87 	bl	8006148 <prvAddCurrentTaskToDelayedList>
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	2000090c 	.word	0x2000090c

08005a48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	617b      	str	r3, [r7, #20]
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <vTaskPlaceOnEventListRestricted+0x54>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3318      	adds	r3, #24
 8005a78:	4619      	mov	r1, r3
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7fe facb 	bl	8004016 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	68b8      	ldr	r0, [r7, #8]
 8005a90:	f000 fb5a 	bl	8006148 <prvAddCurrentTaskToDelayedList>
	}
 8005a94:	bf00      	nop
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	2000090c 	.word	0x2000090c

08005aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10b      	bne.n	8005ace <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60fb      	str	r3, [r7, #12]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3318      	adds	r3, #24
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fafc 	bl	80040d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b50 <xTaskRemoveFromEventList+0xb0>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11d      	bne.n	8005b1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe faf3 	bl	80040d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aee:	4b19      	ldr	r3, [pc, #100]	@ (8005b54 <xTaskRemoveFromEventList+0xb4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d903      	bls.n	8005afe <xTaskRemoveFromEventList+0x5e>
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afa:	4a16      	ldr	r2, [pc, #88]	@ (8005b54 <xTaskRemoveFromEventList+0xb4>)
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4a13      	ldr	r2, [pc, #76]	@ (8005b58 <xTaskRemoveFromEventList+0xb8>)
 8005b0c:	441a      	add	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f7fe fa7e 	bl	8004016 <vListInsertEnd>
 8005b1a:	e005      	b.n	8005b28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	4619      	mov	r1, r3
 8005b22:	480e      	ldr	r0, [pc, #56]	@ (8005b5c <xTaskRemoveFromEventList+0xbc>)
 8005b24:	f7fe fa77 	bl	8004016 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <xTaskRemoveFromEventList+0xc0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d905      	bls.n	8005b42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b36:	2301      	movs	r3, #1
 8005b38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <xTaskRemoveFromEventList+0xc4>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e001      	b.n	8005b46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b46:	697b      	ldr	r3, [r7, #20]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000e08 	.word	0x20000e08
 8005b54:	20000de8 	.word	0x20000de8
 8005b58:	20000910 	.word	0x20000910
 8005b5c:	20000da0 	.word	0x20000da0
 8005b60:	2000090c 	.word	0x2000090c
 8005b64:	20000df4 	.word	0x20000df4

08005b68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b70:	4b06      	ldr	r3, [pc, #24]	@ (8005b8c <vTaskInternalSetTimeOutState+0x24>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b78:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <vTaskInternalSetTimeOutState+0x28>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	605a      	str	r2, [r3, #4]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000df8 	.word	0x20000df8
 8005b90:	20000de4 	.word	0x20000de4

08005b94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10b      	bne.n	8005bbc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	613b      	str	r3, [r7, #16]
}
 8005bb6:	bf00      	nop
 8005bb8:	bf00      	nop
 8005bba:	e7fd      	b.n	8005bb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10b      	bne.n	8005bda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60fb      	str	r3, [r7, #12]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005bda:	f000 ff95 	bl	8006b08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bde:	4b1d      	ldr	r3, [pc, #116]	@ (8005c54 <xTaskCheckForTimeOut+0xc0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bf6:	d102      	bne.n	8005bfe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e023      	b.n	8005c46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b15      	ldr	r3, [pc, #84]	@ (8005c58 <xTaskCheckForTimeOut+0xc4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d007      	beq.n	8005c1a <xTaskCheckForTimeOut+0x86>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	e015      	b.n	8005c46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d20b      	bcs.n	8005c3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ff99 	bl	8005b68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	e004      	b.n	8005c46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c42:	2301      	movs	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c46:	f000 ff91 	bl	8006b6c <vPortExitCritical>

	return xReturn;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000de4 	.word	0x20000de4
 8005c58:	20000df8 	.word	0x20000df8

08005c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c60:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <vTaskMissedYield+0x14>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
}
 8005c66:	bf00      	nop
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000df4 	.word	0x20000df4

08005c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c7c:	f000 f852 	bl	8005d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c80:	4b06      	ldr	r3, [pc, #24]	@ (8005c9c <prvIdleTask+0x28>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d9f9      	bls.n	8005c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c88:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <prvIdleTask+0x2c>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c98:	e7f0      	b.n	8005c7c <prvIdleTask+0x8>
 8005c9a:	bf00      	nop
 8005c9c:	20000910 	.word	0x20000910
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	e00c      	b.n	8005cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4a12      	ldr	r2, [pc, #72]	@ (8005d04 <prvInitialiseTaskLists+0x60>)
 8005cbc:	4413      	add	r3, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe f97c 	bl	8003fbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b37      	cmp	r3, #55	@ 0x37
 8005cce:	d9ef      	bls.n	8005cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cd0:	480d      	ldr	r0, [pc, #52]	@ (8005d08 <prvInitialiseTaskLists+0x64>)
 8005cd2:	f7fe f973 	bl	8003fbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cd6:	480d      	ldr	r0, [pc, #52]	@ (8005d0c <prvInitialiseTaskLists+0x68>)
 8005cd8:	f7fe f970 	bl	8003fbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cdc:	480c      	ldr	r0, [pc, #48]	@ (8005d10 <prvInitialiseTaskLists+0x6c>)
 8005cde:	f7fe f96d 	bl	8003fbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ce2:	480c      	ldr	r0, [pc, #48]	@ (8005d14 <prvInitialiseTaskLists+0x70>)
 8005ce4:	f7fe f96a 	bl	8003fbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ce8:	480b      	ldr	r0, [pc, #44]	@ (8005d18 <prvInitialiseTaskLists+0x74>)
 8005cea:	f7fe f967 	bl	8003fbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cee:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <prvInitialiseTaskLists+0x78>)
 8005cf0:	4a05      	ldr	r2, [pc, #20]	@ (8005d08 <prvInitialiseTaskLists+0x64>)
 8005cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005d20 <prvInitialiseTaskLists+0x7c>)
 8005cf6:	4a05      	ldr	r2, [pc, #20]	@ (8005d0c <prvInitialiseTaskLists+0x68>)
 8005cf8:	601a      	str	r2, [r3, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000910 	.word	0x20000910
 8005d08:	20000d70 	.word	0x20000d70
 8005d0c:	20000d84 	.word	0x20000d84
 8005d10:	20000da0 	.word	0x20000da0
 8005d14:	20000db4 	.word	0x20000db4
 8005d18:	20000dcc 	.word	0x20000dcc
 8005d1c:	20000d98 	.word	0x20000d98
 8005d20:	20000d9c 	.word	0x20000d9c

08005d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d2a:	e019      	b.n	8005d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d2c:	f000 feec 	bl	8006b08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d30:	4b10      	ldr	r3, [pc, #64]	@ (8005d74 <prvCheckTasksWaitingTermination+0x50>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe f9c7 	bl	80040d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d42:	4b0d      	ldr	r3, [pc, #52]	@ (8005d78 <prvCheckTasksWaitingTermination+0x54>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	4a0b      	ldr	r2, [pc, #44]	@ (8005d78 <prvCheckTasksWaitingTermination+0x54>)
 8005d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <prvCheckTasksWaitingTermination+0x58>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	4a0a      	ldr	r2, [pc, #40]	@ (8005d7c <prvCheckTasksWaitingTermination+0x58>)
 8005d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d56:	f000 ff09 	bl	8006b6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f810 	bl	8005d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d60:	4b06      	ldr	r3, [pc, #24]	@ (8005d7c <prvCheckTasksWaitingTermination+0x58>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e1      	bne.n	8005d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000db4 	.word	0x20000db4
 8005d78:	20000de0 	.word	0x20000de0
 8005d7c:	20000dc8 	.word	0x20000dc8

08005d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3354      	adds	r3, #84	@ 0x54
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 fbdb 	bl	8007548 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d108      	bne.n	8005dae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 f8a1 	bl	8006ee8 <vPortFree>
				vPortFree( pxTCB );
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 f89e 	bl	8006ee8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dac:	e019      	b.n	8005de2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d103      	bne.n	8005dc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 f895 	bl	8006ee8 <vPortFree>
	}
 8005dbe:	e010      	b.n	8005de2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d00b      	beq.n	8005de2 <prvDeleteTCB+0x62>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	60fb      	str	r3, [r7, #12]
}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	e7fd      	b.n	8005dde <prvDeleteTCB+0x5e>
	}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005df2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <prvResetNextTaskUnblockTime+0x38>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <prvResetNextTaskUnblockTime+0x3c>)
 8005dfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e04:	e008      	b.n	8005e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e06:	4b07      	ldr	r3, [pc, #28]	@ (8005e24 <prvResetNextTaskUnblockTime+0x38>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	4a04      	ldr	r2, [pc, #16]	@ (8005e28 <prvResetNextTaskUnblockTime+0x3c>)
 8005e16:	6013      	str	r3, [r2, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000d98 	.word	0x20000d98
 8005e28:	20000e00 	.word	0x20000e00

08005e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e32:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <xTaskGetSchedulerState+0x34>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	607b      	str	r3, [r7, #4]
 8005e3e:	e008      	b.n	8005e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e40:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <xTaskGetSchedulerState+0x38>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d102      	bne.n	8005e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	e001      	b.n	8005e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e52:	687b      	ldr	r3, [r7, #4]
	}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	20000dec 	.word	0x20000dec
 8005e64:	20000e08 	.word	0x20000e08

08005e68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d051      	beq.n	8005f22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e82:	4b2a      	ldr	r3, [pc, #168]	@ (8005f2c <xTaskPriorityInherit+0xc4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d241      	bcs.n	8005f10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	db06      	blt.n	8005ea2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e94:	4b25      	ldr	r3, [pc, #148]	@ (8005f2c <xTaskPriorityInherit+0xc4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6959      	ldr	r1, [r3, #20]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005f30 <xTaskPriorityInherit+0xc8>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4299      	cmp	r1, r3
 8005eb8:	d122      	bne.n	8005f00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe f906 	bl	80040d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ec4:	4b19      	ldr	r3, [pc, #100]	@ (8005f2c <xTaskPriorityInherit+0xc4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed2:	4b18      	ldr	r3, [pc, #96]	@ (8005f34 <xTaskPriorityInherit+0xcc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d903      	bls.n	8005ee2 <xTaskPriorityInherit+0x7a>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ede:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <xTaskPriorityInherit+0xcc>)
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a10      	ldr	r2, [pc, #64]	@ (8005f30 <xTaskPriorityInherit+0xc8>)
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7fe f88c 	bl	8004016 <vListInsertEnd>
 8005efe:	e004      	b.n	8005f0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f00:	4b0a      	ldr	r3, [pc, #40]	@ (8005f2c <xTaskPriorityInherit+0xc4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	e008      	b.n	8005f22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f14:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <xTaskPriorityInherit+0xc4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d201      	bcs.n	8005f22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f22:	68fb      	ldr	r3, [r7, #12]
	}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	2000090c 	.word	0x2000090c
 8005f30:	20000910 	.word	0x20000910
 8005f34:	20000de8 	.word	0x20000de8

08005f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d058      	beq.n	8006000 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800600c <xTaskPriorityDisinherit+0xd4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d00b      	beq.n	8005f70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60bb      	str	r3, [r7, #8]
}
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	e7fd      	b.n	8005f8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d02c      	beq.n	8006000 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d128      	bne.n	8006000 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe f88c 	bl	80040d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006010 <xTaskPriorityDisinherit+0xd8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d903      	bls.n	8005fe0 <xTaskPriorityDisinherit+0xa8>
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8006010 <xTaskPriorityDisinherit+0xd8>)
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a09      	ldr	r2, [pc, #36]	@ (8006014 <xTaskPriorityDisinherit+0xdc>)
 8005fee:	441a      	add	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f7fe f80d 	bl	8004016 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006000:	697b      	ldr	r3, [r7, #20]
	}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	2000090c 	.word	0x2000090c
 8006010:	20000de8 	.word	0x20000de8
 8006014:	20000910 	.word	0x20000910

08006018 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006026:	2301      	movs	r3, #1
 8006028:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d06c      	beq.n	800610a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60fb      	str	r3, [r7, #12]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d902      	bls.n	8006060 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e002      	b.n	8006066 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006064:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	429a      	cmp	r2, r3
 800606e:	d04c      	beq.n	800610a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	429a      	cmp	r2, r3
 8006078:	d147      	bne.n	800610a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800607a:	4b26      	ldr	r3, [pc, #152]	@ (8006114 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	429a      	cmp	r2, r3
 8006082:	d10b      	bne.n	800609c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60bb      	str	r3, [r7, #8]
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	e7fd      	b.n	8006098 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	db04      	blt.n	80060ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	6959      	ldr	r1, [r3, #20]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4a13      	ldr	r2, [pc, #76]	@ (8006118 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80060ca:	4413      	add	r3, r2
 80060cc:	4299      	cmp	r1, r3
 80060ce:	d11c      	bne.n	800610a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fd fffb 	bl	80040d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060de:	4b0f      	ldr	r3, [pc, #60]	@ (800611c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d903      	bls.n	80060ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	4a0c      	ldr	r2, [pc, #48]	@ (800611c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4a07      	ldr	r2, [pc, #28]	@ (8006118 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80060fc:	441a      	add	r2, r3
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7fd ff86 	bl	8004016 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800610a:	bf00      	nop
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	2000090c 	.word	0x2000090c
 8006118:	20000910 	.word	0x20000910
 800611c:	20000de8 	.word	0x20000de8

08006120 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006124:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <pvTaskIncrementMutexHeldCount+0x24>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d004      	beq.n	8006136 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800612c:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <pvTaskIncrementMutexHeldCount+0x24>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006132:	3201      	adds	r2, #1
 8006134:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006136:	4b03      	ldr	r3, [pc, #12]	@ (8006144 <pvTaskIncrementMutexHeldCount+0x24>)
 8006138:	681b      	ldr	r3, [r3, #0]
	}
 800613a:	4618      	mov	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	2000090c 	.word	0x2000090c

08006148 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006152:	4b21      	ldr	r3, [pc, #132]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006158:	4b20      	ldr	r3, [pc, #128]	@ (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3304      	adds	r3, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f7fd ffb6 	bl	80040d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800616a:	d10a      	bne.n	8006182 <prvAddCurrentTaskToDelayedList+0x3a>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006172:	4b1a      	ldr	r3, [pc, #104]	@ (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4819      	ldr	r0, [pc, #100]	@ (80061e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800617c:	f7fd ff4b 	bl	8004016 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006180:	e026      	b.n	80061d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800618a:	4b14      	ldr	r3, [pc, #80]	@ (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	429a      	cmp	r2, r3
 8006198:	d209      	bcs.n	80061ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800619a:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b0f      	ldr	r3, [pc, #60]	@ (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fd ff59 	bl	800405e <vListInsert>
}
 80061ac:	e010      	b.n	80061d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ae:	4b0e      	ldr	r3, [pc, #56]	@ (80061e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	4610      	mov	r0, r2
 80061bc:	f7fd ff4f 	bl	800405e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061c0:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d202      	bcs.n	80061d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061ca:	4a08      	ldr	r2, [pc, #32]	@ (80061ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6013      	str	r3, [r2, #0]
}
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000de4 	.word	0x20000de4
 80061dc:	2000090c 	.word	0x2000090c
 80061e0:	20000dcc 	.word	0x20000dcc
 80061e4:	20000d9c 	.word	0x20000d9c
 80061e8:	20000d98 	.word	0x20000d98
 80061ec:	20000e00 	.word	0x20000e00

080061f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	@ 0x28
 80061f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061fa:	f000 fb13 	bl	8006824 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006274 <xTimerCreateTimerTask+0x84>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d021      	beq.n	800624a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800620e:	1d3a      	adds	r2, r7, #4
 8006210:	f107 0108 	add.w	r1, r7, #8
 8006214:	f107 030c 	add.w	r3, r7, #12
 8006218:	4618      	mov	r0, r3
 800621a:	f7fd feb5 	bl	8003f88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	9202      	str	r2, [sp, #8]
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	2302      	movs	r3, #2
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	460a      	mov	r2, r1
 8006230:	4911      	ldr	r1, [pc, #68]	@ (8006278 <xTimerCreateTimerTask+0x88>)
 8006232:	4812      	ldr	r0, [pc, #72]	@ (800627c <xTimerCreateTimerTask+0x8c>)
 8006234:	f7fe ffa2 	bl	800517c <xTaskCreateStatic>
 8006238:	4603      	mov	r3, r0
 800623a:	4a11      	ldr	r2, [pc, #68]	@ (8006280 <xTimerCreateTimerTask+0x90>)
 800623c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800623e:	4b10      	ldr	r3, [pc, #64]	@ (8006280 <xTimerCreateTimerTask+0x90>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006246:	2301      	movs	r3, #1
 8006248:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	613b      	str	r3, [r7, #16]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006268:	697b      	ldr	r3, [r7, #20]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000e3c 	.word	0x20000e3c
 8006278:	08007ca0 	.word	0x08007ca0
 800627c:	080063bd 	.word	0x080063bd
 8006280:	20000e40 	.word	0x20000e40

08006284 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	@ 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006292:	2300      	movs	r3, #0
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	623b      	str	r3, [r7, #32]
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062b4:	4b19      	ldr	r3, [pc, #100]	@ (800631c <xTimerGenericCommand+0x98>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d02a      	beq.n	8006312 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	dc18      	bgt.n	8006300 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062ce:	f7ff fdad 	bl	8005e2c <xTaskGetSchedulerState>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d109      	bne.n	80062ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062d8:	4b10      	ldr	r3, [pc, #64]	@ (800631c <xTimerGenericCommand+0x98>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	f107 0110 	add.w	r1, r7, #16
 80062e0:	2300      	movs	r3, #0
 80062e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e4:	f7fe f8d2 	bl	800448c <xQueueGenericSend>
 80062e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80062ea:	e012      	b.n	8006312 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062ec:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <xTimerGenericCommand+0x98>)
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	f107 0110 	add.w	r1, r7, #16
 80062f4:	2300      	movs	r3, #0
 80062f6:	2200      	movs	r2, #0
 80062f8:	f7fe f8c8 	bl	800448c <xQueueGenericSend>
 80062fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80062fe:	e008      	b.n	8006312 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006300:	4b06      	ldr	r3, [pc, #24]	@ (800631c <xTimerGenericCommand+0x98>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	f107 0110 	add.w	r1, r7, #16
 8006308:	2300      	movs	r3, #0
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	f7fe f9c0 	bl	8004690 <xQueueGenericSendFromISR>
 8006310:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006314:	4618      	mov	r0, r3
 8006316:	3728      	adds	r7, #40	@ 0x28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000e3c 	.word	0x20000e3c

08006320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632a:	4b23      	ldr	r3, [pc, #140]	@ (80063b8 <prvProcessExpiredTimer+0x98>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3304      	adds	r3, #4
 8006338:	4618      	mov	r0, r3
 800633a:	f7fd fec9 	bl	80040d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d023      	beq.n	8006394 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	18d1      	adds	r1, r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	6978      	ldr	r0, [r7, #20]
 800635a:	f000 f8d5 	bl	8006508 <prvInsertTimerInActiveList>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d020      	beq.n	80063a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006364:	2300      	movs	r3, #0
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2300      	movs	r3, #0
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	2100      	movs	r1, #0
 800636e:	6978      	ldr	r0, [r7, #20]
 8006370:	f7ff ff88 	bl	8006284 <xTimerGenericCommand>
 8006374:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d114      	bne.n	80063a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	60fb      	str	r3, [r7, #12]
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	e7fd      	b.n	8006390 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	6978      	ldr	r0, [r7, #20]
 80063ac:	4798      	blx	r3
}
 80063ae:	bf00      	nop
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000e34 	.word	0x20000e34

080063bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063c4:	f107 0308 	add.w	r3, r7, #8
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f859 	bl	8006480 <prvGetNextExpireTime>
 80063ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f805 	bl	80063e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063da:	f000 f8d7 	bl	800658c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063de:	bf00      	nop
 80063e0:	e7f0      	b.n	80063c4 <prvTimerTask+0x8>
	...

080063e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063ee:	f7ff f929 	bl	8005644 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063f2:	f107 0308 	add.w	r3, r7, #8
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f866 	bl	80064c8 <prvSampleTimeNow>
 80063fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d130      	bne.n	8006466 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <prvProcessTimerOrBlockTask+0x3c>
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	429a      	cmp	r2, r3
 8006410:	d806      	bhi.n	8006420 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006412:	f7ff f925 	bl	8005660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff ff81 	bl	8006320 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800641e:	e024      	b.n	800646a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006426:	4b13      	ldr	r3, [pc, #76]	@ (8006474 <prvProcessTimerOrBlockTask+0x90>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <prvProcessTimerOrBlockTask+0x50>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <prvProcessTimerOrBlockTask+0x52>
 8006434:	2300      	movs	r3, #0
 8006436:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006438:	4b0f      	ldr	r3, [pc, #60]	@ (8006478 <prvProcessTimerOrBlockTask+0x94>)
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4619      	mov	r1, r3
 8006446:	f7fe fe65 	bl	8005114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800644a:	f7ff f909 	bl	8005660 <xTaskResumeAll>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006454:	4b09      	ldr	r3, [pc, #36]	@ (800647c <prvProcessTimerOrBlockTask+0x98>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
}
 8006464:	e001      	b.n	800646a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006466:	f7ff f8fb 	bl	8005660 <xTaskResumeAll>
}
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000e38 	.word	0x20000e38
 8006478:	20000e3c 	.word	0x20000e3c
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006488:	4b0e      	ldr	r3, [pc, #56]	@ (80064c4 <prvGetNextExpireTime+0x44>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <prvGetNextExpireTime+0x16>
 8006492:	2201      	movs	r2, #1
 8006494:	e000      	b.n	8006498 <prvGetNextExpireTime+0x18>
 8006496:	2200      	movs	r2, #0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064a4:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <prvGetNextExpireTime+0x44>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e001      	b.n	80064b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064b4:	68fb      	ldr	r3, [r7, #12]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20000e34 	.word	0x20000e34

080064c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064d0:	f7ff f964 	bl	800579c <xTaskGetTickCount>
 80064d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <prvSampleTimeNow+0x3c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d205      	bcs.n	80064ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064e0:	f000 f93a 	bl	8006758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e002      	b.n	80064f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064f2:	4a04      	ldr	r2, [pc, #16]	@ (8006504 <prvSampleTimeNow+0x3c>)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064f8:	68fb      	ldr	r3, [r7, #12]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000e44 	.word	0x20000e44

08006508 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	429a      	cmp	r2, r3
 800652c:	d812      	bhi.n	8006554 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	429a      	cmp	r2, r3
 800653a:	d302      	bcc.n	8006542 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800653c:	2301      	movs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e01b      	b.n	800657a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006542:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <prvInsertTimerInActiveList+0x7c>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3304      	adds	r3, #4
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f7fd fd86 	bl	800405e <vListInsert>
 8006552:	e012      	b.n	800657a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d206      	bcs.n	800656a <prvInsertTimerInActiveList+0x62>
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d302      	bcc.n	800656a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e007      	b.n	800657a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800656a:	4b07      	ldr	r3, [pc, #28]	@ (8006588 <prvInsertTimerInActiveList+0x80>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f7fd fd72 	bl	800405e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800657a:	697b      	ldr	r3, [r7, #20]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000e38 	.word	0x20000e38
 8006588:	20000e34 	.word	0x20000e34

0800658c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08e      	sub	sp, #56	@ 0x38
 8006590:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006592:	e0ce      	b.n	8006732 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	da19      	bge.n	80065ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	3304      	adds	r3, #4
 800659e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <prvProcessReceivedCommands+0x32>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	61fb      	str	r3, [r7, #28]
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	e7fd      	b.n	80065ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c4:	6850      	ldr	r0, [r2, #4]
 80065c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c8:	6892      	ldr	r2, [r2, #8]
 80065ca:	4611      	mov	r1, r2
 80065cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f2c0 80ae 	blt.w	8006732 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e4:	3304      	adds	r3, #4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fd fd72 	bl	80040d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065ec:	463b      	mov	r3, r7
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff ff6a 	bl	80064c8 <prvSampleTimeNow>
 80065f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b09      	cmp	r3, #9
 80065fa:	f200 8097 	bhi.w	800672c <prvProcessReceivedCommands+0x1a0>
 80065fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006604 <prvProcessReceivedCommands+0x78>)
 8006600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006604:	0800662d 	.word	0x0800662d
 8006608:	0800662d 	.word	0x0800662d
 800660c:	0800662d 	.word	0x0800662d
 8006610:	080066a3 	.word	0x080066a3
 8006614:	080066b7 	.word	0x080066b7
 8006618:	08006703 	.word	0x08006703
 800661c:	0800662d 	.word	0x0800662d
 8006620:	0800662d 	.word	0x0800662d
 8006624:	080066a3 	.word	0x080066a3
 8006628:	080066b7 	.word	0x080066b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	18d1      	adds	r1, r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800664a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800664c:	f7ff ff5c 	bl	8006508 <prvInsertTimerInActiveList>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d06c      	beq.n	8006730 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800665c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d061      	beq.n	8006730 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	441a      	add	r2, r3
 8006674:	2300      	movs	r3, #0
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	2300      	movs	r3, #0
 800667a:	2100      	movs	r1, #0
 800667c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800667e:	f7ff fe01 	bl	8006284 <xTimerGenericCommand>
 8006682:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d152      	bne.n	8006730 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	61bb      	str	r3, [r7, #24]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066b4:	e03d      	b.n	8006732 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10b      	bne.n	80066ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	617b      	str	r3, [r7, #20]
}
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	e7fd      	b.n	80066ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	18d1      	adds	r1, r2, r3
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066fc:	f7ff ff04 	bl	8006508 <prvInsertTimerInActiveList>
					break;
 8006700:	e017      	b.n	8006732 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d103      	bne.n	8006718 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006712:	f000 fbe9 	bl	8006ee8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006716:	e00c      	b.n	8006732 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	b2da      	uxtb	r2, r3
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800672a:	e002      	b.n	8006732 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800672c:	bf00      	nop
 800672e:	e000      	b.n	8006732 <prvProcessReceivedCommands+0x1a6>
					break;
 8006730:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006732:	4b08      	ldr	r3, [pc, #32]	@ (8006754 <prvProcessReceivedCommands+0x1c8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	1d39      	adds	r1, r7, #4
 8006738:	2200      	movs	r2, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe f8d6 	bl	80048ec <xQueueReceive>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f47f af26 	bne.w	8006594 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	3730      	adds	r7, #48	@ 0x30
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000e3c 	.word	0x20000e3c

08006758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800675e:	e049      	b.n	80067f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006760:	4b2e      	ldr	r3, [pc, #184]	@ (800681c <prvSwitchTimerLists+0xc4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800676a:	4b2c      	ldr	r3, [pc, #176]	@ (800681c <prvSwitchTimerLists+0xc4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3304      	adds	r3, #4
 8006778:	4618      	mov	r0, r3
 800677a:	f7fd fca9 	bl	80040d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d02f      	beq.n	80067f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d90e      	bls.n	80067c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067b2:	4b1a      	ldr	r3, [pc, #104]	@ (800681c <prvSwitchTimerLists+0xc4>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4619      	mov	r1, r3
 80067bc:	4610      	mov	r0, r2
 80067be:	f7fd fc4e 	bl	800405e <vListInsert>
 80067c2:	e017      	b.n	80067f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067c4:	2300      	movs	r3, #0
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	2300      	movs	r3, #0
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	2100      	movs	r1, #0
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7ff fd58 	bl	8006284 <xTimerGenericCommand>
 80067d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	603b      	str	r3, [r7, #0]
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	e7fd      	b.n	80067f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067f4:	4b09      	ldr	r3, [pc, #36]	@ (800681c <prvSwitchTimerLists+0xc4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1b0      	bne.n	8006760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067fe:	4b07      	ldr	r3, [pc, #28]	@ (800681c <prvSwitchTimerLists+0xc4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006804:	4b06      	ldr	r3, [pc, #24]	@ (8006820 <prvSwitchTimerLists+0xc8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a04      	ldr	r2, [pc, #16]	@ (800681c <prvSwitchTimerLists+0xc4>)
 800680a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800680c:	4a04      	ldr	r2, [pc, #16]	@ (8006820 <prvSwitchTimerLists+0xc8>)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	6013      	str	r3, [r2, #0]
}
 8006812:	bf00      	nop
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000e34 	.word	0x20000e34
 8006820:	20000e38 	.word	0x20000e38

08006824 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800682a:	f000 f96d 	bl	8006b08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800682e:	4b15      	ldr	r3, [pc, #84]	@ (8006884 <prvCheckForValidListAndQueue+0x60>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d120      	bne.n	8006878 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006836:	4814      	ldr	r0, [pc, #80]	@ (8006888 <prvCheckForValidListAndQueue+0x64>)
 8006838:	f7fd fbc0 	bl	8003fbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800683c:	4813      	ldr	r0, [pc, #76]	@ (800688c <prvCheckForValidListAndQueue+0x68>)
 800683e:	f7fd fbbd 	bl	8003fbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006842:	4b13      	ldr	r3, [pc, #76]	@ (8006890 <prvCheckForValidListAndQueue+0x6c>)
 8006844:	4a10      	ldr	r2, [pc, #64]	@ (8006888 <prvCheckForValidListAndQueue+0x64>)
 8006846:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006848:	4b12      	ldr	r3, [pc, #72]	@ (8006894 <prvCheckForValidListAndQueue+0x70>)
 800684a:	4a10      	ldr	r2, [pc, #64]	@ (800688c <prvCheckForValidListAndQueue+0x68>)
 800684c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800684e:	2300      	movs	r3, #0
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4b11      	ldr	r3, [pc, #68]	@ (8006898 <prvCheckForValidListAndQueue+0x74>)
 8006854:	4a11      	ldr	r2, [pc, #68]	@ (800689c <prvCheckForValidListAndQueue+0x78>)
 8006856:	2110      	movs	r1, #16
 8006858:	200a      	movs	r0, #10
 800685a:	f7fd fccd 	bl	80041f8 <xQueueGenericCreateStatic>
 800685e:	4603      	mov	r3, r0
 8006860:	4a08      	ldr	r2, [pc, #32]	@ (8006884 <prvCheckForValidListAndQueue+0x60>)
 8006862:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006864:	4b07      	ldr	r3, [pc, #28]	@ (8006884 <prvCheckForValidListAndQueue+0x60>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800686c:	4b05      	ldr	r3, [pc, #20]	@ (8006884 <prvCheckForValidListAndQueue+0x60>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	490b      	ldr	r1, [pc, #44]	@ (80068a0 <prvCheckForValidListAndQueue+0x7c>)
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe fbfa 	bl	800506c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006878:	f000 f978 	bl	8006b6c <vPortExitCritical>
}
 800687c:	bf00      	nop
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000e3c 	.word	0x20000e3c
 8006888:	20000e0c 	.word	0x20000e0c
 800688c:	20000e20 	.word	0x20000e20
 8006890:	20000e34 	.word	0x20000e34
 8006894:	20000e38 	.word	0x20000e38
 8006898:	20000ee8 	.word	0x20000ee8
 800689c:	20000e48 	.word	0x20000e48
 80068a0:	08007ca8 	.word	0x08007ca8

080068a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3b04      	subs	r3, #4
 80068b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3b04      	subs	r3, #4
 80068c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3b04      	subs	r3, #4
 80068d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006908 <pxPortInitialiseStack+0x64>)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b14      	subs	r3, #20
 80068de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3b04      	subs	r3, #4
 80068ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f06f 0202 	mvn.w	r2, #2
 80068f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3b20      	subs	r3, #32
 80068f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068fa:	68fb      	ldr	r3, [r7, #12]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	0800690d 	.word	0x0800690d

0800690c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006916:	4b13      	ldr	r3, [pc, #76]	@ (8006964 <prvTaskExitError+0x58>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800691e:	d00b      	beq.n	8006938 <prvTaskExitError+0x2c>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	bf00      	nop
 8006936:	e7fd      	b.n	8006934 <prvTaskExitError+0x28>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60bb      	str	r3, [r7, #8]
}
 800694a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800694c:	bf00      	nop
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0fc      	beq.n	800694e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000000c 	.word	0x2000000c
	...

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	@ (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst2>:
 8006990:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006998:	4808      	ldr	r0, [pc, #32]	@ (80069bc <prvPortStartFirstTask+0x24>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8814 	msr	CONTROL, r0
 80069aa:	b662      	cpsie	i
 80069ac:	b661      	cpsie	f
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	df00      	svc	0
 80069b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ba:	bf00      	nop
 80069bc:	e000ed08 	.word	0xe000ed08

080069c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069c6:	4b47      	ldr	r3, [pc, #284]	@ (8006ae4 <xPortStartScheduler+0x124>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a47      	ldr	r2, [pc, #284]	@ (8006ae8 <xPortStartScheduler+0x128>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d10b      	bne.n	80069e8 <xPortStartScheduler+0x28>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069e8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae4 <xPortStartScheduler+0x124>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a3f      	ldr	r2, [pc, #252]	@ (8006aec <xPortStartScheduler+0x12c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d10b      	bne.n	8006a0a <xPortStartScheduler+0x4a>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60fb      	str	r3, [r7, #12]
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a0a:	4b39      	ldr	r3, [pc, #228]	@ (8006af0 <xPortStartScheduler+0x130>)
 8006a0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	22ff      	movs	r2, #255	@ 0xff
 8006a1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	4b31      	ldr	r3, [pc, #196]	@ (8006af4 <xPortStartScheduler+0x134>)
 8006a30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a32:	4b31      	ldr	r3, [pc, #196]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a34:	2207      	movs	r2, #7
 8006a36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a38:	e009      	b.n	8006a4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	4a2d      	ldr	r2, [pc, #180]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a56:	2b80      	cmp	r3, #128	@ 0x80
 8006a58:	d0ef      	beq.n	8006a3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a5a:	4b27      	ldr	r3, [pc, #156]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f1c3 0307 	rsb	r3, r3, #7
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d00b      	beq.n	8006a7e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	60bb      	str	r3, [r7, #8]
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	e7fd      	b.n	8006a7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	4a1c      	ldr	r2, [pc, #112]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a88:	4b1b      	ldr	r3, [pc, #108]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a90:	4a19      	ldr	r2, [pc, #100]	@ (8006af8 <xPortStartScheduler+0x138>)
 8006a92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a9c:	4b17      	ldr	r3, [pc, #92]	@ (8006afc <xPortStartScheduler+0x13c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a16      	ldr	r2, [pc, #88]	@ (8006afc <xPortStartScheduler+0x13c>)
 8006aa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006aa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006aa8:	4b14      	ldr	r3, [pc, #80]	@ (8006afc <xPortStartScheduler+0x13c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a13      	ldr	r2, [pc, #76]	@ (8006afc <xPortStartScheduler+0x13c>)
 8006aae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ab4:	f000 f8da 	bl	8006c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ab8:	4b11      	ldr	r3, [pc, #68]	@ (8006b00 <xPortStartScheduler+0x140>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006abe:	f000 f8f9 	bl	8006cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ac2:	4b10      	ldr	r3, [pc, #64]	@ (8006b04 <xPortStartScheduler+0x144>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8006b04 <xPortStartScheduler+0x144>)
 8006ac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006acc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ace:	f7ff ff63 	bl	8006998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ad2:	f7fe ff2d 	bl	8005930 <vTaskSwitchContext>
	prvTaskExitError();
 8006ad6:	f7ff ff19 	bl	800690c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	e000ed00 	.word	0xe000ed00
 8006ae8:	410fc271 	.word	0x410fc271
 8006aec:	410fc270 	.word	0x410fc270
 8006af0:	e000e400 	.word	0xe000e400
 8006af4:	20000f38 	.word	0x20000f38
 8006af8:	20000f3c 	.word	0x20000f3c
 8006afc:	e000ed20 	.word	0xe000ed20
 8006b00:	2000000c 	.word	0x2000000c
 8006b04:	e000ef34 	.word	0xe000ef34

08006b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
}
 8006b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b22:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <vPortEnterCritical+0x5c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3301      	adds	r3, #1
 8006b28:	4a0e      	ldr	r2, [pc, #56]	@ (8006b64 <vPortEnterCritical+0x5c>)
 8006b2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <vPortEnterCritical+0x5c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d110      	bne.n	8006b56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b34:	4b0c      	ldr	r3, [pc, #48]	@ (8006b68 <vPortEnterCritical+0x60>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	603b      	str	r3, [r7, #0]
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	e7fd      	b.n	8006b52 <vPortEnterCritical+0x4a>
	}
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	2000000c 	.word	0x2000000c
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b72:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <vPortExitCritical+0x50>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <vPortExitCritical+0x26>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	607b      	str	r3, [r7, #4]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b92:	4b0a      	ldr	r3, [pc, #40]	@ (8006bbc <vPortExitCritical+0x50>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4a08      	ldr	r2, [pc, #32]	@ (8006bbc <vPortExitCritical+0x50>)
 8006b9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b9c:	4b07      	ldr	r3, [pc, #28]	@ (8006bbc <vPortExitCritical+0x50>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <vPortExitCritical+0x44>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f383 8811 	msr	BASEPRI, r3
}
 8006bae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	2000000c 	.word	0x2000000c

08006bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bc0:	f3ef 8009 	mrs	r0, PSP
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4b15      	ldr	r3, [pc, #84]	@ (8006c20 <pxCurrentTCBConst>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f01e 0f10 	tst.w	lr, #16
 8006bd0:	bf08      	it	eq
 8006bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006be0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006be4:	f380 8811 	msr	BASEPRI, r0
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f7fe fe9e 	bl	8005930 <vTaskSwitchContext>
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f380 8811 	msr	BASEPRI, r0
 8006bfc:	bc09      	pop	{r0, r3}
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	6808      	ldr	r0, [r1, #0]
 8006c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	f01e 0f10 	tst.w	lr, #16
 8006c0a:	bf08      	it	eq
 8006c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c10:	f380 8809 	msr	PSP, r0
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst>:
 8006c20:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c42:	f7fe fdbb 	bl	80057bc <xTaskIncrementTick>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	@ (8006c68 <xPortSysTickHandler+0x40>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f383 8811 	msr	BASEPRI, r3
}
 8006c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <vPortSetupTimerInterrupt+0x38>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <vPortSetupTimerInterrupt+0x3c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	@ (8006cac <vPortSetupTimerInterrupt+0x40>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	4a09      	ldr	r2, [pc, #36]	@ (8006cb0 <vPortSetupTimerInterrupt+0x44>)
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c8e:	4b04      	ldr	r3, [pc, #16]	@ (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c90:	2207      	movs	r2, #7
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	e000e010 	.word	0xe000e010
 8006ca4:	e000e018 	.word	0xe000e018
 8006ca8:	20000000 	.word	0x20000000
 8006cac:	10624dd3 	.word	0x10624dd3
 8006cb0:	e000e014 	.word	0xe000e014

08006cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006cc4 <vPortEnableVFP+0x10>
 8006cb8:	6801      	ldr	r1, [r0, #0]
 8006cba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006cbe:	6001      	str	r1, [r0, #0]
 8006cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed88 	.word	0xe000ed88

08006cc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cce:	f3ef 8305 	mrs	r3, IPSR
 8006cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d915      	bls.n	8006d06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cda:	4a18      	ldr	r2, [pc, #96]	@ (8006d3c <vPortValidateInterruptPriority+0x74>)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ce4:	4b16      	ldr	r3, [pc, #88]	@ (8006d40 <vPortValidateInterruptPriority+0x78>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	7afa      	ldrb	r2, [r7, #11]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d20b      	bcs.n	8006d06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	e7fd      	b.n	8006d02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d06:	4b0f      	ldr	r3, [pc, #60]	@ (8006d44 <vPortValidateInterruptPriority+0x7c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d48 <vPortValidateInterruptPriority+0x80>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d90b      	bls.n	8006d2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	603b      	str	r3, [r7, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <vPortValidateInterruptPriority+0x62>
	}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	e000e3f0 	.word	0xe000e3f0
 8006d40:	20000f38 	.word	0x20000f38
 8006d44:	e000ed0c 	.word	0xe000ed0c
 8006d48:	20000f3c 	.word	0x20000f3c

08006d4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	@ 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d58:	f7fe fc74 	bl	8005644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ed0 <pvPortMalloc+0x184>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d64:	f000 f924 	bl	8006fb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d68:	4b5a      	ldr	r3, [pc, #360]	@ (8006ed4 <pvPortMalloc+0x188>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 8095 	bne.w	8006ea0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01e      	beq.n	8006dba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d015      	beq.n	8006dba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f023 0307 	bic.w	r3, r3, #7
 8006d94:	3308      	adds	r3, #8
 8006d96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <pvPortMalloc+0x6e>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	617b      	str	r3, [r7, #20]
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	e7fd      	b.n	8006db6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06f      	beq.n	8006ea0 <pvPortMalloc+0x154>
 8006dc0:	4b45      	ldr	r3, [pc, #276]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d86a      	bhi.n	8006ea0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dca:	4b44      	ldr	r3, [pc, #272]	@ (8006edc <pvPortMalloc+0x190>)
 8006dcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dce:	4b43      	ldr	r3, [pc, #268]	@ (8006edc <pvPortMalloc+0x190>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dd4:	e004      	b.n	8006de0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d903      	bls.n	8006df2 <pvPortMalloc+0xa6>
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f1      	bne.n	8006dd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006df2:	4b37      	ldr	r3, [pc, #220]	@ (8006ed0 <pvPortMalloc+0x184>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d051      	beq.n	8006ea0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2208      	movs	r2, #8
 8006e02:	4413      	add	r3, r2
 8006e04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	1ad2      	subs	r2, r2, r3
 8006e16:	2308      	movs	r3, #8
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d920      	bls.n	8006e60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4413      	add	r3, r2
 8006e24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <pvPortMalloc+0xfc>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	613b      	str	r3, [r7, #16]
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e5a:	69b8      	ldr	r0, [r7, #24]
 8006e5c:	f000 f90a 	bl	8007074 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e60:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006e6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee0 <pvPortMalloc+0x194>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d203      	bcs.n	8006e82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e7a:	4b17      	ldr	r3, [pc, #92]	@ (8006ed8 <pvPortMalloc+0x18c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a18      	ldr	r2, [pc, #96]	@ (8006ee0 <pvPortMalloc+0x194>)
 8006e80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	4b13      	ldr	r3, [pc, #76]	@ (8006ed4 <pvPortMalloc+0x188>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e96:	4b13      	ldr	r3, [pc, #76]	@ (8006ee4 <pvPortMalloc+0x198>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	4a11      	ldr	r2, [pc, #68]	@ (8006ee4 <pvPortMalloc+0x198>)
 8006e9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ea0:	f7fe fbde 	bl	8005660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <pvPortMalloc+0x17a>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	60fb      	str	r3, [r7, #12]
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3728      	adds	r7, #40	@ 0x28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20001b00 	.word	0x20001b00
 8006ed4:	20001b14 	.word	0x20001b14
 8006ed8:	20001b04 	.word	0x20001b04
 8006edc:	20001af8 	.word	0x20001af8
 8006ee0:	20001b08 	.word	0x20001b08
 8006ee4:	20001b0c 	.word	0x20001b0c

08006ee8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d04f      	beq.n	8006f9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006efa:	2308      	movs	r3, #8
 8006efc:	425b      	negs	r3, r3
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4413      	add	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	4b25      	ldr	r3, [pc, #148]	@ (8006fa4 <vPortFree+0xbc>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <vPortFree+0x46>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60fb      	str	r3, [r7, #12]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00b      	beq.n	8006f4e <vPortFree+0x66>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	60bb      	str	r3, [r7, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	e7fd      	b.n	8006f4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <vPortFree+0xbc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01e      	beq.n	8006f9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11a      	bne.n	8006f9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <vPortFree+0xbc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	401a      	ands	r2, r3
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f74:	f7fe fb66 	bl	8005644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <vPortFree+0xc0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4413      	add	r3, r2
 8006f82:	4a09      	ldr	r2, [pc, #36]	@ (8006fa8 <vPortFree+0xc0>)
 8006f84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f86:	6938      	ldr	r0, [r7, #16]
 8006f88:	f000 f874 	bl	8007074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f8c:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <vPortFree+0xc4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	4a06      	ldr	r2, [pc, #24]	@ (8006fac <vPortFree+0xc4>)
 8006f94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f96:	f7fe fb63 	bl	8005660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f9a:	bf00      	nop
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20001b14 	.word	0x20001b14
 8006fa8:	20001b04 	.word	0x20001b04
 8006fac:	20001b10 	.word	0x20001b10

08006fb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006fba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fbc:	4b27      	ldr	r3, [pc, #156]	@ (800705c <prvHeapInit+0xac>)
 8006fbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3307      	adds	r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0307 	bic.w	r3, r3, #7
 8006fd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	4a1f      	ldr	r2, [pc, #124]	@ (800705c <prvHeapInit+0xac>)
 8006fe0:	4413      	add	r3, r2
 8006fe2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8007060 <prvHeapInit+0xb0>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fee:	4b1c      	ldr	r3, [pc, #112]	@ (8007060 <prvHeapInit+0xb0>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ffc:	2208      	movs	r2, #8
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0307 	bic.w	r3, r3, #7
 800700a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <prvHeapInit+0xb4>)
 8007010:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007012:	4b14      	ldr	r3, [pc, #80]	@ (8007064 <prvHeapInit+0xb4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2200      	movs	r2, #0
 8007018:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800701a:	4b12      	ldr	r3, [pc, #72]	@ (8007064 <prvHeapInit+0xb4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <prvHeapInit+0xb4>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4a0a      	ldr	r2, [pc, #40]	@ (8007068 <prvHeapInit+0xb8>)
 800703e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	4a09      	ldr	r2, [pc, #36]	@ (800706c <prvHeapInit+0xbc>)
 8007046:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007048:	4b09      	ldr	r3, [pc, #36]	@ (8007070 <prvHeapInit+0xc0>)
 800704a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800704e:	601a      	str	r2, [r3, #0]
}
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000f40 	.word	0x20000f40
 8007060:	20001af8 	.word	0x20001af8
 8007064:	20001b00 	.word	0x20001b00
 8007068:	20001b08 	.word	0x20001b08
 800706c:	20001b04 	.word	0x20001b04
 8007070:	20001b14 	.word	0x20001b14

08007074 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800707c:	4b28      	ldr	r3, [pc, #160]	@ (8007120 <prvInsertBlockIntoFreeList+0xac>)
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	e002      	b.n	8007088 <prvInsertBlockIntoFreeList+0x14>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	429a      	cmp	r2, r3
 8007090:	d8f7      	bhi.n	8007082 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4413      	add	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d108      	bne.n	80070b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	441a      	add	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	441a      	add	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d118      	bne.n	80070fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b15      	ldr	r3, [pc, #84]	@ (8007124 <prvInsertBlockIntoFreeList+0xb0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d00d      	beq.n	80070f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	441a      	add	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e008      	b.n	8007104 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <prvInsertBlockIntoFreeList+0xb0>)
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e003      	b.n	8007104 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	429a      	cmp	r2, r3
 800710a:	d002      	beq.n	8007112 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20001af8 	.word	0x20001af8
 8007124:	20001b00 	.word	0x20001b00

08007128 <std>:
 8007128:	2300      	movs	r3, #0
 800712a:	b510      	push	{r4, lr}
 800712c:	4604      	mov	r4, r0
 800712e:	e9c0 3300 	strd	r3, r3, [r0]
 8007132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007136:	6083      	str	r3, [r0, #8]
 8007138:	8181      	strh	r1, [r0, #12]
 800713a:	6643      	str	r3, [r0, #100]	@ 0x64
 800713c:	81c2      	strh	r2, [r0, #14]
 800713e:	6183      	str	r3, [r0, #24]
 8007140:	4619      	mov	r1, r3
 8007142:	2208      	movs	r2, #8
 8007144:	305c      	adds	r0, #92	@ 0x5c
 8007146:	f000 f9e7 	bl	8007518 <memset>
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <std+0x58>)
 800714c:	6263      	str	r3, [r4, #36]	@ 0x24
 800714e:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <std+0x5c>)
 8007150:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007152:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <std+0x60>)
 8007154:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007156:	4b0d      	ldr	r3, [pc, #52]	@ (800718c <std+0x64>)
 8007158:	6323      	str	r3, [r4, #48]	@ 0x30
 800715a:	4b0d      	ldr	r3, [pc, #52]	@ (8007190 <std+0x68>)
 800715c:	6224      	str	r4, [r4, #32]
 800715e:	429c      	cmp	r4, r3
 8007160:	d006      	beq.n	8007170 <std+0x48>
 8007162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007166:	4294      	cmp	r4, r2
 8007168:	d002      	beq.n	8007170 <std+0x48>
 800716a:	33d0      	adds	r3, #208	@ 0xd0
 800716c:	429c      	cmp	r4, r3
 800716e:	d105      	bne.n	800717c <std+0x54>
 8007170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007178:	f000 ba9c 	b.w	80076b4 <__retarget_lock_init_recursive>
 800717c:	bd10      	pop	{r4, pc}
 800717e:	bf00      	nop
 8007180:	08007369 	.word	0x08007369
 8007184:	0800738b 	.word	0x0800738b
 8007188:	080073c3 	.word	0x080073c3
 800718c:	080073e7 	.word	0x080073e7
 8007190:	20001b18 	.word	0x20001b18

08007194 <stdio_exit_handler>:
 8007194:	4a02      	ldr	r2, [pc, #8]	@ (80071a0 <stdio_exit_handler+0xc>)
 8007196:	4903      	ldr	r1, [pc, #12]	@ (80071a4 <stdio_exit_handler+0x10>)
 8007198:	4803      	ldr	r0, [pc, #12]	@ (80071a8 <stdio_exit_handler+0x14>)
 800719a:	f000 b869 	b.w	8007270 <_fwalk_sglue>
 800719e:	bf00      	nop
 80071a0:	20000010 	.word	0x20000010
 80071a4:	080079d1 	.word	0x080079d1
 80071a8:	20000020 	.word	0x20000020

080071ac <cleanup_stdio>:
 80071ac:	6841      	ldr	r1, [r0, #4]
 80071ae:	4b0c      	ldr	r3, [pc, #48]	@ (80071e0 <cleanup_stdio+0x34>)
 80071b0:	4299      	cmp	r1, r3
 80071b2:	b510      	push	{r4, lr}
 80071b4:	4604      	mov	r4, r0
 80071b6:	d001      	beq.n	80071bc <cleanup_stdio+0x10>
 80071b8:	f000 fc0a 	bl	80079d0 <_fflush_r>
 80071bc:	68a1      	ldr	r1, [r4, #8]
 80071be:	4b09      	ldr	r3, [pc, #36]	@ (80071e4 <cleanup_stdio+0x38>)
 80071c0:	4299      	cmp	r1, r3
 80071c2:	d002      	beq.n	80071ca <cleanup_stdio+0x1e>
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 fc03 	bl	80079d0 <_fflush_r>
 80071ca:	68e1      	ldr	r1, [r4, #12]
 80071cc:	4b06      	ldr	r3, [pc, #24]	@ (80071e8 <cleanup_stdio+0x3c>)
 80071ce:	4299      	cmp	r1, r3
 80071d0:	d004      	beq.n	80071dc <cleanup_stdio+0x30>
 80071d2:	4620      	mov	r0, r4
 80071d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d8:	f000 bbfa 	b.w	80079d0 <_fflush_r>
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	bf00      	nop
 80071e0:	20001b18 	.word	0x20001b18
 80071e4:	20001b80 	.word	0x20001b80
 80071e8:	20001be8 	.word	0x20001be8

080071ec <global_stdio_init.part.0>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	4b0b      	ldr	r3, [pc, #44]	@ (800721c <global_stdio_init.part.0+0x30>)
 80071f0:	4c0b      	ldr	r4, [pc, #44]	@ (8007220 <global_stdio_init.part.0+0x34>)
 80071f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007224 <global_stdio_init.part.0+0x38>)
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	4620      	mov	r0, r4
 80071f8:	2200      	movs	r2, #0
 80071fa:	2104      	movs	r1, #4
 80071fc:	f7ff ff94 	bl	8007128 <std>
 8007200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007204:	2201      	movs	r2, #1
 8007206:	2109      	movs	r1, #9
 8007208:	f7ff ff8e 	bl	8007128 <std>
 800720c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007210:	2202      	movs	r2, #2
 8007212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007216:	2112      	movs	r1, #18
 8007218:	f7ff bf86 	b.w	8007128 <std>
 800721c:	20001c50 	.word	0x20001c50
 8007220:	20001b18 	.word	0x20001b18
 8007224:	08007195 	.word	0x08007195

08007228 <__sfp_lock_acquire>:
 8007228:	4801      	ldr	r0, [pc, #4]	@ (8007230 <__sfp_lock_acquire+0x8>)
 800722a:	f000 ba44 	b.w	80076b6 <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	20001c59 	.word	0x20001c59

08007234 <__sfp_lock_release>:
 8007234:	4801      	ldr	r0, [pc, #4]	@ (800723c <__sfp_lock_release+0x8>)
 8007236:	f000 ba3f 	b.w	80076b8 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	20001c59 	.word	0x20001c59

08007240 <__sinit>:
 8007240:	b510      	push	{r4, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	f7ff fff0 	bl	8007228 <__sfp_lock_acquire>
 8007248:	6a23      	ldr	r3, [r4, #32]
 800724a:	b11b      	cbz	r3, 8007254 <__sinit+0x14>
 800724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007250:	f7ff bff0 	b.w	8007234 <__sfp_lock_release>
 8007254:	4b04      	ldr	r3, [pc, #16]	@ (8007268 <__sinit+0x28>)
 8007256:	6223      	str	r3, [r4, #32]
 8007258:	4b04      	ldr	r3, [pc, #16]	@ (800726c <__sinit+0x2c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f5      	bne.n	800724c <__sinit+0xc>
 8007260:	f7ff ffc4 	bl	80071ec <global_stdio_init.part.0>
 8007264:	e7f2      	b.n	800724c <__sinit+0xc>
 8007266:	bf00      	nop
 8007268:	080071ad 	.word	0x080071ad
 800726c:	20001c50 	.word	0x20001c50

08007270 <_fwalk_sglue>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4607      	mov	r7, r0
 8007276:	4688      	mov	r8, r1
 8007278:	4614      	mov	r4, r2
 800727a:	2600      	movs	r6, #0
 800727c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007280:	f1b9 0901 	subs.w	r9, r9, #1
 8007284:	d505      	bpl.n	8007292 <_fwalk_sglue+0x22>
 8007286:	6824      	ldr	r4, [r4, #0]
 8007288:	2c00      	cmp	r4, #0
 800728a:	d1f7      	bne.n	800727c <_fwalk_sglue+0xc>
 800728c:	4630      	mov	r0, r6
 800728e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007292:	89ab      	ldrh	r3, [r5, #12]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d907      	bls.n	80072a8 <_fwalk_sglue+0x38>
 8007298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800729c:	3301      	adds	r3, #1
 800729e:	d003      	beq.n	80072a8 <_fwalk_sglue+0x38>
 80072a0:	4629      	mov	r1, r5
 80072a2:	4638      	mov	r0, r7
 80072a4:	47c0      	blx	r8
 80072a6:	4306      	orrs	r6, r0
 80072a8:	3568      	adds	r5, #104	@ 0x68
 80072aa:	e7e9      	b.n	8007280 <_fwalk_sglue+0x10>

080072ac <_puts_r>:
 80072ac:	6a03      	ldr	r3, [r0, #32]
 80072ae:	b570      	push	{r4, r5, r6, lr}
 80072b0:	6884      	ldr	r4, [r0, #8]
 80072b2:	4605      	mov	r5, r0
 80072b4:	460e      	mov	r6, r1
 80072b6:	b90b      	cbnz	r3, 80072bc <_puts_r+0x10>
 80072b8:	f7ff ffc2 	bl	8007240 <__sinit>
 80072bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072be:	07db      	lsls	r3, r3, #31
 80072c0:	d405      	bmi.n	80072ce <_puts_r+0x22>
 80072c2:	89a3      	ldrh	r3, [r4, #12]
 80072c4:	0598      	lsls	r0, r3, #22
 80072c6:	d402      	bmi.n	80072ce <_puts_r+0x22>
 80072c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072ca:	f000 f9f4 	bl	80076b6 <__retarget_lock_acquire_recursive>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	0719      	lsls	r1, r3, #28
 80072d2:	d502      	bpl.n	80072da <_puts_r+0x2e>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d135      	bne.n	8007346 <_puts_r+0x9a>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f8c5 	bl	800746c <__swsetup_r>
 80072e2:	b380      	cbz	r0, 8007346 <_puts_r+0x9a>
 80072e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80072e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072ea:	07da      	lsls	r2, r3, #31
 80072ec:	d405      	bmi.n	80072fa <_puts_r+0x4e>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	059b      	lsls	r3, r3, #22
 80072f2:	d402      	bmi.n	80072fa <_puts_r+0x4e>
 80072f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072f6:	f000 f9df 	bl	80076b8 <__retarget_lock_release_recursive>
 80072fa:	4628      	mov	r0, r5
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	2b00      	cmp	r3, #0
 8007300:	da04      	bge.n	800730c <_puts_r+0x60>
 8007302:	69a2      	ldr	r2, [r4, #24]
 8007304:	429a      	cmp	r2, r3
 8007306:	dc17      	bgt.n	8007338 <_puts_r+0x8c>
 8007308:	290a      	cmp	r1, #10
 800730a:	d015      	beq.n	8007338 <_puts_r+0x8c>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	6022      	str	r2, [r4, #0]
 8007312:	7019      	strb	r1, [r3, #0]
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800731a:	3b01      	subs	r3, #1
 800731c:	60a3      	str	r3, [r4, #8]
 800731e:	2900      	cmp	r1, #0
 8007320:	d1ed      	bne.n	80072fe <_puts_r+0x52>
 8007322:	2b00      	cmp	r3, #0
 8007324:	da11      	bge.n	800734a <_puts_r+0x9e>
 8007326:	4622      	mov	r2, r4
 8007328:	210a      	movs	r1, #10
 800732a:	4628      	mov	r0, r5
 800732c:	f000 f85f 	bl	80073ee <__swbuf_r>
 8007330:	3001      	adds	r0, #1
 8007332:	d0d7      	beq.n	80072e4 <_puts_r+0x38>
 8007334:	250a      	movs	r5, #10
 8007336:	e7d7      	b.n	80072e8 <_puts_r+0x3c>
 8007338:	4622      	mov	r2, r4
 800733a:	4628      	mov	r0, r5
 800733c:	f000 f857 	bl	80073ee <__swbuf_r>
 8007340:	3001      	adds	r0, #1
 8007342:	d1e7      	bne.n	8007314 <_puts_r+0x68>
 8007344:	e7ce      	b.n	80072e4 <_puts_r+0x38>
 8007346:	3e01      	subs	r6, #1
 8007348:	e7e4      	b.n	8007314 <_puts_r+0x68>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	6022      	str	r2, [r4, #0]
 8007350:	220a      	movs	r2, #10
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e7ee      	b.n	8007334 <_puts_r+0x88>
	...

08007358 <puts>:
 8007358:	4b02      	ldr	r3, [pc, #8]	@ (8007364 <puts+0xc>)
 800735a:	4601      	mov	r1, r0
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f7ff bfa5 	b.w	80072ac <_puts_r>
 8007362:	bf00      	nop
 8007364:	2000001c 	.word	0x2000001c

08007368 <__sread>:
 8007368:	b510      	push	{r4, lr}
 800736a:	460c      	mov	r4, r1
 800736c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007370:	f000 f952 	bl	8007618 <_read_r>
 8007374:	2800      	cmp	r0, #0
 8007376:	bfab      	itete	ge
 8007378:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800737a:	89a3      	ldrhlt	r3, [r4, #12]
 800737c:	181b      	addge	r3, r3, r0
 800737e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007382:	bfac      	ite	ge
 8007384:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007386:	81a3      	strhlt	r3, [r4, #12]
 8007388:	bd10      	pop	{r4, pc}

0800738a <__swrite>:
 800738a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738e:	461f      	mov	r7, r3
 8007390:	898b      	ldrh	r3, [r1, #12]
 8007392:	05db      	lsls	r3, r3, #23
 8007394:	4605      	mov	r5, r0
 8007396:	460c      	mov	r4, r1
 8007398:	4616      	mov	r6, r2
 800739a:	d505      	bpl.n	80073a8 <__swrite+0x1e>
 800739c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a0:	2302      	movs	r3, #2
 80073a2:	2200      	movs	r2, #0
 80073a4:	f000 f926 	bl	80075f4 <_lseek_r>
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	4632      	mov	r2, r6
 80073b6:	463b      	mov	r3, r7
 80073b8:	4628      	mov	r0, r5
 80073ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073be:	f000 b93d 	b.w	800763c <_write_r>

080073c2 <__sseek>:
 80073c2:	b510      	push	{r4, lr}
 80073c4:	460c      	mov	r4, r1
 80073c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ca:	f000 f913 	bl	80075f4 <_lseek_r>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	bf15      	itete	ne
 80073d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073de:	81a3      	strheq	r3, [r4, #12]
 80073e0:	bf18      	it	ne
 80073e2:	81a3      	strhne	r3, [r4, #12]
 80073e4:	bd10      	pop	{r4, pc}

080073e6 <__sclose>:
 80073e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ea:	f000 b89d 	b.w	8007528 <_close_r>

080073ee <__swbuf_r>:
 80073ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f0:	460e      	mov	r6, r1
 80073f2:	4614      	mov	r4, r2
 80073f4:	4605      	mov	r5, r0
 80073f6:	b118      	cbz	r0, 8007400 <__swbuf_r+0x12>
 80073f8:	6a03      	ldr	r3, [r0, #32]
 80073fa:	b90b      	cbnz	r3, 8007400 <__swbuf_r+0x12>
 80073fc:	f7ff ff20 	bl	8007240 <__sinit>
 8007400:	69a3      	ldr	r3, [r4, #24]
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	071a      	lsls	r2, r3, #28
 8007408:	d501      	bpl.n	800740e <__swbuf_r+0x20>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	b943      	cbnz	r3, 8007420 <__swbuf_r+0x32>
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f000 f82b 	bl	800746c <__swsetup_r>
 8007416:	b118      	cbz	r0, 8007420 <__swbuf_r+0x32>
 8007418:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800741c:	4638      	mov	r0, r7
 800741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	6922      	ldr	r2, [r4, #16]
 8007424:	1a98      	subs	r0, r3, r2
 8007426:	6963      	ldr	r3, [r4, #20]
 8007428:	b2f6      	uxtb	r6, r6
 800742a:	4283      	cmp	r3, r0
 800742c:	4637      	mov	r7, r6
 800742e:	dc05      	bgt.n	800743c <__swbuf_r+0x4e>
 8007430:	4621      	mov	r1, r4
 8007432:	4628      	mov	r0, r5
 8007434:	f000 facc 	bl	80079d0 <_fflush_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	d1ed      	bne.n	8007418 <__swbuf_r+0x2a>
 800743c:	68a3      	ldr	r3, [r4, #8]
 800743e:	3b01      	subs	r3, #1
 8007440:	60a3      	str	r3, [r4, #8]
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	701e      	strb	r6, [r3, #0]
 800744a:	6962      	ldr	r2, [r4, #20]
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	429a      	cmp	r2, r3
 8007450:	d004      	beq.n	800745c <__swbuf_r+0x6e>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	07db      	lsls	r3, r3, #31
 8007456:	d5e1      	bpl.n	800741c <__swbuf_r+0x2e>
 8007458:	2e0a      	cmp	r6, #10
 800745a:	d1df      	bne.n	800741c <__swbuf_r+0x2e>
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f000 fab6 	bl	80079d0 <_fflush_r>
 8007464:	2800      	cmp	r0, #0
 8007466:	d0d9      	beq.n	800741c <__swbuf_r+0x2e>
 8007468:	e7d6      	b.n	8007418 <__swbuf_r+0x2a>
	...

0800746c <__swsetup_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4b29      	ldr	r3, [pc, #164]	@ (8007514 <__swsetup_r+0xa8>)
 8007470:	4605      	mov	r5, r0
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	460c      	mov	r4, r1
 8007476:	b118      	cbz	r0, 8007480 <__swsetup_r+0x14>
 8007478:	6a03      	ldr	r3, [r0, #32]
 800747a:	b90b      	cbnz	r3, 8007480 <__swsetup_r+0x14>
 800747c:	f7ff fee0 	bl	8007240 <__sinit>
 8007480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007484:	0719      	lsls	r1, r3, #28
 8007486:	d422      	bmi.n	80074ce <__swsetup_r+0x62>
 8007488:	06da      	lsls	r2, r3, #27
 800748a:	d407      	bmi.n	800749c <__swsetup_r+0x30>
 800748c:	2209      	movs	r2, #9
 800748e:	602a      	str	r2, [r5, #0]
 8007490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800749a:	e033      	b.n	8007504 <__swsetup_r+0x98>
 800749c:	0758      	lsls	r0, r3, #29
 800749e:	d512      	bpl.n	80074c6 <__swsetup_r+0x5a>
 80074a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074a2:	b141      	cbz	r1, 80074b6 <__swsetup_r+0x4a>
 80074a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074a8:	4299      	cmp	r1, r3
 80074aa:	d002      	beq.n	80074b2 <__swsetup_r+0x46>
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f913 	bl	80076d8 <_free_r>
 80074b2:	2300      	movs	r3, #0
 80074b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	2300      	movs	r3, #0
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0308 	orr.w	r3, r3, #8
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	b94b      	cbnz	r3, 80074e6 <__swsetup_r+0x7a>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074dc:	d003      	beq.n	80074e6 <__swsetup_r+0x7a>
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 fac3 	bl	8007a6c <__smakebuf_r>
 80074e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ea:	f013 0201 	ands.w	r2, r3, #1
 80074ee:	d00a      	beq.n	8007506 <__swsetup_r+0x9a>
 80074f0:	2200      	movs	r2, #0
 80074f2:	60a2      	str	r2, [r4, #8]
 80074f4:	6962      	ldr	r2, [r4, #20]
 80074f6:	4252      	negs	r2, r2
 80074f8:	61a2      	str	r2, [r4, #24]
 80074fa:	6922      	ldr	r2, [r4, #16]
 80074fc:	b942      	cbnz	r2, 8007510 <__swsetup_r+0xa4>
 80074fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007502:	d1c5      	bne.n	8007490 <__swsetup_r+0x24>
 8007504:	bd38      	pop	{r3, r4, r5, pc}
 8007506:	0799      	lsls	r1, r3, #30
 8007508:	bf58      	it	pl
 800750a:	6962      	ldrpl	r2, [r4, #20]
 800750c:	60a2      	str	r2, [r4, #8]
 800750e:	e7f4      	b.n	80074fa <__swsetup_r+0x8e>
 8007510:	2000      	movs	r0, #0
 8007512:	e7f7      	b.n	8007504 <__swsetup_r+0x98>
 8007514:	2000001c 	.word	0x2000001c

08007518 <memset>:
 8007518:	4402      	add	r2, r0
 800751a:	4603      	mov	r3, r0
 800751c:	4293      	cmp	r3, r2
 800751e:	d100      	bne.n	8007522 <memset+0xa>
 8007520:	4770      	bx	lr
 8007522:	f803 1b01 	strb.w	r1, [r3], #1
 8007526:	e7f9      	b.n	800751c <memset+0x4>

08007528 <_close_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	@ (8007544 <_close_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7f9 fb12 	bl	8000b5c <_close>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_close_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_close_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20001c54 	.word	0x20001c54

08007548 <_reclaim_reent>:
 8007548:	4b29      	ldr	r3, [pc, #164]	@ (80075f0 <_reclaim_reent+0xa8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4283      	cmp	r3, r0
 800754e:	b570      	push	{r4, r5, r6, lr}
 8007550:	4604      	mov	r4, r0
 8007552:	d04b      	beq.n	80075ec <_reclaim_reent+0xa4>
 8007554:	69c3      	ldr	r3, [r0, #28]
 8007556:	b1ab      	cbz	r3, 8007584 <_reclaim_reent+0x3c>
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	b16b      	cbz	r3, 8007578 <_reclaim_reent+0x30>
 800755c:	2500      	movs	r5, #0
 800755e:	69e3      	ldr	r3, [r4, #28]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	5959      	ldr	r1, [r3, r5]
 8007564:	2900      	cmp	r1, #0
 8007566:	d13b      	bne.n	80075e0 <_reclaim_reent+0x98>
 8007568:	3504      	adds	r5, #4
 800756a:	2d80      	cmp	r5, #128	@ 0x80
 800756c:	d1f7      	bne.n	800755e <_reclaim_reent+0x16>
 800756e:	69e3      	ldr	r3, [r4, #28]
 8007570:	4620      	mov	r0, r4
 8007572:	68d9      	ldr	r1, [r3, #12]
 8007574:	f000 f8b0 	bl	80076d8 <_free_r>
 8007578:	69e3      	ldr	r3, [r4, #28]
 800757a:	6819      	ldr	r1, [r3, #0]
 800757c:	b111      	cbz	r1, 8007584 <_reclaim_reent+0x3c>
 800757e:	4620      	mov	r0, r4
 8007580:	f000 f8aa 	bl	80076d8 <_free_r>
 8007584:	6961      	ldr	r1, [r4, #20]
 8007586:	b111      	cbz	r1, 800758e <_reclaim_reent+0x46>
 8007588:	4620      	mov	r0, r4
 800758a:	f000 f8a5 	bl	80076d8 <_free_r>
 800758e:	69e1      	ldr	r1, [r4, #28]
 8007590:	b111      	cbz	r1, 8007598 <_reclaim_reent+0x50>
 8007592:	4620      	mov	r0, r4
 8007594:	f000 f8a0 	bl	80076d8 <_free_r>
 8007598:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800759a:	b111      	cbz	r1, 80075a2 <_reclaim_reent+0x5a>
 800759c:	4620      	mov	r0, r4
 800759e:	f000 f89b 	bl	80076d8 <_free_r>
 80075a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075a4:	b111      	cbz	r1, 80075ac <_reclaim_reent+0x64>
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 f896 	bl	80076d8 <_free_r>
 80075ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80075ae:	b111      	cbz	r1, 80075b6 <_reclaim_reent+0x6e>
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 f891 	bl	80076d8 <_free_r>
 80075b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80075b8:	b111      	cbz	r1, 80075c0 <_reclaim_reent+0x78>
 80075ba:	4620      	mov	r0, r4
 80075bc:	f000 f88c 	bl	80076d8 <_free_r>
 80075c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80075c2:	b111      	cbz	r1, 80075ca <_reclaim_reent+0x82>
 80075c4:	4620      	mov	r0, r4
 80075c6:	f000 f887 	bl	80076d8 <_free_r>
 80075ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80075cc:	b111      	cbz	r1, 80075d4 <_reclaim_reent+0x8c>
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 f882 	bl	80076d8 <_free_r>
 80075d4:	6a23      	ldr	r3, [r4, #32]
 80075d6:	b14b      	cbz	r3, 80075ec <_reclaim_reent+0xa4>
 80075d8:	4620      	mov	r0, r4
 80075da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075de:	4718      	bx	r3
 80075e0:	680e      	ldr	r6, [r1, #0]
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 f878 	bl	80076d8 <_free_r>
 80075e8:	4631      	mov	r1, r6
 80075ea:	e7bb      	b.n	8007564 <_reclaim_reent+0x1c>
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	bf00      	nop
 80075f0:	2000001c 	.word	0x2000001c

080075f4 <_lseek_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d07      	ldr	r5, [pc, #28]	@ (8007614 <_lseek_r+0x20>)
 80075f8:	4604      	mov	r4, r0
 80075fa:	4608      	mov	r0, r1
 80075fc:	4611      	mov	r1, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7f9 fad1 	bl	8000baa <_lseek>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_lseek_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_lseek_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20001c54 	.word	0x20001c54

08007618 <_read_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d07      	ldr	r5, [pc, #28]	@ (8007638 <_read_r+0x20>)
 800761c:	4604      	mov	r4, r0
 800761e:	4608      	mov	r0, r1
 8007620:	4611      	mov	r1, r2
 8007622:	2200      	movs	r2, #0
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7f9 fa64 	bl	8000af4 <_read>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_read_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_read_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	20001c54 	.word	0x20001c54

0800763c <_write_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d07      	ldr	r5, [pc, #28]	@ (800765c <_write_r+0x20>)
 8007640:	4604      	mov	r4, r0
 8007642:	4608      	mov	r0, r1
 8007644:	4611      	mov	r1, r2
 8007646:	2200      	movs	r2, #0
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7f9 fa70 	bl	8000b30 <_write>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_write_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_write_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20001c54 	.word	0x20001c54

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	@ (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000001c 	.word	0x2000001c

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4d0d      	ldr	r5, [pc, #52]	@ (80076a4 <__libc_init_array+0x38>)
 8007670:	4c0d      	ldr	r4, [pc, #52]	@ (80076a8 <__libc_init_array+0x3c>)
 8007672:	1b64      	subs	r4, r4, r5
 8007674:	10a4      	asrs	r4, r4, #2
 8007676:	2600      	movs	r6, #0
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	4d0b      	ldr	r5, [pc, #44]	@ (80076ac <__libc_init_array+0x40>)
 800767e:	4c0c      	ldr	r4, [pc, #48]	@ (80076b0 <__libc_init_array+0x44>)
 8007680:	f000 fa62 	bl	8007b48 <_init>
 8007684:	1b64      	subs	r4, r4, r5
 8007686:	10a4      	asrs	r4, r4, #2
 8007688:	2600      	movs	r6, #0
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	08007d7c 	.word	0x08007d7c
 80076a8:	08007d7c 	.word	0x08007d7c
 80076ac:	08007d7c 	.word	0x08007d7c
 80076b0:	08007d80 	.word	0x08007d80

080076b4 <__retarget_lock_init_recursive>:
 80076b4:	4770      	bx	lr

080076b6 <__retarget_lock_acquire_recursive>:
 80076b6:	4770      	bx	lr

080076b8 <__retarget_lock_release_recursive>:
 80076b8:	4770      	bx	lr

080076ba <memcpy>:
 80076ba:	440a      	add	r2, r1
 80076bc:	4291      	cmp	r1, r2
 80076be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80076c2:	d100      	bne.n	80076c6 <memcpy+0xc>
 80076c4:	4770      	bx	lr
 80076c6:	b510      	push	{r4, lr}
 80076c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d0:	4291      	cmp	r1, r2
 80076d2:	d1f9      	bne.n	80076c8 <memcpy+0xe>
 80076d4:	bd10      	pop	{r4, pc}
	...

080076d8 <_free_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4605      	mov	r5, r0
 80076dc:	2900      	cmp	r1, #0
 80076de:	d041      	beq.n	8007764 <_free_r+0x8c>
 80076e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e4:	1f0c      	subs	r4, r1, #4
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	bfb8      	it	lt
 80076ea:	18e4      	addlt	r4, r4, r3
 80076ec:	f000 f8e0 	bl	80078b0 <__malloc_lock>
 80076f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007768 <_free_r+0x90>)
 80076f2:	6813      	ldr	r3, [r2, #0]
 80076f4:	b933      	cbnz	r3, 8007704 <_free_r+0x2c>
 80076f6:	6063      	str	r3, [r4, #4]
 80076f8:	6014      	str	r4, [r2, #0]
 80076fa:	4628      	mov	r0, r5
 80076fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007700:	f000 b8dc 	b.w	80078bc <__malloc_unlock>
 8007704:	42a3      	cmp	r3, r4
 8007706:	d908      	bls.n	800771a <_free_r+0x42>
 8007708:	6820      	ldr	r0, [r4, #0]
 800770a:	1821      	adds	r1, r4, r0
 800770c:	428b      	cmp	r3, r1
 800770e:	bf01      	itttt	eq
 8007710:	6819      	ldreq	r1, [r3, #0]
 8007712:	685b      	ldreq	r3, [r3, #4]
 8007714:	1809      	addeq	r1, r1, r0
 8007716:	6021      	streq	r1, [r4, #0]
 8007718:	e7ed      	b.n	80076f6 <_free_r+0x1e>
 800771a:	461a      	mov	r2, r3
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	b10b      	cbz	r3, 8007724 <_free_r+0x4c>
 8007720:	42a3      	cmp	r3, r4
 8007722:	d9fa      	bls.n	800771a <_free_r+0x42>
 8007724:	6811      	ldr	r1, [r2, #0]
 8007726:	1850      	adds	r0, r2, r1
 8007728:	42a0      	cmp	r0, r4
 800772a:	d10b      	bne.n	8007744 <_free_r+0x6c>
 800772c:	6820      	ldr	r0, [r4, #0]
 800772e:	4401      	add	r1, r0
 8007730:	1850      	adds	r0, r2, r1
 8007732:	4283      	cmp	r3, r0
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	d1e0      	bne.n	80076fa <_free_r+0x22>
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	6053      	str	r3, [r2, #4]
 800773e:	4408      	add	r0, r1
 8007740:	6010      	str	r0, [r2, #0]
 8007742:	e7da      	b.n	80076fa <_free_r+0x22>
 8007744:	d902      	bls.n	800774c <_free_r+0x74>
 8007746:	230c      	movs	r3, #12
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	e7d6      	b.n	80076fa <_free_r+0x22>
 800774c:	6820      	ldr	r0, [r4, #0]
 800774e:	1821      	adds	r1, r4, r0
 8007750:	428b      	cmp	r3, r1
 8007752:	bf04      	itt	eq
 8007754:	6819      	ldreq	r1, [r3, #0]
 8007756:	685b      	ldreq	r3, [r3, #4]
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	bf04      	itt	eq
 800775c:	1809      	addeq	r1, r1, r0
 800775e:	6021      	streq	r1, [r4, #0]
 8007760:	6054      	str	r4, [r2, #4]
 8007762:	e7ca      	b.n	80076fa <_free_r+0x22>
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	bf00      	nop
 8007768:	20001c60 	.word	0x20001c60

0800776c <sbrk_aligned>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	4e0f      	ldr	r6, [pc, #60]	@ (80077ac <sbrk_aligned+0x40>)
 8007770:	460c      	mov	r4, r1
 8007772:	6831      	ldr	r1, [r6, #0]
 8007774:	4605      	mov	r5, r0
 8007776:	b911      	cbnz	r1, 800777e <sbrk_aligned+0x12>
 8007778:	f000 f9d6 	bl	8007b28 <_sbrk_r>
 800777c:	6030      	str	r0, [r6, #0]
 800777e:	4621      	mov	r1, r4
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f9d1 	bl	8007b28 <_sbrk_r>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	d103      	bne.n	8007792 <sbrk_aligned+0x26>
 800778a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800778e:	4620      	mov	r0, r4
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	1cc4      	adds	r4, r0, #3
 8007794:	f024 0403 	bic.w	r4, r4, #3
 8007798:	42a0      	cmp	r0, r4
 800779a:	d0f8      	beq.n	800778e <sbrk_aligned+0x22>
 800779c:	1a21      	subs	r1, r4, r0
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f9c2 	bl	8007b28 <_sbrk_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d1f2      	bne.n	800778e <sbrk_aligned+0x22>
 80077a8:	e7ef      	b.n	800778a <sbrk_aligned+0x1e>
 80077aa:	bf00      	nop
 80077ac:	20001c5c 	.word	0x20001c5c

080077b0 <_malloc_r>:
 80077b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	1ccd      	adds	r5, r1, #3
 80077b6:	f025 0503 	bic.w	r5, r5, #3
 80077ba:	3508      	adds	r5, #8
 80077bc:	2d0c      	cmp	r5, #12
 80077be:	bf38      	it	cc
 80077c0:	250c      	movcc	r5, #12
 80077c2:	2d00      	cmp	r5, #0
 80077c4:	4606      	mov	r6, r0
 80077c6:	db01      	blt.n	80077cc <_malloc_r+0x1c>
 80077c8:	42a9      	cmp	r1, r5
 80077ca:	d904      	bls.n	80077d6 <_malloc_r+0x26>
 80077cc:	230c      	movs	r3, #12
 80077ce:	6033      	str	r3, [r6, #0]
 80077d0:	2000      	movs	r0, #0
 80077d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078ac <_malloc_r+0xfc>
 80077da:	f000 f869 	bl	80078b0 <__malloc_lock>
 80077de:	f8d8 3000 	ldr.w	r3, [r8]
 80077e2:	461c      	mov	r4, r3
 80077e4:	bb44      	cbnz	r4, 8007838 <_malloc_r+0x88>
 80077e6:	4629      	mov	r1, r5
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7ff ffbf 	bl	800776c <sbrk_aligned>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	4604      	mov	r4, r0
 80077f2:	d158      	bne.n	80078a6 <_malloc_r+0xf6>
 80077f4:	f8d8 4000 	ldr.w	r4, [r8]
 80077f8:	4627      	mov	r7, r4
 80077fa:	2f00      	cmp	r7, #0
 80077fc:	d143      	bne.n	8007886 <_malloc_r+0xd6>
 80077fe:	2c00      	cmp	r4, #0
 8007800:	d04b      	beq.n	800789a <_malloc_r+0xea>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	4639      	mov	r1, r7
 8007806:	4630      	mov	r0, r6
 8007808:	eb04 0903 	add.w	r9, r4, r3
 800780c:	f000 f98c 	bl	8007b28 <_sbrk_r>
 8007810:	4581      	cmp	r9, r0
 8007812:	d142      	bne.n	800789a <_malloc_r+0xea>
 8007814:	6821      	ldr	r1, [r4, #0]
 8007816:	1a6d      	subs	r5, r5, r1
 8007818:	4629      	mov	r1, r5
 800781a:	4630      	mov	r0, r6
 800781c:	f7ff ffa6 	bl	800776c <sbrk_aligned>
 8007820:	3001      	adds	r0, #1
 8007822:	d03a      	beq.n	800789a <_malloc_r+0xea>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	442b      	add	r3, r5
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	f8d8 3000 	ldr.w	r3, [r8]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	bb62      	cbnz	r2, 800788c <_malloc_r+0xdc>
 8007832:	f8c8 7000 	str.w	r7, [r8]
 8007836:	e00f      	b.n	8007858 <_malloc_r+0xa8>
 8007838:	6822      	ldr	r2, [r4, #0]
 800783a:	1b52      	subs	r2, r2, r5
 800783c:	d420      	bmi.n	8007880 <_malloc_r+0xd0>
 800783e:	2a0b      	cmp	r2, #11
 8007840:	d917      	bls.n	8007872 <_malloc_r+0xc2>
 8007842:	1961      	adds	r1, r4, r5
 8007844:	42a3      	cmp	r3, r4
 8007846:	6025      	str	r5, [r4, #0]
 8007848:	bf18      	it	ne
 800784a:	6059      	strne	r1, [r3, #4]
 800784c:	6863      	ldr	r3, [r4, #4]
 800784e:	bf08      	it	eq
 8007850:	f8c8 1000 	streq.w	r1, [r8]
 8007854:	5162      	str	r2, [r4, r5]
 8007856:	604b      	str	r3, [r1, #4]
 8007858:	4630      	mov	r0, r6
 800785a:	f000 f82f 	bl	80078bc <__malloc_unlock>
 800785e:	f104 000b 	add.w	r0, r4, #11
 8007862:	1d23      	adds	r3, r4, #4
 8007864:	f020 0007 	bic.w	r0, r0, #7
 8007868:	1ac2      	subs	r2, r0, r3
 800786a:	bf1c      	itt	ne
 800786c:	1a1b      	subne	r3, r3, r0
 800786e:	50a3      	strne	r3, [r4, r2]
 8007870:	e7af      	b.n	80077d2 <_malloc_r+0x22>
 8007872:	6862      	ldr	r2, [r4, #4]
 8007874:	42a3      	cmp	r3, r4
 8007876:	bf0c      	ite	eq
 8007878:	f8c8 2000 	streq.w	r2, [r8]
 800787c:	605a      	strne	r2, [r3, #4]
 800787e:	e7eb      	b.n	8007858 <_malloc_r+0xa8>
 8007880:	4623      	mov	r3, r4
 8007882:	6864      	ldr	r4, [r4, #4]
 8007884:	e7ae      	b.n	80077e4 <_malloc_r+0x34>
 8007886:	463c      	mov	r4, r7
 8007888:	687f      	ldr	r7, [r7, #4]
 800788a:	e7b6      	b.n	80077fa <_malloc_r+0x4a>
 800788c:	461a      	mov	r2, r3
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	42a3      	cmp	r3, r4
 8007892:	d1fb      	bne.n	800788c <_malloc_r+0xdc>
 8007894:	2300      	movs	r3, #0
 8007896:	6053      	str	r3, [r2, #4]
 8007898:	e7de      	b.n	8007858 <_malloc_r+0xa8>
 800789a:	230c      	movs	r3, #12
 800789c:	6033      	str	r3, [r6, #0]
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f80c 	bl	80078bc <__malloc_unlock>
 80078a4:	e794      	b.n	80077d0 <_malloc_r+0x20>
 80078a6:	6005      	str	r5, [r0, #0]
 80078a8:	e7d6      	b.n	8007858 <_malloc_r+0xa8>
 80078aa:	bf00      	nop
 80078ac:	20001c60 	.word	0x20001c60

080078b0 <__malloc_lock>:
 80078b0:	4801      	ldr	r0, [pc, #4]	@ (80078b8 <__malloc_lock+0x8>)
 80078b2:	f7ff bf00 	b.w	80076b6 <__retarget_lock_acquire_recursive>
 80078b6:	bf00      	nop
 80078b8:	20001c58 	.word	0x20001c58

080078bc <__malloc_unlock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	@ (80078c4 <__malloc_unlock+0x8>)
 80078be:	f7ff befb 	b.w	80076b8 <__retarget_lock_release_recursive>
 80078c2:	bf00      	nop
 80078c4:	20001c58 	.word	0x20001c58

080078c8 <__sflush_r>:
 80078c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d0:	0716      	lsls	r6, r2, #28
 80078d2:	4605      	mov	r5, r0
 80078d4:	460c      	mov	r4, r1
 80078d6:	d454      	bmi.n	8007982 <__sflush_r+0xba>
 80078d8:	684b      	ldr	r3, [r1, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	dc02      	bgt.n	80078e4 <__sflush_r+0x1c>
 80078de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dd48      	ble.n	8007976 <__sflush_r+0xae>
 80078e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078e6:	2e00      	cmp	r6, #0
 80078e8:	d045      	beq.n	8007976 <__sflush_r+0xae>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078f0:	682f      	ldr	r7, [r5, #0]
 80078f2:	6a21      	ldr	r1, [r4, #32]
 80078f4:	602b      	str	r3, [r5, #0]
 80078f6:	d030      	beq.n	800795a <__sflush_r+0x92>
 80078f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	0759      	lsls	r1, r3, #29
 80078fe:	d505      	bpl.n	800790c <__sflush_r+0x44>
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	1ad2      	subs	r2, r2, r3
 8007904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007906:	b10b      	cbz	r3, 800790c <__sflush_r+0x44>
 8007908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800790a:	1ad2      	subs	r2, r2, r3
 800790c:	2300      	movs	r3, #0
 800790e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007910:	6a21      	ldr	r1, [r4, #32]
 8007912:	4628      	mov	r0, r5
 8007914:	47b0      	blx	r6
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	d106      	bne.n	800792a <__sflush_r+0x62>
 800791c:	6829      	ldr	r1, [r5, #0]
 800791e:	291d      	cmp	r1, #29
 8007920:	d82b      	bhi.n	800797a <__sflush_r+0xb2>
 8007922:	4a2a      	ldr	r2, [pc, #168]	@ (80079cc <__sflush_r+0x104>)
 8007924:	410a      	asrs	r2, r1
 8007926:	07d6      	lsls	r6, r2, #31
 8007928:	d427      	bmi.n	800797a <__sflush_r+0xb2>
 800792a:	2200      	movs	r2, #0
 800792c:	6062      	str	r2, [r4, #4]
 800792e:	04d9      	lsls	r1, r3, #19
 8007930:	6922      	ldr	r2, [r4, #16]
 8007932:	6022      	str	r2, [r4, #0]
 8007934:	d504      	bpl.n	8007940 <__sflush_r+0x78>
 8007936:	1c42      	adds	r2, r0, #1
 8007938:	d101      	bne.n	800793e <__sflush_r+0x76>
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	b903      	cbnz	r3, 8007940 <__sflush_r+0x78>
 800793e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007942:	602f      	str	r7, [r5, #0]
 8007944:	b1b9      	cbz	r1, 8007976 <__sflush_r+0xae>
 8007946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800794a:	4299      	cmp	r1, r3
 800794c:	d002      	beq.n	8007954 <__sflush_r+0x8c>
 800794e:	4628      	mov	r0, r5
 8007950:	f7ff fec2 	bl	80076d8 <_free_r>
 8007954:	2300      	movs	r3, #0
 8007956:	6363      	str	r3, [r4, #52]	@ 0x34
 8007958:	e00d      	b.n	8007976 <__sflush_r+0xae>
 800795a:	2301      	movs	r3, #1
 800795c:	4628      	mov	r0, r5
 800795e:	47b0      	blx	r6
 8007960:	4602      	mov	r2, r0
 8007962:	1c50      	adds	r0, r2, #1
 8007964:	d1c9      	bne.n	80078fa <__sflush_r+0x32>
 8007966:	682b      	ldr	r3, [r5, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0c6      	beq.n	80078fa <__sflush_r+0x32>
 800796c:	2b1d      	cmp	r3, #29
 800796e:	d001      	beq.n	8007974 <__sflush_r+0xac>
 8007970:	2b16      	cmp	r3, #22
 8007972:	d11e      	bne.n	80079b2 <__sflush_r+0xea>
 8007974:	602f      	str	r7, [r5, #0]
 8007976:	2000      	movs	r0, #0
 8007978:	e022      	b.n	80079c0 <__sflush_r+0xf8>
 800797a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800797e:	b21b      	sxth	r3, r3
 8007980:	e01b      	b.n	80079ba <__sflush_r+0xf2>
 8007982:	690f      	ldr	r7, [r1, #16]
 8007984:	2f00      	cmp	r7, #0
 8007986:	d0f6      	beq.n	8007976 <__sflush_r+0xae>
 8007988:	0793      	lsls	r3, r2, #30
 800798a:	680e      	ldr	r6, [r1, #0]
 800798c:	bf08      	it	eq
 800798e:	694b      	ldreq	r3, [r1, #20]
 8007990:	600f      	str	r7, [r1, #0]
 8007992:	bf18      	it	ne
 8007994:	2300      	movne	r3, #0
 8007996:	eba6 0807 	sub.w	r8, r6, r7
 800799a:	608b      	str	r3, [r1, #8]
 800799c:	f1b8 0f00 	cmp.w	r8, #0
 80079a0:	dde9      	ble.n	8007976 <__sflush_r+0xae>
 80079a2:	6a21      	ldr	r1, [r4, #32]
 80079a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079a6:	4643      	mov	r3, r8
 80079a8:	463a      	mov	r2, r7
 80079aa:	4628      	mov	r0, r5
 80079ac:	47b0      	blx	r6
 80079ae:	2800      	cmp	r0, #0
 80079b0:	dc08      	bgt.n	80079c4 <__sflush_r+0xfc>
 80079b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	4407      	add	r7, r0
 80079c6:	eba8 0800 	sub.w	r8, r8, r0
 80079ca:	e7e7      	b.n	800799c <__sflush_r+0xd4>
 80079cc:	dfbffffe 	.word	0xdfbffffe

080079d0 <_fflush_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	4605      	mov	r5, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	b913      	cbnz	r3, 80079e0 <_fflush_r+0x10>
 80079da:	2500      	movs	r5, #0
 80079dc:	4628      	mov	r0, r5
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	b118      	cbz	r0, 80079ea <_fflush_r+0x1a>
 80079e2:	6a03      	ldr	r3, [r0, #32]
 80079e4:	b90b      	cbnz	r3, 80079ea <_fflush_r+0x1a>
 80079e6:	f7ff fc2b 	bl	8007240 <__sinit>
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f3      	beq.n	80079da <_fflush_r+0xa>
 80079f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079f4:	07d0      	lsls	r0, r2, #31
 80079f6:	d404      	bmi.n	8007a02 <_fflush_r+0x32>
 80079f8:	0599      	lsls	r1, r3, #22
 80079fa:	d402      	bmi.n	8007a02 <_fflush_r+0x32>
 80079fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079fe:	f7ff fe5a 	bl	80076b6 <__retarget_lock_acquire_recursive>
 8007a02:	4628      	mov	r0, r5
 8007a04:	4621      	mov	r1, r4
 8007a06:	f7ff ff5f 	bl	80078c8 <__sflush_r>
 8007a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a0c:	07da      	lsls	r2, r3, #31
 8007a0e:	4605      	mov	r5, r0
 8007a10:	d4e4      	bmi.n	80079dc <_fflush_r+0xc>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	059b      	lsls	r3, r3, #22
 8007a16:	d4e1      	bmi.n	80079dc <_fflush_r+0xc>
 8007a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1a:	f7ff fe4d 	bl	80076b8 <__retarget_lock_release_recursive>
 8007a1e:	e7dd      	b.n	80079dc <_fflush_r+0xc>

08007a20 <__swhatbuf_r>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	460c      	mov	r4, r1
 8007a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	b096      	sub	sp, #88	@ 0x58
 8007a2c:	4615      	mov	r5, r2
 8007a2e:	461e      	mov	r6, r3
 8007a30:	da0d      	bge.n	8007a4e <__swhatbuf_r+0x2e>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a38:	f04f 0100 	mov.w	r1, #0
 8007a3c:	bf14      	ite	ne
 8007a3e:	2340      	movne	r3, #64	@ 0x40
 8007a40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a44:	2000      	movs	r0, #0
 8007a46:	6031      	str	r1, [r6, #0]
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	b016      	add	sp, #88	@ 0x58
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
 8007a4e:	466a      	mov	r2, sp
 8007a50:	f000 f848 	bl	8007ae4 <_fstat_r>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	dbec      	blt.n	8007a32 <__swhatbuf_r+0x12>
 8007a58:	9901      	ldr	r1, [sp, #4]
 8007a5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a62:	4259      	negs	r1, r3
 8007a64:	4159      	adcs	r1, r3
 8007a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a6a:	e7eb      	b.n	8007a44 <__swhatbuf_r+0x24>

08007a6c <__smakebuf_r>:
 8007a6c:	898b      	ldrh	r3, [r1, #12]
 8007a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a70:	079d      	lsls	r5, r3, #30
 8007a72:	4606      	mov	r6, r0
 8007a74:	460c      	mov	r4, r1
 8007a76:	d507      	bpl.n	8007a88 <__smakebuf_r+0x1c>
 8007a78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	6123      	str	r3, [r4, #16]
 8007a80:	2301      	movs	r3, #1
 8007a82:	6163      	str	r3, [r4, #20]
 8007a84:	b003      	add	sp, #12
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a88:	ab01      	add	r3, sp, #4
 8007a8a:	466a      	mov	r2, sp
 8007a8c:	f7ff ffc8 	bl	8007a20 <__swhatbuf_r>
 8007a90:	9f00      	ldr	r7, [sp, #0]
 8007a92:	4605      	mov	r5, r0
 8007a94:	4639      	mov	r1, r7
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff fe8a 	bl	80077b0 <_malloc_r>
 8007a9c:	b948      	cbnz	r0, 8007ab2 <__smakebuf_r+0x46>
 8007a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa2:	059a      	lsls	r2, r3, #22
 8007aa4:	d4ee      	bmi.n	8007a84 <__smakebuf_r+0x18>
 8007aa6:	f023 0303 	bic.w	r3, r3, #3
 8007aaa:	f043 0302 	orr.w	r3, r3, #2
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	e7e2      	b.n	8007a78 <__smakebuf_r+0xc>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	6020      	str	r0, [r4, #0]
 8007ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ac2:	b15b      	cbz	r3, 8007adc <__smakebuf_r+0x70>
 8007ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 f81d 	bl	8007b08 <_isatty_r>
 8007ace:	b128      	cbz	r0, 8007adc <__smakebuf_r+0x70>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	431d      	orrs	r5, r3
 8007ae0:	81a5      	strh	r5, [r4, #12]
 8007ae2:	e7cf      	b.n	8007a84 <__smakebuf_r+0x18>

08007ae4 <_fstat_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	@ (8007b04 <_fstat_r+0x20>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	602b      	str	r3, [r5, #0]
 8007af2:	f7f9 f83f 	bl	8000b74 <_fstat>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	d102      	bne.n	8007b00 <_fstat_r+0x1c>
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	b103      	cbz	r3, 8007b00 <_fstat_r+0x1c>
 8007afe:	6023      	str	r3, [r4, #0]
 8007b00:	bd38      	pop	{r3, r4, r5, pc}
 8007b02:	bf00      	nop
 8007b04:	20001c54 	.word	0x20001c54

08007b08 <_isatty_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d06      	ldr	r5, [pc, #24]	@ (8007b24 <_isatty_r+0x1c>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	f7f9 f83e 	bl	8000b94 <_isatty>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_isatty_r+0x1a>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_isatty_r+0x1a>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	20001c54 	.word	0x20001c54

08007b28 <_sbrk_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4d06      	ldr	r5, [pc, #24]	@ (8007b44 <_sbrk_r+0x1c>)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	602b      	str	r3, [r5, #0]
 8007b34:	f7f9 f846 	bl	8000bc4 <_sbrk>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_sbrk_r+0x1a>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_sbrk_r+0x1a>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	20001c54 	.word	0x20001c54

08007b48 <_init>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr

08007b54 <_fini>:
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	bf00      	nop
 8007b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5a:	bc08      	pop	{r3}
 8007b5c:	469e      	mov	lr, r3
 8007b5e:	4770      	bx	lr
